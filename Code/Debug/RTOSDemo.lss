
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00082cc0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000194  20070438  000830f8  00010438  2**2
                  ALLOC
  3 .stack        00002004  200705cc  0008328c  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b07c  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020d9  00000000  00000000  0001b538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000051b0  00000000  00000000  0001d611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e58  00000000  00000000  000227c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ce8  00000000  00000000  00023619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000196a2  00000000  00000000  00024301  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000116eb  00000000  00000000  0003d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066567  00000000  00000000  0004f08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e5c  00000000  00000000  000b55f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725d0 	.word	0x200725d0
   80004:	00081661 	.word	0x00081661
   80008:	00081659 	.word	0x00081659
   8000c:	00081659 	.word	0x00081659
   80010:	00081659 	.word	0x00081659
   80014:	00081659 	.word	0x00081659
   80018:	00081659 	.word	0x00081659
	...
   8002c:	000819c5 	.word	0x000819c5
   80030:	00081659 	.word	0x00081659
   80034:	00000000 	.word	0x00000000
   80038:	00081a81 	.word	0x00081a81
   8003c:	00081ac5 	.word	0x00081ac5
   80040:	00081659 	.word	0x00081659
   80044:	00081659 	.word	0x00081659
   80048:	00081659 	.word	0x00081659
   8004c:	0008282d 	.word	0x0008282d
   80050:	0008274d 	.word	0x0008274d
   80054:	00081659 	.word	0x00081659
   80058:	00081659 	.word	0x00081659
   8005c:	00081659 	.word	0x00081659
   80060:	00081659 	.word	0x00081659
   80064:	00081659 	.word	0x00081659
   80068:	00000000 	.word	0x00000000
   8006c:	00081105 	.word	0x00081105
   80070:	0008111d 	.word	0x0008111d
   80074:	00081135 	.word	0x00081135
   80078:	0008114d 	.word	0x0008114d
	...
   80084:	0008289d 	.word	0x0008289d
   80088:	00081659 	.word	0x00081659
   8008c:	00081659 	.word	0x00081659
   80090:	00081659 	.word	0x00081659
   80094:	00081659 	.word	0x00081659
   80098:	00081659 	.word	0x00081659
   8009c:	00081659 	.word	0x00081659
   800a0:	00081659 	.word	0x00081659
   800a4:	00000000 	.word	0x00000000
   800a8:	00081659 	.word	0x00081659
   800ac:	00081659 	.word	0x00081659
   800b0:	00081659 	.word	0x00081659
   800b4:	00081659 	.word	0x00081659
   800b8:	00081659 	.word	0x00081659
   800bc:	00081659 	.word	0x00081659
   800c0:	00081659 	.word	0x00081659
   800c4:	00081659 	.word	0x00081659
   800c8:	00081659 	.word	0x00081659
   800cc:	00081659 	.word	0x00081659
   800d0:	00081659 	.word	0x00081659
   800d4:	00081659 	.word	0x00081659
   800d8:	00081659 	.word	0x00081659
   800dc:	00081659 	.word	0x00081659
   800e0:	00081659 	.word	0x00081659
   800e4:	00081659 	.word	0x00081659
   800e8:	00081659 	.word	0x00081659
   800ec:	00082411 	.word	0x00082411
   800f0:	00082385 	.word	0x00082385

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00082cc0 	.word	0x00082cc0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00082cc0 	.word	0x00082cc0
   8013c:	2007043c 	.word	0x2007043c
   80140:	00082cc0 	.word	0x00082cc0
   80144:	00000000 	.word	0x00000000

00080148 <stk600_test0>:
/* Priorities at which the tasks are created. */

void stk600_test0( void );

void stk600_test0(void)
{
   80148:	b580      	push	{r7, lr}
   8014a:	af00      	add	r7, sp, #0
	while(1)
	{
	pio_toggle_pin(LED0_GPIO);
   8014c:	203b      	movs	r0, #59	; 0x3b
   8014e:	4b26      	ldr	r3, [pc, #152]	; (801e8 <stk600_test0+0xa0>)
   80150:	4798      	blx	r3
	can_reset_all_mailbox(CAN0);
   80152:	4826      	ldr	r0, [pc, #152]	; (801ec <stk600_test0+0xa4>)
   80154:	4b26      	ldr	r3, [pc, #152]	; (801f0 <stk600_test0+0xa8>)
   80156:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   80158:	4826      	ldr	r0, [pc, #152]	; (801f4 <stk600_test0+0xac>)
   8015a:	4b25      	ldr	r3, [pc, #148]	; (801f0 <stk600_test0+0xa8>)
   8015c:	4798      	blx	r3

	/* Init CAN0 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   8015e:	4826      	ldr	r0, [pc, #152]	; (801f8 <stk600_test0+0xb0>)
   80160:	4b26      	ldr	r3, [pc, #152]	; (801fc <stk600_test0+0xb4>)
   80162:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 0;
   80164:	4b24      	ldr	r3, [pc, #144]	; (801f8 <stk600_test0+0xb0>)
   80166:	2200      	movs	r2, #0
   80168:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8016a:	4b23      	ldr	r3, [pc, #140]	; (801f8 <stk600_test0+0xb0>)
   8016c:	2201      	movs	r2, #1
   8016e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
   80170:	4b21      	ldr	r3, [pc, #132]	; (801f8 <stk600_test0+0xb0>)
   80172:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   80176:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = NODE0_ID;
   80178:	4b1f      	ldr	r3, [pc, #124]	; (801f8 <stk600_test0+0xb0>)
   8017a:	220a      	movs	r2, #10
   8017c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN0, &can0_mailbox);
   8017e:	481b      	ldr	r0, [pc, #108]	; (801ec <stk600_test0+0xa4>)
   80180:	491d      	ldr	r1, [pc, #116]	; (801f8 <stk600_test0+0xb0>)
   80182:	4b1f      	ldr	r3, [pc, #124]	; (80200 <stk600_test0+0xb8>)
   80184:	4798      	blx	r3

	/* Init CAN1 Mailbox 0 to Transmit Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   80186:	481f      	ldr	r0, [pc, #124]	; (80204 <stk600_test0+0xbc>)
   80188:	4b1c      	ldr	r3, [pc, #112]	; (801fc <stk600_test0+0xb4>)
   8018a:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;
   8018c:	4b1d      	ldr	r3, [pc, #116]	; (80204 <stk600_test0+0xbc>)
   8018e:	2200      	movs	r2, #0
   80190:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   80192:	4b1c      	ldr	r3, [pc, #112]	; (80204 <stk600_test0+0xbc>)
   80194:	2203      	movs	r2, #3
   80196:	711a      	strb	r2, [r3, #4]
	can1_mailbox.uc_tx_prio = 15;
   80198:	4b1a      	ldr	r3, [pc, #104]	; (80204 <stk600_test0+0xbc>)
   8019a:	220f      	movs	r2, #15
   8019c:	71da      	strb	r2, [r3, #7]
	can1_mailbox.uc_id_ver = 0;		// Standard Frame
   8019e:	4b19      	ldr	r3, [pc, #100]	; (80204 <stk600_test0+0xbc>)
   801a0:	2200      	movs	r2, #0
   801a2:	715a      	strb	r2, [r3, #5]
	can1_mailbox.ul_id_msk = 0;
   801a4:	4b17      	ldr	r3, [pc, #92]	; (80204 <stk600_test0+0xbc>)
   801a6:	2200      	movs	r2, #0
   801a8:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN1, &can1_mailbox);
   801aa:	4812      	ldr	r0, [pc, #72]	; (801f4 <stk600_test0+0xac>)
   801ac:	4915      	ldr	r1, [pc, #84]	; (80204 <stk600_test0+0xbc>)
   801ae:	4b14      	ldr	r3, [pc, #80]	; (80200 <stk600_test0+0xb8>)
   801b0:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can1_mailbox.ul_id = NODE0_ID;
   801b2:	4b14      	ldr	r3, [pc, #80]	; (80204 <stk600_test0+0xbc>)
   801b4:	220a      	movs	r2, #10
   801b6:	611a      	str	r2, [r3, #16]
	can1_mailbox.ul_datal = COMMAND_IN;
   801b8:	4b12      	ldr	r3, [pc, #72]	; (80204 <stk600_test0+0xbc>)
   801ba:	f241 1211 	movw	r2, #4369	; 0x1111
   801be:	619a      	str	r2, [r3, #24]
	can1_mailbox.ul_datah = CAN_MSG_DUMMY_DATA;
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <stk600_test0+0xbc>)
   801c2:	4a11      	ldr	r2, [pc, #68]	; (80208 <stk600_test0+0xc0>)
   801c4:	61da      	str	r2, [r3, #28]
	can1_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   801c6:	4b0f      	ldr	r3, [pc, #60]	; (80204 <stk600_test0+0xbc>)
   801c8:	2208      	movs	r2, #8
   801ca:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN1, &can1_mailbox);
   801cc:	4809      	ldr	r0, [pc, #36]	; (801f4 <stk600_test0+0xac>)
   801ce:	490d      	ldr	r1, [pc, #52]	; (80204 <stk600_test0+0xbc>)
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <stk600_test0+0xc4>)
   801d2:	4798      	blx	r3

	/* Enable CAN0 mailbox 0 interrupt. */
	can_enable_interrupt(CAN0, CAN_IER_MB0);
   801d4:	4805      	ldr	r0, [pc, #20]	; (801ec <stk600_test0+0xa4>)
   801d6:	2101      	movs	r1, #1
   801d8:	4b0d      	ldr	r3, [pc, #52]	; (80210 <stk600_test0+0xc8>)
   801da:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN1, CAN_TCR_MB0);
   801dc:	4805      	ldr	r0, [pc, #20]	; (801f4 <stk600_test0+0xac>)
   801de:	2101      	movs	r1, #1
   801e0:	4b0c      	ldr	r3, [pc, #48]	; (80214 <stk600_test0+0xcc>)
   801e2:	4798      	blx	r3

	}
   801e4:	e7b2      	b.n	8014c <stk600_test0+0x4>
   801e6:	bf00      	nop
   801e8:	00080ec5 	.word	0x00080ec5
   801ec:	400b4000 	.word	0x400b4000
   801f0:	00080c41 	.word	0x00080c41
   801f4:	400b8000 	.word	0x400b8000
   801f8:	2007059c 	.word	0x2007059c
   801fc:	00082579 	.word	0x00082579
   80200:	000809a5 	.word	0x000809a5
   80204:	20070574 	.word	0x20070574
   80208:	55aaaa55 	.word	0x55aaaa55
   8020c:	00080b89 	.word	0x00080b89
   80210:	000808c9 	.word	0x000808c9
   80214:	00080919 	.word	0x00080919

00080218 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80218:	b580      	push	{r7, lr}
   8021a:	b082      	sub	sp, #8
   8021c:	af00      	add	r7, sp, #0
   8021e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80220:	687b      	ldr	r3, [r7, #4]
   80222:	2b07      	cmp	r3, #7
   80224:	d82e      	bhi.n	80284 <osc_enable+0x6c>
   80226:	a201      	add	r2, pc, #4	; (adr r2, 8022c <osc_enable+0x14>)
   80228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8022c:	00080285 	.word	0x00080285
   80230:	0008024d 	.word	0x0008024d
   80234:	00080255 	.word	0x00080255
   80238:	0008025d 	.word	0x0008025d
   8023c:	00080265 	.word	0x00080265
   80240:	0008026d 	.word	0x0008026d
   80244:	00080275 	.word	0x00080275
   80248:	0008027d 	.word	0x0008027d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8024c:	2000      	movs	r0, #0
   8024e:	4b0f      	ldr	r3, [pc, #60]	; (8028c <osc_enable+0x74>)
   80250:	4798      	blx	r3
		break;
   80252:	e017      	b.n	80284 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80254:	2001      	movs	r0, #1
   80256:	4b0d      	ldr	r3, [pc, #52]	; (8028c <osc_enable+0x74>)
   80258:	4798      	blx	r3
		break;
   8025a:	e013      	b.n	80284 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8025c:	2000      	movs	r0, #0
   8025e:	4b0c      	ldr	r3, [pc, #48]	; (80290 <osc_enable+0x78>)
   80260:	4798      	blx	r3
		break;
   80262:	e00f      	b.n	80284 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80264:	2010      	movs	r0, #16
   80266:	4b0a      	ldr	r3, [pc, #40]	; (80290 <osc_enable+0x78>)
   80268:	4798      	blx	r3
		break;
   8026a:	e00b      	b.n	80284 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8026c:	2020      	movs	r0, #32
   8026e:	4b08      	ldr	r3, [pc, #32]	; (80290 <osc_enable+0x78>)
   80270:	4798      	blx	r3
		break;
   80272:	e007      	b.n	80284 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80274:	2000      	movs	r0, #0
   80276:	4b07      	ldr	r3, [pc, #28]	; (80294 <osc_enable+0x7c>)
   80278:	4798      	blx	r3
		break;
   8027a:	e003      	b.n	80284 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   8027c:	2001      	movs	r0, #1
   8027e:	4b05      	ldr	r3, [pc, #20]	; (80294 <osc_enable+0x7c>)
   80280:	4798      	blx	r3
		break;
   80282:	bf00      	nop
	}
}
   80284:	3708      	adds	r7, #8
   80286:	46bd      	mov	sp, r7
   80288:	bd80      	pop	{r7, pc}
   8028a:	bf00      	nop
   8028c:	000811e9 	.word	0x000811e9
   80290:	00081259 	.word	0x00081259
   80294:	000812f9 	.word	0x000812f9

00080298 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80298:	b580      	push	{r7, lr}
   8029a:	b082      	sub	sp, #8
   8029c:	af00      	add	r7, sp, #0
   8029e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   802a0:	687b      	ldr	r3, [r7, #4]
   802a2:	2b07      	cmp	r3, #7
   802a4:	d826      	bhi.n	802f4 <osc_is_ready+0x5c>
   802a6:	a201      	add	r2, pc, #4	; (adr r2, 802ac <osc_is_ready+0x14>)
   802a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   802ac:	000802cd 	.word	0x000802cd
   802b0:	000802d1 	.word	0x000802d1
   802b4:	000802d1 	.word	0x000802d1
   802b8:	000802e3 	.word	0x000802e3
   802bc:	000802e3 	.word	0x000802e3
   802c0:	000802e3 	.word	0x000802e3
   802c4:	000802e3 	.word	0x000802e3
   802c8:	000802e3 	.word	0x000802e3
	case OSC_SLCK_32K_RC:
		return 1;
   802cc:	2301      	movs	r3, #1
   802ce:	e012      	b.n	802f6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   802d0:	4b0b      	ldr	r3, [pc, #44]	; (80300 <osc_is_ready+0x68>)
   802d2:	4798      	blx	r3
   802d4:	4603      	mov	r3, r0
   802d6:	2b00      	cmp	r3, #0
   802d8:	bf0c      	ite	eq
   802da:	2300      	moveq	r3, #0
   802dc:	2301      	movne	r3, #1
   802de:	b2db      	uxtb	r3, r3
   802e0:	e009      	b.n	802f6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   802e2:	4b08      	ldr	r3, [pc, #32]	; (80304 <osc_is_ready+0x6c>)
   802e4:	4798      	blx	r3
   802e6:	4603      	mov	r3, r0
   802e8:	2b00      	cmp	r3, #0
   802ea:	bf0c      	ite	eq
   802ec:	2300      	moveq	r3, #0
   802ee:	2301      	movne	r3, #1
   802f0:	b2db      	uxtb	r3, r3
   802f2:	e000      	b.n	802f6 <osc_is_ready+0x5e>
	}

	return 0;
   802f4:	2300      	movs	r3, #0
}
   802f6:	4618      	mov	r0, r3
   802f8:	3708      	adds	r7, #8
   802fa:	46bd      	mov	sp, r7
   802fc:	bd80      	pop	{r7, pc}
   802fe:	bf00      	nop
   80300:	00081225 	.word	0x00081225
   80304:	00081365 	.word	0x00081365

00080308 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80308:	b480      	push	{r7}
   8030a:	b083      	sub	sp, #12
   8030c:	af00      	add	r7, sp, #0
   8030e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80310:	687b      	ldr	r3, [r7, #4]
   80312:	2b07      	cmp	r3, #7
   80314:	d825      	bhi.n	80362 <osc_get_rate+0x5a>
   80316:	a201      	add	r2, pc, #4	; (adr r2, 8031c <osc_get_rate+0x14>)
   80318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8031c:	0008033d 	.word	0x0008033d
   80320:	00080343 	.word	0x00080343
   80324:	00080349 	.word	0x00080349
   80328:	0008034f 	.word	0x0008034f
   8032c:	00080353 	.word	0x00080353
   80330:	00080357 	.word	0x00080357
   80334:	0008035b 	.word	0x0008035b
   80338:	0008035f 	.word	0x0008035f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8033c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80340:	e010      	b.n	80364 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80346:	e00d      	b.n	80364 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8034c:	e00a      	b.n	80364 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8034e:	4b08      	ldr	r3, [pc, #32]	; (80370 <osc_get_rate+0x68>)
   80350:	e008      	b.n	80364 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80352:	4b08      	ldr	r3, [pc, #32]	; (80374 <osc_get_rate+0x6c>)
   80354:	e006      	b.n	80364 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80356:	4b08      	ldr	r3, [pc, #32]	; (80378 <osc_get_rate+0x70>)
   80358:	e004      	b.n	80364 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8035a:	4b07      	ldr	r3, [pc, #28]	; (80378 <osc_get_rate+0x70>)
   8035c:	e002      	b.n	80364 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8035e:	4b06      	ldr	r3, [pc, #24]	; (80378 <osc_get_rate+0x70>)
   80360:	e000      	b.n	80364 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80362:	2300      	movs	r3, #0
}
   80364:	4618      	mov	r0, r3
   80366:	370c      	adds	r7, #12
   80368:	46bd      	mov	sp, r7
   8036a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8036e:	4770      	bx	lr
   80370:	003d0900 	.word	0x003d0900
   80374:	007a1200 	.word	0x007a1200
   80378:	00b71b00 	.word	0x00b71b00

0008037c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80386:	bf00      	nop
   80388:	79fb      	ldrb	r3, [r7, #7]
   8038a:	4618      	mov	r0, r3
   8038c:	4b05      	ldr	r3, [pc, #20]	; (803a4 <osc_wait_ready+0x28>)
   8038e:	4798      	blx	r3
   80390:	4603      	mov	r3, r0
   80392:	f083 0301 	eor.w	r3, r3, #1
   80396:	b2db      	uxtb	r3, r3
   80398:	2b00      	cmp	r3, #0
   8039a:	d1f5      	bne.n	80388 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8039c:	3708      	adds	r7, #8
   8039e:	46bd      	mov	sp, r7
   803a0:	bd80      	pop	{r7, pc}
   803a2:	bf00      	nop
   803a4:	00080299 	.word	0x00080299

000803a8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   803a8:	b580      	push	{r7, lr}
   803aa:	b086      	sub	sp, #24
   803ac:	af00      	add	r7, sp, #0
   803ae:	60f8      	str	r0, [r7, #12]
   803b0:	607a      	str	r2, [r7, #4]
   803b2:	603b      	str	r3, [r7, #0]
   803b4:	460b      	mov	r3, r1
   803b6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   803b8:	687b      	ldr	r3, [r7, #4]
   803ba:	2b00      	cmp	r3, #0
   803bc:	d107      	bne.n	803ce <pll_config_init+0x26>
   803be:	683b      	ldr	r3, [r7, #0]
   803c0:	2b00      	cmp	r3, #0
   803c2:	d104      	bne.n	803ce <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   803c4:	68fb      	ldr	r3, [r7, #12]
   803c6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   803ca:	601a      	str	r2, [r3, #0]
   803cc:	e019      	b.n	80402 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   803ce:	7afb      	ldrb	r3, [r7, #11]
   803d0:	4618      	mov	r0, r3
   803d2:	4b0d      	ldr	r3, [pc, #52]	; (80408 <pll_config_init+0x60>)
   803d4:	4798      	blx	r3
   803d6:	4602      	mov	r2, r0
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	fbb2 f3f3 	udiv	r3, r2, r3
   803de:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   803e0:	697b      	ldr	r3, [r7, #20]
   803e2:	683a      	ldr	r2, [r7, #0]
   803e4:	fb02 f303 	mul.w	r3, r2, r3
   803e8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   803ea:	683b      	ldr	r3, [r7, #0]
   803ec:	3b01      	subs	r3, #1
   803ee:	041a      	lsls	r2, r3, #16
   803f0:	4b06      	ldr	r3, [pc, #24]	; (8040c <pll_config_init+0x64>)
   803f2:	4013      	ands	r3, r2
   803f4:	687a      	ldr	r2, [r7, #4]
   803f6:	b2d2      	uxtb	r2, r2
   803f8:	4313      	orrs	r3, r2
   803fa:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   803fe:	68fb      	ldr	r3, [r7, #12]
   80400:	601a      	str	r2, [r3, #0]
	}
}
   80402:	3718      	adds	r7, #24
   80404:	46bd      	mov	sp, r7
   80406:	bd80      	pop	{r7, pc}
   80408:	00080309 	.word	0x00080309
   8040c:	07ff0000 	.word	0x07ff0000

00080410 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80410:	b580      	push	{r7, lr}
   80412:	b082      	sub	sp, #8
   80414:	af00      	add	r7, sp, #0
   80416:	6078      	str	r0, [r7, #4]
   80418:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8041a:	683b      	ldr	r3, [r7, #0]
   8041c:	2b00      	cmp	r3, #0
   8041e:	d108      	bne.n	80432 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80420:	4b08      	ldr	r3, [pc, #32]	; (80444 <pll_enable+0x34>)
   80422:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80424:	4b08      	ldr	r3, [pc, #32]	; (80448 <pll_enable+0x38>)
   80426:	687a      	ldr	r2, [r7, #4]
   80428:	6812      	ldr	r2, [r2, #0]
   8042a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8042e:	629a      	str	r2, [r3, #40]	; 0x28
   80430:	e005      	b.n	8043e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80432:	4b05      	ldr	r3, [pc, #20]	; (80448 <pll_enable+0x38>)
   80434:	687a      	ldr	r2, [r7, #4]
   80436:	6812      	ldr	r2, [r2, #0]
   80438:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8043c:	61da      	str	r2, [r3, #28]
	}
}
   8043e:	3708      	adds	r7, #8
   80440:	46bd      	mov	sp, r7
   80442:	bd80      	pop	{r7, pc}
   80444:	00081381 	.word	0x00081381
   80448:	400e0600 	.word	0x400e0600

0008044c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8044c:	b580      	push	{r7, lr}
   8044e:	b082      	sub	sp, #8
   80450:	af00      	add	r7, sp, #0
   80452:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80454:	687b      	ldr	r3, [r7, #4]
   80456:	2b00      	cmp	r3, #0
   80458:	d103      	bne.n	80462 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8045a:	4b05      	ldr	r3, [pc, #20]	; (80470 <pll_is_locked+0x24>)
   8045c:	4798      	blx	r3
   8045e:	4603      	mov	r3, r0
   80460:	e002      	b.n	80468 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80462:	4b04      	ldr	r3, [pc, #16]	; (80474 <pll_is_locked+0x28>)
   80464:	4798      	blx	r3
   80466:	4603      	mov	r3, r0
}
   80468:	4618      	mov	r0, r3
   8046a:	3708      	adds	r7, #8
   8046c:	46bd      	mov	sp, r7
   8046e:	bd80      	pop	{r7, pc}
   80470:	00081399 	.word	0x00081399
   80474:	000813b5 	.word	0x000813b5

00080478 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80478:	b580      	push	{r7, lr}
   8047a:	b082      	sub	sp, #8
   8047c:	af00      	add	r7, sp, #0
   8047e:	4603      	mov	r3, r0
   80480:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80482:	79fb      	ldrb	r3, [r7, #7]
   80484:	3b03      	subs	r3, #3
   80486:	2b04      	cmp	r3, #4
   80488:	d808      	bhi.n	8049c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8048a:	79fb      	ldrb	r3, [r7, #7]
   8048c:	4618      	mov	r0, r3
   8048e:	4b05      	ldr	r3, [pc, #20]	; (804a4 <pll_enable_source+0x2c>)
   80490:	4798      	blx	r3
		osc_wait_ready(e_src);
   80492:	79fb      	ldrb	r3, [r7, #7]
   80494:	4618      	mov	r0, r3
   80496:	4b04      	ldr	r3, [pc, #16]	; (804a8 <pll_enable_source+0x30>)
   80498:	4798      	blx	r3
		break;
   8049a:	e000      	b.n	8049e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8049c:	bf00      	nop
	}
}
   8049e:	3708      	adds	r7, #8
   804a0:	46bd      	mov	sp, r7
   804a2:	bd80      	pop	{r7, pc}
   804a4:	00080219 	.word	0x00080219
   804a8:	0008037d 	.word	0x0008037d

000804ac <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   804ac:	b580      	push	{r7, lr}
   804ae:	b082      	sub	sp, #8
   804b0:	af00      	add	r7, sp, #0
   804b2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   804b4:	bf00      	nop
   804b6:	6878      	ldr	r0, [r7, #4]
   804b8:	4b04      	ldr	r3, [pc, #16]	; (804cc <pll_wait_for_lock+0x20>)
   804ba:	4798      	blx	r3
   804bc:	4603      	mov	r3, r0
   804be:	2b00      	cmp	r3, #0
   804c0:	d0f9      	beq.n	804b6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   804c2:	2300      	movs	r3, #0
}
   804c4:	4618      	mov	r0, r3
   804c6:	3708      	adds	r7, #8
   804c8:	46bd      	mov	sp, r7
   804ca:	bd80      	pop	{r7, pc}
   804cc:	0008044d 	.word	0x0008044d

000804d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   804d0:	b580      	push	{r7, lr}
   804d2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   804d4:	2006      	movs	r0, #6
   804d6:	4b04      	ldr	r3, [pc, #16]	; (804e8 <sysclk_get_main_hz+0x18>)
   804d8:	4798      	blx	r3
   804da:	4602      	mov	r2, r0
   804dc:	4613      	mov	r3, r2
   804de:	00db      	lsls	r3, r3, #3
   804e0:	1a9b      	subs	r3, r3, r2
   804e2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   804e4:	4618      	mov	r0, r3
   804e6:	bd80      	pop	{r7, pc}
   804e8:	00080309 	.word	0x00080309

000804ec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   804ec:	b580      	push	{r7, lr}
   804ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   804f0:	4b02      	ldr	r3, [pc, #8]	; (804fc <sysclk_get_cpu_hz+0x10>)
   804f2:	4798      	blx	r3
   804f4:	4603      	mov	r3, r0
   804f6:	085b      	lsrs	r3, r3, #1
}
   804f8:	4618      	mov	r0, r3
   804fa:	bd80      	pop	{r7, pc}
   804fc:	000804d1 	.word	0x000804d1

00080500 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80500:	b590      	push	{r4, r7, lr}
   80502:	b083      	sub	sp, #12
   80504:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80506:	4b10      	ldr	r3, [pc, #64]	; (80548 <sysclk_init+0x48>)
   80508:	4798      	blx	r3
   8050a:	4603      	mov	r3, r0
   8050c:	4618      	mov	r0, r3
   8050e:	4b0f      	ldr	r3, [pc, #60]	; (8054c <sysclk_init+0x4c>)
   80510:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80512:	2006      	movs	r0, #6
   80514:	4b0e      	ldr	r3, [pc, #56]	; (80550 <sysclk_init+0x50>)
   80516:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80518:	1d3b      	adds	r3, r7, #4
   8051a:	4618      	mov	r0, r3
   8051c:	2106      	movs	r1, #6
   8051e:	2201      	movs	r2, #1
   80520:	230e      	movs	r3, #14
   80522:	4c0c      	ldr	r4, [pc, #48]	; (80554 <sysclk_init+0x54>)
   80524:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80526:	1d3b      	adds	r3, r7, #4
   80528:	4618      	mov	r0, r3
   8052a:	2100      	movs	r1, #0
   8052c:	4b0a      	ldr	r3, [pc, #40]	; (80558 <sysclk_init+0x58>)
   8052e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80530:	2000      	movs	r0, #0
   80532:	4b0a      	ldr	r3, [pc, #40]	; (8055c <sysclk_init+0x5c>)
   80534:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80536:	2010      	movs	r0, #16
   80538:	4b09      	ldr	r3, [pc, #36]	; (80560 <sysclk_init+0x60>)
   8053a:	4798      	blx	r3
		break;
   8053c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8053e:	4b09      	ldr	r3, [pc, #36]	; (80564 <sysclk_init+0x64>)
   80540:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80542:	370c      	adds	r7, #12
   80544:	46bd      	mov	sp, r7
   80546:	bd90      	pop	{r4, r7, pc}
   80548:	000804ed 	.word	0x000804ed
   8054c:	00081889 	.word	0x00081889
   80550:	00080479 	.word	0x00080479
   80554:	000803a9 	.word	0x000803a9
   80558:	00080411 	.word	0x00080411
   8055c:	000804ad 	.word	0x000804ad
   80560:	00081165 	.word	0x00081165
   80564:	00081709 	.word	0x00081709

00080568 <board_init>:
#include "gpio.h"
#include "asf.h"


void board_init(void)
{
   80568:	b580      	push	{r7, lr}
   8056a:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8056c:	4b2e      	ldr	r3, [pc, #184]	; (80628 <board_init+0xc0>)
   8056e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80572:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80574:	2001      	movs	r0, #1
   80576:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8057a:	4b2c      	ldr	r3, [pc, #176]	; (8062c <board_init+0xc4>)
   8057c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   8057e:	2000      	movs	r0, #0
   80580:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80584:	4b29      	ldr	r3, [pc, #164]	; (8062c <board_init+0xc4>)
   80586:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   80588:	2034      	movs	r0, #52	; 0x34
   8058a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8058e:	4b27      	ldr	r3, [pc, #156]	; (8062c <board_init+0xc4>)
   80590:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80592:	2035      	movs	r0, #53	; 0x35
   80594:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80598:	4b24      	ldr	r3, [pc, #144]	; (8062c <board_init+0xc4>)
   8059a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   8059c:	202f      	movs	r0, #47	; 0x2f
   8059e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805a2:	4b22      	ldr	r3, [pc, #136]	; (8062c <board_init+0xc4>)
   805a4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   805a6:	202e      	movs	r0, #46	; 0x2e
   805a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805ac:	4b1f      	ldr	r3, [pc, #124]	; (8062c <board_init+0xc4>)
   805ae:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   805b0:	208f      	movs	r0, #143	; 0x8f
   805b2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805b6:	4b1d      	ldr	r3, [pc, #116]	; (8062c <board_init+0xc4>)
   805b8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   805ba:	2090      	movs	r0, #144	; 0x90
   805bc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805c0:	4b1a      	ldr	r3, [pc, #104]	; (8062c <board_init+0xc4>)
   805c2:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   805c4:	2057      	movs	r0, #87	; 0x57
   805c6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805ca:	4b18      	ldr	r3, [pc, #96]	; (8062c <board_init+0xc4>)
   805cc:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   805ce:	2057      	movs	r0, #87	; 0x57
   805d0:	4b17      	ldr	r3, [pc, #92]	; (80630 <board_init+0xc8>)
   805d2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805d4:	203b      	movs	r0, #59	; 0x3b
   805d6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805da:	4b14      	ldr	r3, [pc, #80]	; (8062c <board_init+0xc4>)
   805dc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805de:	2055      	movs	r0, #85	; 0x55
   805e0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805e4:	4b11      	ldr	r3, [pc, #68]	; (8062c <board_init+0xc4>)
   805e6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805e8:	2056      	movs	r0, #86	; 0x56
   805ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805ee:	4b0f      	ldr	r3, [pc, #60]	; (8062c <board_init+0xc4>)
   805f0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805f2:	2087      	movs	r0, #135	; 0x87
   805f4:	490f      	ldr	r1, [pc, #60]	; (80634 <board_init+0xcc>)
   805f6:	4b0d      	ldr	r3, [pc, #52]	; (8062c <board_init+0xc4>)
   805f8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805fa:	2037      	movs	r0, #55	; 0x37
   805fc:	490e      	ldr	r1, [pc, #56]	; (80638 <board_init+0xd0>)
   805fe:	4b0b      	ldr	r3, [pc, #44]	; (8062c <board_init+0xc4>)
   80600:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80602:	200a      	movs	r0, #10
   80604:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80608:	4b08      	ldr	r3, [pc, #32]	; (8062c <board_init+0xc4>)
   8060a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   8060c:	200b      	movs	r0, #11
   8060e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80612:	4b06      	ldr	r3, [pc, #24]	; (8062c <board_init+0xc4>)
   80614:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   80616:	208e      	movs	r0, #142	; 0x8e
   80618:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8061c:	4b03      	ldr	r3, [pc, #12]	; (8062c <board_init+0xc4>)
   8061e:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80620:	208e      	movs	r0, #142	; 0x8e
   80622:	4b06      	ldr	r3, [pc, #24]	; (8063c <board_init+0xd4>)
   80624:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80626:	bd80      	pop	{r7, pc}
   80628:	400e1a50 	.word	0x400e1a50
   8062c:	00080f25 	.word	0x00080f25
   80630:	00080e5d 	.word	0x00080e5d
   80634:	28000079 	.word	0x28000079
   80638:	28000059 	.word	0x28000059
   8063c:	00080e91 	.word	0x00080e91

00080640 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80640:	b480      	push	{r7}
   80642:	b083      	sub	sp, #12
   80644:	af00      	add	r7, sp, #0
   80646:	6078      	str	r0, [r7, #4]
   80648:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	683a      	ldr	r2, [r7, #0]
   8064e:	601a      	str	r2, [r3, #0]
}
   80650:	370c      	adds	r7, #12
   80652:	46bd      	mov	sp, r7
   80654:	f85d 7b04 	ldr.w	r7, [sp], #4
   80658:	4770      	bx	lr
   8065a:	bf00      	nop

0008065c <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   8065c:	b480      	push	{r7}
   8065e:	b083      	sub	sp, #12
   80660:	af00      	add	r7, sp, #0
   80662:	6078      	str	r0, [r7, #4]
   80664:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80666:	687b      	ldr	r3, [r7, #4]
   80668:	683a      	ldr	r2, [r7, #0]
   8066a:	605a      	str	r2, [r3, #4]
}
   8066c:	370c      	adds	r7, #12
   8066e:	46bd      	mov	sp, r7
   80670:	f85d 7b04 	ldr.w	r7, [sp], #4
   80674:	4770      	bx	lr
   80676:	bf00      	nop

00080678 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   80678:	b580      	push	{r7, lr}
   8067a:	b082      	sub	sp, #8
   8067c:	af00      	add	r7, sp, #0
   8067e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80680:	687b      	ldr	r3, [r7, #4]
   80682:	685b      	ldr	r3, [r3, #4]
   80684:	4618      	mov	r0, r3
   80686:	4b02      	ldr	r3, [pc, #8]	; (80690 <sn65hvd234_enable+0x18>)
   80688:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8068a:	3708      	adds	r7, #8
   8068c:	46bd      	mov	sp, r7
   8068e:	bd80      	pop	{r7, pc}
   80690:	00080e5d 	.word	0x00080e5d

00080694 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80694:	b580      	push	{r7, lr}
   80696:	b082      	sub	sp, #8
   80698:	af00      	add	r7, sp, #0
   8069a:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   8069c:	687b      	ldr	r3, [r7, #4]
   8069e:	681b      	ldr	r3, [r3, #0]
   806a0:	4618      	mov	r0, r3
   806a2:	4b02      	ldr	r3, [pc, #8]	; (806ac <sn65hvd234_disable_low_power+0x18>)
   806a4:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   806a6:	3708      	adds	r7, #8
   806a8:	46bd      	mov	sp, r7
   806aa:	bd80      	pop	{r7, pc}
   806ac:	00080e91 	.word	0x00080e91

000806b0 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   806b0:	b580      	push	{r7, lr}
   806b2:	b08a      	sub	sp, #40	; 0x28
   806b4:	af00      	add	r7, sp, #0
   806b6:	60f8      	str	r0, [r7, #12]
   806b8:	60b9      	str	r1, [r7, #8]
   806ba:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   806bc:	687b      	ldr	r3, [r7, #4]
   806be:	f246 12a8 	movw	r2, #25000	; 0x61a8
   806c2:	fb02 f203 	mul.w	r2, r2, r3
   806c6:	68bb      	ldr	r3, [r7, #8]
   806c8:	4413      	add	r3, r2
   806ca:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   806cc:	687b      	ldr	r3, [r7, #4]
   806ce:	f246 11a8 	movw	r1, #25000	; 0x61a8
   806d2:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   806d6:	fbb2 f3f3 	udiv	r3, r2, r3
   806da:	2b80      	cmp	r3, #128	; 0x80
   806dc:	d901      	bls.n	806e2 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   806de:	2300      	movs	r3, #0
   806e0:	e085      	b.n	807ee <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   806e2:	68bb      	ldr	r3, [r7, #8]
   806e4:	085a      	lsrs	r2, r3, #1
   806e6:	687b      	ldr	r3, [r7, #4]
   806e8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   806ec:	fb01 f303 	mul.w	r3, r1, r3
   806f0:	429a      	cmp	r2, r3
   806f2:	d201      	bcs.n	806f8 <can_set_baudrate+0x48>
		return 0;
   806f4:	2300      	movs	r3, #0
   806f6:	e07a      	b.n	807ee <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   806f8:	2308      	movs	r3, #8
   806fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   806fe:	f04f 33ff 	mov.w	r3, #4294967295
   80702:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80704:	2308      	movs	r3, #8
   80706:	77fb      	strb	r3, [r7, #31]
   80708:	e02b      	b.n	80762 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   8070a:	7ffb      	ldrb	r3, [r7, #31]
   8070c:	687a      	ldr	r2, [r7, #4]
   8070e:	fb02 f303 	mul.w	r3, r2, r3
   80712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80716:	fb02 f303 	mul.w	r3, r2, r3
   8071a:	68ba      	ldr	r2, [r7, #8]
   8071c:	fbb2 f3f3 	udiv	r3, r2, r3
   80720:	2b80      	cmp	r3, #128	; 0x80
   80722:	d81b      	bhi.n	8075c <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80724:	7ffb      	ldrb	r3, [r7, #31]
   80726:	687a      	ldr	r2, [r7, #4]
   80728:	fb02 f303 	mul.w	r3, r2, r3
   8072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80730:	fb02 f203 	mul.w	r2, r2, r3
   80734:	68bb      	ldr	r3, [r7, #8]
   80736:	fbb3 f1f2 	udiv	r1, r3, r2
   8073a:	fb02 f201 	mul.w	r2, r2, r1
   8073e:	1a9b      	subs	r3, r3, r2
   80740:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80742:	69ba      	ldr	r2, [r7, #24]
   80744:	6a3b      	ldr	r3, [r7, #32]
   80746:	429a      	cmp	r2, r3
   80748:	d208      	bcs.n	8075c <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   8074a:	69bb      	ldr	r3, [r7, #24]
   8074c:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   8074e:	7ffb      	ldrb	r3, [r7, #31]
   80750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80754:	6a3b      	ldr	r3, [r7, #32]
   80756:	2b00      	cmp	r3, #0
   80758:	d100      	bne.n	8075c <can_set_baudrate+0xac>
					break;
   8075a:	e005      	b.n	80768 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8075c:	7ffb      	ldrb	r3, [r7, #31]
   8075e:	3301      	adds	r3, #1
   80760:	77fb      	strb	r3, [r7, #31]
   80762:	7ffb      	ldrb	r3, [r7, #31]
   80764:	2b19      	cmp	r3, #25
   80766:	d9d0      	bls.n	8070a <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8076c:	687a      	ldr	r2, [r7, #4]
   8076e:	fb02 f303 	mul.w	r3, r2, r3
   80772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80776:	fb02 f303 	mul.w	r3, r2, r3
   8077a:	68ba      	ldr	r2, [r7, #8]
   8077c:	fbb2 f3f3 	udiv	r3, r2, r3
   80780:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80782:	7dfb      	ldrb	r3, [r7, #23]
   80784:	2b01      	cmp	r3, #1
   80786:	d801      	bhi.n	8078c <can_set_baudrate+0xdc>
		return 0;
   80788:	2300      	movs	r3, #0
   8078a:	e030      	b.n	807ee <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   8078c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80790:	f1a3 0208 	sub.w	r2, r3, #8
   80794:	4613      	mov	r3, r2
   80796:	005b      	lsls	r3, r3, #1
   80798:	4413      	add	r3, r2
   8079a:	005b      	lsls	r3, r3, #1
   8079c:	4a16      	ldr	r2, [pc, #88]	; (807f8 <can_set_baudrate+0x148>)
   8079e:	4413      	add	r3, r2
   807a0:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   807a2:	68f8      	ldr	r0, [r7, #12]
   807a4:	4b15      	ldr	r3, [pc, #84]	; (807fc <can_set_baudrate+0x14c>)
   807a6:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   807a8:	693b      	ldr	r3, [r7, #16]
   807aa:	78db      	ldrb	r3, [r3, #3]
   807ac:	3b01      	subs	r3, #1
   807ae:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   807b2:	693b      	ldr	r3, [r7, #16]
   807b4:	789b      	ldrb	r3, [r3, #2]
   807b6:	3b01      	subs	r3, #1
   807b8:	011b      	lsls	r3, r3, #4
   807ba:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   807be:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   807c0:	693b      	ldr	r3, [r7, #16]
   807c2:	785b      	ldrb	r3, [r3, #1]
   807c4:	3b01      	subs	r3, #1
   807c6:	021b      	lsls	r3, r3, #8
   807c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   807cc:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   807ce:	693b      	ldr	r3, [r7, #16]
   807d0:	791b      	ldrb	r3, [r3, #4]
   807d2:	3b01      	subs	r3, #1
   807d4:	031b      	lsls	r3, r3, #12
   807d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   807da:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   807dc:	7dfb      	ldrb	r3, [r7, #23]
   807de:	3b01      	subs	r3, #1
   807e0:	041b      	lsls	r3, r3, #16
   807e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   807e6:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   807e8:	68fb      	ldr	r3, [r7, #12]
   807ea:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   807ec:	2301      	movs	r3, #1
}
   807ee:	4618      	mov	r0, r3
   807f0:	3728      	adds	r7, #40	; 0x28
   807f2:	46bd      	mov	sp, r7
   807f4:	bd80      	pop	{r7, pc}
   807f6:	bf00      	nop
   807f8:	00082c08 	.word	0x00082c08
   807fc:	000808a9 	.word	0x000808a9

00080800 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   80800:	b580      	push	{r7, lr}
   80802:	b086      	sub	sp, #24
   80804:	af00      	add	r7, sp, #0
   80806:	60f8      	str	r0, [r7, #12]
   80808:	60b9      	str	r1, [r7, #8]
   8080a:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   8080c:	68f8      	ldr	r0, [r7, #12]
   8080e:	68b9      	ldr	r1, [r7, #8]
   80810:	687a      	ldr	r2, [r7, #4]
   80812:	4b17      	ldr	r3, [pc, #92]	; (80870 <can_init+0x70>)
   80814:	4798      	blx	r3
   80816:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   80818:	697b      	ldr	r3, [r7, #20]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d101      	bne.n	80822 <can_init+0x22>
		return 0;
   8081e:	2300      	movs	r3, #0
   80820:	e021      	b.n	80866 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   80822:	68f8      	ldr	r0, [r7, #12]
   80824:	4b13      	ldr	r3, [pc, #76]	; (80874 <can_init+0x74>)
   80826:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   80828:	68f8      	ldr	r0, [r7, #12]
   8082a:	4b13      	ldr	r3, [pc, #76]	; (80878 <can_init+0x78>)
   8082c:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8082e:	2300      	movs	r3, #0
   80830:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   80832:	2300      	movs	r3, #0
   80834:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80836:	e006      	b.n	80846 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   80838:	68f8      	ldr	r0, [r7, #12]
   8083a:	4b10      	ldr	r3, [pc, #64]	; (8087c <can_init+0x7c>)
   8083c:	4798      	blx	r3
   8083e:	6178      	str	r0, [r7, #20]
		ul_tick++;
   80840:	693b      	ldr	r3, [r7, #16]
   80842:	3301      	adds	r3, #1
   80844:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80846:	697b      	ldr	r3, [r7, #20]
   80848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   8084c:	2b00      	cmp	r3, #0
   8084e:	d103      	bne.n	80858 <can_init+0x58>
   80850:	693a      	ldr	r2, [r7, #16]
   80852:	4b0b      	ldr	r3, [pc, #44]	; (80880 <can_init+0x80>)
   80854:	429a      	cmp	r2, r3
   80856:	d9ef      	bls.n	80838 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   80858:	693a      	ldr	r2, [r7, #16]
   8085a:	4b0a      	ldr	r3, [pc, #40]	; (80884 <can_init+0x84>)
   8085c:	429a      	cmp	r2, r3
   8085e:	d101      	bne.n	80864 <can_init+0x64>
		return 0;
   80860:	2300      	movs	r3, #0
   80862:	e000      	b.n	80866 <can_init+0x66>
	} else {
		return 1;
   80864:	2301      	movs	r3, #1
	}
}
   80866:	4618      	mov	r0, r3
   80868:	3718      	adds	r7, #24
   8086a:	46bd      	mov	sp, r7
   8086c:	bd80      	pop	{r7, pc}
   8086e:	bf00      	nop
   80870:	000806b1 	.word	0x000806b1
   80874:	00080c41 	.word	0x00080c41
   80878:	00080889 	.word	0x00080889
   8087c:	00080901 	.word	0x00080901
   80880:	0001869f 	.word	0x0001869f
   80884:	000186a0 	.word	0x000186a0

00080888 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   80888:	b480      	push	{r7}
   8088a:	b083      	sub	sp, #12
   8088c:	af00      	add	r7, sp, #0
   8088e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	681b      	ldr	r3, [r3, #0]
   80894:	f043 0201 	orr.w	r2, r3, #1
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	601a      	str	r2, [r3, #0]
}
   8089c:	370c      	adds	r7, #12
   8089e:	46bd      	mov	sp, r7
   808a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   808a4:	4770      	bx	lr
   808a6:	bf00      	nop

000808a8 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   808a8:	b480      	push	{r7}
   808aa:	b083      	sub	sp, #12
   808ac:	af00      	add	r7, sp, #0
   808ae:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   808b0:	687b      	ldr	r3, [r7, #4]
   808b2:	681b      	ldr	r3, [r3, #0]
   808b4:	f023 0201 	bic.w	r2, r3, #1
   808b8:	687b      	ldr	r3, [r7, #4]
   808ba:	601a      	str	r2, [r3, #0]
}
   808bc:	370c      	adds	r7, #12
   808be:	46bd      	mov	sp, r7
   808c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   808c4:	4770      	bx	lr
   808c6:	bf00      	nop

000808c8 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   808c8:	b480      	push	{r7}
   808ca:	b083      	sub	sp, #12
   808cc:	af00      	add	r7, sp, #0
   808ce:	6078      	str	r0, [r7, #4]
   808d0:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   808d2:	687b      	ldr	r3, [r7, #4]
   808d4:	683a      	ldr	r2, [r7, #0]
   808d6:	605a      	str	r2, [r3, #4]
}
   808d8:	370c      	adds	r7, #12
   808da:	46bd      	mov	sp, r7
   808dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   808e0:	4770      	bx	lr
   808e2:	bf00      	nop

000808e4 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   808e4:	b480      	push	{r7}
   808e6:	b083      	sub	sp, #12
   808e8:	af00      	add	r7, sp, #0
   808ea:	6078      	str	r0, [r7, #4]
   808ec:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   808ee:	687b      	ldr	r3, [r7, #4]
   808f0:	683a      	ldr	r2, [r7, #0]
   808f2:	609a      	str	r2, [r3, #8]
}
   808f4:	370c      	adds	r7, #12
   808f6:	46bd      	mov	sp, r7
   808f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   808fc:	4770      	bx	lr
   808fe:	bf00      	nop

00080900 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   80900:	b480      	push	{r7}
   80902:	b083      	sub	sp, #12
   80904:	af00      	add	r7, sp, #0
   80906:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	691b      	ldr	r3, [r3, #16]
}
   8090c:	4618      	mov	r0, r3
   8090e:	370c      	adds	r7, #12
   80910:	46bd      	mov	sp, r7
   80912:	f85d 7b04 	ldr.w	r7, [sp], #4
   80916:	4770      	bx	lr

00080918 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   80918:	b480      	push	{r7}
   8091a:	b085      	sub	sp, #20
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
   80920:	460b      	mov	r3, r1
   80922:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80924:	687b      	ldr	r3, [r7, #4]
   80926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   80928:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8092c:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   8092e:	78fa      	ldrb	r2, [r7, #3]
   80930:	68fb      	ldr	r3, [r7, #12]
   80932:	431a      	orrs	r2, r3
   80934:	687b      	ldr	r3, [r7, #4]
   80936:	625a      	str	r2, [r3, #36]	; 0x24
}
   80938:	3714      	adds	r7, #20
   8093a:	46bd      	mov	sp, r7
   8093c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80940:	4770      	bx	lr
   80942:	bf00      	nop

00080944 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   80944:	b480      	push	{r7}
   80946:	b083      	sub	sp, #12
   80948:	af00      	add	r7, sp, #0
   8094a:	6078      	str	r0, [r7, #4]
   8094c:	460b      	mov	r3, r1
   8094e:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   80950:	78fb      	ldrb	r3, [r7, #3]
   80952:	687a      	ldr	r2, [r7, #4]
   80954:	015b      	lsls	r3, r3, #5
   80956:	4413      	add	r3, r2
   80958:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8095c:	681b      	ldr	r3, [r3, #0]
}
   8095e:	4618      	mov	r0, r3
   80960:	370c      	adds	r7, #12
   80962:	46bd      	mov	sp, r7
   80964:	f85d 7b04 	ldr.w	r7, [sp], #4
   80968:	4770      	bx	lr
   8096a:	bf00      	nop

0008096c <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   8096c:	b480      	push	{r7}
   8096e:	b085      	sub	sp, #20
   80970:	af00      	add	r7, sp, #0
   80972:	6078      	str	r0, [r7, #4]
   80974:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80976:	683b      	ldr	r3, [r7, #0]
   80978:	681b      	ldr	r3, [r3, #0]
   8097a:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   8097c:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   8097e:	683a      	ldr	r2, [r7, #0]
   80980:	7992      	ldrb	r2, [r2, #6]
   80982:	0412      	lsls	r2, r2, #16
   80984:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   80988:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8098c:	6879      	ldr	r1, [r7, #4]
   8098e:	015b      	lsls	r3, r3, #5
   80990:	440b      	add	r3, r1
   80992:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80996:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   80998:	3714      	adds	r7, #20
   8099a:	46bd      	mov	sp, r7
   8099c:	f85d 7b04 	ldr.w	r7, [sp], #4
   809a0:	4770      	bx	lr
   809a2:	bf00      	nop

000809a4 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   809a4:	b480      	push	{r7}
   809a6:	b085      	sub	sp, #20
   809a8:	af00      	add	r7, sp, #0
   809aa:	6078      	str	r0, [r7, #4]
   809ac:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   809ae:	683b      	ldr	r3, [r7, #0]
   809b0:	681b      	ldr	r3, [r3, #0]
   809b2:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   809b4:	683b      	ldr	r3, [r7, #0]
   809b6:	791b      	ldrb	r3, [r3, #4]
   809b8:	2b00      	cmp	r3, #0
   809ba:	d12e      	bne.n	80a1a <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   809bc:	7bfb      	ldrb	r3, [r7, #15]
   809be:	687a      	ldr	r2, [r7, #4]
   809c0:	3310      	adds	r3, #16
   809c2:	015b      	lsls	r3, r3, #5
   809c4:	4413      	add	r3, r2
   809c6:	2200      	movs	r2, #0
   809c8:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   809ca:	7bfb      	ldrb	r3, [r7, #15]
   809cc:	687a      	ldr	r2, [r7, #4]
   809ce:	3310      	adds	r3, #16
   809d0:	015b      	lsls	r3, r3, #5
   809d2:	4413      	add	r3, r2
   809d4:	2200      	movs	r2, #0
   809d6:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   809d8:	7bfb      	ldrb	r3, [r7, #15]
   809da:	687a      	ldr	r2, [r7, #4]
   809dc:	015b      	lsls	r3, r3, #5
   809de:	4413      	add	r3, r2
   809e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   809e4:	2200      	movs	r2, #0
   809e6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   809e8:	7bfb      	ldrb	r3, [r7, #15]
   809ea:	687a      	ldr	r2, [r7, #4]
   809ec:	015b      	lsls	r3, r3, #5
   809ee:	4413      	add	r3, r2
   809f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   809f4:	2200      	movs	r2, #0
   809f6:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   809f8:	7bfb      	ldrb	r3, [r7, #15]
   809fa:	687a      	ldr	r2, [r7, #4]
   809fc:	015b      	lsls	r3, r3, #5
   809fe:	4413      	add	r3, r2
   80a00:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80a04:	2200      	movs	r2, #0
   80a06:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   80a08:	7bfb      	ldrb	r3, [r7, #15]
   80a0a:	687a      	ldr	r2, [r7, #4]
   80a0c:	015b      	lsls	r3, r3, #5
   80a0e:	4413      	add	r3, r2
   80a10:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80a14:	2200      	movs	r2, #0
   80a16:	605a      	str	r2, [r3, #4]
		return;
   80a18:	e04e      	b.n	80ab8 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a1a:	7bfb      	ldrb	r3, [r7, #15]
   80a1c:	7bfa      	ldrb	r2, [r7, #15]
   80a1e:	6879      	ldr	r1, [r7, #4]
   80a20:	3210      	adds	r2, #16
   80a22:	0152      	lsls	r2, r2, #5
   80a24:	440a      	add	r2, r1
   80a26:	6812      	ldr	r2, [r2, #0]
   80a28:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   80a2c:	683a      	ldr	r2, [r7, #0]
   80a2e:	79d2      	ldrb	r2, [r2, #7]
   80a30:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   80a32:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a34:	6879      	ldr	r1, [r7, #4]
   80a36:	3310      	adds	r3, #16
   80a38:	015b      	lsls	r3, r3, #5
   80a3a:	440b      	add	r3, r1
   80a3c:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   80a3e:	683b      	ldr	r3, [r7, #0]
   80a40:	795b      	ldrb	r3, [r3, #5]
   80a42:	2b00      	cmp	r3, #0
   80a44:	d015      	beq.n	80a72 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   80a46:	7bfb      	ldrb	r3, [r7, #15]
   80a48:	683a      	ldr	r2, [r7, #0]
   80a4a:	68d2      	ldr	r2, [r2, #12]
   80a4c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a50:	6879      	ldr	r1, [r7, #4]
   80a52:	3310      	adds	r3, #16
   80a54:	015b      	lsls	r3, r3, #5
   80a56:	440b      	add	r3, r1
   80a58:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80a5a:	7bfb      	ldrb	r3, [r7, #15]
   80a5c:	683a      	ldr	r2, [r7, #0]
   80a5e:	6912      	ldr	r2, [r2, #16]
   80a60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a64:	6879      	ldr	r1, [r7, #4]
   80a66:	015b      	lsls	r3, r3, #5
   80a68:	440b      	add	r3, r1
   80a6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a6e:	601a      	str	r2, [r3, #0]
   80a70:	e010      	b.n	80a94 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80a72:	7bfb      	ldrb	r3, [r7, #15]
   80a74:	683a      	ldr	r2, [r7, #0]
   80a76:	68d2      	ldr	r2, [r2, #12]
   80a78:	6879      	ldr	r1, [r7, #4]
   80a7a:	3310      	adds	r3, #16
   80a7c:	015b      	lsls	r3, r3, #5
   80a7e:	440b      	add	r3, r1
   80a80:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80a82:	7bfb      	ldrb	r3, [r7, #15]
   80a84:	683a      	ldr	r2, [r7, #0]
   80a86:	6912      	ldr	r2, [r2, #16]
   80a88:	6879      	ldr	r1, [r7, #4]
   80a8a:	015b      	lsls	r3, r3, #5
   80a8c:	440b      	add	r3, r1
   80a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a92:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a94:	7bfb      	ldrb	r3, [r7, #15]
   80a96:	7bfa      	ldrb	r2, [r7, #15]
   80a98:	6879      	ldr	r1, [r7, #4]
   80a9a:	3210      	adds	r2, #16
   80a9c:	0152      	lsls	r2, r2, #5
   80a9e:	440a      	add	r2, r1
   80aa0:	6812      	ldr	r2, [r2, #0]
   80aa2:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80aa6:	683a      	ldr	r2, [r7, #0]
   80aa8:	7912      	ldrb	r2, [r2, #4]
   80aaa:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   80aac:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80aae:	6879      	ldr	r1, [r7, #4]
   80ab0:	3310      	adds	r3, #16
   80ab2:	015b      	lsls	r3, r3, #5
   80ab4:	440b      	add	r3, r1
   80ab6:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80ab8:	3714      	adds	r7, #20
   80aba:	46bd      	mov	sp, r7
   80abc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ac0:	4770      	bx	lr
   80ac2:	bf00      	nop

00080ac4 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80ac4:	b580      	push	{r7, lr}
   80ac6:	b086      	sub	sp, #24
   80ac8:	af00      	add	r7, sp, #0
   80aca:	6078      	str	r0, [r7, #4]
   80acc:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80ace:	2300      	movs	r3, #0
   80ad0:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80ad2:	683b      	ldr	r3, [r7, #0]
   80ad4:	681b      	ldr	r3, [r3, #0]
   80ad6:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   80ad8:	683b      	ldr	r3, [r7, #0]
   80ada:	689b      	ldr	r3, [r3, #8]
   80adc:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   80ade:	68fb      	ldr	r3, [r7, #12]
   80ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80ae4:	2b00      	cmp	r3, #0
   80ae6:	d006      	beq.n	80af6 <can_mailbox_read+0x32>
   80ae8:	68fb      	ldr	r3, [r7, #12]
   80aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80aee:	2b00      	cmp	r3, #0
   80af0:	d001      	beq.n	80af6 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   80af2:	2302      	movs	r3, #2
   80af4:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   80af6:	7cfb      	ldrb	r3, [r7, #19]
   80af8:	687a      	ldr	r2, [r7, #4]
   80afa:	015b      	lsls	r3, r3, #5
   80afc:	4413      	add	r3, r2
   80afe:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80b02:	685b      	ldr	r3, [r3, #4]
   80b04:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80b08:	683b      	ldr	r3, [r7, #0]
   80b0a:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80b0c:	68fb      	ldr	r3, [r7, #12]
   80b0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80b12:	0c1b      	lsrs	r3, r3, #16
   80b14:	b2da      	uxtb	r2, r3
   80b16:	683b      	ldr	r3, [r7, #0]
   80b18:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   80b1a:	7cfb      	ldrb	r3, [r7, #19]
   80b1c:	687a      	ldr	r2, [r7, #4]
   80b1e:	015b      	lsls	r3, r3, #5
   80b20:	4413      	add	r3, r2
   80b22:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80b26:	685a      	ldr	r2, [r3, #4]
   80b28:	683b      	ldr	r3, [r7, #0]
   80b2a:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   80b2c:	683b      	ldr	r3, [r7, #0]
   80b2e:	799b      	ldrb	r3, [r3, #6]
   80b30:	2b04      	cmp	r3, #4
   80b32:	d908      	bls.n	80b46 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   80b34:	7cfb      	ldrb	r3, [r7, #19]
   80b36:	687a      	ldr	r2, [r7, #4]
   80b38:	015b      	lsls	r3, r3, #5
   80b3a:	4413      	add	r3, r2
   80b3c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80b40:	681a      	ldr	r2, [r3, #0]
   80b42:	683b      	ldr	r3, [r7, #0]
   80b44:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   80b46:	7cfb      	ldrb	r3, [r7, #19]
   80b48:	687a      	ldr	r2, [r7, #4]
   80b4a:	015b      	lsls	r3, r3, #5
   80b4c:	4413      	add	r3, r2
   80b4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80b52:	681a      	ldr	r2, [r3, #0]
   80b54:	683b      	ldr	r3, [r7, #0]
   80b56:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b58:	683b      	ldr	r3, [r7, #0]
   80b5a:	689b      	ldr	r3, [r3, #8]
   80b5c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   80b5e:	68fb      	ldr	r3, [r7, #12]
   80b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b64:	2b00      	cmp	r3, #0
   80b66:	d003      	beq.n	80b70 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   80b68:	697b      	ldr	r3, [r7, #20]
   80b6a:	f043 0304 	orr.w	r3, r3, #4
   80b6e:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   80b70:	6878      	ldr	r0, [r7, #4]
   80b72:	6839      	ldr	r1, [r7, #0]
   80b74:	4b03      	ldr	r3, [pc, #12]	; (80b84 <can_mailbox_read+0xc0>)
   80b76:	4798      	blx	r3

	return ul_retval;
   80b78:	697b      	ldr	r3, [r7, #20]
}
   80b7a:	4618      	mov	r0, r3
   80b7c:	3718      	adds	r7, #24
   80b7e:	46bd      	mov	sp, r7
   80b80:	bd80      	pop	{r7, pc}
   80b82:	bf00      	nop
   80b84:	0008096d 	.word	0x0008096d

00080b88 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80b88:	b580      	push	{r7, lr}
   80b8a:	b084      	sub	sp, #16
   80b8c:	af00      	add	r7, sp, #0
   80b8e:	6078      	str	r0, [r7, #4]
   80b90:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80b92:	683b      	ldr	r3, [r7, #0]
   80b94:	681b      	ldr	r3, [r3, #0]
   80b96:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   80b98:	7bfb      	ldrb	r3, [r7, #15]
   80b9a:	6878      	ldr	r0, [r7, #4]
   80b9c:	4619      	mov	r1, r3
   80b9e:	4b27      	ldr	r3, [pc, #156]	; (80c3c <can_mailbox_write+0xb4>)
   80ba0:	4798      	blx	r3
   80ba2:	4602      	mov	r2, r0
   80ba4:	683b      	ldr	r3, [r7, #0]
   80ba6:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80ba8:	683b      	ldr	r3, [r7, #0]
   80baa:	689b      	ldr	r3, [r3, #8]
   80bac:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   80bae:	68bb      	ldr	r3, [r7, #8]
   80bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80bb4:	2b00      	cmp	r3, #0
   80bb6:	d101      	bne.n	80bbc <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80bb8:	2301      	movs	r3, #1
   80bba:	e03b      	b.n	80c34 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   80bbc:	683b      	ldr	r3, [r7, #0]
   80bbe:	795b      	ldrb	r3, [r3, #5]
   80bc0:	2b00      	cmp	r3, #0
   80bc2:	d00b      	beq.n	80bdc <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80bc4:	7bfb      	ldrb	r3, [r7, #15]
   80bc6:	683a      	ldr	r2, [r7, #0]
   80bc8:	6912      	ldr	r2, [r2, #16]
   80bca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80bce:	6879      	ldr	r1, [r7, #4]
   80bd0:	015b      	lsls	r3, r3, #5
   80bd2:	440b      	add	r3, r1
   80bd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80bd8:	601a      	str	r2, [r3, #0]
   80bda:	e008      	b.n	80bee <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80bdc:	7bfb      	ldrb	r3, [r7, #15]
   80bde:	683a      	ldr	r2, [r7, #0]
   80be0:	6912      	ldr	r2, [r2, #16]
   80be2:	6879      	ldr	r1, [r7, #4]
   80be4:	015b      	lsls	r3, r3, #5
   80be6:	440b      	add	r3, r1
   80be8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80bec:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80bee:	7bfb      	ldrb	r3, [r7, #15]
   80bf0:	683a      	ldr	r2, [r7, #0]
   80bf2:	6992      	ldr	r2, [r2, #24]
   80bf4:	6879      	ldr	r1, [r7, #4]
   80bf6:	015b      	lsls	r3, r3, #5
   80bf8:	440b      	add	r3, r1
   80bfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80bfe:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   80c00:	683b      	ldr	r3, [r7, #0]
   80c02:	799b      	ldrb	r3, [r3, #6]
   80c04:	2b04      	cmp	r3, #4
   80c06:	d908      	bls.n	80c1a <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80c08:	7bfb      	ldrb	r3, [r7, #15]
   80c0a:	683a      	ldr	r2, [r7, #0]
   80c0c:	69d2      	ldr	r2, [r2, #28]
   80c0e:	6879      	ldr	r1, [r7, #4]
   80c10:	015b      	lsls	r3, r3, #5
   80c12:	440b      	add	r3, r1
   80c14:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80c18:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80c1a:	7bfb      	ldrb	r3, [r7, #15]
   80c1c:	683a      	ldr	r2, [r7, #0]
   80c1e:	7992      	ldrb	r2, [r2, #6]
   80c20:	0412      	lsls	r2, r2, #16
   80c22:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80c26:	6879      	ldr	r1, [r7, #4]
   80c28:	015b      	lsls	r3, r3, #5
   80c2a:	440b      	add	r3, r1
   80c2c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80c30:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   80c32:	2300      	movs	r3, #0
}
   80c34:	4618      	mov	r0, r3
   80c36:	3710      	adds	r7, #16
   80c38:	46bd      	mov	sp, r7
   80c3a:	bd80      	pop	{r7, pc}
   80c3c:	00080945 	.word	0x00080945

00080c40 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80c40:	b580      	push	{r7, lr}
   80c42:	b08c      	sub	sp, #48	; 0x30
   80c44:	af00      	add	r7, sp, #0
   80c46:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80c48:	2300      	movs	r3, #0
   80c4a:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c4c:	2300      	movs	r3, #0
   80c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c52:	e00d      	b.n	80c70 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   80c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c58:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   80c5a:	f107 030c 	add.w	r3, r7, #12
   80c5e:	6878      	ldr	r0, [r7, #4]
   80c60:	4619      	mov	r1, r3
   80c62:	4b07      	ldr	r3, [pc, #28]	; (80c80 <can_reset_all_mailbox+0x40>)
   80c64:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c6a:	3301      	adds	r3, #1
   80c6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c74:	2b07      	cmp	r3, #7
   80c76:	d9ed      	bls.n	80c54 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80c78:	3730      	adds	r7, #48	; 0x30
   80c7a:	46bd      	mov	sp, r7
   80c7c:	bd80      	pop	{r7, pc}
   80c7e:	bf00      	nop
   80c80:	000809a5 	.word	0x000809a5

00080c84 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80c84:	b480      	push	{r7}
   80c86:	b085      	sub	sp, #20
   80c88:	af00      	add	r7, sp, #0
   80c8a:	60f8      	str	r0, [r7, #12]
   80c8c:	60b9      	str	r1, [r7, #8]
   80c8e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c90:	687b      	ldr	r3, [r7, #4]
   80c92:	2b00      	cmp	r3, #0
   80c94:	d003      	beq.n	80c9e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80c96:	68fb      	ldr	r3, [r7, #12]
   80c98:	68ba      	ldr	r2, [r7, #8]
   80c9a:	665a      	str	r2, [r3, #100]	; 0x64
   80c9c:	e002      	b.n	80ca4 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c9e:	68fb      	ldr	r3, [r7, #12]
   80ca0:	68ba      	ldr	r2, [r7, #8]
   80ca2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80ca4:	3714      	adds	r7, #20
   80ca6:	46bd      	mov	sp, r7
   80ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cac:	4770      	bx	lr
   80cae:	bf00      	nop

00080cb0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   80cb0:	b480      	push	{r7}
   80cb2:	b087      	sub	sp, #28
   80cb4:	af00      	add	r7, sp, #0
   80cb6:	60f8      	str	r0, [r7, #12]
   80cb8:	60b9      	str	r1, [r7, #8]
   80cba:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80cbc:	68fb      	ldr	r3, [r7, #12]
   80cbe:	687a      	ldr	r2, [r7, #4]
   80cc0:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80cc2:	68bb      	ldr	r3, [r7, #8]
   80cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80cc8:	d01f      	beq.n	80d0a <pio_set_peripheral+0x5a>
   80cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80cce:	d805      	bhi.n	80cdc <pio_set_peripheral+0x2c>
   80cd0:	2b00      	cmp	r3, #0
   80cd2:	d027      	beq.n	80d24 <pio_set_peripheral+0x74>
   80cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80cd8:	d00a      	beq.n	80cf0 <pio_set_peripheral+0x40>
   80cda:	e01f      	b.n	80d1c <pio_set_peripheral+0x6c>
   80cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ce0:	d020      	beq.n	80d24 <pio_set_peripheral+0x74>
   80ce2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ce6:	d01d      	beq.n	80d24 <pio_set_peripheral+0x74>
   80ce8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80cec:	d01a      	beq.n	80d24 <pio_set_peripheral+0x74>
   80cee:	e015      	b.n	80d1c <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80cf0:	68fb      	ldr	r3, [r7, #12]
   80cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80cf4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80cf6:	68fb      	ldr	r3, [r7, #12]
   80cf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cfa:	687b      	ldr	r3, [r7, #4]
   80cfc:	43d9      	mvns	r1, r3
   80cfe:	697b      	ldr	r3, [r7, #20]
   80d00:	400b      	ands	r3, r1
   80d02:	401a      	ands	r2, r3
   80d04:	68fb      	ldr	r3, [r7, #12]
   80d06:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80d08:	e008      	b.n	80d1c <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80d0a:	68fb      	ldr	r3, [r7, #12]
   80d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80d0e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80d10:	687a      	ldr	r2, [r7, #4]
   80d12:	697b      	ldr	r3, [r7, #20]
   80d14:	431a      	orrs	r2, r3
   80d16:	68fb      	ldr	r3, [r7, #12]
   80d18:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80d1a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   80d1c:	68fb      	ldr	r3, [r7, #12]
   80d1e:	687a      	ldr	r2, [r7, #4]
   80d20:	605a      	str	r2, [r3, #4]
   80d22:	e000      	b.n	80d26 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   80d24:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   80d26:	371c      	adds	r7, #28
   80d28:	46bd      	mov	sp, r7
   80d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d2e:	4770      	bx	lr

00080d30 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80d30:	b580      	push	{r7, lr}
   80d32:	b084      	sub	sp, #16
   80d34:	af00      	add	r7, sp, #0
   80d36:	60f8      	str	r0, [r7, #12]
   80d38:	60b9      	str	r1, [r7, #8]
   80d3a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   80d3c:	68f8      	ldr	r0, [r7, #12]
   80d3e:	68b9      	ldr	r1, [r7, #8]
   80d40:	4b18      	ldr	r3, [pc, #96]	; (80da4 <pio_set_input+0x74>)
   80d42:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80d44:	687b      	ldr	r3, [r7, #4]
   80d46:	f003 0301 	and.w	r3, r3, #1
   80d4a:	68f8      	ldr	r0, [r7, #12]
   80d4c:	68b9      	ldr	r1, [r7, #8]
   80d4e:	461a      	mov	r2, r3
   80d50:	4b15      	ldr	r3, [pc, #84]	; (80da8 <pio_set_input+0x78>)
   80d52:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80d54:	687b      	ldr	r3, [r7, #4]
   80d56:	f003 030a 	and.w	r3, r3, #10
   80d5a:	2b00      	cmp	r3, #0
   80d5c:	d003      	beq.n	80d66 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   80d5e:	68fb      	ldr	r3, [r7, #12]
   80d60:	68ba      	ldr	r2, [r7, #8]
   80d62:	621a      	str	r2, [r3, #32]
   80d64:	e002      	b.n	80d6c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80d66:	68fb      	ldr	r3, [r7, #12]
   80d68:	68ba      	ldr	r2, [r7, #8]
   80d6a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80d6c:	687b      	ldr	r3, [r7, #4]
   80d6e:	f003 0302 	and.w	r3, r3, #2
   80d72:	2b00      	cmp	r3, #0
   80d74:	d004      	beq.n	80d80 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80d76:	68fb      	ldr	r3, [r7, #12]
   80d78:	68ba      	ldr	r2, [r7, #8]
   80d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   80d7e:	e008      	b.n	80d92 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80d80:	687b      	ldr	r3, [r7, #4]
   80d82:	f003 0308 	and.w	r3, r3, #8
   80d86:	2b00      	cmp	r3, #0
   80d88:	d003      	beq.n	80d92 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80d8a:	68fb      	ldr	r3, [r7, #12]
   80d8c:	68ba      	ldr	r2, [r7, #8]
   80d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80d92:	68fb      	ldr	r3, [r7, #12]
   80d94:	68ba      	ldr	r2, [r7, #8]
   80d96:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80d98:	68fb      	ldr	r3, [r7, #12]
   80d9a:	68ba      	ldr	r2, [r7, #8]
   80d9c:	601a      	str	r2, [r3, #0]
}
   80d9e:	3710      	adds	r7, #16
   80da0:	46bd      	mov	sp, r7
   80da2:	bd80      	pop	{r7, pc}
   80da4:	00080e11 	.word	0x00080e11
   80da8:	00080c85 	.word	0x00080c85

00080dac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80dac:	b580      	push	{r7, lr}
   80dae:	b084      	sub	sp, #16
   80db0:	af00      	add	r7, sp, #0
   80db2:	60f8      	str	r0, [r7, #12]
   80db4:	60b9      	str	r1, [r7, #8]
   80db6:	607a      	str	r2, [r7, #4]
   80db8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80dba:	68f8      	ldr	r0, [r7, #12]
   80dbc:	68b9      	ldr	r1, [r7, #8]
   80dbe:	4b12      	ldr	r3, [pc, #72]	; (80e08 <pio_set_output+0x5c>)
   80dc0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80dc2:	68f8      	ldr	r0, [r7, #12]
   80dc4:	68b9      	ldr	r1, [r7, #8]
   80dc6:	69ba      	ldr	r2, [r7, #24]
   80dc8:	4b10      	ldr	r3, [pc, #64]	; (80e0c <pio_set_output+0x60>)
   80dca:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80dcc:	683b      	ldr	r3, [r7, #0]
   80dce:	2b00      	cmp	r3, #0
   80dd0:	d003      	beq.n	80dda <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   80dd2:	68fb      	ldr	r3, [r7, #12]
   80dd4:	68ba      	ldr	r2, [r7, #8]
   80dd6:	651a      	str	r2, [r3, #80]	; 0x50
   80dd8:	e002      	b.n	80de0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80dda:	68fb      	ldr	r3, [r7, #12]
   80ddc:	68ba      	ldr	r2, [r7, #8]
   80dde:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80de0:	687b      	ldr	r3, [r7, #4]
   80de2:	2b00      	cmp	r3, #0
   80de4:	d003      	beq.n	80dee <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80de6:	68fb      	ldr	r3, [r7, #12]
   80de8:	68ba      	ldr	r2, [r7, #8]
   80dea:	631a      	str	r2, [r3, #48]	; 0x30
   80dec:	e002      	b.n	80df4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80dee:	68fb      	ldr	r3, [r7, #12]
   80df0:	68ba      	ldr	r2, [r7, #8]
   80df2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80df4:	68fb      	ldr	r3, [r7, #12]
   80df6:	68ba      	ldr	r2, [r7, #8]
   80df8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80dfa:	68fb      	ldr	r3, [r7, #12]
   80dfc:	68ba      	ldr	r2, [r7, #8]
   80dfe:	601a      	str	r2, [r3, #0]
}
   80e00:	3710      	adds	r7, #16
   80e02:	46bd      	mov	sp, r7
   80e04:	bd80      	pop	{r7, pc}
   80e06:	bf00      	nop
   80e08:	00080e11 	.word	0x00080e11
   80e0c:	00080c85 	.word	0x00080c85

00080e10 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   80e10:	b480      	push	{r7}
   80e12:	b083      	sub	sp, #12
   80e14:	af00      	add	r7, sp, #0
   80e16:	6078      	str	r0, [r7, #4]
   80e18:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   80e1a:	687b      	ldr	r3, [r7, #4]
   80e1c:	683a      	ldr	r2, [r7, #0]
   80e1e:	645a      	str	r2, [r3, #68]	; 0x44
}
   80e20:	370c      	adds	r7, #12
   80e22:	46bd      	mov	sp, r7
   80e24:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e28:	4770      	bx	lr
   80e2a:	bf00      	nop

00080e2c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   80e2c:	b480      	push	{r7}
   80e2e:	b083      	sub	sp, #12
   80e30:	af00      	add	r7, sp, #0
   80e32:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   80e34:	687b      	ldr	r3, [r7, #4]
   80e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   80e38:	4618      	mov	r0, r3
   80e3a:	370c      	adds	r7, #12
   80e3c:	46bd      	mov	sp, r7
   80e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e42:	4770      	bx	lr

00080e44 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   80e44:	b480      	push	{r7}
   80e46:	b083      	sub	sp, #12
   80e48:	af00      	add	r7, sp, #0
   80e4a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   80e4c:	687b      	ldr	r3, [r7, #4]
   80e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   80e50:	4618      	mov	r0, r3
   80e52:	370c      	adds	r7, #12
   80e54:	46bd      	mov	sp, r7
   80e56:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e5a:	4770      	bx	lr

00080e5c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   80e5c:	b480      	push	{r7}
   80e5e:	b085      	sub	sp, #20
   80e60:	af00      	add	r7, sp, #0
   80e62:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e64:	687b      	ldr	r3, [r7, #4]
   80e66:	095b      	lsrs	r3, r3, #5
   80e68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e6c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e70:	025b      	lsls	r3, r3, #9
   80e72:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80e74:	687b      	ldr	r3, [r7, #4]
   80e76:	f003 031f 	and.w	r3, r3, #31
   80e7a:	2201      	movs	r2, #1
   80e7c:	fa02 f303 	lsl.w	r3, r2, r3
   80e80:	461a      	mov	r2, r3
   80e82:	68fb      	ldr	r3, [r7, #12]
   80e84:	631a      	str	r2, [r3, #48]	; 0x30
}
   80e86:	3714      	adds	r7, #20
   80e88:	46bd      	mov	sp, r7
   80e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e8e:	4770      	bx	lr

00080e90 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   80e90:	b480      	push	{r7}
   80e92:	b085      	sub	sp, #20
   80e94:	af00      	add	r7, sp, #0
   80e96:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e98:	687b      	ldr	r3, [r7, #4]
   80e9a:	095b      	lsrs	r3, r3, #5
   80e9c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ea0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ea4:	025b      	lsls	r3, r3, #9
   80ea6:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80ea8:	687b      	ldr	r3, [r7, #4]
   80eaa:	f003 031f 	and.w	r3, r3, #31
   80eae:	2201      	movs	r2, #1
   80eb0:	fa02 f303 	lsl.w	r3, r2, r3
   80eb4:	461a      	mov	r2, r3
   80eb6:	68fb      	ldr	r3, [r7, #12]
   80eb8:	635a      	str	r2, [r3, #52]	; 0x34
}
   80eba:	3714      	adds	r7, #20
   80ebc:	46bd      	mov	sp, r7
   80ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ec2:	4770      	bx	lr

00080ec4 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80ec4:	b480      	push	{r7}
   80ec6:	b085      	sub	sp, #20
   80ec8:	af00      	add	r7, sp, #0
   80eca:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80ecc:	687b      	ldr	r3, [r7, #4]
   80ece:	095b      	lsrs	r3, r3, #5
   80ed0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ed4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ed8:	025b      	lsls	r3, r3, #9
   80eda:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80edc:	68fb      	ldr	r3, [r7, #12]
   80ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   80ee0:	687b      	ldr	r3, [r7, #4]
   80ee2:	f003 031f 	and.w	r3, r3, #31
   80ee6:	2101      	movs	r1, #1
   80ee8:	fa01 f303 	lsl.w	r3, r1, r3
   80eec:	4013      	ands	r3, r2
   80eee:	2b00      	cmp	r3, #0
   80ef0:	d009      	beq.n	80f06 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80ef2:	687b      	ldr	r3, [r7, #4]
   80ef4:	f003 031f 	and.w	r3, r3, #31
   80ef8:	2201      	movs	r2, #1
   80efa:	fa02 f303 	lsl.w	r3, r2, r3
   80efe:	461a      	mov	r2, r3
   80f00:	68fb      	ldr	r3, [r7, #12]
   80f02:	635a      	str	r2, [r3, #52]	; 0x34
   80f04:	e008      	b.n	80f18 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80f06:	687b      	ldr	r3, [r7, #4]
   80f08:	f003 031f 	and.w	r3, r3, #31
   80f0c:	2201      	movs	r2, #1
   80f0e:	fa02 f303 	lsl.w	r3, r2, r3
   80f12:	461a      	mov	r2, r3
   80f14:	68fb      	ldr	r3, [r7, #12]
   80f16:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   80f18:	3714      	adds	r7, #20
   80f1a:	46bd      	mov	sp, r7
   80f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f20:	4770      	bx	lr
   80f22:	bf00      	nop

00080f24 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80f24:	b590      	push	{r4, r7, lr}
   80f26:	b087      	sub	sp, #28
   80f28:	af02      	add	r7, sp, #8
   80f2a:	6078      	str	r0, [r7, #4]
   80f2c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f2e:	687b      	ldr	r3, [r7, #4]
   80f30:	095b      	lsrs	r3, r3, #5
   80f32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f36:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f3a:	025b      	lsls	r3, r3, #9
   80f3c:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f3e:	683b      	ldr	r3, [r7, #0]
   80f40:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   80f44:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f48:	d048      	beq.n	80fdc <pio_configure_pin+0xb8>
   80f4a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f4e:	d806      	bhi.n	80f5e <pio_configure_pin+0x3a>
   80f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80f54:	d00a      	beq.n	80f6c <pio_configure_pin+0x48>
   80f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80f5a:	d023      	beq.n	80fa4 <pio_configure_pin+0x80>
   80f5c:	e070      	b.n	81040 <pio_configure_pin+0x11c>
   80f5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80f62:	d047      	beq.n	80ff4 <pio_configure_pin+0xd0>
   80f64:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f68:	d044      	beq.n	80ff4 <pio_configure_pin+0xd0>
   80f6a:	e069      	b.n	81040 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f6c:	687b      	ldr	r3, [r7, #4]
   80f6e:	f003 031f 	and.w	r3, r3, #31
   80f72:	2201      	movs	r2, #1
   80f74:	fa02 f303 	lsl.w	r3, r2, r3
   80f78:	68f8      	ldr	r0, [r7, #12]
   80f7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f7e:	461a      	mov	r2, r3
   80f80:	4b33      	ldr	r3, [pc, #204]	; (81050 <pio_configure_pin+0x12c>)
   80f82:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f84:	687b      	ldr	r3, [r7, #4]
   80f86:	f003 031f 	and.w	r3, r3, #31
   80f8a:	2201      	movs	r2, #1
   80f8c:	fa02 f303 	lsl.w	r3, r2, r3
   80f90:	461a      	mov	r2, r3
   80f92:	683b      	ldr	r3, [r7, #0]
   80f94:	f003 0301 	and.w	r3, r3, #1
   80f98:	68f8      	ldr	r0, [r7, #12]
   80f9a:	4611      	mov	r1, r2
   80f9c:	461a      	mov	r2, r3
   80f9e:	4b2d      	ldr	r3, [pc, #180]	; (81054 <pio_configure_pin+0x130>)
   80fa0:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80fa2:	e04f      	b.n	81044 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80fa4:	687b      	ldr	r3, [r7, #4]
   80fa6:	f003 031f 	and.w	r3, r3, #31
   80faa:	2201      	movs	r2, #1
   80fac:	fa02 f303 	lsl.w	r3, r2, r3
   80fb0:	68f8      	ldr	r0, [r7, #12]
   80fb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80fb6:	461a      	mov	r2, r3
   80fb8:	4b25      	ldr	r3, [pc, #148]	; (81050 <pio_configure_pin+0x12c>)
   80fba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80fbc:	687b      	ldr	r3, [r7, #4]
   80fbe:	f003 031f 	and.w	r3, r3, #31
   80fc2:	2201      	movs	r2, #1
   80fc4:	fa02 f303 	lsl.w	r3, r2, r3
   80fc8:	461a      	mov	r2, r3
   80fca:	683b      	ldr	r3, [r7, #0]
   80fcc:	f003 0301 	and.w	r3, r3, #1
   80fd0:	68f8      	ldr	r0, [r7, #12]
   80fd2:	4611      	mov	r1, r2
   80fd4:	461a      	mov	r2, r3
   80fd6:	4b1f      	ldr	r3, [pc, #124]	; (81054 <pio_configure_pin+0x130>)
   80fd8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80fda:	e033      	b.n	81044 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80fdc:	687b      	ldr	r3, [r7, #4]
   80fde:	f003 031f 	and.w	r3, r3, #31
   80fe2:	2201      	movs	r2, #1
   80fe4:	fa02 f303 	lsl.w	r3, r2, r3
   80fe8:	68f8      	ldr	r0, [r7, #12]
   80fea:	4619      	mov	r1, r3
   80fec:	683a      	ldr	r2, [r7, #0]
   80fee:	4b1a      	ldr	r3, [pc, #104]	; (81058 <pio_configure_pin+0x134>)
   80ff0:	4798      	blx	r3
		break;
   80ff2:	e027      	b.n	81044 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80ff4:	687b      	ldr	r3, [r7, #4]
   80ff6:	f003 031f 	and.w	r3, r3, #31
   80ffa:	2201      	movs	r2, #1
   80ffc:	fa02 f303 	lsl.w	r3, r2, r3
   81000:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81002:	683b      	ldr	r3, [r7, #0]
   81004:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81008:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8100c:	bf14      	ite	ne
   8100e:	2300      	movne	r3, #0
   81010:	2301      	moveq	r3, #1
   81012:	b2db      	uxtb	r3, r3
   81014:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81016:	683b      	ldr	r3, [r7, #0]
   81018:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8101c:	2b00      	cmp	r3, #0
   8101e:	bf0c      	ite	eq
   81020:	2300      	moveq	r3, #0
   81022:	2301      	movne	r3, #1
   81024:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81026:	6838      	ldr	r0, [r7, #0]
   81028:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8102c:	2800      	cmp	r0, #0
   8102e:	bf0c      	ite	eq
   81030:	2000      	moveq	r0, #0
   81032:	2001      	movne	r0, #1
   81034:	b2c0      	uxtb	r0, r0
   81036:	9000      	str	r0, [sp, #0]
   81038:	68f8      	ldr	r0, [r7, #12]
   8103a:	4c08      	ldr	r4, [pc, #32]	; (8105c <pio_configure_pin+0x138>)
   8103c:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8103e:	e001      	b.n	81044 <pio_configure_pin+0x120>

	default:
		return 0;
   81040:	2300      	movs	r3, #0
   81042:	e000      	b.n	81046 <pio_configure_pin+0x122>
	}

	return 1;
   81044:	2301      	movs	r3, #1
}
   81046:	4618      	mov	r0, r3
   81048:	3714      	adds	r7, #20
   8104a:	46bd      	mov	sp, r7
   8104c:	bd90      	pop	{r4, r7, pc}
   8104e:	bf00      	nop
   81050:	00080cb1 	.word	0x00080cb1
   81054:	00080c85 	.word	0x00080c85
   81058:	00080d31 	.word	0x00080d31
   8105c:	00080dad 	.word	0x00080dad

00081060 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81060:	b580      	push	{r7, lr}
   81062:	b084      	sub	sp, #16
   81064:	af00      	add	r7, sp, #0
   81066:	6078      	str	r0, [r7, #4]
   81068:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8106a:	6878      	ldr	r0, [r7, #4]
   8106c:	4b22      	ldr	r3, [pc, #136]	; (810f8 <pio_handler_process+0x98>)
   8106e:	4798      	blx	r3
   81070:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81072:	6878      	ldr	r0, [r7, #4]
   81074:	4b21      	ldr	r3, [pc, #132]	; (810fc <pio_handler_process+0x9c>)
   81076:	4798      	blx	r3
   81078:	4603      	mov	r3, r0
   8107a:	68fa      	ldr	r2, [r7, #12]
   8107c:	4013      	ands	r3, r2
   8107e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81080:	68fb      	ldr	r3, [r7, #12]
   81082:	2b00      	cmp	r3, #0
   81084:	d035      	beq.n	810f2 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   81086:	2300      	movs	r3, #0
   81088:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8108a:	e02f      	b.n	810ec <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8108c:	4a1c      	ldr	r2, [pc, #112]	; (81100 <pio_handler_process+0xa0>)
   8108e:	68bb      	ldr	r3, [r7, #8]
   81090:	011b      	lsls	r3, r3, #4
   81092:	4413      	add	r3, r2
   81094:	681a      	ldr	r2, [r3, #0]
   81096:	683b      	ldr	r3, [r7, #0]
   81098:	429a      	cmp	r2, r3
   8109a:	d124      	bne.n	810e6 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8109c:	4a18      	ldr	r2, [pc, #96]	; (81100 <pio_handler_process+0xa0>)
   8109e:	68bb      	ldr	r3, [r7, #8]
   810a0:	011b      	lsls	r3, r3, #4
   810a2:	4413      	add	r3, r2
   810a4:	685a      	ldr	r2, [r3, #4]
   810a6:	68fb      	ldr	r3, [r7, #12]
   810a8:	4013      	ands	r3, r2
   810aa:	2b00      	cmp	r3, #0
   810ac:	d01b      	beq.n	810e6 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   810ae:	4a14      	ldr	r2, [pc, #80]	; (81100 <pio_handler_process+0xa0>)
   810b0:	68bb      	ldr	r3, [r7, #8]
   810b2:	011b      	lsls	r3, r3, #4
   810b4:	4413      	add	r3, r2
   810b6:	3308      	adds	r3, #8
   810b8:	685b      	ldr	r3, [r3, #4]
   810ba:	4911      	ldr	r1, [pc, #68]	; (81100 <pio_handler_process+0xa0>)
   810bc:	68ba      	ldr	r2, [r7, #8]
   810be:	0112      	lsls	r2, r2, #4
   810c0:	440a      	add	r2, r1
   810c2:	6811      	ldr	r1, [r2, #0]
   810c4:	480e      	ldr	r0, [pc, #56]	; (81100 <pio_handler_process+0xa0>)
   810c6:	68ba      	ldr	r2, [r7, #8]
   810c8:	0112      	lsls	r2, r2, #4
   810ca:	4402      	add	r2, r0
   810cc:	6852      	ldr	r2, [r2, #4]
   810ce:	4608      	mov	r0, r1
   810d0:	4611      	mov	r1, r2
   810d2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810d4:	4a0a      	ldr	r2, [pc, #40]	; (81100 <pio_handler_process+0xa0>)
   810d6:	68bb      	ldr	r3, [r7, #8]
   810d8:	011b      	lsls	r3, r3, #4
   810da:	4413      	add	r3, r2
   810dc:	685b      	ldr	r3, [r3, #4]
   810de:	43db      	mvns	r3, r3
   810e0:	68fa      	ldr	r2, [r7, #12]
   810e2:	4013      	ands	r3, r2
   810e4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   810e6:	68bb      	ldr	r3, [r7, #8]
   810e8:	3301      	adds	r3, #1
   810ea:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810ec:	68fb      	ldr	r3, [r7, #12]
   810ee:	2b00      	cmp	r3, #0
   810f0:	d1cc      	bne.n	8108c <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   810f2:	3710      	adds	r7, #16
   810f4:	46bd      	mov	sp, r7
   810f6:	bd80      	pop	{r7, pc}
   810f8:	00080e2d 	.word	0x00080e2d
   810fc:	00080e45 	.word	0x00080e45
   81100:	20070454 	.word	0x20070454

00081104 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81104:	b580      	push	{r7, lr}
   81106:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81108:	4802      	ldr	r0, [pc, #8]	; (81114 <PIOA_Handler+0x10>)
   8110a:	210b      	movs	r1, #11
   8110c:	4b02      	ldr	r3, [pc, #8]	; (81118 <PIOA_Handler+0x14>)
   8110e:	4798      	blx	r3
}
   81110:	bd80      	pop	{r7, pc}
   81112:	bf00      	nop
   81114:	400e0e00 	.word	0x400e0e00
   81118:	00081061 	.word	0x00081061

0008111c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8111c:	b580      	push	{r7, lr}
   8111e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81120:	4802      	ldr	r0, [pc, #8]	; (8112c <PIOB_Handler+0x10>)
   81122:	210c      	movs	r1, #12
   81124:	4b02      	ldr	r3, [pc, #8]	; (81130 <PIOB_Handler+0x14>)
   81126:	4798      	blx	r3
}
   81128:	bd80      	pop	{r7, pc}
   8112a:	bf00      	nop
   8112c:	400e1000 	.word	0x400e1000
   81130:	00081061 	.word	0x00081061

00081134 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81134:	b580      	push	{r7, lr}
   81136:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   81138:	4802      	ldr	r0, [pc, #8]	; (81144 <PIOC_Handler+0x10>)
   8113a:	210d      	movs	r1, #13
   8113c:	4b02      	ldr	r3, [pc, #8]	; (81148 <PIOC_Handler+0x14>)
   8113e:	4798      	blx	r3
}
   81140:	bd80      	pop	{r7, pc}
   81142:	bf00      	nop
   81144:	400e1200 	.word	0x400e1200
   81148:	00081061 	.word	0x00081061

0008114c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8114c:	b580      	push	{r7, lr}
   8114e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81150:	4802      	ldr	r0, [pc, #8]	; (8115c <PIOD_Handler+0x10>)
   81152:	210e      	movs	r1, #14
   81154:	4b02      	ldr	r3, [pc, #8]	; (81160 <PIOD_Handler+0x14>)
   81156:	4798      	blx	r3
}
   81158:	bd80      	pop	{r7, pc}
   8115a:	bf00      	nop
   8115c:	400e1400 	.word	0x400e1400
   81160:	00081061 	.word	0x00081061

00081164 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81164:	b480      	push	{r7}
   81166:	b085      	sub	sp, #20
   81168:	af00      	add	r7, sp, #0
   8116a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8116c:	4b1d      	ldr	r3, [pc, #116]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   8116e:	4a1d      	ldr	r2, [pc, #116]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   81170:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81172:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   81176:	687a      	ldr	r2, [r7, #4]
   81178:	430a      	orrs	r2, r1
   8117a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8117c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81180:	60fb      	str	r3, [r7, #12]
   81182:	e007      	b.n	81194 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81184:	68fb      	ldr	r3, [r7, #12]
   81186:	2b00      	cmp	r3, #0
   81188:	d101      	bne.n	8118e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8118a:	2301      	movs	r3, #1
   8118c:	e023      	b.n	811d6 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8118e:	68fb      	ldr	r3, [r7, #12]
   81190:	3b01      	subs	r3, #1
   81192:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81194:	4b13      	ldr	r3, [pc, #76]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   81196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81198:	f003 0308 	and.w	r3, r3, #8
   8119c:	2b00      	cmp	r3, #0
   8119e:	d0f1      	beq.n	81184 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   811a0:	4b10      	ldr	r3, [pc, #64]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   811a2:	4a10      	ldr	r2, [pc, #64]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   811a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
   811a6:	f022 0203 	bic.w	r2, r2, #3
   811aa:	f042 0202 	orr.w	r2, r2, #2
   811ae:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   811b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   811b4:	60fb      	str	r3, [r7, #12]
   811b6:	e007      	b.n	811c8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   811b8:	68fb      	ldr	r3, [r7, #12]
   811ba:	2b00      	cmp	r3, #0
   811bc:	d101      	bne.n	811c2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   811be:	2301      	movs	r3, #1
   811c0:	e009      	b.n	811d6 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   811c2:	68fb      	ldr	r3, [r7, #12]
   811c4:	3b01      	subs	r3, #1
   811c6:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   811c8:	4b06      	ldr	r3, [pc, #24]	; (811e4 <pmc_switch_mck_to_pllack+0x80>)
   811ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   811cc:	f003 0308 	and.w	r3, r3, #8
   811d0:	2b00      	cmp	r3, #0
   811d2:	d0f1      	beq.n	811b8 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   811d4:	2300      	movs	r3, #0
}
   811d6:	4618      	mov	r0, r3
   811d8:	3714      	adds	r7, #20
   811da:	46bd      	mov	sp, r7
   811dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   811e0:	4770      	bx	lr
   811e2:	bf00      	nop
   811e4:	400e0600 	.word	0x400e0600

000811e8 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   811e8:	b480      	push	{r7}
   811ea:	b083      	sub	sp, #12
   811ec:	af00      	add	r7, sp, #0
   811ee:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   811f0:	687b      	ldr	r3, [r7, #4]
   811f2:	2b01      	cmp	r3, #1
   811f4:	d107      	bne.n	81206 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   811f6:	4a0a      	ldr	r2, [pc, #40]	; (81220 <pmc_switch_sclk_to_32kxtal+0x38>)
   811f8:	4b09      	ldr	r3, [pc, #36]	; (81220 <pmc_switch_sclk_to_32kxtal+0x38>)
   811fa:	689b      	ldr	r3, [r3, #8]
   811fc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81204:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   81206:	4a06      	ldr	r2, [pc, #24]	; (81220 <pmc_switch_sclk_to_32kxtal+0x38>)
   81208:	4b05      	ldr	r3, [pc, #20]	; (81220 <pmc_switch_sclk_to_32kxtal+0x38>)
   8120a:	681b      	ldr	r3, [r3, #0]
   8120c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81210:	f043 0308 	orr.w	r3, r3, #8
   81214:	6013      	str	r3, [r2, #0]
}
   81216:	370c      	adds	r7, #12
   81218:	46bd      	mov	sp, r7
   8121a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8121e:	4770      	bx	lr
   81220:	400e1a10 	.word	0x400e1a10

00081224 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   81224:	b480      	push	{r7}
   81226:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81228:	4b09      	ldr	r3, [pc, #36]	; (81250 <pmc_osc_is_ready_32kxtal+0x2c>)
   8122a:	695b      	ldr	r3, [r3, #20]
   8122c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81230:	2b00      	cmp	r3, #0
   81232:	d007      	beq.n	81244 <pmc_osc_is_ready_32kxtal+0x20>
   81234:	4b07      	ldr	r3, [pc, #28]	; (81254 <pmc_osc_is_ready_32kxtal+0x30>)
   81236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81238:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8123c:	2b00      	cmp	r3, #0
   8123e:	d001      	beq.n	81244 <pmc_osc_is_ready_32kxtal+0x20>
   81240:	2301      	movs	r3, #1
   81242:	e000      	b.n	81246 <pmc_osc_is_ready_32kxtal+0x22>
   81244:	2300      	movs	r3, #0
}
   81246:	4618      	mov	r0, r3
   81248:	46bd      	mov	sp, r7
   8124a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8124e:	4770      	bx	lr
   81250:	400e1a10 	.word	0x400e1a10
   81254:	400e0600 	.word	0x400e0600

00081258 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   81258:	b480      	push	{r7}
   8125a:	b085      	sub	sp, #20
   8125c:	af00      	add	r7, sp, #0
   8125e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81260:	2300      	movs	r3, #0
   81262:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   81264:	4b21      	ldr	r3, [pc, #132]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   81266:	6a1b      	ldr	r3, [r3, #32]
   81268:	f003 0301 	and.w	r3, r3, #1
   8126c:	2b00      	cmp	r3, #0
   8126e:	d00e      	beq.n	8128e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81270:	4a1e      	ldr	r2, [pc, #120]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   81272:	4b1e      	ldr	r3, [pc, #120]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   81274:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   81276:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8127a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8127e:	6879      	ldr	r1, [r7, #4]
   81280:	430b      	orrs	r3, r1
   81282:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81286:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8128a:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8128c:	e00b      	b.n	812a6 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8128e:	2301      	movs	r3, #1
   81290:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81292:	4a16      	ldr	r2, [pc, #88]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   81294:	4b15      	ldr	r3, [pc, #84]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   81296:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   81298:	4b15      	ldr	r3, [pc, #84]	; (812f0 <pmc_switch_mainck_to_fastrc+0x98>)
   8129a:	400b      	ands	r3, r1
   8129c:	6879      	ldr	r1, [r7, #4]
   8129e:	4319      	orrs	r1, r3
   812a0:	4b14      	ldr	r3, [pc, #80]	; (812f4 <pmc_switch_mainck_to_fastrc+0x9c>)
   812a2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   812a4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   812a6:	bf00      	nop
   812a8:	4b10      	ldr	r3, [pc, #64]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   812aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   812ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   812b0:	2b00      	cmp	r3, #0
   812b2:	d0f9      	beq.n	812a8 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   812b4:	4a0d      	ldr	r2, [pc, #52]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   812b6:	4b0d      	ldr	r3, [pc, #52]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   812b8:	6a1b      	ldr	r3, [r3, #32]
   812ba:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   812be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   812c2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   812c6:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   812c8:	68fb      	ldr	r3, [r7, #12]
   812ca:	2b00      	cmp	r3, #0
   812cc:	d009      	beq.n	812e2 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812ce:	4a07      	ldr	r2, [pc, #28]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   812d0:	4b06      	ldr	r3, [pc, #24]	; (812ec <pmc_switch_mainck_to_fastrc+0x94>)
   812d2:	6a1b      	ldr	r3, [r3, #32]
   812d4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   812d8:	f023 0301 	bic.w	r3, r3, #1
   812dc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   812e0:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   812e2:	3714      	adds	r7, #20
   812e4:	46bd      	mov	sp, r7
   812e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   812ea:	4770      	bx	lr
   812ec:	400e0600 	.word	0x400e0600
   812f0:	ffc8c086 	.word	0xffc8c086
   812f4:	00373f09 	.word	0x00373f09

000812f8 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   812f8:	b480      	push	{r7}
   812fa:	b083      	sub	sp, #12
   812fc:	af00      	add	r7, sp, #0
   812fe:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81300:	687b      	ldr	r3, [r7, #4]
   81302:	2b00      	cmp	r3, #0
   81304:	d008      	beq.n	81318 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81306:	4912      	ldr	r1, [pc, #72]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   81308:	4b11      	ldr	r3, [pc, #68]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   8130a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8130c:	4a11      	ldr	r2, [pc, #68]	; (81354 <pmc_switch_mainck_to_xtal+0x5c>)
   8130e:	401a      	ands	r2, r3
   81310:	4b11      	ldr	r3, [pc, #68]	; (81358 <pmc_switch_mainck_to_xtal+0x60>)
   81312:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81314:	620b      	str	r3, [r1, #32]
   81316:	e016      	b.n	81346 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81318:	490d      	ldr	r1, [pc, #52]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   8131a:	4b0d      	ldr	r3, [pc, #52]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   8131c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8131e:	4a0f      	ldr	r2, [pc, #60]	; (8135c <pmc_switch_mainck_to_xtal+0x64>)
   81320:	401a      	ands	r2, r3
   81322:	4b0f      	ldr	r3, [pc, #60]	; (81360 <pmc_switch_mainck_to_xtal+0x68>)
   81324:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81326:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81328:	bf00      	nop
   8132a:	4b09      	ldr	r3, [pc, #36]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   8132c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8132e:	f003 0301 	and.w	r3, r3, #1
   81332:	2b00      	cmp	r3, #0
   81334:	d0f9      	beq.n	8132a <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   81336:	4a06      	ldr	r2, [pc, #24]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   81338:	4b05      	ldr	r3, [pc, #20]	; (81350 <pmc_switch_mainck_to_xtal+0x58>)
   8133a:	6a1b      	ldr	r3, [r3, #32]
   8133c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81344:	6213      	str	r3, [r2, #32]
	}
}
   81346:	370c      	adds	r7, #12
   81348:	46bd      	mov	sp, r7
   8134a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8134e:	4770      	bx	lr
   81350:	400e0600 	.word	0x400e0600
   81354:	fec8fffc 	.word	0xfec8fffc
   81358:	01370002 	.word	0x01370002
   8135c:	ffc8c0fc 	.word	0xffc8c0fc
   81360:	00373f01 	.word	0x00373f01

00081364 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81364:	b480      	push	{r7}
   81366:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81368:	4b04      	ldr	r3, [pc, #16]	; (8137c <pmc_osc_is_ready_mainck+0x18>)
   8136a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81370:	4618      	mov	r0, r3
   81372:	46bd      	mov	sp, r7
   81374:	f85d 7b04 	ldr.w	r7, [sp], #4
   81378:	4770      	bx	lr
   8137a:	bf00      	nop
   8137c:	400e0600 	.word	0x400e0600

00081380 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81380:	b480      	push	{r7}
   81382:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81384:	4b03      	ldr	r3, [pc, #12]	; (81394 <pmc_disable_pllack+0x14>)
   81386:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8138a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8138c:	46bd      	mov	sp, r7
   8138e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81392:	4770      	bx	lr
   81394:	400e0600 	.word	0x400e0600

00081398 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81398:	b480      	push	{r7}
   8139a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8139c:	4b04      	ldr	r3, [pc, #16]	; (813b0 <pmc_is_locked_pllack+0x18>)
   8139e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   813a0:	f003 0302 	and.w	r3, r3, #2
}
   813a4:	4618      	mov	r0, r3
   813a6:	46bd      	mov	sp, r7
   813a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   813ac:	4770      	bx	lr
   813ae:	bf00      	nop
   813b0:	400e0600 	.word	0x400e0600

000813b4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   813b4:	b480      	push	{r7}
   813b6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   813b8:	4b04      	ldr	r3, [pc, #16]	; (813cc <pmc_is_locked_upll+0x18>)
   813ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   813bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   813c0:	4618      	mov	r0, r3
   813c2:	46bd      	mov	sp, r7
   813c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   813c8:	4770      	bx	lr
   813ca:	bf00      	nop
   813cc:	400e0600 	.word	0x400e0600

000813d0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   813d0:	b480      	push	{r7}
   813d2:	b083      	sub	sp, #12
   813d4:	af00      	add	r7, sp, #0
   813d6:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   813d8:	687b      	ldr	r3, [r7, #4]
   813da:	2b2c      	cmp	r3, #44	; 0x2c
   813dc:	d901      	bls.n	813e2 <pmc_enable_periph_clk+0x12>
		return 1;
   813de:	2301      	movs	r3, #1
   813e0:	e02f      	b.n	81442 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   813e2:	687b      	ldr	r3, [r7, #4]
   813e4:	2b1f      	cmp	r3, #31
   813e6:	d813      	bhi.n	81410 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   813e8:	4b19      	ldr	r3, [pc, #100]	; (81450 <pmc_enable_periph_clk+0x80>)
   813ea:	699a      	ldr	r2, [r3, #24]
   813ec:	687b      	ldr	r3, [r7, #4]
   813ee:	2101      	movs	r1, #1
   813f0:	fa01 f303 	lsl.w	r3, r1, r3
   813f4:	401a      	ands	r2, r3
   813f6:	687b      	ldr	r3, [r7, #4]
   813f8:	2101      	movs	r1, #1
   813fa:	fa01 f303 	lsl.w	r3, r1, r3
   813fe:	429a      	cmp	r2, r3
   81400:	d01e      	beq.n	81440 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   81402:	4b13      	ldr	r3, [pc, #76]	; (81450 <pmc_enable_periph_clk+0x80>)
   81404:	687a      	ldr	r2, [r7, #4]
   81406:	2101      	movs	r1, #1
   81408:	fa01 f202 	lsl.w	r2, r1, r2
   8140c:	611a      	str	r2, [r3, #16]
   8140e:	e017      	b.n	81440 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   81410:	687b      	ldr	r3, [r7, #4]
   81412:	3b20      	subs	r3, #32
   81414:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81416:	4b0e      	ldr	r3, [pc, #56]	; (81450 <pmc_enable_periph_clk+0x80>)
   81418:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8141c:	687b      	ldr	r3, [r7, #4]
   8141e:	2101      	movs	r1, #1
   81420:	fa01 f303 	lsl.w	r3, r1, r3
   81424:	401a      	ands	r2, r3
   81426:	687b      	ldr	r3, [r7, #4]
   81428:	2101      	movs	r1, #1
   8142a:	fa01 f303 	lsl.w	r3, r1, r3
   8142e:	429a      	cmp	r2, r3
   81430:	d006      	beq.n	81440 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   81432:	4b07      	ldr	r3, [pc, #28]	; (81450 <pmc_enable_periph_clk+0x80>)
   81434:	687a      	ldr	r2, [r7, #4]
   81436:	2101      	movs	r1, #1
   81438:	fa01 f202 	lsl.w	r2, r1, r2
   8143c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81440:	2300      	movs	r3, #0
}
   81442:	4618      	mov	r0, r3
   81444:	370c      	adds	r7, #12
   81446:	46bd      	mov	sp, r7
   81448:	f85d 7b04 	ldr.w	r7, [sp], #4
   8144c:	4770      	bx	lr
   8144e:	bf00      	nop
   81450:	400e0600 	.word	0x400e0600

00081454 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
   81454:	b480      	push	{r7}
   81456:	b083      	sub	sp, #12
   81458:	af00      	add	r7, sp, #0
   8145a:	6078      	str	r0, [r7, #4]
   8145c:	460b      	mov	r3, r1
   8145e:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
   81460:	887b      	ldrh	r3, [r7, #2]
   81462:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   81466:	687b      	ldr	r3, [r7, #4]
   81468:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8146a:	2300      	movs	r3, #0
}
   8146c:	4618      	mov	r0, r3
   8146e:	370c      	adds	r7, #12
   81470:	46bd      	mov	sp, r7
   81472:	f85d 7b04 	ldr.w	r7, [sp], #4
   81476:	4770      	bx	lr

00081478 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81478:	b480      	push	{r7}
   8147a:	b085      	sub	sp, #20
   8147c:	af00      	add	r7, sp, #0
   8147e:	6078      	str	r0, [r7, #4]
   81480:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
   81482:	687b      	ldr	r3, [r7, #4]
   81484:	681b      	ldr	r3, [r3, #0]
   81486:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
   81488:	68fa      	ldr	r2, [r7, #12]
   8148a:	683b      	ldr	r3, [r7, #0]
   8148c:	4313      	orrs	r3, r2
   8148e:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81490:	687b      	ldr	r3, [r7, #4]
   81492:	68fa      	ldr	r2, [r7, #12]
   81494:	601a      	str	r2, [r3, #0]
}
   81496:	3714      	adds	r7, #20
   81498:	46bd      	mov	sp, r7
   8149a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8149e:	4770      	bx	lr

000814a0 <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   814a0:	b480      	push	{r7}
   814a2:	b085      	sub	sp, #20
   814a4:	af00      	add	r7, sp, #0
   814a6:	6078      	str	r0, [r7, #4]
   814a8:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
   814aa:	2300      	movs	r3, #0
   814ac:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
   814ae:	687b      	ldr	r3, [r7, #4]
   814b0:	681b      	ldr	r3, [r3, #0]
   814b2:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
   814b4:	683b      	ldr	r3, [r7, #0]
   814b6:	43db      	mvns	r3, r3
   814b8:	68fa      	ldr	r2, [r7, #12]
   814ba:	4013      	ands	r3, r2
   814bc:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   814be:	687b      	ldr	r3, [r7, #4]
   814c0:	68fa      	ldr	r2, [r7, #12]
   814c2:	601a      	str	r2, [r3, #0]
}
   814c4:	3714      	adds	r7, #20
   814c6:	46bd      	mov	sp, r7
   814c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   814cc:	4770      	bx	lr
   814ce:	bf00      	nop

000814d0 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
   814d0:	b480      	push	{r7}
   814d2:	b083      	sub	sp, #12
   814d4:	af00      	add	r7, sp, #0
   814d6:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
   814d8:	687b      	ldr	r3, [r7, #4]
   814da:	68db      	ldr	r3, [r3, #12]
}
   814dc:	4618      	mov	r0, r3
   814de:	370c      	adds	r7, #12
   814e0:	46bd      	mov	sp, r7
   814e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   814e6:	4770      	bx	lr

000814e8 <rtt_write_alarm_time>:
 *
 * \retval 0 Configuration is done.
 * \retval 1 Parameter error.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
   814e8:	b580      	push	{r7, lr}
   814ea:	b084      	sub	sp, #16
   814ec:	af00      	add	r7, sp, #0
   814ee:	6078      	str	r0, [r7, #4]
   814f0:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	if (ul_alarm_time == 0) {
   814f2:	683b      	ldr	r3, [r7, #0]
   814f4:	2b00      	cmp	r3, #0
   814f6:	d101      	bne.n	814fc <rtt_write_alarm_time+0x14>
		return 1;
   814f8:	2301      	movs	r3, #1
   814fa:	e016      	b.n	8152a <rtt_write_alarm_time+0x42>
	}

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	681b      	ldr	r3, [r3, #0]
   81500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   81504:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
   81506:	480b      	ldr	r0, [pc, #44]	; (81534 <rtt_write_alarm_time+0x4c>)
   81508:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   8150c:	4b0a      	ldr	r3, [pc, #40]	; (81538 <rtt_write_alarm_time+0x50>)
   8150e:	4798      	blx	r3

	/* Alarm time = ALMV + 1 */
	p_rtt->RTT_AR = ul_alarm_time - 1;
   81510:	683b      	ldr	r3, [r7, #0]
   81512:	1e5a      	subs	r2, r3, #1
   81514:	687b      	ldr	r3, [r7, #4]
   81516:	605a      	str	r2, [r3, #4]

	if (flag) {
   81518:	68fb      	ldr	r3, [r7, #12]
   8151a:	2b00      	cmp	r3, #0
   8151c:	d004      	beq.n	81528 <rtt_write_alarm_time+0x40>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
   8151e:	4805      	ldr	r0, [pc, #20]	; (81534 <rtt_write_alarm_time+0x4c>)
   81520:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   81524:	4b05      	ldr	r3, [pc, #20]	; (8153c <rtt_write_alarm_time+0x54>)
   81526:	4798      	blx	r3
	}

	return 0;
   81528:	2300      	movs	r3, #0
}
   8152a:	4618      	mov	r0, r3
   8152c:	3710      	adds	r7, #16
   8152e:	46bd      	mov	sp, r7
   81530:	bd80      	pop	{r7, pc}
   81532:	bf00      	nop
   81534:	400e1a30 	.word	0x400e1a30
   81538:	000814a1 	.word	0x000814a1
   8153c:	00081479 	.word	0x00081479

00081540 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81540:	b480      	push	{r7}
   81542:	b083      	sub	sp, #12
   81544:	af00      	add	r7, sp, #0
   81546:	6078      	str	r0, [r7, #4]
   81548:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8154a:	687b      	ldr	r3, [r7, #4]
   8154c:	683a      	ldr	r2, [r7, #0]
   8154e:	60da      	str	r2, [r3, #12]
}
   81550:	370c      	adds	r7, #12
   81552:	46bd      	mov	sp, r7
   81554:	f85d 7b04 	ldr.w	r7, [sp], #4
   81558:	4770      	bx	lr
   8155a:	bf00      	nop

0008155c <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   8155c:	b480      	push	{r7}
   8155e:	b083      	sub	sp, #12
   81560:	af00      	add	r7, sp, #0
   81562:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   81564:	687b      	ldr	r3, [r7, #4]
   81566:	691b      	ldr	r3, [r3, #16]
}
   81568:	4618      	mov	r0, r3
   8156a:	370c      	adds	r7, #12
   8156c:	46bd      	mov	sp, r7
   8156e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81572:	4770      	bx	lr

00081574 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   81574:	b480      	push	{r7}
   81576:	b083      	sub	sp, #12
   81578:	af00      	add	r7, sp, #0
   8157a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8157c:	687b      	ldr	r3, [r7, #4]
   8157e:	695b      	ldr	r3, [r3, #20]
}
   81580:	4618      	mov	r0, r3
   81582:	370c      	adds	r7, #12
   81584:	46bd      	mov	sp, r7
   81586:	f85d 7b04 	ldr.w	r7, [sp], #4
   8158a:	4770      	bx	lr

0008158c <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   8158c:	b480      	push	{r7}
   8158e:	b085      	sub	sp, #20
   81590:	af00      	add	r7, sp, #0
   81592:	6078      	str	r0, [r7, #4]
   81594:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   81596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8159a:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8159c:	e006      	b.n	815ac <usart_putchar+0x20>
		if (!timeout--) {
   8159e:	68fb      	ldr	r3, [r7, #12]
   815a0:	1e5a      	subs	r2, r3, #1
   815a2:	60fa      	str	r2, [r7, #12]
   815a4:	2b00      	cmp	r3, #0
   815a6:	d101      	bne.n	815ac <usart_putchar+0x20>
			return 1;
   815a8:	2301      	movs	r3, #1
   815aa:	e00b      	b.n	815c4 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   815ac:	687b      	ldr	r3, [r7, #4]
   815ae:	695b      	ldr	r3, [r3, #20]
   815b0:	f003 0302 	and.w	r3, r3, #2
   815b4:	2b00      	cmp	r3, #0
   815b6:	d0f2      	beq.n	8159e <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   815b8:	683b      	ldr	r3, [r7, #0]
   815ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
   815be:	687b      	ldr	r3, [r7, #4]
   815c0:	61da      	str	r2, [r3, #28]

	return 0;
   815c2:	2300      	movs	r3, #0
}
   815c4:	4618      	mov	r0, r3
   815c6:	3714      	adds	r7, #20
   815c8:	46bd      	mov	sp, r7
   815ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   815ce:	4770      	bx	lr

000815d0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   815d0:	b480      	push	{r7}
   815d2:	b085      	sub	sp, #20
   815d4:	af00      	add	r7, sp, #0
   815d6:	6078      	str	r0, [r7, #4]
   815d8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   815da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   815de:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815e0:	e006      	b.n	815f0 <usart_getchar+0x20>
		if (!timeout--) {
   815e2:	68fb      	ldr	r3, [r7, #12]
   815e4:	1e5a      	subs	r2, r3, #1
   815e6:	60fa      	str	r2, [r7, #12]
   815e8:	2b00      	cmp	r3, #0
   815ea:	d101      	bne.n	815f0 <usart_getchar+0x20>
			return 1;
   815ec:	2301      	movs	r3, #1
   815ee:	e00c      	b.n	8160a <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815f0:	687b      	ldr	r3, [r7, #4]
   815f2:	695b      	ldr	r3, [r3, #20]
   815f4:	f003 0301 	and.w	r3, r3, #1
   815f8:	2b00      	cmp	r3, #0
   815fa:	d0f2      	beq.n	815e2 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   815fc:	687b      	ldr	r3, [r7, #4]
   815fe:	699b      	ldr	r3, [r3, #24]
   81600:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81604:	683b      	ldr	r3, [r7, #0]
   81606:	601a      	str	r2, [r3, #0]

	return 0;
   81608:	2300      	movs	r3, #0
}
   8160a:	4618      	mov	r0, r3
   8160c:	3714      	adds	r7, #20
   8160e:	46bd      	mov	sp, r7
   81610:	f85d 7b04 	ldr.w	r7, [sp], #4
   81614:	4770      	bx	lr
   81616:	bf00      	nop

00081618 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   81618:	b480      	push	{r7}
   8161a:	b083      	sub	sp, #12
   8161c:	af00      	add	r7, sp, #0
   8161e:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   81620:	687a      	ldr	r2, [r7, #4]
   81622:	4b05      	ldr	r3, [pc, #20]	; (81638 <wdt_restart+0x20>)
   81624:	429a      	cmp	r2, r3
   81626:	d102      	bne.n	8162e <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   81628:	687b      	ldr	r3, [r7, #4]
   8162a:	4a04      	ldr	r2, [pc, #16]	; (8163c <wdt_restart+0x24>)
   8162c:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   8162e:	370c      	adds	r7, #12
   81630:	46bd      	mov	sp, r7
   81632:	f85d 7b04 	ldr.w	r7, [sp], #4
   81636:	4770      	bx	lr
   81638:	400e1a50 	.word	0x400e1a50
   8163c:	a5000001 	.word	0xa5000001

00081640 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   81640:	b480      	push	{r7}
   81642:	b083      	sub	sp, #12
   81644:	af00      	add	r7, sp, #0
   81646:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   81648:	687b      	ldr	r3, [r7, #4]
   8164a:	689b      	ldr	r3, [r3, #8]
}
   8164c:	4618      	mov	r0, r3
   8164e:	370c      	adds	r7, #12
   81650:	46bd      	mov	sp, r7
   81652:	f85d 7b04 	ldr.w	r7, [sp], #4
   81656:	4770      	bx	lr

00081658 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81658:	b480      	push	{r7}
   8165a:	af00      	add	r7, sp, #0
	while (1) {
	}
   8165c:	e7fe      	b.n	8165c <Dummy_Handler+0x4>
   8165e:	bf00      	nop

00081660 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81660:	b580      	push	{r7, lr}
   81662:	b082      	sub	sp, #8
   81664:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   81666:	4b1e      	ldr	r3, [pc, #120]	; (816e0 <Reset_Handler+0x80>)
   81668:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8166a:	4b1e      	ldr	r3, [pc, #120]	; (816e4 <Reset_Handler+0x84>)
   8166c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8166e:	687a      	ldr	r2, [r7, #4]
   81670:	683b      	ldr	r3, [r7, #0]
   81672:	429a      	cmp	r2, r3
   81674:	d00c      	beq.n	81690 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   81676:	e007      	b.n	81688 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   81678:	683b      	ldr	r3, [r7, #0]
   8167a:	1d1a      	adds	r2, r3, #4
   8167c:	603a      	str	r2, [r7, #0]
   8167e:	687a      	ldr	r2, [r7, #4]
   81680:	1d11      	adds	r1, r2, #4
   81682:	6079      	str	r1, [r7, #4]
   81684:	6812      	ldr	r2, [r2, #0]
   81686:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81688:	683a      	ldr	r2, [r7, #0]
   8168a:	4b17      	ldr	r3, [pc, #92]	; (816e8 <Reset_Handler+0x88>)
   8168c:	429a      	cmp	r2, r3
   8168e:	d3f3      	bcc.n	81678 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81690:	4b16      	ldr	r3, [pc, #88]	; (816ec <Reset_Handler+0x8c>)
   81692:	603b      	str	r3, [r7, #0]
   81694:	e004      	b.n	816a0 <Reset_Handler+0x40>
		*pDest++ = 0;
   81696:	683b      	ldr	r3, [r7, #0]
   81698:	1d1a      	adds	r2, r3, #4
   8169a:	603a      	str	r2, [r7, #0]
   8169c:	2200      	movs	r2, #0
   8169e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   816a0:	683a      	ldr	r2, [r7, #0]
   816a2:	4b13      	ldr	r3, [pc, #76]	; (816f0 <Reset_Handler+0x90>)
   816a4:	429a      	cmp	r2, r3
   816a6:	d3f6      	bcc.n	81696 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   816a8:	4b12      	ldr	r3, [pc, #72]	; (816f4 <Reset_Handler+0x94>)
   816aa:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   816ac:	4a12      	ldr	r2, [pc, #72]	; (816f8 <Reset_Handler+0x98>)
   816ae:	687b      	ldr	r3, [r7, #4]
   816b0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   816b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   816b8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   816ba:	687b      	ldr	r3, [r7, #4]
   816bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   816c0:	d309      	bcc.n	816d6 <Reset_Handler+0x76>
   816c2:	687a      	ldr	r2, [r7, #4]
   816c4:	4b0d      	ldr	r3, [pc, #52]	; (816fc <Reset_Handler+0x9c>)
   816c6:	429a      	cmp	r2, r3
   816c8:	d805      	bhi.n	816d6 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   816ca:	4b0b      	ldr	r3, [pc, #44]	; (816f8 <Reset_Handler+0x98>)
   816cc:	4a0a      	ldr	r2, [pc, #40]	; (816f8 <Reset_Handler+0x98>)
   816ce:	6892      	ldr	r2, [r2, #8]
   816d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   816d4:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   816d6:	4b0a      	ldr	r3, [pc, #40]	; (81700 <Reset_Handler+0xa0>)
   816d8:	4798      	blx	r3

	/* Branch to main function */
	main();
   816da:	4b0a      	ldr	r3, [pc, #40]	; (81704 <Reset_Handler+0xa4>)
   816dc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   816de:	e7fe      	b.n	816de <Reset_Handler+0x7e>
   816e0:	00082cc0 	.word	0x00082cc0
   816e4:	20070000 	.word	0x20070000
   816e8:	20070438 	.word	0x20070438
   816ec:	20070438 	.word	0x20070438
   816f0:	200705cc 	.word	0x200705cc
   816f4:	00080000 	.word	0x00080000
   816f8:	e000ed00 	.word	0xe000ed00
   816fc:	200fffff 	.word	0x200fffff
   81700:	0008296d 	.word	0x0008296d
   81704:	000826f1 	.word	0x000826f1

00081708 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81708:	b480      	push	{r7}
   8170a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8170c:	4b56      	ldr	r3, [pc, #344]	; (81868 <SystemCoreClockUpdate+0x160>)
   8170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81710:	f003 0303 	and.w	r3, r3, #3
   81714:	2b03      	cmp	r3, #3
   81716:	f200 808a 	bhi.w	8182e <SystemCoreClockUpdate+0x126>
   8171a:	a101      	add	r1, pc, #4	; (adr r1, 81720 <SystemCoreClockUpdate+0x18>)
   8171c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   81720:	00081731 	.word	0x00081731
   81724:	00081751 	.word	0x00081751
   81728:	000817a1 	.word	0x000817a1
   8172c:	000817a1 	.word	0x000817a1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81730:	4b4e      	ldr	r3, [pc, #312]	; (8186c <SystemCoreClockUpdate+0x164>)
   81732:	695b      	ldr	r3, [r3, #20]
   81734:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81738:	2b00      	cmp	r3, #0
   8173a:	d004      	beq.n	81746 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8173c:	4b4c      	ldr	r3, [pc, #304]	; (81870 <SystemCoreClockUpdate+0x168>)
   8173e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81742:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   81744:	e073      	b.n	8182e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81746:	4b4a      	ldr	r3, [pc, #296]	; (81870 <SystemCoreClockUpdate+0x168>)
   81748:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8174c:	601a      	str	r2, [r3, #0]
		}
		break;
   8174e:	e06e      	b.n	8182e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81750:	4b45      	ldr	r3, [pc, #276]	; (81868 <SystemCoreClockUpdate+0x160>)
   81752:	6a1b      	ldr	r3, [r3, #32]
   81754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81758:	2b00      	cmp	r3, #0
   8175a:	d003      	beq.n	81764 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8175c:	4b44      	ldr	r3, [pc, #272]	; (81870 <SystemCoreClockUpdate+0x168>)
   8175e:	4a45      	ldr	r2, [pc, #276]	; (81874 <SystemCoreClockUpdate+0x16c>)
   81760:	601a      	str	r2, [r3, #0]
   81762:	e01c      	b.n	8179e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81764:	4b42      	ldr	r3, [pc, #264]	; (81870 <SystemCoreClockUpdate+0x168>)
   81766:	4a44      	ldr	r2, [pc, #272]	; (81878 <SystemCoreClockUpdate+0x170>)
   81768:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8176a:	4b3f      	ldr	r3, [pc, #252]	; (81868 <SystemCoreClockUpdate+0x160>)
   8176c:	6a1b      	ldr	r3, [r3, #32]
   8176e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81772:	2b10      	cmp	r3, #16
   81774:	d004      	beq.n	81780 <SystemCoreClockUpdate+0x78>
   81776:	2b20      	cmp	r3, #32
   81778:	d008      	beq.n	8178c <SystemCoreClockUpdate+0x84>
   8177a:	2b00      	cmp	r3, #0
   8177c:	d00e      	beq.n	8179c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8177e:	e00e      	b.n	8179e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81780:	4b3b      	ldr	r3, [pc, #236]	; (81870 <SystemCoreClockUpdate+0x168>)
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	005a      	lsls	r2, r3, #1
   81786:	4b3a      	ldr	r3, [pc, #232]	; (81870 <SystemCoreClockUpdate+0x168>)
   81788:	601a      	str	r2, [r3, #0]
				break;
   8178a:	e008      	b.n	8179e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8178c:	4b38      	ldr	r3, [pc, #224]	; (81870 <SystemCoreClockUpdate+0x168>)
   8178e:	681a      	ldr	r2, [r3, #0]
   81790:	4613      	mov	r3, r2
   81792:	005b      	lsls	r3, r3, #1
   81794:	441a      	add	r2, r3
   81796:	4b36      	ldr	r3, [pc, #216]	; (81870 <SystemCoreClockUpdate+0x168>)
   81798:	601a      	str	r2, [r3, #0]
				break;
   8179a:	e000      	b.n	8179e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8179c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8179e:	e046      	b.n	8182e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   817a0:	4b31      	ldr	r3, [pc, #196]	; (81868 <SystemCoreClockUpdate+0x160>)
   817a2:	6a1b      	ldr	r3, [r3, #32]
   817a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   817a8:	2b00      	cmp	r3, #0
   817aa:	d003      	beq.n	817b4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   817ac:	4b30      	ldr	r3, [pc, #192]	; (81870 <SystemCoreClockUpdate+0x168>)
   817ae:	4a31      	ldr	r2, [pc, #196]	; (81874 <SystemCoreClockUpdate+0x16c>)
   817b0:	601a      	str	r2, [r3, #0]
   817b2:	e01c      	b.n	817ee <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   817b4:	4b2e      	ldr	r3, [pc, #184]	; (81870 <SystemCoreClockUpdate+0x168>)
   817b6:	4a30      	ldr	r2, [pc, #192]	; (81878 <SystemCoreClockUpdate+0x170>)
   817b8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   817ba:	4b2b      	ldr	r3, [pc, #172]	; (81868 <SystemCoreClockUpdate+0x160>)
   817bc:	6a1b      	ldr	r3, [r3, #32]
   817be:	f003 0370 	and.w	r3, r3, #112	; 0x70
   817c2:	2b10      	cmp	r3, #16
   817c4:	d004      	beq.n	817d0 <SystemCoreClockUpdate+0xc8>
   817c6:	2b20      	cmp	r3, #32
   817c8:	d008      	beq.n	817dc <SystemCoreClockUpdate+0xd4>
   817ca:	2b00      	cmp	r3, #0
   817cc:	d00e      	beq.n	817ec <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   817ce:	e00e      	b.n	817ee <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   817d0:	4b27      	ldr	r3, [pc, #156]	; (81870 <SystemCoreClockUpdate+0x168>)
   817d2:	681b      	ldr	r3, [r3, #0]
   817d4:	005a      	lsls	r2, r3, #1
   817d6:	4b26      	ldr	r3, [pc, #152]	; (81870 <SystemCoreClockUpdate+0x168>)
   817d8:	601a      	str	r2, [r3, #0]
				break;
   817da:	e008      	b.n	817ee <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   817dc:	4b24      	ldr	r3, [pc, #144]	; (81870 <SystemCoreClockUpdate+0x168>)
   817de:	681a      	ldr	r2, [r3, #0]
   817e0:	4613      	mov	r3, r2
   817e2:	005b      	lsls	r3, r3, #1
   817e4:	441a      	add	r2, r3
   817e6:	4b22      	ldr	r3, [pc, #136]	; (81870 <SystemCoreClockUpdate+0x168>)
   817e8:	601a      	str	r2, [r3, #0]
				break;
   817ea:	e000      	b.n	817ee <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   817ec:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   817ee:	4b1e      	ldr	r3, [pc, #120]	; (81868 <SystemCoreClockUpdate+0x160>)
   817f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   817f2:	f003 0303 	and.w	r3, r3, #3
   817f6:	2b02      	cmp	r3, #2
   817f8:	d115      	bne.n	81826 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   817fa:	4b1b      	ldr	r3, [pc, #108]	; (81868 <SystemCoreClockUpdate+0x160>)
   817fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   817fe:	4b1f      	ldr	r3, [pc, #124]	; (8187c <SystemCoreClockUpdate+0x174>)
   81800:	4013      	ands	r3, r2
   81802:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   81804:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81806:	4a1a      	ldr	r2, [pc, #104]	; (81870 <SystemCoreClockUpdate+0x168>)
   81808:	6812      	ldr	r2, [r2, #0]
   8180a:	fb02 f203 	mul.w	r2, r2, r3
   8180e:	4b18      	ldr	r3, [pc, #96]	; (81870 <SystemCoreClockUpdate+0x168>)
   81810:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81812:	4b17      	ldr	r3, [pc, #92]	; (81870 <SystemCoreClockUpdate+0x168>)
   81814:	681a      	ldr	r2, [r3, #0]
   81816:	4b14      	ldr	r3, [pc, #80]	; (81868 <SystemCoreClockUpdate+0x160>)
   81818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8181a:	b2db      	uxtb	r3, r3
   8181c:	fbb2 f2f3 	udiv	r2, r2, r3
   81820:	4b13      	ldr	r3, [pc, #76]	; (81870 <SystemCoreClockUpdate+0x168>)
   81822:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   81824:	e002      	b.n	8182c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81826:	4b12      	ldr	r3, [pc, #72]	; (81870 <SystemCoreClockUpdate+0x168>)
   81828:	4a15      	ldr	r2, [pc, #84]	; (81880 <SystemCoreClockUpdate+0x178>)
   8182a:	601a      	str	r2, [r3, #0]
		}
		break;
   8182c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8182e:	4b0e      	ldr	r3, [pc, #56]	; (81868 <SystemCoreClockUpdate+0x160>)
   81830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81832:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81836:	2b70      	cmp	r3, #112	; 0x70
   81838:	d108      	bne.n	8184c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8183a:	4b0d      	ldr	r3, [pc, #52]	; (81870 <SystemCoreClockUpdate+0x168>)
   8183c:	681a      	ldr	r2, [r3, #0]
   8183e:	4b11      	ldr	r3, [pc, #68]	; (81884 <SystemCoreClockUpdate+0x17c>)
   81840:	fba3 1302 	umull	r1, r3, r3, r2
   81844:	085a      	lsrs	r2, r3, #1
   81846:	4b0a      	ldr	r3, [pc, #40]	; (81870 <SystemCoreClockUpdate+0x168>)
   81848:	601a      	str	r2, [r3, #0]
   8184a:	e009      	b.n	81860 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8184c:	4b08      	ldr	r3, [pc, #32]	; (81870 <SystemCoreClockUpdate+0x168>)
   8184e:	681a      	ldr	r2, [r3, #0]
   81850:	4b05      	ldr	r3, [pc, #20]	; (81868 <SystemCoreClockUpdate+0x160>)
   81852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81854:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81858:	091b      	lsrs	r3, r3, #4
   8185a:	40da      	lsrs	r2, r3
   8185c:	4b04      	ldr	r3, [pc, #16]	; (81870 <SystemCoreClockUpdate+0x168>)
   8185e:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   81860:	46bd      	mov	sp, r7
   81862:	f85d 7b04 	ldr.w	r7, [sp], #4
   81866:	4770      	bx	lr
   81868:	400e0600 	.word	0x400e0600
   8186c:	400e1a10 	.word	0x400e1a10
   81870:	20070000 	.word	0x20070000
   81874:	00b71b00 	.word	0x00b71b00
   81878:	003d0900 	.word	0x003d0900
   8187c:	07ff0000 	.word	0x07ff0000
   81880:	0e4e1c00 	.word	0x0e4e1c00
   81884:	aaaaaaab 	.word	0xaaaaaaab

00081888 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   81888:	b480      	push	{r7}
   8188a:	b083      	sub	sp, #12
   8188c:	af00      	add	r7, sp, #0
   8188e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81890:	687a      	ldr	r2, [r7, #4]
   81892:	4b1f      	ldr	r3, [pc, #124]	; (81910 <system_init_flash+0x88>)
   81894:	429a      	cmp	r2, r3
   81896:	d806      	bhi.n	818a6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81898:	4b1e      	ldr	r3, [pc, #120]	; (81914 <system_init_flash+0x8c>)
   8189a:	2200      	movs	r2, #0
   8189c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8189e:	4b1e      	ldr	r3, [pc, #120]	; (81918 <system_init_flash+0x90>)
   818a0:	2200      	movs	r2, #0
   818a2:	601a      	str	r2, [r3, #0]
   818a4:	e02e      	b.n	81904 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   818a6:	687a      	ldr	r2, [r7, #4]
   818a8:	4b1c      	ldr	r3, [pc, #112]	; (8191c <system_init_flash+0x94>)
   818aa:	429a      	cmp	r2, r3
   818ac:	d808      	bhi.n	818c0 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   818ae:	4b19      	ldr	r3, [pc, #100]	; (81914 <system_init_flash+0x8c>)
   818b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   818b4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   818b6:	4b18      	ldr	r3, [pc, #96]	; (81918 <system_init_flash+0x90>)
   818b8:	f44f 7280 	mov.w	r2, #256	; 0x100
   818bc:	601a      	str	r2, [r3, #0]
   818be:	e021      	b.n	81904 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   818c0:	687a      	ldr	r2, [r7, #4]
   818c2:	4b17      	ldr	r3, [pc, #92]	; (81920 <system_init_flash+0x98>)
   818c4:	429a      	cmp	r2, r3
   818c6:	d808      	bhi.n	818da <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   818c8:	4b12      	ldr	r3, [pc, #72]	; (81914 <system_init_flash+0x8c>)
   818ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   818ce:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   818d0:	4b11      	ldr	r3, [pc, #68]	; (81918 <system_init_flash+0x90>)
   818d2:	f44f 7200 	mov.w	r2, #512	; 0x200
   818d6:	601a      	str	r2, [r3, #0]
   818d8:	e014      	b.n	81904 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   818da:	687a      	ldr	r2, [r7, #4]
   818dc:	4b11      	ldr	r3, [pc, #68]	; (81924 <system_init_flash+0x9c>)
   818de:	429a      	cmp	r2, r3
   818e0:	d808      	bhi.n	818f4 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   818e2:	4b0c      	ldr	r3, [pc, #48]	; (81914 <system_init_flash+0x8c>)
   818e4:	f44f 7240 	mov.w	r2, #768	; 0x300
   818e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   818ea:	4b0b      	ldr	r3, [pc, #44]	; (81918 <system_init_flash+0x90>)
   818ec:	f44f 7240 	mov.w	r2, #768	; 0x300
   818f0:	601a      	str	r2, [r3, #0]
   818f2:	e007      	b.n	81904 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   818f4:	4b07      	ldr	r3, [pc, #28]	; (81914 <system_init_flash+0x8c>)
   818f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   818fa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   818fc:	4b06      	ldr	r3, [pc, #24]	; (81918 <system_init_flash+0x90>)
   818fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81902:	601a      	str	r2, [r3, #0]
	}
}
   81904:	370c      	adds	r7, #12
   81906:	46bd      	mov	sp, r7
   81908:	f85d 7b04 	ldr.w	r7, [sp], #4
   8190c:	4770      	bx	lr
   8190e:	bf00      	nop
   81910:	0157529f 	.word	0x0157529f
   81914:	400e0a00 	.word	0x400e0a00
   81918:	400e0c00 	.word	0x400e0c00
   8191c:	0206cc7f 	.word	0x0206cc7f
   81920:	0328b73f 	.word	0x0328b73f
   81924:	04a62f7f 	.word	0x04a62f7f

00081928 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   81928:	b480      	push	{r7}
   8192a:	b085      	sub	sp, #20
   8192c:	af00      	add	r7, sp, #0
   8192e:	6078      	str	r0, [r7, #4]
   81930:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   81932:	687b      	ldr	r3, [r7, #4]
   81934:	685b      	ldr	r3, [r3, #4]
   81936:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   81938:	683b      	ldr	r3, [r7, #0]
   8193a:	68fa      	ldr	r2, [r7, #12]
   8193c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8193e:	68fb      	ldr	r3, [r7, #12]
   81940:	689a      	ldr	r2, [r3, #8]
   81942:	683b      	ldr	r3, [r7, #0]
   81944:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   81946:	68fb      	ldr	r3, [r7, #12]
   81948:	689b      	ldr	r3, [r3, #8]
   8194a:	683a      	ldr	r2, [r7, #0]
   8194c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8194e:	68fb      	ldr	r3, [r7, #12]
   81950:	683a      	ldr	r2, [r7, #0]
   81952:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81954:	683b      	ldr	r3, [r7, #0]
   81956:	687a      	ldr	r2, [r7, #4]
   81958:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   8195a:	687b      	ldr	r3, [r7, #4]
   8195c:	681b      	ldr	r3, [r3, #0]
   8195e:	1c5a      	adds	r2, r3, #1
   81960:	687b      	ldr	r3, [r7, #4]
   81962:	601a      	str	r2, [r3, #0]
}
   81964:	3714      	adds	r7, #20
   81966:	46bd      	mov	sp, r7
   81968:	f85d 7b04 	ldr.w	r7, [sp], #4
   8196c:	4770      	bx	lr
   8196e:	bf00      	nop

00081970 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   81970:	b480      	push	{r7}
   81972:	b085      	sub	sp, #20
   81974:	af00      	add	r7, sp, #0
   81976:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   81978:	687b      	ldr	r3, [r7, #4]
   8197a:	691b      	ldr	r3, [r3, #16]
   8197c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8197e:	687b      	ldr	r3, [r7, #4]
   81980:	685b      	ldr	r3, [r3, #4]
   81982:	687a      	ldr	r2, [r7, #4]
   81984:	6892      	ldr	r2, [r2, #8]
   81986:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81988:	687b      	ldr	r3, [r7, #4]
   8198a:	689b      	ldr	r3, [r3, #8]
   8198c:	687a      	ldr	r2, [r7, #4]
   8198e:	6852      	ldr	r2, [r2, #4]
   81990:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81992:	68fb      	ldr	r3, [r7, #12]
   81994:	685a      	ldr	r2, [r3, #4]
   81996:	687b      	ldr	r3, [r7, #4]
   81998:	429a      	cmp	r2, r3
   8199a:	d103      	bne.n	819a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8199c:	687b      	ldr	r3, [r7, #4]
   8199e:	689a      	ldr	r2, [r3, #8]
   819a0:	68fb      	ldr	r3, [r7, #12]
   819a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   819a4:	687b      	ldr	r3, [r7, #4]
   819a6:	2200      	movs	r2, #0
   819a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   819aa:	68fb      	ldr	r3, [r7, #12]
   819ac:	681b      	ldr	r3, [r3, #0]
   819ae:	1e5a      	subs	r2, r3, #1
   819b0:	68fb      	ldr	r3, [r7, #12]
   819b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   819b4:	68fb      	ldr	r3, [r7, #12]
   819b6:	681b      	ldr	r3, [r3, #0]
}
   819b8:	4618      	mov	r0, r3
   819ba:	3714      	adds	r7, #20
   819bc:	46bd      	mov	sp, r7
   819be:	f85d 7b04 	ldr.w	r7, [sp], #4
   819c2:	4770      	bx	lr

000819c4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   819c4:	4b07      	ldr	r3, [pc, #28]	; (819e4 <pxCurrentTCBConst2>)
   819c6:	6819      	ldr	r1, [r3, #0]
   819c8:	6808      	ldr	r0, [r1, #0]
   819ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   819ce:	f380 8809 	msr	PSP, r0
   819d2:	f3bf 8f6f 	isb	sy
   819d6:	f04f 0000 	mov.w	r0, #0
   819da:	f380 8811 	msr	BASEPRI, r0
   819de:	f04e 0e0d 	orr.w	lr, lr, #13
   819e2:	4770      	bx	lr

000819e4 <pxCurrentTCBConst2>:
   819e4:	200704cc 	.word	0x200704cc

000819e8 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   819e8:	b580      	push	{r7, lr}
   819ea:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   819ec:	4b0c      	ldr	r3, [pc, #48]	; (81a20 <vPortEnterCritical+0x38>)
   819ee:	4798      	blx	r3
	uxCriticalNesting++;
   819f0:	4b0c      	ldr	r3, [pc, #48]	; (81a24 <vPortEnterCritical+0x3c>)
   819f2:	681b      	ldr	r3, [r3, #0]
   819f4:	1c5a      	adds	r2, r3, #1
   819f6:	4b0b      	ldr	r3, [pc, #44]	; (81a24 <vPortEnterCritical+0x3c>)
   819f8:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   819fa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   819fe:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   81a02:	4b08      	ldr	r3, [pc, #32]	; (81a24 <vPortEnterCritical+0x3c>)
   81a04:	681b      	ldr	r3, [r3, #0]
   81a06:	2b01      	cmp	r3, #1
   81a08:	d108      	bne.n	81a1c <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81a0a:	4b07      	ldr	r3, [pc, #28]	; (81a28 <vPortEnterCritical+0x40>)
   81a0c:	681b      	ldr	r3, [r3, #0]
   81a0e:	f003 031f 	and.w	r3, r3, #31
   81a12:	2b00      	cmp	r3, #0
   81a14:	d002      	beq.n	81a1c <vPortEnterCritical+0x34>
   81a16:	4b02      	ldr	r3, [pc, #8]	; (81a20 <vPortEnterCritical+0x38>)
   81a18:	4798      	blx	r3
   81a1a:	e7fe      	b.n	81a1a <vPortEnterCritical+0x32>
	}
}
   81a1c:	bd80      	pop	{r7, pc}
   81a1e:	bf00      	nop
   81a20:	00081a65 	.word	0x00081a65
   81a24:	20070004 	.word	0x20070004
   81a28:	e000ed04 	.word	0xe000ed04

00081a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81a2c:	b580      	push	{r7, lr}
   81a2e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   81a30:	4b09      	ldr	r3, [pc, #36]	; (81a58 <vPortExitCritical+0x2c>)
   81a32:	681b      	ldr	r3, [r3, #0]
   81a34:	2b00      	cmp	r3, #0
   81a36:	d102      	bne.n	81a3e <vPortExitCritical+0x12>
   81a38:	4b08      	ldr	r3, [pc, #32]	; (81a5c <vPortExitCritical+0x30>)
   81a3a:	4798      	blx	r3
   81a3c:	e7fe      	b.n	81a3c <vPortExitCritical+0x10>
	uxCriticalNesting--;
   81a3e:	4b06      	ldr	r3, [pc, #24]	; (81a58 <vPortExitCritical+0x2c>)
   81a40:	681b      	ldr	r3, [r3, #0]
   81a42:	1e5a      	subs	r2, r3, #1
   81a44:	4b04      	ldr	r3, [pc, #16]	; (81a58 <vPortExitCritical+0x2c>)
   81a46:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   81a48:	4b03      	ldr	r3, [pc, #12]	; (81a58 <vPortExitCritical+0x2c>)
   81a4a:	681b      	ldr	r3, [r3, #0]
   81a4c:	2b00      	cmp	r3, #0
   81a4e:	d102      	bne.n	81a56 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   81a50:	2000      	movs	r0, #0
   81a52:	4b03      	ldr	r3, [pc, #12]	; (81a60 <vPortExitCritical+0x34>)
   81a54:	4798      	blx	r3
	}
}
   81a56:	bd80      	pop	{r7, pc}
   81a58:	20070004 	.word	0x20070004
   81a5c:	00081a65 	.word	0x00081a65
   81a60:	00081a79 	.word	0x00081a79

00081a64 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81a64:	f3ef 8011 	mrs	r0, BASEPRI
   81a68:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81a6c:	f381 8811 	msr	BASEPRI, r1
   81a70:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   81a72:	2300      	movs	r3, #0
}
   81a74:	4618      	mov	r0, r3
   81a76:	bf00      	nop

00081a78 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   81a78:	f380 8811 	msr	BASEPRI, r0
   81a7c:	4770      	bx	lr
   81a7e:	bf00      	nop

00081a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   81a80:	f3ef 8009 	mrs	r0, PSP
   81a84:	f3bf 8f6f 	isb	sy
   81a88:	4b0d      	ldr	r3, [pc, #52]	; (81ac0 <pxCurrentTCBConst>)
   81a8a:	681a      	ldr	r2, [r3, #0]
   81a8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81a90:	6010      	str	r0, [r2, #0]
   81a92:	e92d 4008 	stmdb	sp!, {r3, lr}
   81a96:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81a9a:	f380 8811 	msr	BASEPRI, r0
   81a9e:	f000 fa93 	bl	81fc8 <vTaskSwitchContext>
   81aa2:	f04f 0000 	mov.w	r0, #0
   81aa6:	f380 8811 	msr	BASEPRI, r0
   81aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81aae:	6819      	ldr	r1, [r3, #0]
   81ab0:	6808      	ldr	r0, [r1, #0]
   81ab2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81ab6:	f380 8809 	msr	PSP, r0
   81aba:	f3bf 8f6f 	isb	sy
   81abe:	4770      	bx	lr

00081ac0 <pxCurrentTCBConst>:
   81ac0:	200704cc 	.word	0x200704cc

00081ac4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   81ac4:	b580      	push	{r7, lr}
   81ac6:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81ac8:	4b07      	ldr	r3, [pc, #28]	; (81ae8 <SysTick_Handler+0x24>)
   81aca:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   81acc:	4b07      	ldr	r3, [pc, #28]	; (81aec <SysTick_Handler+0x28>)
   81ace:	4798      	blx	r3
   81ad0:	4603      	mov	r3, r0
   81ad2:	2b00      	cmp	r3, #0
   81ad4:	d003      	beq.n	81ade <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81ad6:	4b06      	ldr	r3, [pc, #24]	; (81af0 <SysTick_Handler+0x2c>)
   81ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81adc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81ade:	2000      	movs	r0, #0
   81ae0:	4b04      	ldr	r3, [pc, #16]	; (81af4 <SysTick_Handler+0x30>)
   81ae2:	4798      	blx	r3
}
   81ae4:	bd80      	pop	{r7, pc}
   81ae6:	bf00      	nop
   81ae8:	00081a65 	.word	0x00081a65
   81aec:	00081e4d 	.word	0x00081e4d
   81af0:	e000ed04 	.word	0xe000ed04
   81af4:	00081a79 	.word	0x00081a79

00081af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81af8:	b580      	push	{r7, lr}
   81afa:	b082      	sub	sp, #8
   81afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   81afe:	f3ef 8305 	mrs	r3, IPSR
   81b02:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   81b04:	687b      	ldr	r3, [r7, #4]
   81b06:	2b0f      	cmp	r3, #15
   81b08:	d90c      	bls.n	81b24 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   81b0a:	4a0d      	ldr	r2, [pc, #52]	; (81b40 <vPortValidateInterruptPriority+0x48>)
   81b0c:	687b      	ldr	r3, [r7, #4]
   81b0e:	4413      	add	r3, r2
   81b10:	781b      	ldrb	r3, [r3, #0]
   81b12:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81b14:	4b0b      	ldr	r3, [pc, #44]	; (81b44 <vPortValidateInterruptPriority+0x4c>)
   81b16:	781b      	ldrb	r3, [r3, #0]
   81b18:	78fa      	ldrb	r2, [r7, #3]
   81b1a:	429a      	cmp	r2, r3
   81b1c:	d202      	bcs.n	81b24 <vPortValidateInterruptPriority+0x2c>
   81b1e:	4b0a      	ldr	r3, [pc, #40]	; (81b48 <vPortValidateInterruptPriority+0x50>)
   81b20:	4798      	blx	r3
   81b22:	e7fe      	b.n	81b22 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   81b24:	4b09      	ldr	r3, [pc, #36]	; (81b4c <vPortValidateInterruptPriority+0x54>)
   81b26:	681b      	ldr	r3, [r3, #0]
   81b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81b2c:	4b08      	ldr	r3, [pc, #32]	; (81b50 <vPortValidateInterruptPriority+0x58>)
   81b2e:	681b      	ldr	r3, [r3, #0]
   81b30:	429a      	cmp	r2, r3
   81b32:	d902      	bls.n	81b3a <vPortValidateInterruptPriority+0x42>
   81b34:	4b04      	ldr	r3, [pc, #16]	; (81b48 <vPortValidateInterruptPriority+0x50>)
   81b36:	4798      	blx	r3
   81b38:	e7fe      	b.n	81b38 <vPortValidateInterruptPriority+0x40>
	}
   81b3a:	3708      	adds	r7, #8
   81b3c:	46bd      	mov	sp, r7
   81b3e:	bd80      	pop	{r7, pc}
   81b40:	e000e3f0 	.word	0xe000e3f0
   81b44:	200704c4 	.word	0x200704c4
   81b48:	00081a65 	.word	0x00081a65
   81b4c:	e000ed0c 	.word	0xe000ed0c
   81b50:	200704c8 	.word	0x200704c8

00081b54 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   81b54:	b580      	push	{r7, lr}
   81b56:	b088      	sub	sp, #32
   81b58:	af00      	add	r7, sp, #0
   81b5a:	60f8      	str	r0, [r7, #12]
   81b5c:	60b9      	str	r1, [r7, #8]
   81b5e:	607a      	str	r2, [r7, #4]
   81b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81b62:	68fb      	ldr	r3, [r7, #12]
   81b64:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81b66:	69bb      	ldr	r3, [r7, #24]
   81b68:	2b00      	cmp	r3, #0
   81b6a:	d102      	bne.n	81b72 <xQueueGenericSendFromISR+0x1e>
   81b6c:	4b33      	ldr	r3, [pc, #204]	; (81c3c <xQueueGenericSendFromISR+0xe8>)
   81b6e:	4798      	blx	r3
   81b70:	e7fe      	b.n	81b70 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81b72:	68bb      	ldr	r3, [r7, #8]
   81b74:	2b00      	cmp	r3, #0
   81b76:	d103      	bne.n	81b80 <xQueueGenericSendFromISR+0x2c>
   81b78:	69bb      	ldr	r3, [r7, #24]
   81b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81b7c:	2b00      	cmp	r3, #0
   81b7e:	d101      	bne.n	81b84 <xQueueGenericSendFromISR+0x30>
   81b80:	2301      	movs	r3, #1
   81b82:	e000      	b.n	81b86 <xQueueGenericSendFromISR+0x32>
   81b84:	2300      	movs	r3, #0
   81b86:	2b00      	cmp	r3, #0
   81b88:	d102      	bne.n	81b90 <xQueueGenericSendFromISR+0x3c>
   81b8a:	4b2c      	ldr	r3, [pc, #176]	; (81c3c <xQueueGenericSendFromISR+0xe8>)
   81b8c:	4798      	blx	r3
   81b8e:	e7fe      	b.n	81b8e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81b90:	683b      	ldr	r3, [r7, #0]
   81b92:	2b02      	cmp	r3, #2
   81b94:	d103      	bne.n	81b9e <xQueueGenericSendFromISR+0x4a>
   81b96:	69bb      	ldr	r3, [r7, #24]
   81b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81b9a:	2b01      	cmp	r3, #1
   81b9c:	d101      	bne.n	81ba2 <xQueueGenericSendFromISR+0x4e>
   81b9e:	2301      	movs	r3, #1
   81ba0:	e000      	b.n	81ba4 <xQueueGenericSendFromISR+0x50>
   81ba2:	2300      	movs	r3, #0
   81ba4:	2b00      	cmp	r3, #0
   81ba6:	d102      	bne.n	81bae <xQueueGenericSendFromISR+0x5a>
   81ba8:	4b24      	ldr	r3, [pc, #144]	; (81c3c <xQueueGenericSendFromISR+0xe8>)
   81baa:	4798      	blx	r3
   81bac:	e7fe      	b.n	81bac <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81bae:	4b24      	ldr	r3, [pc, #144]	; (81c40 <xQueueGenericSendFromISR+0xec>)
   81bb0:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81bb2:	4b22      	ldr	r3, [pc, #136]	; (81c3c <xQueueGenericSendFromISR+0xe8>)
   81bb4:	4798      	blx	r3
   81bb6:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81bb8:	69bb      	ldr	r3, [r7, #24]
   81bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81bbc:	69bb      	ldr	r3, [r7, #24]
   81bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81bc0:	429a      	cmp	r2, r3
   81bc2:	d302      	bcc.n	81bca <xQueueGenericSendFromISR+0x76>
   81bc4:	683b      	ldr	r3, [r7, #0]
   81bc6:	2b02      	cmp	r3, #2
   81bc8:	d12d      	bne.n	81c26 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   81bca:	69b8      	ldr	r0, [r7, #24]
   81bcc:	68b9      	ldr	r1, [r7, #8]
   81bce:	683a      	ldr	r2, [r7, #0]
   81bd0:	4b1c      	ldr	r3, [pc, #112]	; (81c44 <xQueueGenericSendFromISR+0xf0>)
   81bd2:	4798      	blx	r3
   81bd4:	4603      	mov	r3, r0
   81bd6:	2b00      	cmp	r3, #0
   81bd8:	d005      	beq.n	81be6 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   81bda:	687b      	ldr	r3, [r7, #4]
   81bdc:	2b00      	cmp	r3, #0
   81bde:	d002      	beq.n	81be6 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   81be0:	687b      	ldr	r3, [r7, #4]
   81be2:	2201      	movs	r2, #1
   81be4:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81be6:	69bb      	ldr	r3, [r7, #24]
   81be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81bea:	f1b3 3fff 	cmp.w	r3, #4294967295
   81bee:	d112      	bne.n	81c16 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81bf0:	69bb      	ldr	r3, [r7, #24]
   81bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81bf4:	2b00      	cmp	r3, #0
   81bf6:	d013      	beq.n	81c20 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81bf8:	69bb      	ldr	r3, [r7, #24]
   81bfa:	3324      	adds	r3, #36	; 0x24
   81bfc:	4618      	mov	r0, r3
   81bfe:	4b12      	ldr	r3, [pc, #72]	; (81c48 <xQueueGenericSendFromISR+0xf4>)
   81c00:	4798      	blx	r3
   81c02:	4603      	mov	r3, r0
   81c04:	2b00      	cmp	r3, #0
   81c06:	d00b      	beq.n	81c20 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   81c08:	687b      	ldr	r3, [r7, #4]
   81c0a:	2b00      	cmp	r3, #0
   81c0c:	d008      	beq.n	81c20 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   81c0e:	687b      	ldr	r3, [r7, #4]
   81c10:	2201      	movs	r2, #1
   81c12:	601a      	str	r2, [r3, #0]
   81c14:	e004      	b.n	81c20 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81c16:	69bb      	ldr	r3, [r7, #24]
   81c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81c1a:	1c5a      	adds	r2, r3, #1
   81c1c:	69bb      	ldr	r3, [r7, #24]
   81c1e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   81c20:	2301      	movs	r3, #1
   81c22:	61fb      	str	r3, [r7, #28]
   81c24:	e001      	b.n	81c2a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81c26:	2300      	movs	r3, #0
   81c28:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81c2a:	6978      	ldr	r0, [r7, #20]
   81c2c:	4b07      	ldr	r3, [pc, #28]	; (81c4c <xQueueGenericSendFromISR+0xf8>)
   81c2e:	4798      	blx	r3

	return xReturn;
   81c30:	69fb      	ldr	r3, [r7, #28]
}
   81c32:	4618      	mov	r0, r3
   81c34:	3720      	adds	r7, #32
   81c36:	46bd      	mov	sp, r7
   81c38:	bd80      	pop	{r7, pc}
   81c3a:	bf00      	nop
   81c3c:	00081a65 	.word	0x00081a65
   81c40:	00081af9 	.word	0x00081af9
   81c44:	00081d19 	.word	0x00081d19
   81c48:	000820c5 	.word	0x000820c5
   81c4c:	00081a79 	.word	0x00081a79

00081c50 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   81c50:	b580      	push	{r7, lr}
   81c52:	b088      	sub	sp, #32
   81c54:	af00      	add	r7, sp, #0
   81c56:	60f8      	str	r0, [r7, #12]
   81c58:	60b9      	str	r1, [r7, #8]
   81c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81c5c:	68fb      	ldr	r3, [r7, #12]
   81c5e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81c60:	69bb      	ldr	r3, [r7, #24]
   81c62:	2b00      	cmp	r3, #0
   81c64:	d102      	bne.n	81c6c <xQueueReceiveFromISR+0x1c>
   81c66:	4b27      	ldr	r3, [pc, #156]	; (81d04 <xQueueReceiveFromISR+0xb4>)
   81c68:	4798      	blx	r3
   81c6a:	e7fe      	b.n	81c6a <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81c6c:	68bb      	ldr	r3, [r7, #8]
   81c6e:	2b00      	cmp	r3, #0
   81c70:	d103      	bne.n	81c7a <xQueueReceiveFromISR+0x2a>
   81c72:	69bb      	ldr	r3, [r7, #24]
   81c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c76:	2b00      	cmp	r3, #0
   81c78:	d101      	bne.n	81c7e <xQueueReceiveFromISR+0x2e>
   81c7a:	2301      	movs	r3, #1
   81c7c:	e000      	b.n	81c80 <xQueueReceiveFromISR+0x30>
   81c7e:	2300      	movs	r3, #0
   81c80:	2b00      	cmp	r3, #0
   81c82:	d102      	bne.n	81c8a <xQueueReceiveFromISR+0x3a>
   81c84:	4b1f      	ldr	r3, [pc, #124]	; (81d04 <xQueueReceiveFromISR+0xb4>)
   81c86:	4798      	blx	r3
   81c88:	e7fe      	b.n	81c88 <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81c8a:	4b1f      	ldr	r3, [pc, #124]	; (81d08 <xQueueReceiveFromISR+0xb8>)
   81c8c:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81c8e:	4b1d      	ldr	r3, [pc, #116]	; (81d04 <xQueueReceiveFromISR+0xb4>)
   81c90:	4798      	blx	r3
   81c92:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81c94:	69bb      	ldr	r3, [r7, #24]
   81c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81c98:	2b00      	cmp	r3, #0
   81c9a:	d028      	beq.n	81cee <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   81c9c:	69b8      	ldr	r0, [r7, #24]
   81c9e:	68b9      	ldr	r1, [r7, #8]
   81ca0:	4b1a      	ldr	r3, [pc, #104]	; (81d0c <xQueueReceiveFromISR+0xbc>)
   81ca2:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   81ca4:	69bb      	ldr	r3, [r7, #24]
   81ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81ca8:	1e5a      	subs	r2, r3, #1
   81caa:	69bb      	ldr	r3, [r7, #24]
   81cac:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   81cae:	69bb      	ldr	r3, [r7, #24]
   81cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
   81cb6:	d112      	bne.n	81cde <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81cb8:	69bb      	ldr	r3, [r7, #24]
   81cba:	691b      	ldr	r3, [r3, #16]
   81cbc:	2b00      	cmp	r3, #0
   81cbe:	d013      	beq.n	81ce8 <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81cc0:	69bb      	ldr	r3, [r7, #24]
   81cc2:	3310      	adds	r3, #16
   81cc4:	4618      	mov	r0, r3
   81cc6:	4b12      	ldr	r3, [pc, #72]	; (81d10 <xQueueReceiveFromISR+0xc0>)
   81cc8:	4798      	blx	r3
   81cca:	4603      	mov	r3, r0
   81ccc:	2b00      	cmp	r3, #0
   81cce:	d00b      	beq.n	81ce8 <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   81cd0:	687b      	ldr	r3, [r7, #4]
   81cd2:	2b00      	cmp	r3, #0
   81cd4:	d008      	beq.n	81ce8 <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81cd6:	687b      	ldr	r3, [r7, #4]
   81cd8:	2201      	movs	r2, #1
   81cda:	601a      	str	r2, [r3, #0]
   81cdc:	e004      	b.n	81ce8 <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   81cde:	69bb      	ldr	r3, [r7, #24]
   81ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81ce2:	1c5a      	adds	r2, r3, #1
   81ce4:	69bb      	ldr	r3, [r7, #24]
   81ce6:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   81ce8:	2301      	movs	r3, #1
   81cea:	61fb      	str	r3, [r7, #28]
   81cec:	e001      	b.n	81cf2 <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   81cee:	2300      	movs	r3, #0
   81cf0:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81cf2:	6978      	ldr	r0, [r7, #20]
   81cf4:	4b07      	ldr	r3, [pc, #28]	; (81d14 <xQueueReceiveFromISR+0xc4>)
   81cf6:	4798      	blx	r3

	return xReturn;
   81cf8:	69fb      	ldr	r3, [r7, #28]
}
   81cfa:	4618      	mov	r0, r3
   81cfc:	3720      	adds	r7, #32
   81cfe:	46bd      	mov	sp, r7
   81d00:	bd80      	pop	{r7, pc}
   81d02:	bf00      	nop
   81d04:	00081a65 	.word	0x00081a65
   81d08:	00081af9 	.word	0x00081af9
   81d0c:	00081dfd 	.word	0x00081dfd
   81d10:	000820c5 	.word	0x000820c5
   81d14:	00081a79 	.word	0x00081a79

00081d18 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   81d18:	b580      	push	{r7, lr}
   81d1a:	b086      	sub	sp, #24
   81d1c:	af00      	add	r7, sp, #0
   81d1e:	60f8      	str	r0, [r7, #12]
   81d20:	60b9      	str	r1, [r7, #8]
   81d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   81d24:	2300      	movs	r3, #0
   81d26:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   81d28:	68fb      	ldr	r3, [r7, #12]
   81d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81d2c:	2b00      	cmp	r3, #0
   81d2e:	d10d      	bne.n	81d4c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d30:	68fb      	ldr	r3, [r7, #12]
   81d32:	681b      	ldr	r3, [r3, #0]
   81d34:	2b00      	cmp	r3, #0
   81d36:	d152      	bne.n	81dde <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81d38:	68fb      	ldr	r3, [r7, #12]
   81d3a:	685b      	ldr	r3, [r3, #4]
   81d3c:	4618      	mov	r0, r3
   81d3e:	4b2d      	ldr	r3, [pc, #180]	; (81df4 <prvCopyDataToQueue+0xdc>)
   81d40:	4798      	blx	r3
   81d42:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   81d44:	68fb      	ldr	r3, [r7, #12]
   81d46:	2200      	movs	r2, #0
   81d48:	605a      	str	r2, [r3, #4]
   81d4a:	e048      	b.n	81dde <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   81d4c:	687b      	ldr	r3, [r7, #4]
   81d4e:	2b00      	cmp	r3, #0
   81d50:	d11a      	bne.n	81d88 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   81d52:	68fb      	ldr	r3, [r7, #12]
   81d54:	689a      	ldr	r2, [r3, #8]
   81d56:	68fb      	ldr	r3, [r7, #12]
   81d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81d5a:	4610      	mov	r0, r2
   81d5c:	68b9      	ldr	r1, [r7, #8]
   81d5e:	461a      	mov	r2, r3
   81d60:	4b25      	ldr	r3, [pc, #148]	; (81df8 <prvCopyDataToQueue+0xe0>)
   81d62:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81d64:	68fb      	ldr	r3, [r7, #12]
   81d66:	689a      	ldr	r2, [r3, #8]
   81d68:	68fb      	ldr	r3, [r7, #12]
   81d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81d6c:	441a      	add	r2, r3
   81d6e:	68fb      	ldr	r3, [r7, #12]
   81d70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81d72:	68fb      	ldr	r3, [r7, #12]
   81d74:	689a      	ldr	r2, [r3, #8]
   81d76:	68fb      	ldr	r3, [r7, #12]
   81d78:	685b      	ldr	r3, [r3, #4]
   81d7a:	429a      	cmp	r2, r3
   81d7c:	d32f      	bcc.n	81dde <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81d7e:	68fb      	ldr	r3, [r7, #12]
   81d80:	681a      	ldr	r2, [r3, #0]
   81d82:	68fb      	ldr	r3, [r7, #12]
   81d84:	609a      	str	r2, [r3, #8]
   81d86:	e02a      	b.n	81dde <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81d88:	68fb      	ldr	r3, [r7, #12]
   81d8a:	68da      	ldr	r2, [r3, #12]
   81d8c:	68fb      	ldr	r3, [r7, #12]
   81d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81d90:	4610      	mov	r0, r2
   81d92:	68b9      	ldr	r1, [r7, #8]
   81d94:	461a      	mov	r2, r3
   81d96:	4b18      	ldr	r3, [pc, #96]	; (81df8 <prvCopyDataToQueue+0xe0>)
   81d98:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   81d9a:	68fb      	ldr	r3, [r7, #12]
   81d9c:	68da      	ldr	r2, [r3, #12]
   81d9e:	68fb      	ldr	r3, [r7, #12]
   81da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81da2:	425b      	negs	r3, r3
   81da4:	441a      	add	r2, r3
   81da6:	68fb      	ldr	r3, [r7, #12]
   81da8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81daa:	68fb      	ldr	r3, [r7, #12]
   81dac:	68da      	ldr	r2, [r3, #12]
   81dae:	68fb      	ldr	r3, [r7, #12]
   81db0:	681b      	ldr	r3, [r3, #0]
   81db2:	429a      	cmp	r2, r3
   81db4:	d207      	bcs.n	81dc6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81db6:	68fb      	ldr	r3, [r7, #12]
   81db8:	685a      	ldr	r2, [r3, #4]
   81dba:	68fb      	ldr	r3, [r7, #12]
   81dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81dbe:	425b      	negs	r3, r3
   81dc0:	441a      	add	r2, r3
   81dc2:	68fb      	ldr	r3, [r7, #12]
   81dc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   81dc6:	687b      	ldr	r3, [r7, #4]
   81dc8:	2b02      	cmp	r3, #2
   81dca:	d108      	bne.n	81dde <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81dcc:	68fb      	ldr	r3, [r7, #12]
   81dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81dd0:	2b00      	cmp	r3, #0
   81dd2:	d004      	beq.n	81dde <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   81dd4:	68fb      	ldr	r3, [r7, #12]
   81dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81dd8:	1e5a      	subs	r2, r3, #1
   81dda:	68fb      	ldr	r3, [r7, #12]
   81ddc:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81dde:	68fb      	ldr	r3, [r7, #12]
   81de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81de2:	1c5a      	adds	r2, r3, #1
   81de4:	68fb      	ldr	r3, [r7, #12]
   81de6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   81de8:	697b      	ldr	r3, [r7, #20]
}
   81dea:	4618      	mov	r0, r3
   81dec:	3718      	adds	r7, #24
   81dee:	46bd      	mov	sp, r7
   81df0:	bd80      	pop	{r7, pc}
   81df2:	bf00      	nop
   81df4:	000821cd 	.word	0x000821cd
   81df8:	00082a25 	.word	0x00082a25

00081dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   81dfc:	b580      	push	{r7, lr}
   81dfe:	b082      	sub	sp, #8
   81e00:	af00      	add	r7, sp, #0
   81e02:	6078      	str	r0, [r7, #4]
   81e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   81e06:	687b      	ldr	r3, [r7, #4]
   81e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81e0a:	2b00      	cmp	r3, #0
   81e0c:	d019      	beq.n	81e42 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   81e0e:	687b      	ldr	r3, [r7, #4]
   81e10:	68da      	ldr	r2, [r3, #12]
   81e12:	687b      	ldr	r3, [r7, #4]
   81e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81e16:	441a      	add	r2, r3
   81e18:	687b      	ldr	r3, [r7, #4]
   81e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   81e1c:	687b      	ldr	r3, [r7, #4]
   81e1e:	68da      	ldr	r2, [r3, #12]
   81e20:	687b      	ldr	r3, [r7, #4]
   81e22:	685b      	ldr	r3, [r3, #4]
   81e24:	429a      	cmp	r2, r3
   81e26:	d303      	bcc.n	81e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   81e28:	687b      	ldr	r3, [r7, #4]
   81e2a:	681a      	ldr	r2, [r3, #0]
   81e2c:	687b      	ldr	r3, [r7, #4]
   81e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   81e30:	687b      	ldr	r3, [r7, #4]
   81e32:	68da      	ldr	r2, [r3, #12]
   81e34:	687b      	ldr	r3, [r7, #4]
   81e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81e38:	6838      	ldr	r0, [r7, #0]
   81e3a:	4611      	mov	r1, r2
   81e3c:	461a      	mov	r2, r3
   81e3e:	4b02      	ldr	r3, [pc, #8]	; (81e48 <prvCopyDataFromQueue+0x4c>)
   81e40:	4798      	blx	r3
	}
}
   81e42:	3708      	adds	r7, #8
   81e44:	46bd      	mov	sp, r7
   81e46:	bd80      	pop	{r7, pc}
   81e48:	00082a25 	.word	0x00082a25

00081e4c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   81e4c:	b580      	push	{r7, lr}
   81e4e:	b086      	sub	sp, #24
   81e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   81e52:	2300      	movs	r3, #0
   81e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81e56:	4b4d      	ldr	r3, [pc, #308]	; (81f8c <xTaskIncrementTick+0x140>)
   81e58:	681b      	ldr	r3, [r3, #0]
   81e5a:	2b00      	cmp	r3, #0
   81e5c:	f040 8086 	bne.w	81f6c <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   81e60:	4b4b      	ldr	r3, [pc, #300]	; (81f90 <xTaskIncrementTick+0x144>)
   81e62:	681b      	ldr	r3, [r3, #0]
   81e64:	1c5a      	adds	r2, r3, #1
   81e66:	4b4a      	ldr	r3, [pc, #296]	; (81f90 <xTaskIncrementTick+0x144>)
   81e68:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   81e6a:	4b49      	ldr	r3, [pc, #292]	; (81f90 <xTaskIncrementTick+0x144>)
   81e6c:	681b      	ldr	r3, [r3, #0]
   81e6e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   81e70:	693b      	ldr	r3, [r7, #16]
   81e72:	2b00      	cmp	r3, #0
   81e74:	d118      	bne.n	81ea8 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   81e76:	4b47      	ldr	r3, [pc, #284]	; (81f94 <xTaskIncrementTick+0x148>)
   81e78:	681b      	ldr	r3, [r3, #0]
   81e7a:	681b      	ldr	r3, [r3, #0]
   81e7c:	2b00      	cmp	r3, #0
   81e7e:	d002      	beq.n	81e86 <xTaskIncrementTick+0x3a>
   81e80:	4b45      	ldr	r3, [pc, #276]	; (81f98 <xTaskIncrementTick+0x14c>)
   81e82:	4798      	blx	r3
   81e84:	e7fe      	b.n	81e84 <xTaskIncrementTick+0x38>
   81e86:	4b43      	ldr	r3, [pc, #268]	; (81f94 <xTaskIncrementTick+0x148>)
   81e88:	681b      	ldr	r3, [r3, #0]
   81e8a:	60fb      	str	r3, [r7, #12]
   81e8c:	4b43      	ldr	r3, [pc, #268]	; (81f9c <xTaskIncrementTick+0x150>)
   81e8e:	681a      	ldr	r2, [r3, #0]
   81e90:	4b40      	ldr	r3, [pc, #256]	; (81f94 <xTaskIncrementTick+0x148>)
   81e92:	601a      	str	r2, [r3, #0]
   81e94:	4b41      	ldr	r3, [pc, #260]	; (81f9c <xTaskIncrementTick+0x150>)
   81e96:	68fa      	ldr	r2, [r7, #12]
   81e98:	601a      	str	r2, [r3, #0]
   81e9a:	4b41      	ldr	r3, [pc, #260]	; (81fa0 <xTaskIncrementTick+0x154>)
   81e9c:	681b      	ldr	r3, [r3, #0]
   81e9e:	1c5a      	adds	r2, r3, #1
   81ea0:	4b3f      	ldr	r3, [pc, #252]	; (81fa0 <xTaskIncrementTick+0x154>)
   81ea2:	601a      	str	r2, [r3, #0]
   81ea4:	4b3f      	ldr	r3, [pc, #252]	; (81fa4 <xTaskIncrementTick+0x158>)
   81ea6:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   81ea8:	4b3f      	ldr	r3, [pc, #252]	; (81fa8 <xTaskIncrementTick+0x15c>)
   81eaa:	681b      	ldr	r3, [r3, #0]
   81eac:	693a      	ldr	r2, [r7, #16]
   81eae:	429a      	cmp	r2, r3
   81eb0:	d34d      	bcc.n	81f4e <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81eb2:	4b38      	ldr	r3, [pc, #224]	; (81f94 <xTaskIncrementTick+0x148>)
   81eb4:	681b      	ldr	r3, [r3, #0]
   81eb6:	681b      	ldr	r3, [r3, #0]
   81eb8:	2b00      	cmp	r3, #0
   81eba:	d101      	bne.n	81ec0 <xTaskIncrementTick+0x74>
   81ebc:	2301      	movs	r3, #1
   81ebe:	e000      	b.n	81ec2 <xTaskIncrementTick+0x76>
   81ec0:	2300      	movs	r3, #0
   81ec2:	2b00      	cmp	r3, #0
   81ec4:	d004      	beq.n	81ed0 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   81ec6:	4b38      	ldr	r3, [pc, #224]	; (81fa8 <xTaskIncrementTick+0x15c>)
   81ec8:	f04f 32ff 	mov.w	r2, #4294967295
   81ecc:	601a      	str	r2, [r3, #0]
						break;
   81ece:	e03e      	b.n	81f4e <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81ed0:	4b30      	ldr	r3, [pc, #192]	; (81f94 <xTaskIncrementTick+0x148>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	68db      	ldr	r3, [r3, #12]
   81ed6:	68db      	ldr	r3, [r3, #12]
   81ed8:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81eda:	68bb      	ldr	r3, [r7, #8]
   81edc:	685b      	ldr	r3, [r3, #4]
   81ede:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   81ee0:	693a      	ldr	r2, [r7, #16]
   81ee2:	687b      	ldr	r3, [r7, #4]
   81ee4:	429a      	cmp	r2, r3
   81ee6:	d203      	bcs.n	81ef0 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   81ee8:	4b2f      	ldr	r3, [pc, #188]	; (81fa8 <xTaskIncrementTick+0x15c>)
   81eea:	687a      	ldr	r2, [r7, #4]
   81eec:	601a      	str	r2, [r3, #0]
							break;
   81eee:	e02e      	b.n	81f4e <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   81ef0:	68bb      	ldr	r3, [r7, #8]
   81ef2:	3304      	adds	r3, #4
   81ef4:	4618      	mov	r0, r3
   81ef6:	4b2d      	ldr	r3, [pc, #180]	; (81fac <xTaskIncrementTick+0x160>)
   81ef8:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81efa:	68bb      	ldr	r3, [r7, #8]
   81efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81efe:	2b00      	cmp	r3, #0
   81f00:	d004      	beq.n	81f0c <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   81f02:	68bb      	ldr	r3, [r7, #8]
   81f04:	3318      	adds	r3, #24
   81f06:	4618      	mov	r0, r3
   81f08:	4b28      	ldr	r3, [pc, #160]	; (81fac <xTaskIncrementTick+0x160>)
   81f0a:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   81f0c:	68bb      	ldr	r3, [r7, #8]
   81f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81f10:	2201      	movs	r2, #1
   81f12:	409a      	lsls	r2, r3
   81f14:	4b26      	ldr	r3, [pc, #152]	; (81fb0 <xTaskIncrementTick+0x164>)
   81f16:	681b      	ldr	r3, [r3, #0]
   81f18:	431a      	orrs	r2, r3
   81f1a:	4b25      	ldr	r3, [pc, #148]	; (81fb0 <xTaskIncrementTick+0x164>)
   81f1c:	601a      	str	r2, [r3, #0]
   81f1e:	68bb      	ldr	r3, [r7, #8]
   81f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81f22:	4613      	mov	r3, r2
   81f24:	009b      	lsls	r3, r3, #2
   81f26:	4413      	add	r3, r2
   81f28:	009b      	lsls	r3, r3, #2
   81f2a:	4a22      	ldr	r2, [pc, #136]	; (81fb4 <xTaskIncrementTick+0x168>)
   81f2c:	441a      	add	r2, r3
   81f2e:	68bb      	ldr	r3, [r7, #8]
   81f30:	3304      	adds	r3, #4
   81f32:	4610      	mov	r0, r2
   81f34:	4619      	mov	r1, r3
   81f36:	4b20      	ldr	r3, [pc, #128]	; (81fb8 <xTaskIncrementTick+0x16c>)
   81f38:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81f3a:	68bb      	ldr	r3, [r7, #8]
   81f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81f3e:	4b1f      	ldr	r3, [pc, #124]	; (81fbc <xTaskIncrementTick+0x170>)
   81f40:	681b      	ldr	r3, [r3, #0]
   81f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81f44:	429a      	cmp	r2, r3
   81f46:	d301      	bcc.n	81f4c <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   81f48:	2301      	movs	r3, #1
   81f4a:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   81f4c:	e7b1      	b.n	81eb2 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   81f4e:	4b1b      	ldr	r3, [pc, #108]	; (81fbc <xTaskIncrementTick+0x170>)
   81f50:	681b      	ldr	r3, [r3, #0]
   81f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81f54:	4917      	ldr	r1, [pc, #92]	; (81fb4 <xTaskIncrementTick+0x168>)
   81f56:	4613      	mov	r3, r2
   81f58:	009b      	lsls	r3, r3, #2
   81f5a:	4413      	add	r3, r2
   81f5c:	009b      	lsls	r3, r3, #2
   81f5e:	440b      	add	r3, r1
   81f60:	681b      	ldr	r3, [r3, #0]
   81f62:	2b01      	cmp	r3, #1
   81f64:	d907      	bls.n	81f76 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   81f66:	2301      	movs	r3, #1
   81f68:	617b      	str	r3, [r7, #20]
   81f6a:	e004      	b.n	81f76 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   81f6c:	4b14      	ldr	r3, [pc, #80]	; (81fc0 <xTaskIncrementTick+0x174>)
   81f6e:	681b      	ldr	r3, [r3, #0]
   81f70:	1c5a      	adds	r2, r3, #1
   81f72:	4b13      	ldr	r3, [pc, #76]	; (81fc0 <xTaskIncrementTick+0x174>)
   81f74:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   81f76:	4b13      	ldr	r3, [pc, #76]	; (81fc4 <xTaskIncrementTick+0x178>)
   81f78:	681b      	ldr	r3, [r3, #0]
   81f7a:	2b00      	cmp	r3, #0
   81f7c:	d001      	beq.n	81f82 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   81f7e:	2301      	movs	r3, #1
   81f80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   81f82:	697b      	ldr	r3, [r7, #20]
}
   81f84:	4618      	mov	r0, r3
   81f86:	3718      	adds	r7, #24
   81f88:	46bd      	mov	sp, r7
   81f8a:	bd80      	pop	{r7, pc}
   81f8c:	20070564 	.word	0x20070564
   81f90:	20070550 	.word	0x20070550
   81f94:	20070534 	.word	0x20070534
   81f98:	00081a65 	.word	0x00081a65
   81f9c:	20070538 	.word	0x20070538
   81fa0:	20070560 	.word	0x20070560
   81fa4:	00082185 	.word	0x00082185
   81fa8:	20070008 	.word	0x20070008
   81fac:	00081971 	.word	0x00081971
   81fb0:	20070554 	.word	0x20070554
   81fb4:	200704d0 	.word	0x200704d0
   81fb8:	00081929 	.word	0x00081929
   81fbc:	200704cc 	.word	0x200704cc
   81fc0:	20070558 	.word	0x20070558
   81fc4:	2007055c 	.word	0x2007055c

00081fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81fc8:	b580      	push	{r7, lr}
   81fca:	b084      	sub	sp, #16
   81fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81fce:	4b34      	ldr	r3, [pc, #208]	; (820a0 <vTaskSwitchContext+0xd8>)
   81fd0:	681b      	ldr	r3, [r3, #0]
   81fd2:	2b00      	cmp	r3, #0
   81fd4:	d003      	beq.n	81fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   81fd6:	4b33      	ldr	r3, [pc, #204]	; (820a4 <vTaskSwitchContext+0xdc>)
   81fd8:	2201      	movs	r2, #1
   81fda:	601a      	str	r2, [r3, #0]
   81fdc:	e05c      	b.n	82098 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   81fde:	4b31      	ldr	r3, [pc, #196]	; (820a4 <vTaskSwitchContext+0xdc>)
   81fe0:	2200      	movs	r2, #0
   81fe2:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   81fe4:	4b30      	ldr	r3, [pc, #192]	; (820a8 <vTaskSwitchContext+0xe0>)
   81fe6:	681b      	ldr	r3, [r3, #0]
   81fe8:	681a      	ldr	r2, [r3, #0]
   81fea:	4b2f      	ldr	r3, [pc, #188]	; (820a8 <vTaskSwitchContext+0xe0>)
   81fec:	681b      	ldr	r3, [r3, #0]
   81fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81ff0:	429a      	cmp	r2, r3
   81ff2:	d808      	bhi.n	82006 <vTaskSwitchContext+0x3e>
   81ff4:	4b2c      	ldr	r3, [pc, #176]	; (820a8 <vTaskSwitchContext+0xe0>)
   81ff6:	681a      	ldr	r2, [r3, #0]
   81ff8:	4b2b      	ldr	r3, [pc, #172]	; (820a8 <vTaskSwitchContext+0xe0>)
   81ffa:	681b      	ldr	r3, [r3, #0]
   81ffc:	3334      	adds	r3, #52	; 0x34
   81ffe:	4610      	mov	r0, r2
   82000:	4619      	mov	r1, r3
   82002:	4b2a      	ldr	r3, [pc, #168]	; (820ac <vTaskSwitchContext+0xe4>)
   82004:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   82006:	4b28      	ldr	r3, [pc, #160]	; (820a8 <vTaskSwitchContext+0xe0>)
   82008:	681b      	ldr	r3, [r3, #0]
   8200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8200c:	4618      	mov	r0, r3
   8200e:	4928      	ldr	r1, [pc, #160]	; (820b0 <vTaskSwitchContext+0xe8>)
   82010:	2214      	movs	r2, #20
   82012:	4b28      	ldr	r3, [pc, #160]	; (820b4 <vTaskSwitchContext+0xec>)
   82014:	4798      	blx	r3
   82016:	4603      	mov	r3, r0
   82018:	2b00      	cmp	r3, #0
   8201a:	d008      	beq.n	8202e <vTaskSwitchContext+0x66>
   8201c:	4b22      	ldr	r3, [pc, #136]	; (820a8 <vTaskSwitchContext+0xe0>)
   8201e:	681a      	ldr	r2, [r3, #0]
   82020:	4b21      	ldr	r3, [pc, #132]	; (820a8 <vTaskSwitchContext+0xe0>)
   82022:	681b      	ldr	r3, [r3, #0]
   82024:	3334      	adds	r3, #52	; 0x34
   82026:	4610      	mov	r0, r2
   82028:	4619      	mov	r1, r3
   8202a:	4b20      	ldr	r3, [pc, #128]	; (820ac <vTaskSwitchContext+0xe4>)
   8202c:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8202e:	4b22      	ldr	r3, [pc, #136]	; (820b8 <vTaskSwitchContext+0xf0>)
   82030:	681b      	ldr	r3, [r3, #0]
   82032:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   82034:	687b      	ldr	r3, [r7, #4]
   82036:	fab3 f383 	clz	r3, r3
   8203a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   8203c:	78fb      	ldrb	r3, [r7, #3]
   8203e:	f1c3 031f 	rsb	r3, r3, #31
   82042:	60fb      	str	r3, [r7, #12]
   82044:	491d      	ldr	r1, [pc, #116]	; (820bc <vTaskSwitchContext+0xf4>)
   82046:	68fa      	ldr	r2, [r7, #12]
   82048:	4613      	mov	r3, r2
   8204a:	009b      	lsls	r3, r3, #2
   8204c:	4413      	add	r3, r2
   8204e:	009b      	lsls	r3, r3, #2
   82050:	440b      	add	r3, r1
   82052:	681b      	ldr	r3, [r3, #0]
   82054:	2b00      	cmp	r3, #0
   82056:	d102      	bne.n	8205e <vTaskSwitchContext+0x96>
   82058:	4b19      	ldr	r3, [pc, #100]	; (820c0 <vTaskSwitchContext+0xf8>)
   8205a:	4798      	blx	r3
   8205c:	e7fe      	b.n	8205c <vTaskSwitchContext+0x94>
   8205e:	68fa      	ldr	r2, [r7, #12]
   82060:	4613      	mov	r3, r2
   82062:	009b      	lsls	r3, r3, #2
   82064:	4413      	add	r3, r2
   82066:	009b      	lsls	r3, r3, #2
   82068:	4a14      	ldr	r2, [pc, #80]	; (820bc <vTaskSwitchContext+0xf4>)
   8206a:	4413      	add	r3, r2
   8206c:	60bb      	str	r3, [r7, #8]
   8206e:	68bb      	ldr	r3, [r7, #8]
   82070:	685b      	ldr	r3, [r3, #4]
   82072:	685a      	ldr	r2, [r3, #4]
   82074:	68bb      	ldr	r3, [r7, #8]
   82076:	605a      	str	r2, [r3, #4]
   82078:	68bb      	ldr	r3, [r7, #8]
   8207a:	685a      	ldr	r2, [r3, #4]
   8207c:	68bb      	ldr	r3, [r7, #8]
   8207e:	3308      	adds	r3, #8
   82080:	429a      	cmp	r2, r3
   82082:	d104      	bne.n	8208e <vTaskSwitchContext+0xc6>
   82084:	68bb      	ldr	r3, [r7, #8]
   82086:	685b      	ldr	r3, [r3, #4]
   82088:	685a      	ldr	r2, [r3, #4]
   8208a:	68bb      	ldr	r3, [r7, #8]
   8208c:	605a      	str	r2, [r3, #4]
   8208e:	68bb      	ldr	r3, [r7, #8]
   82090:	685b      	ldr	r3, [r3, #4]
   82092:	68da      	ldr	r2, [r3, #12]
   82094:	4b04      	ldr	r3, [pc, #16]	; (820a8 <vTaskSwitchContext+0xe0>)
   82096:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   82098:	3710      	adds	r7, #16
   8209a:	46bd      	mov	sp, r7
   8209c:	bd80      	pop	{r7, pc}
   8209e:	bf00      	nop
   820a0:	20070564 	.word	0x20070564
   820a4:	2007055c 	.word	0x2007055c
   820a8:	200704cc 	.word	0x200704cc
   820ac:	00082739 	.word	0x00082739
   820b0:	00082c74 	.word	0x00082c74
   820b4:	000829bd 	.word	0x000829bd
   820b8:	20070554 	.word	0x20070554
   820bc:	200704d0 	.word	0x200704d0
   820c0:	00081a65 	.word	0x00081a65

000820c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   820c4:	b580      	push	{r7, lr}
   820c6:	b084      	sub	sp, #16
   820c8:	af00      	add	r7, sp, #0
   820ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   820cc:	687b      	ldr	r3, [r7, #4]
   820ce:	68db      	ldr	r3, [r3, #12]
   820d0:	68db      	ldr	r3, [r3, #12]
   820d2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   820d4:	68bb      	ldr	r3, [r7, #8]
   820d6:	2b00      	cmp	r3, #0
   820d8:	d102      	bne.n	820e0 <xTaskRemoveFromEventList+0x1c>
   820da:	4b21      	ldr	r3, [pc, #132]	; (82160 <xTaskRemoveFromEventList+0x9c>)
   820dc:	4798      	blx	r3
   820de:	e7fe      	b.n	820de <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   820e0:	68bb      	ldr	r3, [r7, #8]
   820e2:	3318      	adds	r3, #24
   820e4:	4618      	mov	r0, r3
   820e6:	4b1f      	ldr	r3, [pc, #124]	; (82164 <xTaskRemoveFromEventList+0xa0>)
   820e8:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   820ea:	4b1f      	ldr	r3, [pc, #124]	; (82168 <xTaskRemoveFromEventList+0xa4>)
   820ec:	681b      	ldr	r3, [r3, #0]
   820ee:	2b00      	cmp	r3, #0
   820f0:	d11c      	bne.n	8212c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   820f2:	68bb      	ldr	r3, [r7, #8]
   820f4:	3304      	adds	r3, #4
   820f6:	4618      	mov	r0, r3
   820f8:	4b1a      	ldr	r3, [pc, #104]	; (82164 <xTaskRemoveFromEventList+0xa0>)
   820fa:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   820fc:	68bb      	ldr	r3, [r7, #8]
   820fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82100:	2201      	movs	r2, #1
   82102:	409a      	lsls	r2, r3
   82104:	4b19      	ldr	r3, [pc, #100]	; (8216c <xTaskRemoveFromEventList+0xa8>)
   82106:	681b      	ldr	r3, [r3, #0]
   82108:	431a      	orrs	r2, r3
   8210a:	4b18      	ldr	r3, [pc, #96]	; (8216c <xTaskRemoveFromEventList+0xa8>)
   8210c:	601a      	str	r2, [r3, #0]
   8210e:	68bb      	ldr	r3, [r7, #8]
   82110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82112:	4613      	mov	r3, r2
   82114:	009b      	lsls	r3, r3, #2
   82116:	4413      	add	r3, r2
   82118:	009b      	lsls	r3, r3, #2
   8211a:	4a15      	ldr	r2, [pc, #84]	; (82170 <xTaskRemoveFromEventList+0xac>)
   8211c:	441a      	add	r2, r3
   8211e:	68bb      	ldr	r3, [r7, #8]
   82120:	3304      	adds	r3, #4
   82122:	4610      	mov	r0, r2
   82124:	4619      	mov	r1, r3
   82126:	4b13      	ldr	r3, [pc, #76]	; (82174 <xTaskRemoveFromEventList+0xb0>)
   82128:	4798      	blx	r3
   8212a:	e005      	b.n	82138 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8212c:	68bb      	ldr	r3, [r7, #8]
   8212e:	3318      	adds	r3, #24
   82130:	4811      	ldr	r0, [pc, #68]	; (82178 <xTaskRemoveFromEventList+0xb4>)
   82132:	4619      	mov	r1, r3
   82134:	4b0f      	ldr	r3, [pc, #60]	; (82174 <xTaskRemoveFromEventList+0xb0>)
   82136:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   82138:	68bb      	ldr	r3, [r7, #8]
   8213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8213c:	4b0f      	ldr	r3, [pc, #60]	; (8217c <xTaskRemoveFromEventList+0xb8>)
   8213e:	681b      	ldr	r3, [r3, #0]
   82140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82142:	429a      	cmp	r2, r3
   82144:	d905      	bls.n	82152 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   82146:	2301      	movs	r3, #1
   82148:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   8214a:	4b0d      	ldr	r3, [pc, #52]	; (82180 <xTaskRemoveFromEventList+0xbc>)
   8214c:	2201      	movs	r2, #1
   8214e:	601a      	str	r2, [r3, #0]
   82150:	e001      	b.n	82156 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   82152:	2300      	movs	r3, #0
   82154:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   82156:	68fb      	ldr	r3, [r7, #12]
}
   82158:	4618      	mov	r0, r3
   8215a:	3710      	adds	r7, #16
   8215c:	46bd      	mov	sp, r7
   8215e:	bd80      	pop	{r7, pc}
   82160:	00081a65 	.word	0x00081a65
   82164:	00081971 	.word	0x00081971
   82168:	20070564 	.word	0x20070564
   8216c:	20070554 	.word	0x20070554
   82170:	200704d0 	.word	0x200704d0
   82174:	00081929 	.word	0x00081929
   82178:	2007053c 	.word	0x2007053c
   8217c:	200704cc 	.word	0x200704cc
   82180:	2007055c 	.word	0x2007055c

00082184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   82184:	b480      	push	{r7}
   82186:	b083      	sub	sp, #12
   82188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8218a:	4b0e      	ldr	r3, [pc, #56]	; (821c4 <prvResetNextTaskUnblockTime+0x40>)
   8218c:	681b      	ldr	r3, [r3, #0]
   8218e:	681b      	ldr	r3, [r3, #0]
   82190:	2b00      	cmp	r3, #0
   82192:	d101      	bne.n	82198 <prvResetNextTaskUnblockTime+0x14>
   82194:	2301      	movs	r3, #1
   82196:	e000      	b.n	8219a <prvResetNextTaskUnblockTime+0x16>
   82198:	2300      	movs	r3, #0
   8219a:	2b00      	cmp	r3, #0
   8219c:	d004      	beq.n	821a8 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8219e:	4b0a      	ldr	r3, [pc, #40]	; (821c8 <prvResetNextTaskUnblockTime+0x44>)
   821a0:	f04f 32ff 	mov.w	r2, #4294967295
   821a4:	601a      	str	r2, [r3, #0]
   821a6:	e008      	b.n	821ba <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   821a8:	4b06      	ldr	r3, [pc, #24]	; (821c4 <prvResetNextTaskUnblockTime+0x40>)
   821aa:	681b      	ldr	r3, [r3, #0]
   821ac:	68db      	ldr	r3, [r3, #12]
   821ae:	68db      	ldr	r3, [r3, #12]
   821b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   821b2:	687b      	ldr	r3, [r7, #4]
   821b4:	685a      	ldr	r2, [r3, #4]
   821b6:	4b04      	ldr	r3, [pc, #16]	; (821c8 <prvResetNextTaskUnblockTime+0x44>)
   821b8:	601a      	str	r2, [r3, #0]
	}
}
   821ba:	370c      	adds	r7, #12
   821bc:	46bd      	mov	sp, r7
   821be:	f85d 7b04 	ldr.w	r7, [sp], #4
   821c2:	4770      	bx	lr
   821c4:	20070534 	.word	0x20070534
   821c8:	20070008 	.word	0x20070008

000821cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   821cc:	b580      	push	{r7, lr}
   821ce:	b084      	sub	sp, #16
   821d0:	af00      	add	r7, sp, #0
   821d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   821d4:	687b      	ldr	r3, [r7, #4]
   821d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   821d8:	2300      	movs	r3, #0
   821da:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   821dc:	687b      	ldr	r3, [r7, #4]
   821de:	2b00      	cmp	r3, #0
   821e0:	d056      	beq.n	82290 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   821e2:	68bb      	ldr	r3, [r7, #8]
   821e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   821e6:	2b00      	cmp	r3, #0
   821e8:	d102      	bne.n	821f0 <xTaskPriorityDisinherit+0x24>
   821ea:	4b2c      	ldr	r3, [pc, #176]	; (8229c <xTaskPriorityDisinherit+0xd0>)
   821ec:	4798      	blx	r3
   821ee:	e7fe      	b.n	821ee <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   821f0:	68bb      	ldr	r3, [r7, #8]
   821f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   821f4:	1e5a      	subs	r2, r3, #1
   821f6:	68bb      	ldr	r3, [r7, #8]
   821f8:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   821fa:	68bb      	ldr	r3, [r7, #8]
   821fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   821fe:	68bb      	ldr	r3, [r7, #8]
   82200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82202:	429a      	cmp	r2, r3
   82204:	d044      	beq.n	82290 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   82206:	68bb      	ldr	r3, [r7, #8]
   82208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8220a:	2b00      	cmp	r3, #0
   8220c:	d140      	bne.n	82290 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8220e:	68bb      	ldr	r3, [r7, #8]
   82210:	3304      	adds	r3, #4
   82212:	4618      	mov	r0, r3
   82214:	4b22      	ldr	r3, [pc, #136]	; (822a0 <xTaskPriorityDisinherit+0xd4>)
   82216:	4798      	blx	r3
   82218:	4603      	mov	r3, r0
   8221a:	2b00      	cmp	r3, #0
   8221c:	d115      	bne.n	8224a <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8221e:	68bb      	ldr	r3, [r7, #8]
   82220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82222:	4920      	ldr	r1, [pc, #128]	; (822a4 <xTaskPriorityDisinherit+0xd8>)
   82224:	4613      	mov	r3, r2
   82226:	009b      	lsls	r3, r3, #2
   82228:	4413      	add	r3, r2
   8222a:	009b      	lsls	r3, r3, #2
   8222c:	440b      	add	r3, r1
   8222e:	681b      	ldr	r3, [r3, #0]
   82230:	2b00      	cmp	r3, #0
   82232:	d10a      	bne.n	8224a <xTaskPriorityDisinherit+0x7e>
   82234:	68bb      	ldr	r3, [r7, #8]
   82236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82238:	2201      	movs	r2, #1
   8223a:	fa02 f303 	lsl.w	r3, r2, r3
   8223e:	43da      	mvns	r2, r3
   82240:	4b19      	ldr	r3, [pc, #100]	; (822a8 <xTaskPriorityDisinherit+0xdc>)
   82242:	681b      	ldr	r3, [r3, #0]
   82244:	401a      	ands	r2, r3
   82246:	4b18      	ldr	r3, [pc, #96]	; (822a8 <xTaskPriorityDisinherit+0xdc>)
   82248:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   8224a:	68bb      	ldr	r3, [r7, #8]
   8224c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8224e:	68bb      	ldr	r3, [r7, #8]
   82250:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82252:	68bb      	ldr	r3, [r7, #8]
   82254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82256:	f1c3 0205 	rsb	r2, r3, #5
   8225a:	68bb      	ldr	r3, [r7, #8]
   8225c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   8225e:	68bb      	ldr	r3, [r7, #8]
   82260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82262:	2201      	movs	r2, #1
   82264:	409a      	lsls	r2, r3
   82266:	4b10      	ldr	r3, [pc, #64]	; (822a8 <xTaskPriorityDisinherit+0xdc>)
   82268:	681b      	ldr	r3, [r3, #0]
   8226a:	431a      	orrs	r2, r3
   8226c:	4b0e      	ldr	r3, [pc, #56]	; (822a8 <xTaskPriorityDisinherit+0xdc>)
   8226e:	601a      	str	r2, [r3, #0]
   82270:	68bb      	ldr	r3, [r7, #8]
   82272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82274:	4613      	mov	r3, r2
   82276:	009b      	lsls	r3, r3, #2
   82278:	4413      	add	r3, r2
   8227a:	009b      	lsls	r3, r3, #2
   8227c:	4a09      	ldr	r2, [pc, #36]	; (822a4 <xTaskPriorityDisinherit+0xd8>)
   8227e:	441a      	add	r2, r3
   82280:	68bb      	ldr	r3, [r7, #8]
   82282:	3304      	adds	r3, #4
   82284:	4610      	mov	r0, r2
   82286:	4619      	mov	r1, r3
   82288:	4b08      	ldr	r3, [pc, #32]	; (822ac <xTaskPriorityDisinherit+0xe0>)
   8228a:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   8228c:	2301      	movs	r3, #1
   8228e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   82290:	68fb      	ldr	r3, [r7, #12]
	}
   82292:	4618      	mov	r0, r3
   82294:	3710      	adds	r7, #16
   82296:	46bd      	mov	sp, r7
   82298:	bd80      	pop	{r7, pc}
   8229a:	bf00      	nop
   8229c:	00081a65 	.word	0x00081a65
   822a0:	00081971 	.word	0x00081971
   822a4:	200704d0 	.word	0x200704d0
   822a8:	20070554 	.word	0x20070554
   822ac:	00081929 	.word	0x00081929

000822b0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   822b0:	b480      	push	{r7}
   822b2:	b083      	sub	sp, #12
   822b4:	af00      	add	r7, sp, #0
   822b6:	4603      	mov	r3, r0
   822b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   822ba:	4b08      	ldr	r3, [pc, #32]	; (822dc <NVIC_EnableIRQ+0x2c>)
   822bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
   822c0:	0952      	lsrs	r2, r2, #5
   822c2:	79f9      	ldrb	r1, [r7, #7]
   822c4:	f001 011f 	and.w	r1, r1, #31
   822c8:	2001      	movs	r0, #1
   822ca:	fa00 f101 	lsl.w	r1, r0, r1
   822ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   822d2:	370c      	adds	r7, #12
   822d4:	46bd      	mov	sp, r7
   822d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   822da:	4770      	bx	lr
   822dc:	e000e100 	.word	0xe000e100

000822e0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   822e0:	b480      	push	{r7}
   822e2:	b083      	sub	sp, #12
   822e4:	af00      	add	r7, sp, #0
   822e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   822e8:	687b      	ldr	r3, [r7, #4]
   822ea:	2b07      	cmp	r3, #7
   822ec:	d825      	bhi.n	8233a <osc_get_rate+0x5a>
   822ee:	a201      	add	r2, pc, #4	; (adr r2, 822f4 <osc_get_rate+0x14>)
   822f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   822f4:	00082315 	.word	0x00082315
   822f8:	0008231b 	.word	0x0008231b
   822fc:	00082321 	.word	0x00082321
   82300:	00082327 	.word	0x00082327
   82304:	0008232b 	.word	0x0008232b
   82308:	0008232f 	.word	0x0008232f
   8230c:	00082333 	.word	0x00082333
   82310:	00082337 	.word	0x00082337
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82314:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82318:	e010      	b.n	8233c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8231a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8231e:	e00d      	b.n	8233c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82324:	e00a      	b.n	8233c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82326:	4b08      	ldr	r3, [pc, #32]	; (82348 <osc_get_rate+0x68>)
   82328:	e008      	b.n	8233c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8232a:	4b08      	ldr	r3, [pc, #32]	; (8234c <osc_get_rate+0x6c>)
   8232c:	e006      	b.n	8233c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8232e:	4b08      	ldr	r3, [pc, #32]	; (82350 <osc_get_rate+0x70>)
   82330:	e004      	b.n	8233c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82332:	4b07      	ldr	r3, [pc, #28]	; (82350 <osc_get_rate+0x70>)
   82334:	e002      	b.n	8233c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82336:	4b06      	ldr	r3, [pc, #24]	; (82350 <osc_get_rate+0x70>)
   82338:	e000      	b.n	8233c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8233a:	2300      	movs	r3, #0
}
   8233c:	4618      	mov	r0, r3
   8233e:	370c      	adds	r7, #12
   82340:	46bd      	mov	sp, r7
   82342:	f85d 7b04 	ldr.w	r7, [sp], #4
   82346:	4770      	bx	lr
   82348:	003d0900 	.word	0x003d0900
   8234c:	007a1200 	.word	0x007a1200
   82350:	00b71b00 	.word	0x00b71b00

00082354 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82354:	b580      	push	{r7, lr}
   82356:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   82358:	2006      	movs	r0, #6
   8235a:	4b04      	ldr	r3, [pc, #16]	; (8236c <sysclk_get_main_hz+0x18>)
   8235c:	4798      	blx	r3
   8235e:	4602      	mov	r2, r0
   82360:	4613      	mov	r3, r2
   82362:	00db      	lsls	r3, r3, #3
   82364:	1a9b      	subs	r3, r3, r2
   82366:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82368:	4618      	mov	r0, r3
   8236a:	bd80      	pop	{r7, pc}
   8236c:	000822e1 	.word	0x000822e1

00082370 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82370:	b580      	push	{r7, lr}
   82372:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   82374:	4b02      	ldr	r3, [pc, #8]	; (82380 <sysclk_get_cpu_hz+0x10>)
   82376:	4798      	blx	r3
   82378:	4603      	mov	r3, r0
   8237a:	085b      	lsrs	r3, r3, #1
}
   8237c:	4618      	mov	r0, r3
   8237e:	bd80      	pop	{r7, pc}
   82380:	00082355 	.word	0x00082355

00082384 <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   82384:	b580      	push	{r7, lr}
   82386:	b082      	sub	sp, #8
   82388:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN1);
   8238a:	481a      	ldr	r0, [pc, #104]	; (823f4 <CAN1_Handler+0x70>)
   8238c:	4b1a      	ldr	r3, [pc, #104]	; (823f8 <CAN1_Handler+0x74>)
   8238e:	4798      	blx	r3
   82390:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   82392:	683b      	ldr	r3, [r7, #0]
   82394:	b2db      	uxtb	r3, r3
   82396:	2b00      	cmp	r3, #0
   82398:	d028      	beq.n	823ec <CAN1_Handler+0x68>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8239a:	2300      	movs	r3, #0
   8239c:	71fb      	strb	r3, [r7, #7]
   8239e:	e022      	b.n	823e6 <CAN1_Handler+0x62>
			ul_status = can_mailbox_get_status(CAN1, i);
   823a0:	79fb      	ldrb	r3, [r7, #7]
   823a2:	4814      	ldr	r0, [pc, #80]	; (823f4 <CAN1_Handler+0x70>)
   823a4:	4619      	mov	r1, r3
   823a6:	4b15      	ldr	r3, [pc, #84]	; (823fc <CAN1_Handler+0x78>)
   823a8:	4798      	blx	r3
   823aa:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   823ac:	683b      	ldr	r3, [r7, #0]
   823ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   823b2:	2b00      	cmp	r3, #0
   823b4:	d014      	beq.n	823e0 <CAN1_Handler+0x5c>
				can1_mailbox.ul_mb_idx = i;
   823b6:	79fa      	ldrb	r2, [r7, #7]
   823b8:	4b11      	ldr	r3, [pc, #68]	; (82400 <CAN1_Handler+0x7c>)
   823ba:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   823bc:	4b10      	ldr	r3, [pc, #64]	; (82400 <CAN1_Handler+0x7c>)
   823be:	683a      	ldr	r2, [r7, #0]
   823c0:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   823c2:	480c      	ldr	r0, [pc, #48]	; (823f4 <CAN1_Handler+0x70>)
   823c4:	490e      	ldr	r1, [pc, #56]	; (82400 <CAN1_Handler+0x7c>)
   823c6:	4b0f      	ldr	r3, [pc, #60]	; (82404 <CAN1_Handler+0x80>)
   823c8:	4798      	blx	r3
				g_ul_recv_status = 1;
   823ca:	4b0f      	ldr	r3, [pc, #60]	; (82408 <CAN1_Handler+0x84>)
   823cc:	2201      	movs	r2, #1
   823ce:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can1_mailbox, CAN1);
   823d0:	480b      	ldr	r0, [pc, #44]	; (82400 <CAN1_Handler+0x7c>)
   823d2:	4908      	ldr	r1, [pc, #32]	; (823f4 <CAN1_Handler+0x70>)
   823d4:	4b0d      	ldr	r3, [pc, #52]	; (8240c <CAN1_Handler+0x88>)
   823d6:	4798      	blx	r3
				//assert(g_ul_recv_status); ***Implement assert here.
				g_ul_recv_status = 0;
   823d8:	4b0b      	ldr	r3, [pc, #44]	; (82408 <CAN1_Handler+0x84>)
   823da:	2200      	movs	r2, #0
   823dc:	601a      	str	r2, [r3, #0]
				break;
   823de:	e005      	b.n	823ec <CAN1_Handler+0x68>
{
	uint32_t ul_status;

	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   823e0:	79fb      	ldrb	r3, [r7, #7]
   823e2:	3301      	adds	r3, #1
   823e4:	71fb      	strb	r3, [r7, #7]
   823e6:	79fb      	ldrb	r3, [r7, #7]
   823e8:	2b07      	cmp	r3, #7
   823ea:	d9d9      	bls.n	823a0 <CAN1_Handler+0x1c>
				g_ul_recv_status = 0;
				break;
			}
		}
	}
}
   823ec:	3708      	adds	r7, #8
   823ee:	46bd      	mov	sp, r7
   823f0:	bd80      	pop	{r7, pc}
   823f2:	bf00      	nop
   823f4:	400b8000 	.word	0x400b8000
   823f8:	00080901 	.word	0x00080901
   823fc:	00080945 	.word	0x00080945
   82400:	20070574 	.word	0x20070574
   82404:	00080ac5 	.word	0x00080ac5
   82408:	20070568 	.word	0x20070568
   8240c:	00082495 	.word	0x00082495

00082410 <CAN0_Handler>:
/************************************************************************/
/* Default Interrupt Handler for CAN0								    */
/************************************************************************/

void CAN0_Handler(void)
{
   82410:	b580      	push	{r7, lr}
   82412:	b082      	sub	sp, #8
   82414:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
   82416:	4818      	ldr	r0, [pc, #96]	; (82478 <CAN0_Handler+0x68>)
   82418:	4b18      	ldr	r3, [pc, #96]	; (8247c <CAN0_Handler+0x6c>)
   8241a:	4798      	blx	r3
   8241c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8241e:	683b      	ldr	r3, [r7, #0]
   82420:	b2db      	uxtb	r3, r3
   82422:	2b00      	cmp	r3, #0
   82424:	d025      	beq.n	82472 <CAN0_Handler+0x62>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82426:	2300      	movs	r3, #0
   82428:	71fb      	strb	r3, [r7, #7]
   8242a:	e01f      	b.n	8246c <CAN0_Handler+0x5c>
			ul_status = can_mailbox_get_status(CAN0, i);
   8242c:	79fb      	ldrb	r3, [r7, #7]
   8242e:	4812      	ldr	r0, [pc, #72]	; (82478 <CAN0_Handler+0x68>)
   82430:	4619      	mov	r1, r3
   82432:	4b13      	ldr	r3, [pc, #76]	; (82480 <CAN0_Handler+0x70>)
   82434:	4798      	blx	r3
   82436:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   82438:	683b      	ldr	r3, [r7, #0]
   8243a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8243e:	2b00      	cmp	r3, #0
   82440:	d011      	beq.n	82466 <CAN0_Handler+0x56>
				can0_mailbox.ul_mb_idx = i;
   82442:	79fa      	ldrb	r2, [r7, #7]
   82444:	4b0f      	ldr	r3, [pc, #60]	; (82484 <CAN0_Handler+0x74>)
   82446:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   82448:	4b0e      	ldr	r3, [pc, #56]	; (82484 <CAN0_Handler+0x74>)
   8244a:	683a      	ldr	r2, [r7, #0]
   8244c:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8244e:	480a      	ldr	r0, [pc, #40]	; (82478 <CAN0_Handler+0x68>)
   82450:	490c      	ldr	r1, [pc, #48]	; (82484 <CAN0_Handler+0x74>)
   82452:	4b0d      	ldr	r3, [pc, #52]	; (82488 <CAN0_Handler+0x78>)
   82454:	4798      	blx	r3
				g_ul_recv_status = 1;
   82456:	4b0d      	ldr	r3, [pc, #52]	; (8248c <CAN0_Handler+0x7c>)
   82458:	2201      	movs	r2, #1
   8245a:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   8245c:	4809      	ldr	r0, [pc, #36]	; (82484 <CAN0_Handler+0x74>)
   8245e:	4906      	ldr	r1, [pc, #24]	; (82478 <CAN0_Handler+0x68>)
   82460:	4b0b      	ldr	r3, [pc, #44]	; (82490 <CAN0_Handler+0x80>)
   82462:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				break;
   82464:	e005      	b.n	82472 <CAN0_Handler+0x62>
{
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82466:	79fb      	ldrb	r3, [r7, #7]
   82468:	3301      	adds	r3, #1
   8246a:	71fb      	strb	r3, [r7, #7]
   8246c:	79fb      	ldrb	r3, [r7, #7]
   8246e:	2b07      	cmp	r3, #7
   82470:	d9dc      	bls.n	8242c <CAN0_Handler+0x1c>
				//assert(g_ul_recv_status); ***implement assert here.
				break;
			}
		}
	}
}
   82472:	3708      	adds	r7, #8
   82474:	46bd      	mov	sp, r7
   82476:	bd80      	pop	{r7, pc}
   82478:	400b4000 	.word	0x400b4000
   8247c:	00080901 	.word	0x00080901
   82480:	00080945 	.word	0x00080945
   82484:	2007059c 	.word	0x2007059c
   82488:	00080ac5 	.word	0x00080ac5
   8248c:	20070568 	.word	0x20070568
   82490:	00082495 	.word	0x00082495

00082494 <decode_can_msg>:
/* Decode CAN Message													*/
/* Performs a prescribed action depending on the message received       */
/************************************************************************/

void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   82494:	b580      	push	{r7, lr}
   82496:	b084      	sub	sp, #16
   82498:	af00      	add	r7, sp, #0
   8249a:	6078      	str	r0, [r7, #4]
   8249c:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8249e:	687b      	ldr	r3, [r7, #4]
   824a0:	699b      	ldr	r3, [r3, #24]
   824a2:	60fb      	str	r3, [r7, #12]
	if(controller == CAN0)
   824a4:	683a      	ldr	r2, [r7, #0]
   824a6:	4b30      	ldr	r3, [pc, #192]	; (82568 <decode_can_msg+0xd4>)
   824a8:	429a      	cmp	r2, r3
   824aa:	d102      	bne.n	824b2 <decode_can_msg+0x1e>
		pio_toggle_pin(LED0_GPIO);
   824ac:	203b      	movs	r0, #59	; 0x3b
   824ae:	4b2f      	ldr	r3, [pc, #188]	; (8256c <decode_can_msg+0xd8>)
   824b0:	4798      	blx	r3
	if(controller == CAN1)
   824b2:	683a      	ldr	r2, [r7, #0]
   824b4:	4b2e      	ldr	r3, [pc, #184]	; (82570 <decode_can_msg+0xdc>)
   824b6:	429a      	cmp	r2, r3
   824b8:	d102      	bne.n	824c0 <decode_can_msg+0x2c>
		pio_toggle_pin(LED1_GPIO);
   824ba:	2055      	movs	r0, #85	; 0x55
   824bc:	4b2b      	ldr	r3, [pc, #172]	; (8256c <decode_can_msg+0xd8>)
   824be:	4798      	blx	r3
	if (ul_data_incom == COMMAND_OUT)
   824c0:	68fb      	ldr	r3, [r7, #12]
   824c2:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   824c6:	d102      	bne.n	824ce <decode_can_msg+0x3a>
		pio_toggle_pin(LED0_GPIO);
   824c8:	203b      	movs	r0, #59	; 0x3b
   824ca:	4b28      	ldr	r3, [pc, #160]	; (8256c <decode_can_msg+0xd8>)
   824cc:	4798      	blx	r3
	if (ul_data_incom == COMMAND_IN)
   824ce:	68fa      	ldr	r2, [r7, #12]
   824d0:	f241 1311 	movw	r3, #4369	; 0x1111
   824d4:	429a      	cmp	r2, r3
   824d6:	d102      	bne.n	824de <decode_can_msg+0x4a>
		pio_toggle_pin(LED1_GPIO);
   824d8:	2055      	movs	r0, #85	; 0x55
   824da:	4b24      	ldr	r3, [pc, #144]	; (8256c <decode_can_msg+0xd8>)
   824dc:	4798      	blx	r3

	if ((ul_data_incom == COMMAND_IN) & (controller == CAN0)) 
   824de:	68fa      	ldr	r2, [r7, #12]
   824e0:	f241 1311 	movw	r3, #4369	; 0x1111
   824e4:	429a      	cmp	r2, r3
   824e6:	bf14      	ite	ne
   824e8:	2300      	movne	r3, #0
   824ea:	2301      	moveq	r3, #1
   824ec:	b2da      	uxtb	r2, r3
   824ee:	6839      	ldr	r1, [r7, #0]
   824f0:	4b1d      	ldr	r3, [pc, #116]	; (82568 <decode_can_msg+0xd4>)
   824f2:	4299      	cmp	r1, r3
   824f4:	bf14      	ite	ne
   824f6:	2300      	movne	r3, #0
   824f8:	2301      	moveq	r3, #1
   824fa:	b2db      	uxtb	r3, r3
   824fc:	4013      	ands	r3, r2
   824fe:	b2db      	uxtb	r3, r3
   82500:	2b00      	cmp	r3, #0
   82502:	d002      	beq.n	8250a <decode_can_msg+0x76>
	{
		// Command has been received, respond.
		pio_toggle_pin(LED0_GPIO);
   82504:	203b      	movs	r0, #59	; 0x3b
   82506:	4b19      	ldr	r3, [pc, #100]	; (8256c <decode_can_msg+0xd8>)
   82508:	4798      	blx	r3
		//command_in();
	}
	if ((ul_data_incom == COMMAND_OUT) & (controller == CAN1))
   8250a:	68fb      	ldr	r3, [r7, #12]
   8250c:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   82510:	bf14      	ite	ne
   82512:	2300      	movne	r3, #0
   82514:	2301      	moveq	r3, #1
   82516:	b2da      	uxtb	r2, r3
   82518:	6839      	ldr	r1, [r7, #0]
   8251a:	4b15      	ldr	r3, [pc, #84]	; (82570 <decode_can_msg+0xdc>)
   8251c:	4299      	cmp	r1, r3
   8251e:	bf14      	ite	ne
   82520:	2300      	movne	r3, #0
   82522:	2301      	moveq	r3, #1
   82524:	b2db      	uxtb	r3, r3
   82526:	4013      	ands	r3, r2
   82528:	b2db      	uxtb	r3, r3
   8252a:	2b00      	cmp	r3, #0
   8252c:	d002      	beq.n	82534 <decode_can_msg+0xa0>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the response to the command
   8252e:	2056      	movs	r0, #86	; 0x56
   82530:	4b0e      	ldr	r3, [pc, #56]	; (8256c <decode_can_msg+0xd8>)
   82532:	4798      	blx	r3
	}								// has been received.
	if ((ul_data_incom == HK_TRANSMIT) & (controller == CAN1))
   82534:	68fa      	ldr	r2, [r7, #12]
   82536:	4b0f      	ldr	r3, [pc, #60]	; (82574 <decode_can_msg+0xe0>)
   82538:	429a      	cmp	r2, r3
   8253a:	bf14      	ite	ne
   8253c:	2300      	movne	r3, #0
   8253e:	2301      	moveq	r3, #1
   82540:	b2da      	uxtb	r2, r3
   82542:	6839      	ldr	r1, [r7, #0]
   82544:	4b0a      	ldr	r3, [pc, #40]	; (82570 <decode_can_msg+0xdc>)
   82546:	4299      	cmp	r1, r3
   82548:	bf14      	ite	ne
   8254a:	2300      	movne	r3, #0
   8254c:	2301      	moveq	r3, #1
   8254e:	b2db      	uxtb	r3, r3
   82550:	4013      	ands	r3, r2
   82552:	b2db      	uxtb	r3, r3
   82554:	2b00      	cmp	r3, #0
   82556:	d002      	beq.n	8255e <decode_can_msg+0xca>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   82558:	2057      	movs	r0, #87	; 0x57
   8255a:	4b04      	ldr	r3, [pc, #16]	; (8256c <decode_can_msg+0xd8>)
   8255c:	4798      	blx	r3
	}
	return;
   8255e:	bf00      	nop
}
   82560:	3710      	adds	r7, #16
   82562:	46bd      	mov	sp, r7
   82564:	bd80      	pop	{r7, pc}
   82566:	bf00      	nop
   82568:	400b4000 	.word	0x400b4000
   8256c:	00080ec5 	.word	0x00080ec5
   82570:	400b8000 	.word	0x400b8000
   82574:	12345678 	.word	0x12345678

00082578 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   82578:	b480      	push	{r7}
   8257a:	b083      	sub	sp, #12
   8257c:	af00      	add	r7, sp, #0
   8257e:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   82580:	687b      	ldr	r3, [r7, #4]
   82582:	2200      	movs	r2, #0
   82584:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   82586:	687b      	ldr	r3, [r7, #4]
   82588:	2200      	movs	r2, #0
   8258a:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   8258c:	687b      	ldr	r3, [r7, #4]
   8258e:	2200      	movs	r2, #0
   82590:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   82592:	687b      	ldr	r3, [r7, #4]
   82594:	2200      	movs	r2, #0
   82596:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   82598:	687b      	ldr	r3, [r7, #4]
   8259a:	2200      	movs	r2, #0
   8259c:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   8259e:	687b      	ldr	r3, [r7, #4]
   825a0:	2200      	movs	r2, #0
   825a2:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   825a4:	687b      	ldr	r3, [r7, #4]
   825a6:	2200      	movs	r2, #0
   825a8:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   825aa:	687b      	ldr	r3, [r7, #4]
   825ac:	2200      	movs	r2, #0
   825ae:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   825b0:	687b      	ldr	r3, [r7, #4]
   825b2:	2200      	movs	r2, #0
   825b4:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   825b6:	687b      	ldr	r3, [r7, #4]
   825b8:	2200      	movs	r2, #0
   825ba:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   825bc:	687b      	ldr	r3, [r7, #4]
   825be:	2200      	movs	r2, #0
   825c0:	61da      	str	r2, [r3, #28]
}
   825c2:	370c      	adds	r7, #12
   825c4:	46bd      	mov	sp, r7
   825c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   825ca:	4770      	bx	lr

000825cc <can_initialize>:
	while (!g_ul_recv_status) {
	}
}

void can_initialize(void)
{
   825cc:	b580      	push	{r7, lr}
   825ce:	b082      	sub	sp, #8
   825d0:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   825d2:	4827      	ldr	r0, [pc, #156]	; (82670 <can_initialize+0xa4>)
   825d4:	2134      	movs	r1, #52	; 0x34
   825d6:	4b27      	ldr	r3, [pc, #156]	; (82674 <can_initialize+0xa8>)
   825d8:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   825da:	4825      	ldr	r0, [pc, #148]	; (82670 <can_initialize+0xa4>)
   825dc:	2135      	movs	r1, #53	; 0x35
   825de:	4b26      	ldr	r3, [pc, #152]	; (82678 <can_initialize+0xac>)
   825e0:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   825e2:	4823      	ldr	r0, [pc, #140]	; (82670 <can_initialize+0xa4>)
   825e4:	4b25      	ldr	r3, [pc, #148]	; (8267c <can_initialize+0xb0>)
   825e6:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   825e8:	4821      	ldr	r0, [pc, #132]	; (82670 <can_initialize+0xa4>)
   825ea:	4b25      	ldr	r3, [pc, #148]	; (82680 <can_initialize+0xb4>)
   825ec:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   825ee:	4825      	ldr	r0, [pc, #148]	; (82684 <can_initialize+0xb8>)
   825f0:	218f      	movs	r1, #143	; 0x8f
   825f2:	4b20      	ldr	r3, [pc, #128]	; (82674 <can_initialize+0xa8>)
   825f4:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   825f6:	4823      	ldr	r0, [pc, #140]	; (82684 <can_initialize+0xb8>)
   825f8:	2190      	movs	r1, #144	; 0x90
   825fa:	4b1f      	ldr	r3, [pc, #124]	; (82678 <can_initialize+0xac>)
   825fc:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   825fe:	4821      	ldr	r0, [pc, #132]	; (82684 <can_initialize+0xb8>)
   82600:	4b1e      	ldr	r3, [pc, #120]	; (8267c <can_initialize+0xb0>)
   82602:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   82604:	481f      	ldr	r0, [pc, #124]	; (82684 <can_initialize+0xb8>)
   82606:	4b1e      	ldr	r3, [pc, #120]	; (82680 <can_initialize+0xb4>)
   82608:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8260a:	202b      	movs	r0, #43	; 0x2b
   8260c:	4b1e      	ldr	r3, [pc, #120]	; (82688 <can_initialize+0xbc>)
   8260e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   82610:	202c      	movs	r0, #44	; 0x2c
   82612:	4b1d      	ldr	r3, [pc, #116]	; (82688 <can_initialize+0xbc>)
   82614:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   82616:	4b1d      	ldr	r3, [pc, #116]	; (8268c <can_initialize+0xc0>)
   82618:	4798      	blx	r3
   8261a:	6078      	str	r0, [r7, #4]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8261c:	481c      	ldr	r0, [pc, #112]	; (82690 <can_initialize+0xc4>)
   8261e:	6879      	ldr	r1, [r7, #4]
   82620:	22fa      	movs	r2, #250	; 0xfa
   82622:	4b1c      	ldr	r3, [pc, #112]	; (82694 <can_initialize+0xc8>)
   82624:	4798      	blx	r3
   82626:	4603      	mov	r3, r0
   82628:	2b00      	cmp	r3, #0
   8262a:	d01d      	beq.n	82668 <can_initialize+0x9c>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   8262c:	481a      	ldr	r0, [pc, #104]	; (82698 <can_initialize+0xcc>)
   8262e:	6879      	ldr	r1, [r7, #4]
   82630:	22fa      	movs	r2, #250	; 0xfa
   82632:	4b18      	ldr	r3, [pc, #96]	; (82694 <can_initialize+0xc8>)
   82634:	4798      	blx	r3
   82636:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   82638:	2b00      	cmp	r3, #0
   8263a:	d015      	beq.n	82668 <can_initialize+0x9c>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8263c:	4814      	ldr	r0, [pc, #80]	; (82690 <can_initialize+0xc4>)
   8263e:	f04f 31ff 	mov.w	r1, #4294967295
   82642:	4b16      	ldr	r3, [pc, #88]	; (8269c <can_initialize+0xd0>)
   82644:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   82646:	4814      	ldr	r0, [pc, #80]	; (82698 <can_initialize+0xcc>)
   82648:	f04f 31ff 	mov.w	r1, #4294967295
   8264c:	4b13      	ldr	r3, [pc, #76]	; (8269c <can_initialize+0xd0>)
   8264e:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   82650:	202b      	movs	r0, #43	; 0x2b
   82652:	4b13      	ldr	r3, [pc, #76]	; (826a0 <can_initialize+0xd4>)
   82654:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   82656:	202c      	movs	r0, #44	; 0x2c
   82658:	4b11      	ldr	r3, [pc, #68]	; (826a0 <can_initialize+0xd4>)
   8265a:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   8265c:	480c      	ldr	r0, [pc, #48]	; (82690 <can_initialize+0xc4>)
   8265e:	4b11      	ldr	r3, [pc, #68]	; (826a4 <can_initialize+0xd8>)
   82660:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   82662:	480d      	ldr	r0, [pc, #52]	; (82698 <can_initialize+0xcc>)
   82664:	4b0f      	ldr	r3, [pc, #60]	; (826a4 <can_initialize+0xd8>)
   82666:	4798      	blx	r3
	}
	return;
   82668:	bf00      	nop
}
   8266a:	3708      	adds	r7, #8
   8266c:	46bd      	mov	sp, r7
   8266e:	bd80      	pop	{r7, pc}
   82670:	200705bc 	.word	0x200705bc
   82674:	00080641 	.word	0x00080641
   82678:	0008065d 	.word	0x0008065d
   8267c:	00080695 	.word	0x00080695
   82680:	00080679 	.word	0x00080679
   82684:	20070594 	.word	0x20070594
   82688:	000813d1 	.word	0x000813d1
   8268c:	00082371 	.word	0x00082371
   82690:	400b4000 	.word	0x400b4000
   82694:	00080801 	.word	0x00080801
   82698:	400b8000 	.word	0x400b8000
   8269c:	000808e5 	.word	0x000808e5
   826a0:	000822b1 	.word	0x000822b1
   826a4:	00080c41 	.word	0x00080c41

000826a8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   826a8:	b480      	push	{r7}
   826aa:	b085      	sub	sp, #20
   826ac:	af00      	add	r7, sp, #0
   826ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   826b0:	687b      	ldr	r3, [r7, #4]
   826b2:	f003 0307 	and.w	r3, r3, #7
   826b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   826b8:	4b0c      	ldr	r3, [pc, #48]	; (826ec <NVIC_SetPriorityGrouping+0x44>)
   826ba:	68db      	ldr	r3, [r3, #12]
   826bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   826be:	68ba      	ldr	r2, [r7, #8]
   826c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   826c4:	4013      	ands	r3, r2
   826c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   826c8:	68fb      	ldr	r3, [r7, #12]
   826ca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   826cc:	68bb      	ldr	r3, [r7, #8]
   826ce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   826d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   826d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   826d8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   826da:	4b04      	ldr	r3, [pc, #16]	; (826ec <NVIC_SetPriorityGrouping+0x44>)
   826dc:	68ba      	ldr	r2, [r7, #8]
   826de:	60da      	str	r2, [r3, #12]
}
   826e0:	3714      	adds	r7, #20
   826e2:	46bd      	mov	sp, r7
   826e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   826e8:	4770      	bx	lr
   826ea:	bf00      	nop
   826ec:	e000ed00 	.word	0xe000ed00

000826f0 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   826f0:	b580      	push	{r7, lr}
   826f2:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   826f4:	4b02      	ldr	r3, [pc, #8]	; (82700 <main+0x10>)
   826f6:	4798      	blx	r3
		while(1) { }
	}
#endif
#if PROGRAM_CHOICE == 7
	{
		stk600_test0();
   826f8:	4b02      	ldr	r3, [pc, #8]	; (82704 <main+0x14>)
   826fa:	4798      	blx	r3
	{
		main_full();
	}
#endif
	{
		while (1){}
   826fc:	e7fe      	b.n	826fc <main+0xc>
   826fe:	bf00      	nop
   82700:	00082709 	.word	0x00082709
   82704:	00080149 	.word	0x00080149

00082708 <prvSetupHardware>:
	return 0;
}
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
   82708:	b580      	push	{r7, lr}
   8270a:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   8270c:	4b05      	ldr	r3, [pc, #20]	; (82724 <prvSetupHardware+0x1c>)
   8270e:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   82710:	2000      	movs	r0, #0
   82712:	4b05      	ldr	r3, [pc, #20]	; (82728 <prvSetupHardware+0x20>)
   82714:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   82716:	4b05      	ldr	r3, [pc, #20]	; (8272c <prvSetupHardware+0x24>)
   82718:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   8271a:	4b05      	ldr	r3, [pc, #20]	; (82730 <prvSetupHardware+0x28>)
   8271c:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   8271e:	4b05      	ldr	r3, [pc, #20]	; (82734 <prvSetupHardware+0x2c>)
   82720:	4798      	blx	r3
	
}
   82722:	bd80      	pop	{r7, pc}
   82724:	00080501 	.word	0x00080501
   82728:	000826a9 	.word	0x000826a9
   8272c:	00080569 	.word	0x00080569
   82730:	00082775 	.word	0x00082775
   82734:	000825cd 	.word	0x000825cd

00082738 <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   82738:	b580      	push	{r7, lr}
   8273a:	b082      	sub	sp, #8
   8273c:	af00      	add	r7, sp, #0
   8273e:	6078      	str	r0, [r7, #4]
   82740:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   82742:	4b01      	ldr	r3, [pc, #4]	; (82748 <vApplicationStackOverflowHook+0x10>)
   82744:	4798      	blx	r3
	for (;;);
   82746:	e7fe      	b.n	82746 <vApplicationStackOverflowHook+0xe>
   82748:	00081a65 	.word	0x00081a65

0008274c <WDT_Handler>:
/*-----------------------------------------------------------*/

/*---------------CUSTOM INTERRUPT HANDLERS-------------------*/

void WDT_Handler(void)
{
   8274c:	b580      	push	{r7, lr}
   8274e:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   82750:	4804      	ldr	r0, [pc, #16]	; (82764 <WDT_Handler+0x18>)
   82752:	4b05      	ldr	r3, [pc, #20]	; (82768 <WDT_Handler+0x1c>)
   82754:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   82756:	2055      	movs	r0, #85	; 0x55
   82758:	4b04      	ldr	r3, [pc, #16]	; (8276c <WDT_Handler+0x20>)
   8275a:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   8275c:	4801      	ldr	r0, [pc, #4]	; (82764 <WDT_Handler+0x18>)
   8275e:	4b04      	ldr	r3, [pc, #16]	; (82770 <WDT_Handler+0x24>)
   82760:	4798      	blx	r3
}
   82762:	bd80      	pop	{r7, pc}
   82764:	400e1a50 	.word	0x400e1a50
   82768:	00081641 	.word	0x00081641
   8276c:	00080ec5 	.word	0x00080ec5
   82770:	00081619 	.word	0x00081619

00082774 <vParTestInitialise>:
static const uint32_t ulLED[] = { LED2_GPIO, LED0_GPIO, LED1_GPIO };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
   82774:	b580      	push	{r7, lr}
   82776:	b082      	sub	sp, #8
   82778:	af00      	add	r7, sp, #0
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8277a:	2300      	movs	r3, #0
   8277c:	607b      	str	r3, [r7, #4]
   8277e:	e00f      	b.n	827a0 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   82780:	4b0a      	ldr	r3, [pc, #40]	; (827ac <vParTestInitialise+0x38>)
   82782:	687a      	ldr	r2, [r7, #4]
   82784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82788:	4618      	mov	r0, r3
   8278a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8278e:	4b08      	ldr	r3, [pc, #32]	; (827b0 <vParTestInitialise+0x3c>)
   82790:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   82792:	6878      	ldr	r0, [r7, #4]
   82794:	2100      	movs	r1, #0
   82796:	4b07      	ldr	r3, [pc, #28]	; (827b4 <vParTestInitialise+0x40>)
   82798:	4798      	blx	r3

void vParTestInitialise( void )
{
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8279a:	687b      	ldr	r3, [r7, #4]
   8279c:	3301      	adds	r3, #1
   8279e:	607b      	str	r3, [r7, #4]
   827a0:	687b      	ldr	r3, [r7, #4]
   827a2:	2b02      	cmp	r3, #2
   827a4:	d9ec      	bls.n	82780 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   827a6:	3708      	adds	r7, #8
   827a8:	46bd      	mov	sp, r7
   827aa:	bd80      	pop	{r7, pc}
   827ac:	00082c88 	.word	0x00082c88
   827b0:	00080f25 	.word	0x00080f25
   827b4:	000827b9 	.word	0x000827b9

000827b8 <vParTestSetLED>:
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   827b8:	b580      	push	{r7, lr}
   827ba:	b082      	sub	sp, #8
   827bc:	af00      	add	r7, sp, #0
   827be:	6078      	str	r0, [r7, #4]
   827c0:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   827c2:	687b      	ldr	r3, [r7, #4]
   827c4:	2b02      	cmp	r3, #2
   827c6:	d823      	bhi.n	82810 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   827c8:	687b      	ldr	r3, [r7, #4]
   827ca:	2b00      	cmp	r3, #0
   827cc:	d106      	bne.n	827dc <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   827ce:	683b      	ldr	r3, [r7, #0]
   827d0:	2b00      	cmp	r3, #0
   827d2:	bf14      	ite	ne
   827d4:	2300      	movne	r3, #0
   827d6:	2301      	moveq	r3, #1
   827d8:	b2db      	uxtb	r3, r3
   827da:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   827dc:	683b      	ldr	r3, [r7, #0]
   827de:	2b00      	cmp	r3, #0
   827e0:	d00b      	beq.n	827fa <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   827e2:	4b0d      	ldr	r3, [pc, #52]	; (82818 <vParTestSetLED+0x60>)
   827e4:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   827e6:	4b0d      	ldr	r3, [pc, #52]	; (8281c <vParTestSetLED+0x64>)
   827e8:	687a      	ldr	r2, [r7, #4]
   827ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   827ee:	4618      	mov	r0, r3
   827f0:	4b0b      	ldr	r3, [pc, #44]	; (82820 <vParTestSetLED+0x68>)
   827f2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   827f4:	4b0b      	ldr	r3, [pc, #44]	; (82824 <vParTestSetLED+0x6c>)
   827f6:	4798      	blx	r3
   827f8:	e00a      	b.n	82810 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   827fa:	4b07      	ldr	r3, [pc, #28]	; (82818 <vParTestSetLED+0x60>)
   827fc:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   827fe:	4b07      	ldr	r3, [pc, #28]	; (8281c <vParTestSetLED+0x64>)
   82800:	687a      	ldr	r2, [r7, #4]
   82802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82806:	4618      	mov	r0, r3
   82808:	4b07      	ldr	r3, [pc, #28]	; (82828 <vParTestSetLED+0x70>)
   8280a:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   8280c:	4b05      	ldr	r3, [pc, #20]	; (82824 <vParTestSetLED+0x6c>)
   8280e:	4798      	blx	r3
		}
	}
}
   82810:	3708      	adds	r7, #8
   82812:	46bd      	mov	sp, r7
   82814:	bd80      	pop	{r7, pc}
   82816:	bf00      	nop
   82818:	000819e9 	.word	0x000819e9
   8281c:	00082c88 	.word	0x00082c88
   82820:	00080e91 	.word	0x00080e91
   82824:	00081a2d 	.word	0x00081a2d
   82828:	00080e5d 	.word	0x00080e5d

0008282c <RTT_Handler>:

/************************************************************************/
/*					REAL-TIME TIMER INTERRUPT HANDLER                   */
/************************************************************************/
void RTT_Handler(void)
{
   8282c:	b580      	push	{r7, lr}
   8282e:	b082      	sub	sp, #8
   82830:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT); // Reading the status register clears the interrupt requests.
   82832:	4812      	ldr	r0, [pc, #72]	; (8287c <RTT_Handler+0x50>)
   82834:	4b12      	ldr	r3, [pc, #72]	; (82880 <RTT_Handler+0x54>)
   82836:	4798      	blx	r3
   82838:	6078      	str	r0, [r7, #4]

	/* Time has changed*/
	pio_toggle_pin(LED0_GPIO);
   8283a:	203b      	movs	r0, #59	; 0x3b
   8283c:	4b11      	ldr	r3, [pc, #68]	; (82884 <RTT_Handler+0x58>)
   8283e:	4798      	blx	r3
		
	/* Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
   82840:	687b      	ldr	r3, [r7, #4]
   82842:	f003 0301 	and.w	r3, r3, #1
   82846:	2b00      	cmp	r3, #0
   82848:	d015      	beq.n	82876 <RTT_Handler+0x4a>
		g_uc_alarmed = 1;
   8284a:	4b0f      	ldr	r3, [pc, #60]	; (82888 <RTT_Handler+0x5c>)
   8284c:	2201      	movs	r2, #1
   8284e:	701a      	strb	r2, [r3, #0]
		pio_toggle_pin(LED1_GPIO);
   82850:	2055      	movs	r0, #85	; 0x55
   82852:	4b0c      	ldr	r3, [pc, #48]	; (82884 <RTT_Handler+0x58>)
   82854:	4798      	blx	r3
		rtt_init(RTT, 32768);
   82856:	4809      	ldr	r0, [pc, #36]	; (8287c <RTT_Handler+0x50>)
   82858:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8285c:	4b0b      	ldr	r3, [pc, #44]	; (8288c <RTT_Handler+0x60>)
   8285e:	4798      	blx	r3
		rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
   82860:	4806      	ldr	r0, [pc, #24]	; (8287c <RTT_Handler+0x50>)
   82862:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   82866:	4b0a      	ldr	r3, [pc, #40]	; (82890 <RTT_Handler+0x64>)
   82868:	4798      	blx	r3
		rtt_write_alarm_time(RTT, g_ul_new_alarm);
   8286a:	4b0a      	ldr	r3, [pc, #40]	; (82894 <RTT_Handler+0x68>)
   8286c:	681b      	ldr	r3, [r3, #0]
   8286e:	4803      	ldr	r0, [pc, #12]	; (8287c <RTT_Handler+0x50>)
   82870:	4619      	mov	r1, r3
   82872:	4b09      	ldr	r3, [pc, #36]	; (82898 <RTT_Handler+0x6c>)
   82874:	4798      	blx	r3
	}
}
   82876:	3708      	adds	r7, #8
   82878:	46bd      	mov	sp, r7
   8287a:	bd80      	pop	{r7, pc}
   8287c:	400e1a30 	.word	0x400e1a30
   82880:	000814d1 	.word	0x000814d1
   82884:	00080ec5 	.word	0x00080ec5
   82888:	200705c4 	.word	0x200705c4
   8288c:	00081455 	.word	0x00081455
   82890:	00081479 	.word	0x00081479
   82894:	200705c8 	.word	0x200705c8
   82898:	000814e9 	.word	0x000814e9

0008289c <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   8289c:	b590      	push	{r4, r7, lr}
   8289e:	b087      	sub	sp, #28
   828a0:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   828a2:	2300      	movs	r3, #0
   828a4:	60fb      	str	r3, [r7, #12]
uint8_t ucChar;
uint32_t ulChar;
uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   828a6:	4826      	ldr	r0, [pc, #152]	; (82940 <USART0_Handler+0xa4>)
   828a8:	4b26      	ldr	r3, [pc, #152]	; (82944 <USART0_Handler+0xa8>)
   828aa:	4798      	blx	r3
   828ac:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   828ae:	4824      	ldr	r0, [pc, #144]	; (82940 <USART0_Handler+0xa4>)
   828b0:	4b25      	ldr	r3, [pc, #148]	; (82948 <USART0_Handler+0xac>)
   828b2:	4798      	blx	r3
   828b4:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   828b6:	697a      	ldr	r2, [r7, #20]
   828b8:	693b      	ldr	r3, [r7, #16]
   828ba:	4013      	ands	r3, r2
   828bc:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   828be:	697b      	ldr	r3, [r7, #20]
   828c0:	f003 0302 	and.w	r3, r3, #2
   828c4:	2b00      	cmp	r3, #0
   828c6:	d017      	beq.n	828f8 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   828c8:	4b20      	ldr	r3, [pc, #128]	; (8294c <USART0_Handler+0xb0>)
   828ca:	6819      	ldr	r1, [r3, #0]
   828cc:	f107 020b 	add.w	r2, r7, #11
   828d0:	f107 030c 	add.w	r3, r7, #12
   828d4:	4608      	mov	r0, r1
   828d6:	4611      	mov	r1, r2
   828d8:	461a      	mov	r2, r3
   828da:	4b1d      	ldr	r3, [pc, #116]	; (82950 <USART0_Handler+0xb4>)
   828dc:	4798      	blx	r3
   828de:	4603      	mov	r3, r0
   828e0:	2b01      	cmp	r3, #1
   828e2:	d105      	bne.n	828f0 <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   828e4:	7afb      	ldrb	r3, [r7, #11]
   828e6:	4816      	ldr	r0, [pc, #88]	; (82940 <USART0_Handler+0xa4>)
   828e8:	4619      	mov	r1, r3
   828ea:	4b1a      	ldr	r3, [pc, #104]	; (82954 <USART0_Handler+0xb8>)
   828ec:	4798      	blx	r3
   828ee:	e003      	b.n	828f8 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   828f0:	4813      	ldr	r0, [pc, #76]	; (82940 <USART0_Handler+0xa4>)
   828f2:	2102      	movs	r1, #2
   828f4:	4b18      	ldr	r3, [pc, #96]	; (82958 <USART0_Handler+0xbc>)
   828f6:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   828f8:	697b      	ldr	r3, [r7, #20]
   828fa:	f003 0301 	and.w	r3, r3, #1
   828fe:	2b00      	cmp	r3, #0
   82900:	d013      	beq.n	8292a <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   82902:	1d3b      	adds	r3, r7, #4
   82904:	480e      	ldr	r0, [pc, #56]	; (82940 <USART0_Handler+0xa4>)
   82906:	4619      	mov	r1, r3
   82908:	4b14      	ldr	r3, [pc, #80]	; (8295c <USART0_Handler+0xc0>)
   8290a:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   8290c:	687b      	ldr	r3, [r7, #4]
   8290e:	b2db      	uxtb	r3, r3
   82910:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   82912:	4b13      	ldr	r3, [pc, #76]	; (82960 <USART0_Handler+0xc4>)
   82914:	6819      	ldr	r1, [r3, #0]
   82916:	f107 020b 	add.w	r2, r7, #11
   8291a:	f107 030c 	add.w	r3, r7, #12
   8291e:	4608      	mov	r0, r1
   82920:	4611      	mov	r1, r2
   82922:	461a      	mov	r2, r3
   82924:	2300      	movs	r3, #0
   82926:	4c0f      	ldr	r4, [pc, #60]	; (82964 <USART0_Handler+0xc8>)
   82928:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   8292a:	68fb      	ldr	r3, [r7, #12]
   8292c:	2b00      	cmp	r3, #0
   8292e:	d003      	beq.n	82938 <USART0_Handler+0x9c>
   82930:	4b0d      	ldr	r3, [pc, #52]	; (82968 <USART0_Handler+0xcc>)
   82932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82936:	601a      	str	r2, [r3, #0]
}
   82938:	371c      	adds	r7, #28
   8293a:	46bd      	mov	sp, r7
   8293c:	bd90      	pop	{r4, r7, pc}
   8293e:	bf00      	nop
   82940:	40098000 	.word	0x40098000
   82944:	00081575 	.word	0x00081575
   82948:	0008155d 	.word	0x0008155d
   8294c:	20070570 	.word	0x20070570
   82950:	00081c51 	.word	0x00081c51
   82954:	0008158d 	.word	0x0008158d
   82958:	00081541 	.word	0x00081541
   8295c:	000815d1 	.word	0x000815d1
   82960:	2007056c 	.word	0x2007056c
   82964:	00081b55 	.word	0x00081b55
   82968:	e000ed04 	.word	0xe000ed04

0008296c <__libc_init_array>:
   8296c:	b570      	push	{r4, r5, r6, lr}
   8296e:	4e0f      	ldr	r6, [pc, #60]	; (829ac <__libc_init_array+0x40>)
   82970:	4d0f      	ldr	r5, [pc, #60]	; (829b0 <__libc_init_array+0x44>)
   82972:	1b76      	subs	r6, r6, r5
   82974:	10b6      	asrs	r6, r6, #2
   82976:	d007      	beq.n	82988 <__libc_init_array+0x1c>
   82978:	3d04      	subs	r5, #4
   8297a:	2400      	movs	r4, #0
   8297c:	3401      	adds	r4, #1
   8297e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82982:	4798      	blx	r3
   82984:	42a6      	cmp	r6, r4
   82986:	d1f9      	bne.n	8297c <__libc_init_array+0x10>
   82988:	4e0a      	ldr	r6, [pc, #40]	; (829b4 <__libc_init_array+0x48>)
   8298a:	4d0b      	ldr	r5, [pc, #44]	; (829b8 <__libc_init_array+0x4c>)
   8298c:	f000 f986 	bl	82c9c <_init>
   82990:	1b76      	subs	r6, r6, r5
   82992:	10b6      	asrs	r6, r6, #2
   82994:	d008      	beq.n	829a8 <__libc_init_array+0x3c>
   82996:	3d04      	subs	r5, #4
   82998:	2400      	movs	r4, #0
   8299a:	3401      	adds	r4, #1
   8299c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   829a0:	4798      	blx	r3
   829a2:	42a6      	cmp	r6, r4
   829a4:	d1f9      	bne.n	8299a <__libc_init_array+0x2e>
   829a6:	bd70      	pop	{r4, r5, r6, pc}
   829a8:	bd70      	pop	{r4, r5, r6, pc}
   829aa:	bf00      	nop
   829ac:	00082ca8 	.word	0x00082ca8
   829b0:	00082ca8 	.word	0x00082ca8
   829b4:	00082cb0 	.word	0x00082cb0
   829b8:	00082ca8 	.word	0x00082ca8

000829bc <memcmp>:
   829bc:	2a03      	cmp	r2, #3
   829be:	b470      	push	{r4, r5, r6}
   829c0:	d928      	bls.n	82a14 <memcmp+0x58>
   829c2:	ea40 0301 	orr.w	r3, r0, r1
   829c6:	079b      	lsls	r3, r3, #30
   829c8:	d013      	beq.n	829f2 <memcmp+0x36>
   829ca:	7805      	ldrb	r5, [r0, #0]
   829cc:	780c      	ldrb	r4, [r1, #0]
   829ce:	42a5      	cmp	r5, r4
   829d0:	d124      	bne.n	82a1c <memcmp+0x60>
   829d2:	3a01      	subs	r2, #1
   829d4:	2300      	movs	r3, #0
   829d6:	e005      	b.n	829e4 <memcmp+0x28>
   829d8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   829dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   829e0:	42a5      	cmp	r5, r4
   829e2:	d11b      	bne.n	82a1c <memcmp+0x60>
   829e4:	4293      	cmp	r3, r2
   829e6:	f103 0301 	add.w	r3, r3, #1
   829ea:	d1f5      	bne.n	829d8 <memcmp+0x1c>
   829ec:	2000      	movs	r0, #0
   829ee:	bc70      	pop	{r4, r5, r6}
   829f0:	4770      	bx	lr
   829f2:	460c      	mov	r4, r1
   829f4:	4603      	mov	r3, r0
   829f6:	6825      	ldr	r5, [r4, #0]
   829f8:	681e      	ldr	r6, [r3, #0]
   829fa:	4621      	mov	r1, r4
   829fc:	42ae      	cmp	r6, r5
   829fe:	4618      	mov	r0, r3
   82a00:	f104 0404 	add.w	r4, r4, #4
   82a04:	f103 0304 	add.w	r3, r3, #4
   82a08:	d104      	bne.n	82a14 <memcmp+0x58>
   82a0a:	3a04      	subs	r2, #4
   82a0c:	2a03      	cmp	r2, #3
   82a0e:	4618      	mov	r0, r3
   82a10:	4621      	mov	r1, r4
   82a12:	d8f0      	bhi.n	829f6 <memcmp+0x3a>
   82a14:	2a00      	cmp	r2, #0
   82a16:	d1d8      	bne.n	829ca <memcmp+0xe>
   82a18:	4610      	mov	r0, r2
   82a1a:	e7e8      	b.n	829ee <memcmp+0x32>
   82a1c:	1b28      	subs	r0, r5, r4
   82a1e:	bc70      	pop	{r4, r5, r6}
   82a20:	4770      	bx	lr
   82a22:	bf00      	nop

00082a24 <memcpy>:
   82a24:	4684      	mov	ip, r0
   82a26:	ea41 0300 	orr.w	r3, r1, r0
   82a2a:	f013 0303 	ands.w	r3, r3, #3
   82a2e:	d149      	bne.n	82ac4 <memcpy+0xa0>
   82a30:	3a40      	subs	r2, #64	; 0x40
   82a32:	d323      	bcc.n	82a7c <memcpy+0x58>
   82a34:	680b      	ldr	r3, [r1, #0]
   82a36:	6003      	str	r3, [r0, #0]
   82a38:	684b      	ldr	r3, [r1, #4]
   82a3a:	6043      	str	r3, [r0, #4]
   82a3c:	688b      	ldr	r3, [r1, #8]
   82a3e:	6083      	str	r3, [r0, #8]
   82a40:	68cb      	ldr	r3, [r1, #12]
   82a42:	60c3      	str	r3, [r0, #12]
   82a44:	690b      	ldr	r3, [r1, #16]
   82a46:	6103      	str	r3, [r0, #16]
   82a48:	694b      	ldr	r3, [r1, #20]
   82a4a:	6143      	str	r3, [r0, #20]
   82a4c:	698b      	ldr	r3, [r1, #24]
   82a4e:	6183      	str	r3, [r0, #24]
   82a50:	69cb      	ldr	r3, [r1, #28]
   82a52:	61c3      	str	r3, [r0, #28]
   82a54:	6a0b      	ldr	r3, [r1, #32]
   82a56:	6203      	str	r3, [r0, #32]
   82a58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82a5a:	6243      	str	r3, [r0, #36]	; 0x24
   82a5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82a5e:	6283      	str	r3, [r0, #40]	; 0x28
   82a60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82a62:	62c3      	str	r3, [r0, #44]	; 0x2c
   82a64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82a66:	6303      	str	r3, [r0, #48]	; 0x30
   82a68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82a6a:	6343      	str	r3, [r0, #52]	; 0x34
   82a6c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82a6e:	6383      	str	r3, [r0, #56]	; 0x38
   82a70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82a72:	63c3      	str	r3, [r0, #60]	; 0x3c
   82a74:	3040      	adds	r0, #64	; 0x40
   82a76:	3140      	adds	r1, #64	; 0x40
   82a78:	3a40      	subs	r2, #64	; 0x40
   82a7a:	d2db      	bcs.n	82a34 <memcpy+0x10>
   82a7c:	3230      	adds	r2, #48	; 0x30
   82a7e:	d30b      	bcc.n	82a98 <memcpy+0x74>
   82a80:	680b      	ldr	r3, [r1, #0]
   82a82:	6003      	str	r3, [r0, #0]
   82a84:	684b      	ldr	r3, [r1, #4]
   82a86:	6043      	str	r3, [r0, #4]
   82a88:	688b      	ldr	r3, [r1, #8]
   82a8a:	6083      	str	r3, [r0, #8]
   82a8c:	68cb      	ldr	r3, [r1, #12]
   82a8e:	60c3      	str	r3, [r0, #12]
   82a90:	3010      	adds	r0, #16
   82a92:	3110      	adds	r1, #16
   82a94:	3a10      	subs	r2, #16
   82a96:	d2f3      	bcs.n	82a80 <memcpy+0x5c>
   82a98:	320c      	adds	r2, #12
   82a9a:	d305      	bcc.n	82aa8 <memcpy+0x84>
   82a9c:	f851 3b04 	ldr.w	r3, [r1], #4
   82aa0:	f840 3b04 	str.w	r3, [r0], #4
   82aa4:	3a04      	subs	r2, #4
   82aa6:	d2f9      	bcs.n	82a9c <memcpy+0x78>
   82aa8:	3204      	adds	r2, #4
   82aaa:	d008      	beq.n	82abe <memcpy+0x9a>
   82aac:	07d2      	lsls	r2, r2, #31
   82aae:	bf1c      	itt	ne
   82ab0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ab4:	f800 3b01 	strbne.w	r3, [r0], #1
   82ab8:	d301      	bcc.n	82abe <memcpy+0x9a>
   82aba:	880b      	ldrh	r3, [r1, #0]
   82abc:	8003      	strh	r3, [r0, #0]
   82abe:	4660      	mov	r0, ip
   82ac0:	4770      	bx	lr
   82ac2:	bf00      	nop
   82ac4:	2a08      	cmp	r2, #8
   82ac6:	d313      	bcc.n	82af0 <memcpy+0xcc>
   82ac8:	078b      	lsls	r3, r1, #30
   82aca:	d0b1      	beq.n	82a30 <memcpy+0xc>
   82acc:	f010 0303 	ands.w	r3, r0, #3
   82ad0:	d0ae      	beq.n	82a30 <memcpy+0xc>
   82ad2:	f1c3 0304 	rsb	r3, r3, #4
   82ad6:	1ad2      	subs	r2, r2, r3
   82ad8:	07db      	lsls	r3, r3, #31
   82ada:	bf1c      	itt	ne
   82adc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ae0:	f800 3b01 	strbne.w	r3, [r0], #1
   82ae4:	d3a4      	bcc.n	82a30 <memcpy+0xc>
   82ae6:	f831 3b02 	ldrh.w	r3, [r1], #2
   82aea:	f820 3b02 	strh.w	r3, [r0], #2
   82aee:	e79f      	b.n	82a30 <memcpy+0xc>
   82af0:	3a04      	subs	r2, #4
   82af2:	d3d9      	bcc.n	82aa8 <memcpy+0x84>
   82af4:	3a01      	subs	r2, #1
   82af6:	f811 3b01 	ldrb.w	r3, [r1], #1
   82afa:	f800 3b01 	strb.w	r3, [r0], #1
   82afe:	d2f9      	bcs.n	82af4 <memcpy+0xd0>
   82b00:	780b      	ldrb	r3, [r1, #0]
   82b02:	7003      	strb	r3, [r0, #0]
   82b04:	784b      	ldrb	r3, [r1, #1]
   82b06:	7043      	strb	r3, [r0, #1]
   82b08:	788b      	ldrb	r3, [r1, #2]
   82b0a:	7083      	strb	r3, [r0, #2]
   82b0c:	4660      	mov	r0, ip
   82b0e:	4770      	bx	lr

00082b10 <register_fini>:
   82b10:	4b02      	ldr	r3, [pc, #8]	; (82b1c <register_fini+0xc>)
   82b12:	b113      	cbz	r3, 82b1a <register_fini+0xa>
   82b14:	4802      	ldr	r0, [pc, #8]	; (82b20 <register_fini+0x10>)
   82b16:	f000 b805 	b.w	82b24 <atexit>
   82b1a:	4770      	bx	lr
   82b1c:	00000000 	.word	0x00000000
   82b20:	00082b31 	.word	0x00082b31

00082b24 <atexit>:
   82b24:	4601      	mov	r1, r0
   82b26:	2000      	movs	r0, #0
   82b28:	4602      	mov	r2, r0
   82b2a:	4603      	mov	r3, r0
   82b2c:	f000 b818 	b.w	82b60 <__register_exitproc>

00082b30 <__libc_fini_array>:
   82b30:	b538      	push	{r3, r4, r5, lr}
   82b32:	4d09      	ldr	r5, [pc, #36]	; (82b58 <__libc_fini_array+0x28>)
   82b34:	4c09      	ldr	r4, [pc, #36]	; (82b5c <__libc_fini_array+0x2c>)
   82b36:	1b64      	subs	r4, r4, r5
   82b38:	10a4      	asrs	r4, r4, #2
   82b3a:	bf18      	it	ne
   82b3c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82b40:	d005      	beq.n	82b4e <__libc_fini_array+0x1e>
   82b42:	3c01      	subs	r4, #1
   82b44:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82b48:	4798      	blx	r3
   82b4a:	2c00      	cmp	r4, #0
   82b4c:	d1f9      	bne.n	82b42 <__libc_fini_array+0x12>
   82b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82b52:	f000 b8ad 	b.w	82cb0 <_fini>
   82b56:	bf00      	nop
   82b58:	00082cbc 	.word	0x00082cbc
   82b5c:	00082cc0 	.word	0x00082cc0

00082b60 <__register_exitproc>:
   82b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   82b62:	4c27      	ldr	r4, [pc, #156]	; (82c00 <__register_exitproc+0xa0>)
   82b64:	b085      	sub	sp, #20
   82b66:	6826      	ldr	r6, [r4, #0]
   82b68:	4607      	mov	r7, r0
   82b6a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82b6e:	2c00      	cmp	r4, #0
   82b70:	d040      	beq.n	82bf4 <__register_exitproc+0x94>
   82b72:	6865      	ldr	r5, [r4, #4]
   82b74:	2d1f      	cmp	r5, #31
   82b76:	dd1e      	ble.n	82bb6 <__register_exitproc+0x56>
   82b78:	4822      	ldr	r0, [pc, #136]	; (82c04 <__register_exitproc+0xa4>)
   82b7a:	b918      	cbnz	r0, 82b84 <__register_exitproc+0x24>
   82b7c:	f04f 30ff 	mov.w	r0, #4294967295
   82b80:	b005      	add	sp, #20
   82b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82b88:	9103      	str	r1, [sp, #12]
   82b8a:	9202      	str	r2, [sp, #8]
   82b8c:	9301      	str	r3, [sp, #4]
   82b8e:	f3af 8000 	nop.w
   82b92:	9903      	ldr	r1, [sp, #12]
   82b94:	4604      	mov	r4, r0
   82b96:	9a02      	ldr	r2, [sp, #8]
   82b98:	9b01      	ldr	r3, [sp, #4]
   82b9a:	2800      	cmp	r0, #0
   82b9c:	d0ee      	beq.n	82b7c <__register_exitproc+0x1c>
   82b9e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82ba2:	2000      	movs	r0, #0
   82ba4:	6025      	str	r5, [r4, #0]
   82ba6:	6060      	str	r0, [r4, #4]
   82ba8:	4605      	mov	r5, r0
   82baa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82bae:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82bb2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82bb6:	b93f      	cbnz	r7, 82bc8 <__register_exitproc+0x68>
   82bb8:	1c6b      	adds	r3, r5, #1
   82bba:	2000      	movs	r0, #0
   82bbc:	3502      	adds	r5, #2
   82bbe:	6063      	str	r3, [r4, #4]
   82bc0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82bc4:	b005      	add	sp, #20
   82bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bc8:	2601      	movs	r6, #1
   82bca:	40ae      	lsls	r6, r5
   82bcc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82bd0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82bd4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82bd8:	2f02      	cmp	r7, #2
   82bda:	ea42 0206 	orr.w	r2, r2, r6
   82bde:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82be2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82be6:	d1e7      	bne.n	82bb8 <__register_exitproc+0x58>
   82be8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82bec:	431e      	orrs	r6, r3
   82bee:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82bf2:	e7e1      	b.n	82bb8 <__register_exitproc+0x58>
   82bf4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82bf8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82bfc:	e7b9      	b.n	82b72 <__register_exitproc+0x12>
   82bfe:	bf00      	nop
   82c00:	00082c98 	.word	0x00082c98
   82c04:	00000000 	.word	0x00000000

00082c08 <can_bit_time>:
   82c08:	02020308 02094b03 43020303 0303030a     .....K.....C....
   82c18:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   82c28:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   82c38:	05050510 06114504 47040505 06060512     .....E.....G....
   82c48:	06134304 44040606 06060714 08154604     .C.....D.....F..
   82c58:	47040606 07070716 08174404 46040708     ...G.....D.....F
   82c68:	08080718 08194304 44040808              .....C.....D

00082c74 <ucExpectedStackBytes.5295>:
   82c74:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   82c84:	a5a5a5a5                                ....

00082c88 <ulLED>:
   82c88:	00000056 0000003b 00000055 00000043     V...;...U...C...

00082c98 <_global_impure_ptr>:
   82c98:	20070010                                ... 

00082c9c <_init>:
   82c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82c9e:	bf00      	nop
   82ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82ca2:	bc08      	pop	{r3}
   82ca4:	469e      	mov	lr, r3
   82ca6:	4770      	bx	lr

00082ca8 <__init_array_start>:
   82ca8:	00082b11 	.word	0x00082b11

00082cac <__frame_dummy_init_array_entry>:
   82cac:	00080119                                ....

00082cb0 <_fini>:
   82cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82cb2:	bf00      	nop
   82cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82cb6:	bc08      	pop	{r3}
   82cb8:	469e      	mov	lr, r3
   82cba:	4770      	bx	lr

00082cbc <__fini_array_start>:
   82cbc:	000800f5 	.word	0x000800f5
