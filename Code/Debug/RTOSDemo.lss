
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c98  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00083c98  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a1e8  20070438  000840d0  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a620  0008e2b8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   000092bd  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aa4  00000000  00000000  00019779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000046cc  00000000  00000000  0001b21d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c68  00000000  00000000  0001f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b38  00000000  00000000  00020551  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017fdc  00000000  00000000  00021089  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d5c2  00000000  00000000  00039065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000682b9  00000000  00000000  00046627  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000028c0  00000000  00000000  000ae8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c620 	.word	0x2007c620
   80004:	00080d7d 	.word	0x00080d7d
   80008:	00080d75 	.word	0x00080d75
   8000c:	00080d75 	.word	0x00080d75
   80010:	00080d75 	.word	0x00080d75
   80014:	00080d75 	.word	0x00080d75
   80018:	00080d75 	.word	0x00080d75
	...
   8002c:	00081225 	.word	0x00081225
   80030:	00080d75 	.word	0x00080d75
   80034:	00000000 	.word	0x00000000
   80038:	000813e9 	.word	0x000813e9
   8003c:	0008142d 	.word	0x0008142d
   80040:	00080d75 	.word	0x00080d75
   80044:	00080d75 	.word	0x00080d75
   80048:	00080d75 	.word	0x00080d75
   8004c:	00080d75 	.word	0x00080d75
   80050:	00080d75 	.word	0x00080d75
   80054:	00080d75 	.word	0x00080d75
   80058:	00080d75 	.word	0x00080d75
   8005c:	00080d75 	.word	0x00080d75
   80060:	00080d75 	.word	0x00080d75
   80064:	00080d75 	.word	0x00080d75
   80068:	00080d75 	.word	0x00080d75
   8006c:	000809a1 	.word	0x000809a1
   80070:	000809b9 	.word	0x000809b9
   80074:	000809d1 	.word	0x000809d1
   80078:	000809e9 	.word	0x000809e9
   8007c:	00080a01 	.word	0x00080a01
   80080:	00080a19 	.word	0x00080a19
   80084:	00083835 	.word	0x00083835
   80088:	00080d75 	.word	0x00080d75
   8008c:	00080d75 	.word	0x00080d75
   80090:	00080d75 	.word	0x00080d75
   80094:	00080d75 	.word	0x00080d75
   80098:	00080d75 	.word	0x00080d75
   8009c:	00080d75 	.word	0x00080d75
   800a0:	00080d75 	.word	0x00080d75
   800a4:	00080d75 	.word	0x00080d75
   800a8:	00080d75 	.word	0x00080d75
   800ac:	00080d75 	.word	0x00080d75
   800b0:	00080d75 	.word	0x00080d75
   800b4:	00080d75 	.word	0x00080d75
   800b8:	00080d75 	.word	0x00080d75
   800bc:	00080d75 	.word	0x00080d75
   800c0:	00080d75 	.word	0x00080d75
   800c4:	00080d75 	.word	0x00080d75
   800c8:	00080d75 	.word	0x00080d75
   800cc:	00080d75 	.word	0x00080d75
   800d0:	00080d75 	.word	0x00080d75
   800d4:	00080d75 	.word	0x00080d75
   800d8:	00080d75 	.word	0x00080d75
   800dc:	00080d75 	.word	0x00080d75
   800e0:	00080d75 	.word	0x00080d75
   800e4:	00080d75 	.word	0x00080d75
   800e8:	00080d75 	.word	0x00080d75
   800ec:	00080d75 	.word	0x00080d75
   800f0:	00080d75 	.word	0x00080d75

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00083c98 	.word	0x00083c98

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083c98 	.word	0x00083c98
   8013c:	2007043c 	.word	0x2007043c
   80140:	00083c98 	.word	0x00083c98
   80144:	00000000 	.word	0x00000000

00080148 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	2b07      	cmp	r3, #7
   80154:	d82e      	bhi.n	801b4 <osc_enable+0x6c>
   80156:	a201      	add	r2, pc, #4	; (adr r2, 8015c <osc_enable+0x14>)
   80158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8015c:	000801b5 	.word	0x000801b5
   80160:	0008017d 	.word	0x0008017d
   80164:	00080185 	.word	0x00080185
   80168:	0008018d 	.word	0x0008018d
   8016c:	00080195 	.word	0x00080195
   80170:	0008019d 	.word	0x0008019d
   80174:	000801a5 	.word	0x000801a5
   80178:	000801ad 	.word	0x000801ad
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8017c:	2000      	movs	r0, #0
   8017e:	4b0f      	ldr	r3, [pc, #60]	; (801bc <osc_enable+0x74>)
   80180:	4798      	blx	r3
		break;
   80182:	e017      	b.n	801b4 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80184:	2001      	movs	r0, #1
   80186:	4b0d      	ldr	r3, [pc, #52]	; (801bc <osc_enable+0x74>)
   80188:	4798      	blx	r3
		break;
   8018a:	e013      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8018c:	2000      	movs	r0, #0
   8018e:	4b0c      	ldr	r3, [pc, #48]	; (801c0 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e00f      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80194:	2010      	movs	r0, #16
   80196:	4b0a      	ldr	r3, [pc, #40]	; (801c0 <osc_enable+0x78>)
   80198:	4798      	blx	r3
		break;
   8019a:	e00b      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8019c:	2020      	movs	r0, #32
   8019e:	4b08      	ldr	r3, [pc, #32]	; (801c0 <osc_enable+0x78>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e007      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   801a4:	2000      	movs	r0, #0
   801a6:	4b07      	ldr	r3, [pc, #28]	; (801c4 <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e003      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   801ac:	2001      	movs	r0, #1
   801ae:	4b05      	ldr	r3, [pc, #20]	; (801c4 <osc_enable+0x7c>)
   801b0:	4798      	blx	r3
		break;
   801b2:	bf00      	nop
	}
}
   801b4:	3708      	adds	r7, #8
   801b6:	46bd      	mov	sp, r7
   801b8:	bd80      	pop	{r7, pc}
   801ba:	bf00      	nop
   801bc:	00080ab5 	.word	0x00080ab5
   801c0:	00080b25 	.word	0x00080b25
   801c4:	00080bc5 	.word	0x00080bc5

000801c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801c8:	b580      	push	{r7, lr}
   801ca:	b082      	sub	sp, #8
   801cc:	af00      	add	r7, sp, #0
   801ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	2b07      	cmp	r3, #7
   801d4:	d826      	bhi.n	80224 <osc_is_ready+0x5c>
   801d6:	a201      	add	r2, pc, #4	; (adr r2, 801dc <osc_is_ready+0x14>)
   801d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801dc:	000801fd 	.word	0x000801fd
   801e0:	00080201 	.word	0x00080201
   801e4:	00080201 	.word	0x00080201
   801e8:	00080213 	.word	0x00080213
   801ec:	00080213 	.word	0x00080213
   801f0:	00080213 	.word	0x00080213
   801f4:	00080213 	.word	0x00080213
   801f8:	00080213 	.word	0x00080213
	case OSC_SLCK_32K_RC:
		return 1;
   801fc:	2301      	movs	r3, #1
   801fe:	e012      	b.n	80226 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80200:	4b0b      	ldr	r3, [pc, #44]	; (80230 <osc_is_ready+0x68>)
   80202:	4798      	blx	r3
   80204:	4603      	mov	r3, r0
   80206:	2b00      	cmp	r3, #0
   80208:	bf0c      	ite	eq
   8020a:	2300      	moveq	r3, #0
   8020c:	2301      	movne	r3, #1
   8020e:	b2db      	uxtb	r3, r3
   80210:	e009      	b.n	80226 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80212:	4b08      	ldr	r3, [pc, #32]	; (80234 <osc_is_ready+0x6c>)
   80214:	4798      	blx	r3
   80216:	4603      	mov	r3, r0
   80218:	2b00      	cmp	r3, #0
   8021a:	bf0c      	ite	eq
   8021c:	2300      	moveq	r3, #0
   8021e:	2301      	movne	r3, #1
   80220:	b2db      	uxtb	r3, r3
   80222:	e000      	b.n	80226 <osc_is_ready+0x5e>
	}

	return 0;
   80224:	2300      	movs	r3, #0
}
   80226:	4618      	mov	r0, r3
   80228:	3708      	adds	r7, #8
   8022a:	46bd      	mov	sp, r7
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	00080af1 	.word	0x00080af1
   80234:	00080c31 	.word	0x00080c31

00080238 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80238:	b480      	push	{r7}
   8023a:	b083      	sub	sp, #12
   8023c:	af00      	add	r7, sp, #0
   8023e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80240:	687b      	ldr	r3, [r7, #4]
   80242:	2b07      	cmp	r3, #7
   80244:	d825      	bhi.n	80292 <osc_get_rate+0x5a>
   80246:	a201      	add	r2, pc, #4	; (adr r2, 8024c <osc_get_rate+0x14>)
   80248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8024c:	0008026d 	.word	0x0008026d
   80250:	00080273 	.word	0x00080273
   80254:	00080279 	.word	0x00080279
   80258:	0008027f 	.word	0x0008027f
   8025c:	00080283 	.word	0x00080283
   80260:	00080287 	.word	0x00080287
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8026c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80270:	e010      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80276:	e00d      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8027c:	e00a      	b.n	80294 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <osc_get_rate+0x68>)
   80280:	e008      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80282:	4b08      	ldr	r3, [pc, #32]	; (802a4 <osc_get_rate+0x6c>)
   80284:	e006      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80286:	4b08      	ldr	r3, [pc, #32]	; (802a8 <osc_get_rate+0x70>)
   80288:	e004      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8028a:	4b07      	ldr	r3, [pc, #28]	; (802a8 <osc_get_rate+0x70>)
   8028c:	e002      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8028e:	4b06      	ldr	r3, [pc, #24]	; (802a8 <osc_get_rate+0x70>)
   80290:	e000      	b.n	80294 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80292:	2300      	movs	r3, #0
}
   80294:	4618      	mov	r0, r3
   80296:	370c      	adds	r7, #12
   80298:	46bd      	mov	sp, r7
   8029a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8029e:	4770      	bx	lr
   802a0:	003d0900 	.word	0x003d0900
   802a4:	007a1200 	.word	0x007a1200
   802a8:	00b71b00 	.word	0x00b71b00

000802ac <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802ac:	b580      	push	{r7, lr}
   802ae:	b082      	sub	sp, #8
   802b0:	af00      	add	r7, sp, #0
   802b2:	4603      	mov	r3, r0
   802b4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802b6:	bf00      	nop
   802b8:	79fb      	ldrb	r3, [r7, #7]
   802ba:	4618      	mov	r0, r3
   802bc:	4b05      	ldr	r3, [pc, #20]	; (802d4 <osc_wait_ready+0x28>)
   802be:	4798      	blx	r3
   802c0:	4603      	mov	r3, r0
   802c2:	f083 0301 	eor.w	r3, r3, #1
   802c6:	b2db      	uxtb	r3, r3
   802c8:	2b00      	cmp	r3, #0
   802ca:	d1f5      	bne.n	802b8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802cc:	3708      	adds	r7, #8
   802ce:	46bd      	mov	sp, r7
   802d0:	bd80      	pop	{r7, pc}
   802d2:	bf00      	nop
   802d4:	000801c9 	.word	0x000801c9

000802d8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802d8:	b580      	push	{r7, lr}
   802da:	b086      	sub	sp, #24
   802dc:	af00      	add	r7, sp, #0
   802de:	60f8      	str	r0, [r7, #12]
   802e0:	607a      	str	r2, [r7, #4]
   802e2:	603b      	str	r3, [r7, #0]
   802e4:	460b      	mov	r3, r1
   802e6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802e8:	687b      	ldr	r3, [r7, #4]
   802ea:	2b00      	cmp	r3, #0
   802ec:	d107      	bne.n	802fe <pll_config_init+0x26>
   802ee:	683b      	ldr	r3, [r7, #0]
   802f0:	2b00      	cmp	r3, #0
   802f2:	d104      	bne.n	802fe <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802f4:	68fb      	ldr	r3, [r7, #12]
   802f6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802fa:	601a      	str	r2, [r3, #0]
   802fc:	e019      	b.n	80332 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802fe:	7afb      	ldrb	r3, [r7, #11]
   80300:	4618      	mov	r0, r3
   80302:	4b0d      	ldr	r3, [pc, #52]	; (80338 <pll_config_init+0x60>)
   80304:	4798      	blx	r3
   80306:	4602      	mov	r2, r0
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	fbb2 f3f3 	udiv	r3, r2, r3
   8030e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80310:	697b      	ldr	r3, [r7, #20]
   80312:	683a      	ldr	r2, [r7, #0]
   80314:	fb02 f303 	mul.w	r3, r2, r3
   80318:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	3b01      	subs	r3, #1
   8031e:	041a      	lsls	r2, r3, #16
   80320:	4b06      	ldr	r3, [pc, #24]	; (8033c <pll_config_init+0x64>)
   80322:	4013      	ands	r3, r2
   80324:	687a      	ldr	r2, [r7, #4]
   80326:	b2d2      	uxtb	r2, r2
   80328:	4313      	orrs	r3, r2
   8032a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	601a      	str	r2, [r3, #0]
	}
}
   80332:	3718      	adds	r7, #24
   80334:	46bd      	mov	sp, r7
   80336:	bd80      	pop	{r7, pc}
   80338:	00080239 	.word	0x00080239
   8033c:	07ff0000 	.word	0x07ff0000

00080340 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80340:	b580      	push	{r7, lr}
   80342:	b082      	sub	sp, #8
   80344:	af00      	add	r7, sp, #0
   80346:	6078      	str	r0, [r7, #4]
   80348:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8034a:	683b      	ldr	r3, [r7, #0]
   8034c:	2b00      	cmp	r3, #0
   8034e:	d108      	bne.n	80362 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <pll_enable+0x34>)
   80352:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80354:	4b08      	ldr	r3, [pc, #32]	; (80378 <pll_enable+0x38>)
   80356:	687a      	ldr	r2, [r7, #4]
   80358:	6812      	ldr	r2, [r2, #0]
   8035a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8035e:	629a      	str	r2, [r3, #40]	; 0x28
   80360:	e005      	b.n	8036e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80362:	4b05      	ldr	r3, [pc, #20]	; (80378 <pll_enable+0x38>)
   80364:	687a      	ldr	r2, [r7, #4]
   80366:	6812      	ldr	r2, [r2, #0]
   80368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8036c:	61da      	str	r2, [r3, #28]
	}
}
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00080c4d 	.word	0x00080c4d
   80378:	400e0600 	.word	0x400e0600

0008037c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80384:	687b      	ldr	r3, [r7, #4]
   80386:	2b00      	cmp	r3, #0
   80388:	d103      	bne.n	80392 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <pll_is_locked+0x24>)
   8038c:	4798      	blx	r3
   8038e:	4603      	mov	r3, r0
   80390:	e002      	b.n	80398 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80392:	4b04      	ldr	r3, [pc, #16]	; (803a4 <pll_is_locked+0x28>)
   80394:	4798      	blx	r3
   80396:	4603      	mov	r3, r0
}
   80398:	4618      	mov	r0, r3
   8039a:	3708      	adds	r7, #8
   8039c:	46bd      	mov	sp, r7
   8039e:	bd80      	pop	{r7, pc}
   803a0:	00080c65 	.word	0x00080c65
   803a4:	00080c81 	.word	0x00080c81

000803a8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a8:	b580      	push	{r7, lr}
   803aa:	b082      	sub	sp, #8
   803ac:	af00      	add	r7, sp, #0
   803ae:	4603      	mov	r3, r0
   803b0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803b2:	79fb      	ldrb	r3, [r7, #7]
   803b4:	3b03      	subs	r3, #3
   803b6:	2b04      	cmp	r3, #4
   803b8:	d808      	bhi.n	803cc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803ba:	79fb      	ldrb	r3, [r7, #7]
   803bc:	4618      	mov	r0, r3
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <pll_enable_source+0x2c>)
   803c0:	4798      	blx	r3
		osc_wait_ready(e_src);
   803c2:	79fb      	ldrb	r3, [r7, #7]
   803c4:	4618      	mov	r0, r3
   803c6:	4b04      	ldr	r3, [pc, #16]	; (803d8 <pll_enable_source+0x30>)
   803c8:	4798      	blx	r3
		break;
   803ca:	e000      	b.n	803ce <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803cc:	bf00      	nop
	}
}
   803ce:	3708      	adds	r7, #8
   803d0:	46bd      	mov	sp, r7
   803d2:	bd80      	pop	{r7, pc}
   803d4:	00080149 	.word	0x00080149
   803d8:	000802ad 	.word	0x000802ad

000803dc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803dc:	b580      	push	{r7, lr}
   803de:	b082      	sub	sp, #8
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803e4:	bf00      	nop
   803e6:	6878      	ldr	r0, [r7, #4]
   803e8:	4b04      	ldr	r3, [pc, #16]	; (803fc <pll_wait_for_lock+0x20>)
   803ea:	4798      	blx	r3
   803ec:	4603      	mov	r3, r0
   803ee:	2b00      	cmp	r3, #0
   803f0:	d0f9      	beq.n	803e6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803f2:	2300      	movs	r3, #0
}
   803f4:	4618      	mov	r0, r3
   803f6:	3708      	adds	r7, #8
   803f8:	46bd      	mov	sp, r7
   803fa:	bd80      	pop	{r7, pc}
   803fc:	0008037d 	.word	0x0008037d

00080400 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80400:	b580      	push	{r7, lr}
   80402:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80404:	2006      	movs	r0, #6
   80406:	4b04      	ldr	r3, [pc, #16]	; (80418 <sysclk_get_main_hz+0x18>)
   80408:	4798      	blx	r3
   8040a:	4602      	mov	r2, r0
   8040c:	4613      	mov	r3, r2
   8040e:	00db      	lsls	r3, r3, #3
   80410:	1a9b      	subs	r3, r3, r2
   80412:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80414:	4618      	mov	r0, r3
   80416:	bd80      	pop	{r7, pc}
   80418:	00080239 	.word	0x00080239

0008041c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80420:	4b02      	ldr	r3, [pc, #8]	; (8042c <sysclk_get_cpu_hz+0x10>)
   80422:	4798      	blx	r3
   80424:	4603      	mov	r3, r0
   80426:	085b      	lsrs	r3, r3, #1
}
   80428:	4618      	mov	r0, r3
   8042a:	bd80      	pop	{r7, pc}
   8042c:	00080401 	.word	0x00080401

00080430 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80430:	b590      	push	{r4, r7, lr}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80436:	4b10      	ldr	r3, [pc, #64]	; (80478 <sysclk_init+0x48>)
   80438:	4798      	blx	r3
   8043a:	4603      	mov	r3, r0
   8043c:	4618      	mov	r0, r3
   8043e:	4b0f      	ldr	r3, [pc, #60]	; (8047c <sysclk_init+0x4c>)
   80440:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80442:	2006      	movs	r0, #6
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <sysclk_init+0x50>)
   80446:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80448:	1d3b      	adds	r3, r7, #4
   8044a:	4618      	mov	r0, r3
   8044c:	2106      	movs	r1, #6
   8044e:	2201      	movs	r2, #1
   80450:	230e      	movs	r3, #14
   80452:	4c0c      	ldr	r4, [pc, #48]	; (80484 <sysclk_init+0x54>)
   80454:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80456:	1d3b      	adds	r3, r7, #4
   80458:	4618      	mov	r0, r3
   8045a:	2100      	movs	r1, #0
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <sysclk_init+0x58>)
   8045e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80460:	2000      	movs	r0, #0
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <sysclk_init+0x5c>)
   80464:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80466:	2010      	movs	r0, #16
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <sysclk_init+0x60>)
   8046a:	4798      	blx	r3
		break;
   8046c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8046e:	4b09      	ldr	r3, [pc, #36]	; (80494 <sysclk_init+0x64>)
   80470:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bd90      	pop	{r4, r7, pc}
   80478:	0008041d 	.word	0x0008041d
   8047c:	00080fa5 	.word	0x00080fa5
   80480:	000803a9 	.word	0x000803a9
   80484:	000802d9 	.word	0x000802d9
   80488:	00080341 	.word	0x00080341
   8048c:	000803dd 	.word	0x000803dd
   80490:	00080a31 	.word	0x00080a31
   80494:	00080e25 	.word	0x00080e25

00080498 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
   80498:	b580      	push	{r7, lr}
   8049a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8049c:	4b1a      	ldr	r3, [pc, #104]	; (80508 <board_init+0x70>)
   8049e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a2:	605a      	str	r2, [r3, #4]
#endif

	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   804a4:	2057      	movs	r0, #87	; 0x57
   804a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804aa:	4b18      	ldr	r3, [pc, #96]	; (8050c <board_init+0x74>)
   804ac:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   804ae:	2057      	movs	r0, #87	; 0x57
   804b0:	4b17      	ldr	r3, [pc, #92]	; (80510 <board_init+0x78>)
   804b2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804b4:	203b      	movs	r0, #59	; 0x3b
   804b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ba:	4b14      	ldr	r3, [pc, #80]	; (8050c <board_init+0x74>)
   804bc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804be:	2055      	movs	r0, #85	; 0x55
   804c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804c4:	4b11      	ldr	r3, [pc, #68]	; (8050c <board_init+0x74>)
   804c6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   804c8:	2056      	movs	r0, #86	; 0x56
   804ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <board_init+0x74>)
   804d0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   804d2:	2087      	movs	r0, #135	; 0x87
   804d4:	490f      	ldr	r1, [pc, #60]	; (80514 <board_init+0x7c>)
   804d6:	4b0d      	ldr	r3, [pc, #52]	; (8050c <board_init+0x74>)
   804d8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   804da:	2037      	movs	r0, #55	; 0x37
   804dc:	490e      	ldr	r1, [pc, #56]	; (80518 <board_init+0x80>)
   804de:	4b0b      	ldr	r3, [pc, #44]	; (8050c <board_init+0x74>)
   804e0:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   804e2:	200a      	movs	r0, #10
   804e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804e8:	4b08      	ldr	r3, [pc, #32]	; (8050c <board_init+0x74>)
   804ea:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   804ec:	200b      	movs	r0, #11
   804ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804f2:	4b06      	ldr	r3, [pc, #24]	; (8050c <board_init+0x74>)
   804f4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   804f6:	208e      	movs	r0, #142	; 0x8e
   804f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804fc:	4b03      	ldr	r3, [pc, #12]	; (8050c <board_init+0x74>)
   804fe:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80500:	208e      	movs	r0, #142	; 0x8e
   80502:	4b06      	ldr	r3, [pc, #24]	; (8051c <board_init+0x84>)
   80504:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80506:	bd80      	pop	{r7, pc}
   80508:	400e1a50 	.word	0x400e1a50
   8050c:	000807c1 	.word	0x000807c1
   80510:	000806f9 	.word	0x000806f9
   80514:	28000079 	.word	0x28000079
   80518:	28000059 	.word	0x28000059
   8051c:	0008072d 	.word	0x0008072d

00080520 <pio_pull_up>:
   80520:	b480      	push	{r7}
   80522:	b085      	sub	sp, #20
   80524:	af00      	add	r7, sp, #0
   80526:	60f8      	str	r0, [r7, #12]
   80528:	60b9      	str	r1, [r7, #8]
   8052a:	607a      	str	r2, [r7, #4]
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	2b00      	cmp	r3, #0
   80530:	d003      	beq.n	8053a <pio_pull_up+0x1a>
   80532:	68fb      	ldr	r3, [r7, #12]
   80534:	68ba      	ldr	r2, [r7, #8]
   80536:	665a      	str	r2, [r3, #100]	; 0x64
   80538:	e002      	b.n	80540 <pio_pull_up+0x20>
   8053a:	68fb      	ldr	r3, [r7, #12]
   8053c:	68ba      	ldr	r2, [r7, #8]
   8053e:	661a      	str	r2, [r3, #96]	; 0x60
   80540:	3714      	adds	r7, #20
   80542:	46bd      	mov	sp, r7
   80544:	f85d 7b04 	ldr.w	r7, [sp], #4
   80548:	4770      	bx	lr
   8054a:	bf00      	nop

0008054c <pio_set_peripheral>:
   8054c:	b480      	push	{r7}
   8054e:	b087      	sub	sp, #28
   80550:	af00      	add	r7, sp, #0
   80552:	60f8      	str	r0, [r7, #12]
   80554:	60b9      	str	r1, [r7, #8]
   80556:	607a      	str	r2, [r7, #4]
   80558:	68fb      	ldr	r3, [r7, #12]
   8055a:	687a      	ldr	r2, [r7, #4]
   8055c:	645a      	str	r2, [r3, #68]	; 0x44
   8055e:	68bb      	ldr	r3, [r7, #8]
   80560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80564:	d01f      	beq.n	805a6 <pio_set_peripheral+0x5a>
   80566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8056a:	d805      	bhi.n	80578 <pio_set_peripheral+0x2c>
   8056c:	2b00      	cmp	r3, #0
   8056e:	d027      	beq.n	805c0 <pio_set_peripheral+0x74>
   80570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80574:	d00a      	beq.n	8058c <pio_set_peripheral+0x40>
   80576:	e01f      	b.n	805b8 <pio_set_peripheral+0x6c>
   80578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8057c:	d020      	beq.n	805c0 <pio_set_peripheral+0x74>
   8057e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80582:	d01d      	beq.n	805c0 <pio_set_peripheral+0x74>
   80584:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80588:	d01a      	beq.n	805c0 <pio_set_peripheral+0x74>
   8058a:	e015      	b.n	805b8 <pio_set_peripheral+0x6c>
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80590:	617b      	str	r3, [r7, #20]
   80592:	68fb      	ldr	r3, [r7, #12]
   80594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80596:	687b      	ldr	r3, [r7, #4]
   80598:	43d9      	mvns	r1, r3
   8059a:	697b      	ldr	r3, [r7, #20]
   8059c:	400b      	ands	r3, r1
   8059e:	401a      	ands	r2, r3
   805a0:	68fb      	ldr	r3, [r7, #12]
   805a2:	671a      	str	r2, [r3, #112]	; 0x70
   805a4:	e008      	b.n	805b8 <pio_set_peripheral+0x6c>
   805a6:	68fb      	ldr	r3, [r7, #12]
   805a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   805aa:	617b      	str	r3, [r7, #20]
   805ac:	687a      	ldr	r2, [r7, #4]
   805ae:	697b      	ldr	r3, [r7, #20]
   805b0:	431a      	orrs	r2, r3
   805b2:	68fb      	ldr	r3, [r7, #12]
   805b4:	671a      	str	r2, [r3, #112]	; 0x70
   805b6:	bf00      	nop
   805b8:	68fb      	ldr	r3, [r7, #12]
   805ba:	687a      	ldr	r2, [r7, #4]
   805bc:	605a      	str	r2, [r3, #4]
   805be:	e000      	b.n	805c2 <pio_set_peripheral+0x76>
   805c0:	bf00      	nop
   805c2:	371c      	adds	r7, #28
   805c4:	46bd      	mov	sp, r7
   805c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   805ca:	4770      	bx	lr

000805cc <pio_set_input>:
   805cc:	b580      	push	{r7, lr}
   805ce:	b084      	sub	sp, #16
   805d0:	af00      	add	r7, sp, #0
   805d2:	60f8      	str	r0, [r7, #12]
   805d4:	60b9      	str	r1, [r7, #8]
   805d6:	607a      	str	r2, [r7, #4]
   805d8:	68f8      	ldr	r0, [r7, #12]
   805da:	68b9      	ldr	r1, [r7, #8]
   805dc:	4b18      	ldr	r3, [pc, #96]	; (80640 <pio_set_input+0x74>)
   805de:	4798      	blx	r3
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	f003 0301 	and.w	r3, r3, #1
   805e6:	68f8      	ldr	r0, [r7, #12]
   805e8:	68b9      	ldr	r1, [r7, #8]
   805ea:	461a      	mov	r2, r3
   805ec:	4b15      	ldr	r3, [pc, #84]	; (80644 <pio_set_input+0x78>)
   805ee:	4798      	blx	r3
   805f0:	687b      	ldr	r3, [r7, #4]
   805f2:	f003 030a 	and.w	r3, r3, #10
   805f6:	2b00      	cmp	r3, #0
   805f8:	d003      	beq.n	80602 <pio_set_input+0x36>
   805fa:	68fb      	ldr	r3, [r7, #12]
   805fc:	68ba      	ldr	r2, [r7, #8]
   805fe:	621a      	str	r2, [r3, #32]
   80600:	e002      	b.n	80608 <pio_set_input+0x3c>
   80602:	68fb      	ldr	r3, [r7, #12]
   80604:	68ba      	ldr	r2, [r7, #8]
   80606:	625a      	str	r2, [r3, #36]	; 0x24
   80608:	687b      	ldr	r3, [r7, #4]
   8060a:	f003 0302 	and.w	r3, r3, #2
   8060e:	2b00      	cmp	r3, #0
   80610:	d004      	beq.n	8061c <pio_set_input+0x50>
   80612:	68fb      	ldr	r3, [r7, #12]
   80614:	68ba      	ldr	r2, [r7, #8]
   80616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8061a:	e008      	b.n	8062e <pio_set_input+0x62>
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	f003 0308 	and.w	r3, r3, #8
   80622:	2b00      	cmp	r3, #0
   80624:	d003      	beq.n	8062e <pio_set_input+0x62>
   80626:	68fb      	ldr	r3, [r7, #12]
   80628:	68ba      	ldr	r2, [r7, #8]
   8062a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8062e:	68fb      	ldr	r3, [r7, #12]
   80630:	68ba      	ldr	r2, [r7, #8]
   80632:	615a      	str	r2, [r3, #20]
   80634:	68fb      	ldr	r3, [r7, #12]
   80636:	68ba      	ldr	r2, [r7, #8]
   80638:	601a      	str	r2, [r3, #0]
   8063a:	3710      	adds	r7, #16
   8063c:	46bd      	mov	sp, r7
   8063e:	bd80      	pop	{r7, pc}
   80640:	000806ad 	.word	0x000806ad
   80644:	00080521 	.word	0x00080521

00080648 <pio_set_output>:
   80648:	b580      	push	{r7, lr}
   8064a:	b084      	sub	sp, #16
   8064c:	af00      	add	r7, sp, #0
   8064e:	60f8      	str	r0, [r7, #12]
   80650:	60b9      	str	r1, [r7, #8]
   80652:	607a      	str	r2, [r7, #4]
   80654:	603b      	str	r3, [r7, #0]
   80656:	68f8      	ldr	r0, [r7, #12]
   80658:	68b9      	ldr	r1, [r7, #8]
   8065a:	4b12      	ldr	r3, [pc, #72]	; (806a4 <pio_set_output+0x5c>)
   8065c:	4798      	blx	r3
   8065e:	68f8      	ldr	r0, [r7, #12]
   80660:	68b9      	ldr	r1, [r7, #8]
   80662:	69ba      	ldr	r2, [r7, #24]
   80664:	4b10      	ldr	r3, [pc, #64]	; (806a8 <pio_set_output+0x60>)
   80666:	4798      	blx	r3
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	2b00      	cmp	r3, #0
   8066c:	d003      	beq.n	80676 <pio_set_output+0x2e>
   8066e:	68fb      	ldr	r3, [r7, #12]
   80670:	68ba      	ldr	r2, [r7, #8]
   80672:	651a      	str	r2, [r3, #80]	; 0x50
   80674:	e002      	b.n	8067c <pio_set_output+0x34>
   80676:	68fb      	ldr	r3, [r7, #12]
   80678:	68ba      	ldr	r2, [r7, #8]
   8067a:	655a      	str	r2, [r3, #84]	; 0x54
   8067c:	687b      	ldr	r3, [r7, #4]
   8067e:	2b00      	cmp	r3, #0
   80680:	d003      	beq.n	8068a <pio_set_output+0x42>
   80682:	68fb      	ldr	r3, [r7, #12]
   80684:	68ba      	ldr	r2, [r7, #8]
   80686:	631a      	str	r2, [r3, #48]	; 0x30
   80688:	e002      	b.n	80690 <pio_set_output+0x48>
   8068a:	68fb      	ldr	r3, [r7, #12]
   8068c:	68ba      	ldr	r2, [r7, #8]
   8068e:	635a      	str	r2, [r3, #52]	; 0x34
   80690:	68fb      	ldr	r3, [r7, #12]
   80692:	68ba      	ldr	r2, [r7, #8]
   80694:	611a      	str	r2, [r3, #16]
   80696:	68fb      	ldr	r3, [r7, #12]
   80698:	68ba      	ldr	r2, [r7, #8]
   8069a:	601a      	str	r2, [r3, #0]
   8069c:	3710      	adds	r7, #16
   8069e:	46bd      	mov	sp, r7
   806a0:	bd80      	pop	{r7, pc}
   806a2:	bf00      	nop
   806a4:	000806ad 	.word	0x000806ad
   806a8:	00080521 	.word	0x00080521

000806ac <pio_disable_interrupt>:
   806ac:	b480      	push	{r7}
   806ae:	b083      	sub	sp, #12
   806b0:	af00      	add	r7, sp, #0
   806b2:	6078      	str	r0, [r7, #4]
   806b4:	6039      	str	r1, [r7, #0]
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	683a      	ldr	r2, [r7, #0]
   806ba:	645a      	str	r2, [r3, #68]	; 0x44
   806bc:	370c      	adds	r7, #12
   806be:	46bd      	mov	sp, r7
   806c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   806c4:	4770      	bx	lr
   806c6:	bf00      	nop

000806c8 <pio_get_interrupt_status>:
   806c8:	b480      	push	{r7}
   806ca:	b083      	sub	sp, #12
   806cc:	af00      	add	r7, sp, #0
   806ce:	6078      	str	r0, [r7, #4]
   806d0:	687b      	ldr	r3, [r7, #4]
   806d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   806d4:	4618      	mov	r0, r3
   806d6:	370c      	adds	r7, #12
   806d8:	46bd      	mov	sp, r7
   806da:	f85d 7b04 	ldr.w	r7, [sp], #4
   806de:	4770      	bx	lr

000806e0 <pio_get_interrupt_mask>:
   806e0:	b480      	push	{r7}
   806e2:	b083      	sub	sp, #12
   806e4:	af00      	add	r7, sp, #0
   806e6:	6078      	str	r0, [r7, #4]
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   806ec:	4618      	mov	r0, r3
   806ee:	370c      	adds	r7, #12
   806f0:	46bd      	mov	sp, r7
   806f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   806f6:	4770      	bx	lr

000806f8 <pio_set_pin_high>:
   806f8:	b480      	push	{r7}
   806fa:	b085      	sub	sp, #20
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	095b      	lsrs	r3, r3, #5
   80704:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80708:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8070c:	025b      	lsls	r3, r3, #9
   8070e:	60fb      	str	r3, [r7, #12]
   80710:	687b      	ldr	r3, [r7, #4]
   80712:	f003 031f 	and.w	r3, r3, #31
   80716:	2201      	movs	r2, #1
   80718:	fa02 f303 	lsl.w	r3, r2, r3
   8071c:	461a      	mov	r2, r3
   8071e:	68fb      	ldr	r3, [r7, #12]
   80720:	631a      	str	r2, [r3, #48]	; 0x30
   80722:	3714      	adds	r7, #20
   80724:	46bd      	mov	sp, r7
   80726:	f85d 7b04 	ldr.w	r7, [sp], #4
   8072a:	4770      	bx	lr

0008072c <pio_set_pin_low>:
   8072c:	b480      	push	{r7}
   8072e:	b085      	sub	sp, #20
   80730:	af00      	add	r7, sp, #0
   80732:	6078      	str	r0, [r7, #4]
   80734:	687b      	ldr	r3, [r7, #4]
   80736:	095b      	lsrs	r3, r3, #5
   80738:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8073c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80740:	025b      	lsls	r3, r3, #9
   80742:	60fb      	str	r3, [r7, #12]
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	f003 031f 	and.w	r3, r3, #31
   8074a:	2201      	movs	r2, #1
   8074c:	fa02 f303 	lsl.w	r3, r2, r3
   80750:	461a      	mov	r2, r3
   80752:	68fb      	ldr	r3, [r7, #12]
   80754:	635a      	str	r2, [r3, #52]	; 0x34
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8075e:	4770      	bx	lr

00080760 <pio_toggle_pin>:
   80760:	b480      	push	{r7}
   80762:	b085      	sub	sp, #20
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
   80768:	687b      	ldr	r3, [r7, #4]
   8076a:	095b      	lsrs	r3, r3, #5
   8076c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80770:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80774:	025b      	lsls	r3, r3, #9
   80776:	60fb      	str	r3, [r7, #12]
   80778:	68fb      	ldr	r3, [r7, #12]
   8077a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8077c:	687b      	ldr	r3, [r7, #4]
   8077e:	f003 031f 	and.w	r3, r3, #31
   80782:	2101      	movs	r1, #1
   80784:	fa01 f303 	lsl.w	r3, r1, r3
   80788:	4013      	ands	r3, r2
   8078a:	2b00      	cmp	r3, #0
   8078c:	d009      	beq.n	807a2 <pio_toggle_pin+0x42>
   8078e:	687b      	ldr	r3, [r7, #4]
   80790:	f003 031f 	and.w	r3, r3, #31
   80794:	2201      	movs	r2, #1
   80796:	fa02 f303 	lsl.w	r3, r2, r3
   8079a:	461a      	mov	r2, r3
   8079c:	68fb      	ldr	r3, [r7, #12]
   8079e:	635a      	str	r2, [r3, #52]	; 0x34
   807a0:	e008      	b.n	807b4 <pio_toggle_pin+0x54>
   807a2:	687b      	ldr	r3, [r7, #4]
   807a4:	f003 031f 	and.w	r3, r3, #31
   807a8:	2201      	movs	r2, #1
   807aa:	fa02 f303 	lsl.w	r3, r2, r3
   807ae:	461a      	mov	r2, r3
   807b0:	68fb      	ldr	r3, [r7, #12]
   807b2:	631a      	str	r2, [r3, #48]	; 0x30
   807b4:	3714      	adds	r7, #20
   807b6:	46bd      	mov	sp, r7
   807b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807bc:	4770      	bx	lr
   807be:	bf00      	nop

000807c0 <pio_configure_pin>:
   807c0:	b590      	push	{r4, r7, lr}
   807c2:	b087      	sub	sp, #28
   807c4:	af02      	add	r7, sp, #8
   807c6:	6078      	str	r0, [r7, #4]
   807c8:	6039      	str	r1, [r7, #0]
   807ca:	687b      	ldr	r3, [r7, #4]
   807cc:	095b      	lsrs	r3, r3, #5
   807ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   807d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   807d6:	025b      	lsls	r3, r3, #9
   807d8:	60fb      	str	r3, [r7, #12]
   807da:	683b      	ldr	r3, [r7, #0]
   807dc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   807e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807e4:	d048      	beq.n	80878 <pio_configure_pin+0xb8>
   807e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807ea:	d806      	bhi.n	807fa <pio_configure_pin+0x3a>
   807ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   807f0:	d00a      	beq.n	80808 <pio_configure_pin+0x48>
   807f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   807f6:	d023      	beq.n	80840 <pio_configure_pin+0x80>
   807f8:	e070      	b.n	808dc <pio_configure_pin+0x11c>
   807fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807fe:	d047      	beq.n	80890 <pio_configure_pin+0xd0>
   80800:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80804:	d044      	beq.n	80890 <pio_configure_pin+0xd0>
   80806:	e069      	b.n	808dc <pio_configure_pin+0x11c>
   80808:	687b      	ldr	r3, [r7, #4]
   8080a:	f003 031f 	and.w	r3, r3, #31
   8080e:	2201      	movs	r2, #1
   80810:	fa02 f303 	lsl.w	r3, r2, r3
   80814:	68f8      	ldr	r0, [r7, #12]
   80816:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8081a:	461a      	mov	r2, r3
   8081c:	4b33      	ldr	r3, [pc, #204]	; (808ec <pio_configure_pin+0x12c>)
   8081e:	4798      	blx	r3
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	f003 031f 	and.w	r3, r3, #31
   80826:	2201      	movs	r2, #1
   80828:	fa02 f303 	lsl.w	r3, r2, r3
   8082c:	461a      	mov	r2, r3
   8082e:	683b      	ldr	r3, [r7, #0]
   80830:	f003 0301 	and.w	r3, r3, #1
   80834:	68f8      	ldr	r0, [r7, #12]
   80836:	4611      	mov	r1, r2
   80838:	461a      	mov	r2, r3
   8083a:	4b2d      	ldr	r3, [pc, #180]	; (808f0 <pio_configure_pin+0x130>)
   8083c:	4798      	blx	r3
   8083e:	e04f      	b.n	808e0 <pio_configure_pin+0x120>
   80840:	687b      	ldr	r3, [r7, #4]
   80842:	f003 031f 	and.w	r3, r3, #31
   80846:	2201      	movs	r2, #1
   80848:	fa02 f303 	lsl.w	r3, r2, r3
   8084c:	68f8      	ldr	r0, [r7, #12]
   8084e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80852:	461a      	mov	r2, r3
   80854:	4b25      	ldr	r3, [pc, #148]	; (808ec <pio_configure_pin+0x12c>)
   80856:	4798      	blx	r3
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	f003 031f 	and.w	r3, r3, #31
   8085e:	2201      	movs	r2, #1
   80860:	fa02 f303 	lsl.w	r3, r2, r3
   80864:	461a      	mov	r2, r3
   80866:	683b      	ldr	r3, [r7, #0]
   80868:	f003 0301 	and.w	r3, r3, #1
   8086c:	68f8      	ldr	r0, [r7, #12]
   8086e:	4611      	mov	r1, r2
   80870:	461a      	mov	r2, r3
   80872:	4b1f      	ldr	r3, [pc, #124]	; (808f0 <pio_configure_pin+0x130>)
   80874:	4798      	blx	r3
   80876:	e033      	b.n	808e0 <pio_configure_pin+0x120>
   80878:	687b      	ldr	r3, [r7, #4]
   8087a:	f003 031f 	and.w	r3, r3, #31
   8087e:	2201      	movs	r2, #1
   80880:	fa02 f303 	lsl.w	r3, r2, r3
   80884:	68f8      	ldr	r0, [r7, #12]
   80886:	4619      	mov	r1, r3
   80888:	683a      	ldr	r2, [r7, #0]
   8088a:	4b1a      	ldr	r3, [pc, #104]	; (808f4 <pio_configure_pin+0x134>)
   8088c:	4798      	blx	r3
   8088e:	e027      	b.n	808e0 <pio_configure_pin+0x120>
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	f003 031f 	and.w	r3, r3, #31
   80896:	2201      	movs	r2, #1
   80898:	fa02 f303 	lsl.w	r3, r2, r3
   8089c:	4619      	mov	r1, r3
   8089e:	683b      	ldr	r3, [r7, #0]
   808a0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   808a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   808a8:	bf14      	ite	ne
   808aa:	2300      	movne	r3, #0
   808ac:	2301      	moveq	r3, #1
   808ae:	b2db      	uxtb	r3, r3
   808b0:	461a      	mov	r2, r3
   808b2:	683b      	ldr	r3, [r7, #0]
   808b4:	f003 0304 	and.w	r3, r3, #4
   808b8:	2b00      	cmp	r3, #0
   808ba:	bf0c      	ite	eq
   808bc:	2300      	moveq	r3, #0
   808be:	2301      	movne	r3, #1
   808c0:	b2db      	uxtb	r3, r3
   808c2:	6838      	ldr	r0, [r7, #0]
   808c4:	f000 0001 	and.w	r0, r0, #1
   808c8:	2800      	cmp	r0, #0
   808ca:	bf0c      	ite	eq
   808cc:	2000      	moveq	r0, #0
   808ce:	2001      	movne	r0, #1
   808d0:	b2c0      	uxtb	r0, r0
   808d2:	9000      	str	r0, [sp, #0]
   808d4:	68f8      	ldr	r0, [r7, #12]
   808d6:	4c08      	ldr	r4, [pc, #32]	; (808f8 <pio_configure_pin+0x138>)
   808d8:	47a0      	blx	r4
   808da:	e001      	b.n	808e0 <pio_configure_pin+0x120>
   808dc:	2300      	movs	r3, #0
   808de:	e000      	b.n	808e2 <pio_configure_pin+0x122>
   808e0:	2301      	movs	r3, #1
   808e2:	4618      	mov	r0, r3
   808e4:	3714      	adds	r7, #20
   808e6:	46bd      	mov	sp, r7
   808e8:	bd90      	pop	{r4, r7, pc}
   808ea:	bf00      	nop
   808ec:	0008054d 	.word	0x0008054d
   808f0:	00080521 	.word	0x00080521
   808f4:	000805cd 	.word	0x000805cd
   808f8:	00080649 	.word	0x00080649

000808fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808fc:	b580      	push	{r7, lr}
   808fe:	b084      	sub	sp, #16
   80900:	af00      	add	r7, sp, #0
   80902:	6078      	str	r0, [r7, #4]
   80904:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80906:	6878      	ldr	r0, [r7, #4]
   80908:	4b22      	ldr	r3, [pc, #136]	; (80994 <pio_handler_process+0x98>)
   8090a:	4798      	blx	r3
   8090c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8090e:	6878      	ldr	r0, [r7, #4]
   80910:	4b21      	ldr	r3, [pc, #132]	; (80998 <pio_handler_process+0x9c>)
   80912:	4798      	blx	r3
   80914:	4603      	mov	r3, r0
   80916:	68fa      	ldr	r2, [r7, #12]
   80918:	4013      	ands	r3, r2
   8091a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8091c:	68fb      	ldr	r3, [r7, #12]
   8091e:	2b00      	cmp	r3, #0
   80920:	d035      	beq.n	8098e <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   80922:	2300      	movs	r3, #0
   80924:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   80926:	e02f      	b.n	80988 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80928:	4a1c      	ldr	r2, [pc, #112]	; (8099c <pio_handler_process+0xa0>)
   8092a:	68bb      	ldr	r3, [r7, #8]
   8092c:	011b      	lsls	r3, r3, #4
   8092e:	4413      	add	r3, r2
   80930:	681a      	ldr	r2, [r3, #0]
   80932:	683b      	ldr	r3, [r7, #0]
   80934:	429a      	cmp	r2, r3
   80936:	d124      	bne.n	80982 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80938:	4a18      	ldr	r2, [pc, #96]	; (8099c <pio_handler_process+0xa0>)
   8093a:	68bb      	ldr	r3, [r7, #8]
   8093c:	011b      	lsls	r3, r3, #4
   8093e:	4413      	add	r3, r2
   80940:	685a      	ldr	r2, [r3, #4]
   80942:	68fb      	ldr	r3, [r7, #12]
   80944:	4013      	ands	r3, r2
   80946:	2b00      	cmp	r3, #0
   80948:	d01b      	beq.n	80982 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8094a:	4a14      	ldr	r2, [pc, #80]	; (8099c <pio_handler_process+0xa0>)
   8094c:	68bb      	ldr	r3, [r7, #8]
   8094e:	011b      	lsls	r3, r3, #4
   80950:	4413      	add	r3, r2
   80952:	3308      	adds	r3, #8
   80954:	685b      	ldr	r3, [r3, #4]
   80956:	4911      	ldr	r1, [pc, #68]	; (8099c <pio_handler_process+0xa0>)
   80958:	68ba      	ldr	r2, [r7, #8]
   8095a:	0112      	lsls	r2, r2, #4
   8095c:	440a      	add	r2, r1
   8095e:	6811      	ldr	r1, [r2, #0]
   80960:	480e      	ldr	r0, [pc, #56]	; (8099c <pio_handler_process+0xa0>)
   80962:	68ba      	ldr	r2, [r7, #8]
   80964:	0112      	lsls	r2, r2, #4
   80966:	4402      	add	r2, r0
   80968:	6852      	ldr	r2, [r2, #4]
   8096a:	4608      	mov	r0, r1
   8096c:	4611      	mov	r1, r2
   8096e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80970:	4a0a      	ldr	r2, [pc, #40]	; (8099c <pio_handler_process+0xa0>)
   80972:	68bb      	ldr	r3, [r7, #8]
   80974:	011b      	lsls	r3, r3, #4
   80976:	4413      	add	r3, r2
   80978:	685b      	ldr	r3, [r3, #4]
   8097a:	43db      	mvns	r3, r3
   8097c:	68fa      	ldr	r2, [r7, #12]
   8097e:	4013      	ands	r3, r2
   80980:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   80982:	68bb      	ldr	r3, [r7, #8]
   80984:	3301      	adds	r3, #1
   80986:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80988:	68fb      	ldr	r3, [r7, #12]
   8098a:	2b00      	cmp	r3, #0
   8098c:	d1cc      	bne.n	80928 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8098e:	3710      	adds	r7, #16
   80990:	46bd      	mov	sp, r7
   80992:	bd80      	pop	{r7, pc}
   80994:	000806c9 	.word	0x000806c9
   80998:	000806e1 	.word	0x000806e1
   8099c:	20070454 	.word	0x20070454

000809a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   809a0:	b580      	push	{r7, lr}
   809a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   809a4:	4802      	ldr	r0, [pc, #8]	; (809b0 <PIOA_Handler+0x10>)
   809a6:	210b      	movs	r1, #11
   809a8:	4b02      	ldr	r3, [pc, #8]	; (809b4 <PIOA_Handler+0x14>)
   809aa:	4798      	blx	r3
}
   809ac:	bd80      	pop	{r7, pc}
   809ae:	bf00      	nop
   809b0:	400e0e00 	.word	0x400e0e00
   809b4:	000808fd 	.word	0x000808fd

000809b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   809bc:	4802      	ldr	r0, [pc, #8]	; (809c8 <PIOB_Handler+0x10>)
   809be:	210c      	movs	r1, #12
   809c0:	4b02      	ldr	r3, [pc, #8]	; (809cc <PIOB_Handler+0x14>)
   809c2:	4798      	blx	r3
}
   809c4:	bd80      	pop	{r7, pc}
   809c6:	bf00      	nop
   809c8:	400e1000 	.word	0x400e1000
   809cc:	000808fd 	.word	0x000808fd

000809d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809d0:	b580      	push	{r7, lr}
   809d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   809d4:	4802      	ldr	r0, [pc, #8]	; (809e0 <PIOC_Handler+0x10>)
   809d6:	210d      	movs	r1, #13
   809d8:	4b02      	ldr	r3, [pc, #8]	; (809e4 <PIOC_Handler+0x14>)
   809da:	4798      	blx	r3
}
   809dc:	bd80      	pop	{r7, pc}
   809de:	bf00      	nop
   809e0:	400e1200 	.word	0x400e1200
   809e4:	000808fd 	.word	0x000808fd

000809e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809e8:	b580      	push	{r7, lr}
   809ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   809ec:	4802      	ldr	r0, [pc, #8]	; (809f8 <PIOD_Handler+0x10>)
   809ee:	210e      	movs	r1, #14
   809f0:	4b02      	ldr	r3, [pc, #8]	; (809fc <PIOD_Handler+0x14>)
   809f2:	4798      	blx	r3
}
   809f4:	bd80      	pop	{r7, pc}
   809f6:	bf00      	nop
   809f8:	400e1400 	.word	0x400e1400
   809fc:	000808fd 	.word	0x000808fd

00080a00 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
   80a00:	b580      	push	{r7, lr}
   80a02:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
   80a04:	4802      	ldr	r0, [pc, #8]	; (80a10 <PIOE_Handler+0x10>)
   80a06:	210f      	movs	r1, #15
   80a08:	4b02      	ldr	r3, [pc, #8]	; (80a14 <PIOE_Handler+0x14>)
   80a0a:	4798      	blx	r3
}
   80a0c:	bd80      	pop	{r7, pc}
   80a0e:	bf00      	nop
   80a10:	400e1600 	.word	0x400e1600
   80a14:	000808fd 	.word	0x000808fd

00080a18 <PIOF_Handler>:
/**
 * \brief Parallel IO Controller F interrupt handler.
 * Redefined PIOF interrupt handler for NVIC interrupt table.
 */
void PIOF_Handler(void)
{
   80a18:	b580      	push	{r7, lr}
   80a1a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOF, ID_PIOF);
   80a1c:	4802      	ldr	r0, [pc, #8]	; (80a28 <PIOF_Handler+0x10>)
   80a1e:	2110      	movs	r1, #16
   80a20:	4b02      	ldr	r3, [pc, #8]	; (80a2c <PIOF_Handler+0x14>)
   80a22:	4798      	blx	r3
}
   80a24:	bd80      	pop	{r7, pc}
   80a26:	bf00      	nop
   80a28:	400e1800 	.word	0x400e1800
   80a2c:	000808fd 	.word	0x000808fd

00080a30 <pmc_switch_mck_to_pllack>:
   80a30:	b480      	push	{r7}
   80a32:	b085      	sub	sp, #20
   80a34:	af00      	add	r7, sp, #0
   80a36:	6078      	str	r0, [r7, #4]
   80a38:	4b1d      	ldr	r3, [pc, #116]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a3a:	4a1d      	ldr	r2, [pc, #116]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a3e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80a42:	687a      	ldr	r2, [r7, #4]
   80a44:	430a      	orrs	r2, r1
   80a46:	631a      	str	r2, [r3, #48]	; 0x30
   80a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a4c:	60fb      	str	r3, [r7, #12]
   80a4e:	e007      	b.n	80a60 <pmc_switch_mck_to_pllack+0x30>
   80a50:	68fb      	ldr	r3, [r7, #12]
   80a52:	2b00      	cmp	r3, #0
   80a54:	d101      	bne.n	80a5a <pmc_switch_mck_to_pllack+0x2a>
   80a56:	2301      	movs	r3, #1
   80a58:	e023      	b.n	80aa2 <pmc_switch_mck_to_pllack+0x72>
   80a5a:	68fb      	ldr	r3, [r7, #12]
   80a5c:	3b01      	subs	r3, #1
   80a5e:	60fb      	str	r3, [r7, #12]
   80a60:	4b13      	ldr	r3, [pc, #76]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a64:	f003 0308 	and.w	r3, r3, #8
   80a68:	2b00      	cmp	r3, #0
   80a6a:	d0f1      	beq.n	80a50 <pmc_switch_mck_to_pllack+0x20>
   80a6c:	4b10      	ldr	r3, [pc, #64]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a6e:	4a10      	ldr	r2, [pc, #64]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a72:	f022 0203 	bic.w	r2, r2, #3
   80a76:	f042 0202 	orr.w	r2, r2, #2
   80a7a:	631a      	str	r2, [r3, #48]	; 0x30
   80a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a80:	60fb      	str	r3, [r7, #12]
   80a82:	e007      	b.n	80a94 <pmc_switch_mck_to_pllack+0x64>
   80a84:	68fb      	ldr	r3, [r7, #12]
   80a86:	2b00      	cmp	r3, #0
   80a88:	d101      	bne.n	80a8e <pmc_switch_mck_to_pllack+0x5e>
   80a8a:	2301      	movs	r3, #1
   80a8c:	e009      	b.n	80aa2 <pmc_switch_mck_to_pllack+0x72>
   80a8e:	68fb      	ldr	r3, [r7, #12]
   80a90:	3b01      	subs	r3, #1
   80a92:	60fb      	str	r3, [r7, #12]
   80a94:	4b06      	ldr	r3, [pc, #24]	; (80ab0 <pmc_switch_mck_to_pllack+0x80>)
   80a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a98:	f003 0308 	and.w	r3, r3, #8
   80a9c:	2b00      	cmp	r3, #0
   80a9e:	d0f1      	beq.n	80a84 <pmc_switch_mck_to_pllack+0x54>
   80aa0:	2300      	movs	r3, #0
   80aa2:	4618      	mov	r0, r3
   80aa4:	3714      	adds	r7, #20
   80aa6:	46bd      	mov	sp, r7
   80aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aac:	4770      	bx	lr
   80aae:	bf00      	nop
   80ab0:	400e0600 	.word	0x400e0600

00080ab4 <pmc_switch_sclk_to_32kxtal>:
   80ab4:	b480      	push	{r7}
   80ab6:	b083      	sub	sp, #12
   80ab8:	af00      	add	r7, sp, #0
   80aba:	6078      	str	r0, [r7, #4]
   80abc:	687b      	ldr	r3, [r7, #4]
   80abe:	2b01      	cmp	r3, #1
   80ac0:	d107      	bne.n	80ad2 <pmc_switch_sclk_to_32kxtal+0x1e>
   80ac2:	4a0a      	ldr	r2, [pc, #40]	; (80aec <pmc_switch_sclk_to_32kxtal+0x38>)
   80ac4:	4b09      	ldr	r3, [pc, #36]	; (80aec <pmc_switch_sclk_to_32kxtal+0x38>)
   80ac6:	689b      	ldr	r3, [r3, #8]
   80ac8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80acc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80ad0:	6093      	str	r3, [r2, #8]
   80ad2:	4a06      	ldr	r2, [pc, #24]	; (80aec <pmc_switch_sclk_to_32kxtal+0x38>)
   80ad4:	4b05      	ldr	r3, [pc, #20]	; (80aec <pmc_switch_sclk_to_32kxtal+0x38>)
   80ad6:	681b      	ldr	r3, [r3, #0]
   80ad8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80adc:	f043 0308 	orr.w	r3, r3, #8
   80ae0:	6013      	str	r3, [r2, #0]
   80ae2:	370c      	adds	r7, #12
   80ae4:	46bd      	mov	sp, r7
   80ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aea:	4770      	bx	lr
   80aec:	400e1a10 	.word	0x400e1a10

00080af0 <pmc_osc_is_ready_32kxtal>:
   80af0:	b480      	push	{r7}
   80af2:	af00      	add	r7, sp, #0
   80af4:	4b09      	ldr	r3, [pc, #36]	; (80b1c <pmc_osc_is_ready_32kxtal+0x2c>)
   80af6:	695b      	ldr	r3, [r3, #20]
   80af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80afc:	2b00      	cmp	r3, #0
   80afe:	d007      	beq.n	80b10 <pmc_osc_is_ready_32kxtal+0x20>
   80b00:	4b07      	ldr	r3, [pc, #28]	; (80b20 <pmc_osc_is_ready_32kxtal+0x30>)
   80b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80b08:	2b00      	cmp	r3, #0
   80b0a:	d001      	beq.n	80b10 <pmc_osc_is_ready_32kxtal+0x20>
   80b0c:	2301      	movs	r3, #1
   80b0e:	e000      	b.n	80b12 <pmc_osc_is_ready_32kxtal+0x22>
   80b10:	2300      	movs	r3, #0
   80b12:	4618      	mov	r0, r3
   80b14:	46bd      	mov	sp, r7
   80b16:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b1a:	4770      	bx	lr
   80b1c:	400e1a10 	.word	0x400e1a10
   80b20:	400e0600 	.word	0x400e0600

00080b24 <pmc_switch_mainck_to_fastrc>:
   80b24:	b480      	push	{r7}
   80b26:	b085      	sub	sp, #20
   80b28:	af00      	add	r7, sp, #0
   80b2a:	6078      	str	r0, [r7, #4]
   80b2c:	2300      	movs	r3, #0
   80b2e:	60fb      	str	r3, [r7, #12]
   80b30:	4b21      	ldr	r3, [pc, #132]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b32:	6a1b      	ldr	r3, [r3, #32]
   80b34:	f003 0301 	and.w	r3, r3, #1
   80b38:	2b00      	cmp	r3, #0
   80b3a:	d00e      	beq.n	80b5a <pmc_switch_mainck_to_fastrc+0x36>
   80b3c:	4a1e      	ldr	r2, [pc, #120]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b3e:	4b1e      	ldr	r3, [pc, #120]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b40:	6a1b      	ldr	r3, [r3, #32]
   80b42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b46:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   80b4a:	6879      	ldr	r1, [r7, #4]
   80b4c:	430b      	orrs	r3, r1
   80b4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b52:	f043 0308 	orr.w	r3, r3, #8
   80b56:	6213      	str	r3, [r2, #32]
   80b58:	e00b      	b.n	80b72 <pmc_switch_mainck_to_fastrc+0x4e>
   80b5a:	2301      	movs	r3, #1
   80b5c:	60fb      	str	r3, [r7, #12]
   80b5e:	4a16      	ldr	r2, [pc, #88]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b60:	4b15      	ldr	r3, [pc, #84]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b62:	6a19      	ldr	r1, [r3, #32]
   80b64:	4b15      	ldr	r3, [pc, #84]	; (80bbc <pmc_switch_mainck_to_fastrc+0x98>)
   80b66:	400b      	ands	r3, r1
   80b68:	6879      	ldr	r1, [r7, #4]
   80b6a:	4319      	orrs	r1, r3
   80b6c:	4b14      	ldr	r3, [pc, #80]	; (80bc0 <pmc_switch_mainck_to_fastrc+0x9c>)
   80b6e:	430b      	orrs	r3, r1
   80b70:	6213      	str	r3, [r2, #32]
   80b72:	bf00      	nop
   80b74:	4b10      	ldr	r3, [pc, #64]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80b7c:	2b00      	cmp	r3, #0
   80b7e:	d0f9      	beq.n	80b74 <pmc_switch_mainck_to_fastrc+0x50>
   80b80:	4a0d      	ldr	r2, [pc, #52]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b82:	4b0d      	ldr	r3, [pc, #52]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b84:	6a1b      	ldr	r3, [r3, #32]
   80b86:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80b8e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b92:	6213      	str	r3, [r2, #32]
   80b94:	68fb      	ldr	r3, [r7, #12]
   80b96:	2b00      	cmp	r3, #0
   80b98:	d009      	beq.n	80bae <pmc_switch_mainck_to_fastrc+0x8a>
   80b9a:	4a07      	ldr	r2, [pc, #28]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b9c:	4b06      	ldr	r3, [pc, #24]	; (80bb8 <pmc_switch_mainck_to_fastrc+0x94>)
   80b9e:	6a1b      	ldr	r3, [r3, #32]
   80ba0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80ba4:	f023 0301 	bic.w	r3, r3, #1
   80ba8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bac:	6213      	str	r3, [r2, #32]
   80bae:	3714      	adds	r7, #20
   80bb0:	46bd      	mov	sp, r7
   80bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bb6:	4770      	bx	lr
   80bb8:	400e0600 	.word	0x400e0600
   80bbc:	ffc8c086 	.word	0xffc8c086
   80bc0:	00373f09 	.word	0x00373f09

00080bc4 <pmc_switch_mainck_to_xtal>:
   80bc4:	b480      	push	{r7}
   80bc6:	b083      	sub	sp, #12
   80bc8:	af00      	add	r7, sp, #0
   80bca:	6078      	str	r0, [r7, #4]
   80bcc:	687b      	ldr	r3, [r7, #4]
   80bce:	2b00      	cmp	r3, #0
   80bd0:	d008      	beq.n	80be4 <pmc_switch_mainck_to_xtal+0x20>
   80bd2:	4912      	ldr	r1, [pc, #72]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80bd4:	4b11      	ldr	r3, [pc, #68]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80bd6:	6a1b      	ldr	r3, [r3, #32]
   80bd8:	4a11      	ldr	r2, [pc, #68]	; (80c20 <pmc_switch_mainck_to_xtal+0x5c>)
   80bda:	401a      	ands	r2, r3
   80bdc:	4b11      	ldr	r3, [pc, #68]	; (80c24 <pmc_switch_mainck_to_xtal+0x60>)
   80bde:	4313      	orrs	r3, r2
   80be0:	620b      	str	r3, [r1, #32]
   80be2:	e016      	b.n	80c12 <pmc_switch_mainck_to_xtal+0x4e>
   80be4:	490d      	ldr	r1, [pc, #52]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80be6:	4b0d      	ldr	r3, [pc, #52]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80be8:	6a1b      	ldr	r3, [r3, #32]
   80bea:	4a0f      	ldr	r2, [pc, #60]	; (80c28 <pmc_switch_mainck_to_xtal+0x64>)
   80bec:	401a      	ands	r2, r3
   80bee:	4b0f      	ldr	r3, [pc, #60]	; (80c2c <pmc_switch_mainck_to_xtal+0x68>)
   80bf0:	4313      	orrs	r3, r2
   80bf2:	620b      	str	r3, [r1, #32]
   80bf4:	bf00      	nop
   80bf6:	4b09      	ldr	r3, [pc, #36]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80bfa:	f003 0301 	and.w	r3, r3, #1
   80bfe:	2b00      	cmp	r3, #0
   80c00:	d0f9      	beq.n	80bf6 <pmc_switch_mainck_to_xtal+0x32>
   80c02:	4a06      	ldr	r2, [pc, #24]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80c04:	4b05      	ldr	r3, [pc, #20]	; (80c1c <pmc_switch_mainck_to_xtal+0x58>)
   80c06:	6a1b      	ldr	r3, [r3, #32]
   80c08:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c10:	6213      	str	r3, [r2, #32]
   80c12:	370c      	adds	r7, #12
   80c14:	46bd      	mov	sp, r7
   80c16:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c1a:	4770      	bx	lr
   80c1c:	400e0600 	.word	0x400e0600
   80c20:	fec8fffc 	.word	0xfec8fffc
   80c24:	01370002 	.word	0x01370002
   80c28:	ffc8c0fc 	.word	0xffc8c0fc
   80c2c:	00373f01 	.word	0x00373f01

00080c30 <pmc_osc_is_ready_mainck>:
   80c30:	b480      	push	{r7}
   80c32:	af00      	add	r7, sp, #0
   80c34:	4b04      	ldr	r3, [pc, #16]	; (80c48 <pmc_osc_is_ready_mainck+0x18>)
   80c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   80c3c:	4618      	mov	r0, r3
   80c3e:	46bd      	mov	sp, r7
   80c40:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c44:	4770      	bx	lr
   80c46:	bf00      	nop
   80c48:	400e0600 	.word	0x400e0600

00080c4c <pmc_disable_pllack>:
   80c4c:	b480      	push	{r7}
   80c4e:	af00      	add	r7, sp, #0
   80c50:	4b03      	ldr	r3, [pc, #12]	; (80c60 <pmc_disable_pllack+0x14>)
   80c52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c56:	629a      	str	r2, [r3, #40]	; 0x28
   80c58:	46bd      	mov	sp, r7
   80c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c5e:	4770      	bx	lr
   80c60:	400e0600 	.word	0x400e0600

00080c64 <pmc_is_locked_pllack>:
   80c64:	b480      	push	{r7}
   80c66:	af00      	add	r7, sp, #0
   80c68:	4b04      	ldr	r3, [pc, #16]	; (80c7c <pmc_is_locked_pllack+0x18>)
   80c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c6c:	f003 0302 	and.w	r3, r3, #2
   80c70:	4618      	mov	r0, r3
   80c72:	46bd      	mov	sp, r7
   80c74:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c78:	4770      	bx	lr
   80c7a:	bf00      	nop
   80c7c:	400e0600 	.word	0x400e0600

00080c80 <pmc_is_locked_upll>:
   80c80:	b480      	push	{r7}
   80c82:	af00      	add	r7, sp, #0
   80c84:	4b04      	ldr	r3, [pc, #16]	; (80c98 <pmc_is_locked_upll+0x18>)
   80c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
   80c8c:	4618      	mov	r0, r3
   80c8e:	46bd      	mov	sp, r7
   80c90:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c94:	4770      	bx	lr
   80c96:	bf00      	nop
   80c98:	400e0600 	.word	0x400e0600

00080c9c <usart_disable_interrupt>:
   80c9c:	b480      	push	{r7}
   80c9e:	b083      	sub	sp, #12
   80ca0:	af00      	add	r7, sp, #0
   80ca2:	6078      	str	r0, [r7, #4]
   80ca4:	6039      	str	r1, [r7, #0]
   80ca6:	687b      	ldr	r3, [r7, #4]
   80ca8:	683a      	ldr	r2, [r7, #0]
   80caa:	60da      	str	r2, [r3, #12]
   80cac:	370c      	adds	r7, #12
   80cae:	46bd      	mov	sp, r7
   80cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cb4:	4770      	bx	lr
   80cb6:	bf00      	nop

00080cb8 <usart_get_interrupt_mask>:
   80cb8:	b480      	push	{r7}
   80cba:	b083      	sub	sp, #12
   80cbc:	af00      	add	r7, sp, #0
   80cbe:	6078      	str	r0, [r7, #4]
   80cc0:	687b      	ldr	r3, [r7, #4]
   80cc2:	691b      	ldr	r3, [r3, #16]
   80cc4:	4618      	mov	r0, r3
   80cc6:	370c      	adds	r7, #12
   80cc8:	46bd      	mov	sp, r7
   80cca:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cce:	4770      	bx	lr

00080cd0 <usart_get_status>:
   80cd0:	b480      	push	{r7}
   80cd2:	b083      	sub	sp, #12
   80cd4:	af00      	add	r7, sp, #0
   80cd6:	6078      	str	r0, [r7, #4]
   80cd8:	687b      	ldr	r3, [r7, #4]
   80cda:	695b      	ldr	r3, [r3, #20]
   80cdc:	4618      	mov	r0, r3
   80cde:	370c      	adds	r7, #12
   80ce0:	46bd      	mov	sp, r7
   80ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ce6:	4770      	bx	lr

00080ce8 <usart_putchar>:
   80ce8:	b480      	push	{r7}
   80cea:	b085      	sub	sp, #20
   80cec:	af00      	add	r7, sp, #0
   80cee:	6078      	str	r0, [r7, #4]
   80cf0:	6039      	str	r1, [r7, #0]
   80cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80cf6:	60fb      	str	r3, [r7, #12]
   80cf8:	e006      	b.n	80d08 <usart_putchar+0x20>
   80cfa:	68fb      	ldr	r3, [r7, #12]
   80cfc:	1e5a      	subs	r2, r3, #1
   80cfe:	60fa      	str	r2, [r7, #12]
   80d00:	2b00      	cmp	r3, #0
   80d02:	d101      	bne.n	80d08 <usart_putchar+0x20>
   80d04:	2301      	movs	r3, #1
   80d06:	e00b      	b.n	80d20 <usart_putchar+0x38>
   80d08:	687b      	ldr	r3, [r7, #4]
   80d0a:	695b      	ldr	r3, [r3, #20]
   80d0c:	f003 0302 	and.w	r3, r3, #2
   80d10:	2b00      	cmp	r3, #0
   80d12:	d0f2      	beq.n	80cfa <usart_putchar+0x12>
   80d14:	683b      	ldr	r3, [r7, #0]
   80d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80d1a:	687b      	ldr	r3, [r7, #4]
   80d1c:	61da      	str	r2, [r3, #28]
   80d1e:	2300      	movs	r3, #0
   80d20:	4618      	mov	r0, r3
   80d22:	3714      	adds	r7, #20
   80d24:	46bd      	mov	sp, r7
   80d26:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d2a:	4770      	bx	lr

00080d2c <usart_getchar>:
   80d2c:	b480      	push	{r7}
   80d2e:	b085      	sub	sp, #20
   80d30:	af00      	add	r7, sp, #0
   80d32:	6078      	str	r0, [r7, #4]
   80d34:	6039      	str	r1, [r7, #0]
   80d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80d3a:	60fb      	str	r3, [r7, #12]
   80d3c:	e006      	b.n	80d4c <usart_getchar+0x20>
   80d3e:	68fb      	ldr	r3, [r7, #12]
   80d40:	1e5a      	subs	r2, r3, #1
   80d42:	60fa      	str	r2, [r7, #12]
   80d44:	2b00      	cmp	r3, #0
   80d46:	d101      	bne.n	80d4c <usart_getchar+0x20>
   80d48:	2301      	movs	r3, #1
   80d4a:	e00c      	b.n	80d66 <usart_getchar+0x3a>
   80d4c:	687b      	ldr	r3, [r7, #4]
   80d4e:	695b      	ldr	r3, [r3, #20]
   80d50:	f003 0301 	and.w	r3, r3, #1
   80d54:	2b00      	cmp	r3, #0
   80d56:	d0f2      	beq.n	80d3e <usart_getchar+0x12>
   80d58:	687b      	ldr	r3, [r7, #4]
   80d5a:	699b      	ldr	r3, [r3, #24]
   80d5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80d60:	683b      	ldr	r3, [r7, #0]
   80d62:	601a      	str	r2, [r3, #0]
   80d64:	2300      	movs	r3, #0
   80d66:	4618      	mov	r0, r3
   80d68:	3714      	adds	r7, #20
   80d6a:	46bd      	mov	sp, r7
   80d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d70:	4770      	bx	lr
   80d72:	bf00      	nop

00080d74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d74:	b480      	push	{r7}
   80d76:	af00      	add	r7, sp, #0
	while (1) {
	}
   80d78:	e7fe      	b.n	80d78 <Dummy_Handler+0x4>
   80d7a:	bf00      	nop

00080d7c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d7c:	b580      	push	{r7, lr}
   80d7e:	b082      	sub	sp, #8
   80d80:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   80d82:	4b1e      	ldr	r3, [pc, #120]	; (80dfc <Reset_Handler+0x80>)
   80d84:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   80d86:	4b1e      	ldr	r3, [pc, #120]	; (80e00 <Reset_Handler+0x84>)
   80d88:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   80d8a:	687a      	ldr	r2, [r7, #4]
   80d8c:	683b      	ldr	r3, [r7, #0]
   80d8e:	429a      	cmp	r2, r3
   80d90:	d00c      	beq.n	80dac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   80d92:	e007      	b.n	80da4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   80d94:	683b      	ldr	r3, [r7, #0]
   80d96:	1d1a      	adds	r2, r3, #4
   80d98:	603a      	str	r2, [r7, #0]
   80d9a:	687a      	ldr	r2, [r7, #4]
   80d9c:	1d11      	adds	r1, r2, #4
   80d9e:	6079      	str	r1, [r7, #4]
   80da0:	6812      	ldr	r2, [r2, #0]
   80da2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80da4:	683a      	ldr	r2, [r7, #0]
   80da6:	4b17      	ldr	r3, [pc, #92]	; (80e04 <Reset_Handler+0x88>)
   80da8:	429a      	cmp	r2, r3
   80daa:	d3f3      	bcc.n	80d94 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80dac:	4b16      	ldr	r3, [pc, #88]	; (80e08 <Reset_Handler+0x8c>)
   80dae:	603b      	str	r3, [r7, #0]
   80db0:	e004      	b.n	80dbc <Reset_Handler+0x40>
		*pDest++ = 0;
   80db2:	683b      	ldr	r3, [r7, #0]
   80db4:	1d1a      	adds	r2, r3, #4
   80db6:	603a      	str	r2, [r7, #0]
   80db8:	2200      	movs	r2, #0
   80dba:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80dbc:	683a      	ldr	r2, [r7, #0]
   80dbe:	4b13      	ldr	r3, [pc, #76]	; (80e0c <Reset_Handler+0x90>)
   80dc0:	429a      	cmp	r2, r3
   80dc2:	d3f6      	bcc.n	80db2 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   80dc4:	4b12      	ldr	r3, [pc, #72]	; (80e10 <Reset_Handler+0x94>)
   80dc6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80dc8:	4a12      	ldr	r2, [pc, #72]	; (80e14 <Reset_Handler+0x98>)
   80dca:	687b      	ldr	r3, [r7, #4]
   80dcc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80dd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80dd4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80dd6:	687b      	ldr	r3, [r7, #4]
   80dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   80ddc:	d309      	bcc.n	80df2 <Reset_Handler+0x76>
   80dde:	687a      	ldr	r2, [r7, #4]
   80de0:	4b0d      	ldr	r3, [pc, #52]	; (80e18 <Reset_Handler+0x9c>)
   80de2:	429a      	cmp	r2, r3
   80de4:	d805      	bhi.n	80df2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80de6:	4b0b      	ldr	r3, [pc, #44]	; (80e14 <Reset_Handler+0x98>)
   80de8:	4a0a      	ldr	r2, [pc, #40]	; (80e14 <Reset_Handler+0x98>)
   80dea:	6892      	ldr	r2, [r2, #8]
   80dec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80df0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80df2:	4b0a      	ldr	r3, [pc, #40]	; (80e1c <Reset_Handler+0xa0>)
   80df4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80df6:	4b0a      	ldr	r3, [pc, #40]	; (80e20 <Reset_Handler+0xa4>)
   80df8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80dfa:	e7fe      	b.n	80dfa <Reset_Handler+0x7e>
   80dfc:	00083c98 	.word	0x00083c98
   80e00:	20070000 	.word	0x20070000
   80e04:	20070438 	.word	0x20070438
   80e08:	20070438 	.word	0x20070438
   80e0c:	2007a620 	.word	0x2007a620
   80e10:	00080000 	.word	0x00080000
   80e14:	e000ed00 	.word	0xe000ed00
   80e18:	200fffff 	.word	0x200fffff
   80e1c:	00083905 	.word	0x00083905
   80e20:	00083611 	.word	0x00083611

00080e24 <SystemCoreClockUpdate>:
   80e24:	b480      	push	{r7}
   80e26:	af00      	add	r7, sp, #0
   80e28:	4b56      	ldr	r3, [pc, #344]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e2c:	f003 0303 	and.w	r3, r3, #3
   80e30:	2b03      	cmp	r3, #3
   80e32:	f200 808a 	bhi.w	80f4a <SystemCoreClockUpdate+0x126>
   80e36:	a101      	add	r1, pc, #4	; (adr r1, 80e3c <SystemCoreClockUpdate+0x18>)
   80e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   80e3c:	00080e4d 	.word	0x00080e4d
   80e40:	00080e6d 	.word	0x00080e6d
   80e44:	00080ebd 	.word	0x00080ebd
   80e48:	00080ebd 	.word	0x00080ebd
   80e4c:	4b4e      	ldr	r3, [pc, #312]	; (80f88 <SystemCoreClockUpdate+0x164>)
   80e4e:	695b      	ldr	r3, [r3, #20]
   80e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80e54:	2b00      	cmp	r3, #0
   80e56:	d004      	beq.n	80e62 <SystemCoreClockUpdate+0x3e>
   80e58:	4b4c      	ldr	r3, [pc, #304]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80e5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e5e:	601a      	str	r2, [r3, #0]
   80e60:	e073      	b.n	80f4a <SystemCoreClockUpdate+0x126>
   80e62:	4b4a      	ldr	r3, [pc, #296]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80e64:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   80e68:	601a      	str	r2, [r3, #0]
   80e6a:	e06e      	b.n	80f4a <SystemCoreClockUpdate+0x126>
   80e6c:	4b45      	ldr	r3, [pc, #276]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80e6e:	6a1b      	ldr	r3, [r3, #32]
   80e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80e74:	2b00      	cmp	r3, #0
   80e76:	d003      	beq.n	80e80 <SystemCoreClockUpdate+0x5c>
   80e78:	4b44      	ldr	r3, [pc, #272]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80e7a:	4a45      	ldr	r2, [pc, #276]	; (80f90 <SystemCoreClockUpdate+0x16c>)
   80e7c:	601a      	str	r2, [r3, #0]
   80e7e:	e01c      	b.n	80eba <SystemCoreClockUpdate+0x96>
   80e80:	4b42      	ldr	r3, [pc, #264]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80e82:	4a44      	ldr	r2, [pc, #272]	; (80f94 <SystemCoreClockUpdate+0x170>)
   80e84:	601a      	str	r2, [r3, #0]
   80e86:	4b3f      	ldr	r3, [pc, #252]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80e88:	6a1b      	ldr	r3, [r3, #32]
   80e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e8e:	2b10      	cmp	r3, #16
   80e90:	d004      	beq.n	80e9c <SystemCoreClockUpdate+0x78>
   80e92:	2b20      	cmp	r3, #32
   80e94:	d008      	beq.n	80ea8 <SystemCoreClockUpdate+0x84>
   80e96:	2b00      	cmp	r3, #0
   80e98:	d00e      	beq.n	80eb8 <SystemCoreClockUpdate+0x94>
   80e9a:	e00e      	b.n	80eba <SystemCoreClockUpdate+0x96>
   80e9c:	4b3b      	ldr	r3, [pc, #236]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80e9e:	681b      	ldr	r3, [r3, #0]
   80ea0:	005a      	lsls	r2, r3, #1
   80ea2:	4b3a      	ldr	r3, [pc, #232]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80ea4:	601a      	str	r2, [r3, #0]
   80ea6:	e008      	b.n	80eba <SystemCoreClockUpdate+0x96>
   80ea8:	4b38      	ldr	r3, [pc, #224]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80eaa:	681a      	ldr	r2, [r3, #0]
   80eac:	4613      	mov	r3, r2
   80eae:	005b      	lsls	r3, r3, #1
   80eb0:	441a      	add	r2, r3
   80eb2:	4b36      	ldr	r3, [pc, #216]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80eb4:	601a      	str	r2, [r3, #0]
   80eb6:	e000      	b.n	80eba <SystemCoreClockUpdate+0x96>
   80eb8:	bf00      	nop
   80eba:	e046      	b.n	80f4a <SystemCoreClockUpdate+0x126>
   80ebc:	4b31      	ldr	r3, [pc, #196]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80ebe:	6a1b      	ldr	r3, [r3, #32]
   80ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80ec4:	2b00      	cmp	r3, #0
   80ec6:	d003      	beq.n	80ed0 <SystemCoreClockUpdate+0xac>
   80ec8:	4b30      	ldr	r3, [pc, #192]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80eca:	4a31      	ldr	r2, [pc, #196]	; (80f90 <SystemCoreClockUpdate+0x16c>)
   80ecc:	601a      	str	r2, [r3, #0]
   80ece:	e01c      	b.n	80f0a <SystemCoreClockUpdate+0xe6>
   80ed0:	4b2e      	ldr	r3, [pc, #184]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80ed2:	4a30      	ldr	r2, [pc, #192]	; (80f94 <SystemCoreClockUpdate+0x170>)
   80ed4:	601a      	str	r2, [r3, #0]
   80ed6:	4b2b      	ldr	r3, [pc, #172]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80ed8:	6a1b      	ldr	r3, [r3, #32]
   80eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ede:	2b10      	cmp	r3, #16
   80ee0:	d004      	beq.n	80eec <SystemCoreClockUpdate+0xc8>
   80ee2:	2b20      	cmp	r3, #32
   80ee4:	d008      	beq.n	80ef8 <SystemCoreClockUpdate+0xd4>
   80ee6:	2b00      	cmp	r3, #0
   80ee8:	d00e      	beq.n	80f08 <SystemCoreClockUpdate+0xe4>
   80eea:	e00e      	b.n	80f0a <SystemCoreClockUpdate+0xe6>
   80eec:	4b27      	ldr	r3, [pc, #156]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	005a      	lsls	r2, r3, #1
   80ef2:	4b26      	ldr	r3, [pc, #152]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80ef4:	601a      	str	r2, [r3, #0]
   80ef6:	e008      	b.n	80f0a <SystemCoreClockUpdate+0xe6>
   80ef8:	4b24      	ldr	r3, [pc, #144]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80efa:	681a      	ldr	r2, [r3, #0]
   80efc:	4613      	mov	r3, r2
   80efe:	005b      	lsls	r3, r3, #1
   80f00:	441a      	add	r2, r3
   80f02:	4b22      	ldr	r3, [pc, #136]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f04:	601a      	str	r2, [r3, #0]
   80f06:	e000      	b.n	80f0a <SystemCoreClockUpdate+0xe6>
   80f08:	bf00      	nop
   80f0a:	4b1e      	ldr	r3, [pc, #120]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f0e:	f003 0303 	and.w	r3, r3, #3
   80f12:	2b02      	cmp	r3, #2
   80f14:	d115      	bne.n	80f42 <SystemCoreClockUpdate+0x11e>
   80f16:	4b1b      	ldr	r3, [pc, #108]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   80f1a:	4b1f      	ldr	r3, [pc, #124]	; (80f98 <SystemCoreClockUpdate+0x174>)
   80f1c:	4013      	ands	r3, r2
   80f1e:	0c1b      	lsrs	r3, r3, #16
   80f20:	3301      	adds	r3, #1
   80f22:	4a1a      	ldr	r2, [pc, #104]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f24:	6812      	ldr	r2, [r2, #0]
   80f26:	fb02 f203 	mul.w	r2, r2, r3
   80f2a:	4b18      	ldr	r3, [pc, #96]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f2c:	601a      	str	r2, [r3, #0]
   80f2e:	4b17      	ldr	r3, [pc, #92]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f30:	681a      	ldr	r2, [r3, #0]
   80f32:	4b14      	ldr	r3, [pc, #80]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   80f36:	b2db      	uxtb	r3, r3
   80f38:	fbb2 f2f3 	udiv	r2, r2, r3
   80f3c:	4b13      	ldr	r3, [pc, #76]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f3e:	601a      	str	r2, [r3, #0]
   80f40:	e002      	b.n	80f48 <SystemCoreClockUpdate+0x124>
   80f42:	4b12      	ldr	r3, [pc, #72]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f44:	4a15      	ldr	r2, [pc, #84]	; (80f9c <SystemCoreClockUpdate+0x178>)
   80f46:	601a      	str	r2, [r3, #0]
   80f48:	bf00      	nop
   80f4a:	4b0e      	ldr	r3, [pc, #56]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f52:	2b70      	cmp	r3, #112	; 0x70
   80f54:	d108      	bne.n	80f68 <SystemCoreClockUpdate+0x144>
   80f56:	4b0d      	ldr	r3, [pc, #52]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f58:	681a      	ldr	r2, [r3, #0]
   80f5a:	4b11      	ldr	r3, [pc, #68]	; (80fa0 <SystemCoreClockUpdate+0x17c>)
   80f5c:	fba3 1302 	umull	r1, r3, r3, r2
   80f60:	085a      	lsrs	r2, r3, #1
   80f62:	4b0a      	ldr	r3, [pc, #40]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f64:	601a      	str	r2, [r3, #0]
   80f66:	e009      	b.n	80f7c <SystemCoreClockUpdate+0x158>
   80f68:	4b08      	ldr	r3, [pc, #32]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f6a:	681a      	ldr	r2, [r3, #0]
   80f6c:	4b05      	ldr	r3, [pc, #20]	; (80f84 <SystemCoreClockUpdate+0x160>)
   80f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f74:	091b      	lsrs	r3, r3, #4
   80f76:	40da      	lsrs	r2, r3
   80f78:	4b04      	ldr	r3, [pc, #16]	; (80f8c <SystemCoreClockUpdate+0x168>)
   80f7a:	601a      	str	r2, [r3, #0]
   80f7c:	46bd      	mov	sp, r7
   80f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f82:	4770      	bx	lr
   80f84:	400e0600 	.word	0x400e0600
   80f88:	400e1a10 	.word	0x400e1a10
   80f8c:	20070000 	.word	0x20070000
   80f90:	00b71b00 	.word	0x00b71b00
   80f94:	003d0900 	.word	0x003d0900
   80f98:	07ff0000 	.word	0x07ff0000
   80f9c:	0e4e1c00 	.word	0x0e4e1c00
   80fa0:	aaaaaaab 	.word	0xaaaaaaab

00080fa4 <system_init_flash>:
   80fa4:	b480      	push	{r7}
   80fa6:	b083      	sub	sp, #12
   80fa8:	af00      	add	r7, sp, #0
   80faa:	6078      	str	r0, [r7, #4]
   80fac:	687a      	ldr	r2, [r7, #4]
   80fae:	4b1f      	ldr	r3, [pc, #124]	; (8102c <system_init_flash+0x88>)
   80fb0:	429a      	cmp	r2, r3
   80fb2:	d806      	bhi.n	80fc2 <system_init_flash+0x1e>
   80fb4:	4b1e      	ldr	r3, [pc, #120]	; (81030 <system_init_flash+0x8c>)
   80fb6:	2200      	movs	r2, #0
   80fb8:	601a      	str	r2, [r3, #0]
   80fba:	4b1e      	ldr	r3, [pc, #120]	; (81034 <system_init_flash+0x90>)
   80fbc:	2200      	movs	r2, #0
   80fbe:	601a      	str	r2, [r3, #0]
   80fc0:	e02e      	b.n	81020 <system_init_flash+0x7c>
   80fc2:	687a      	ldr	r2, [r7, #4]
   80fc4:	4b1c      	ldr	r3, [pc, #112]	; (81038 <system_init_flash+0x94>)
   80fc6:	429a      	cmp	r2, r3
   80fc8:	d808      	bhi.n	80fdc <system_init_flash+0x38>
   80fca:	4b19      	ldr	r3, [pc, #100]	; (81030 <system_init_flash+0x8c>)
   80fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fd0:	601a      	str	r2, [r3, #0]
   80fd2:	4b18      	ldr	r3, [pc, #96]	; (81034 <system_init_flash+0x90>)
   80fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fd8:	601a      	str	r2, [r3, #0]
   80fda:	e021      	b.n	81020 <system_init_flash+0x7c>
   80fdc:	687a      	ldr	r2, [r7, #4]
   80fde:	4b17      	ldr	r3, [pc, #92]	; (8103c <system_init_flash+0x98>)
   80fe0:	429a      	cmp	r2, r3
   80fe2:	d808      	bhi.n	80ff6 <system_init_flash+0x52>
   80fe4:	4b12      	ldr	r3, [pc, #72]	; (81030 <system_init_flash+0x8c>)
   80fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fea:	601a      	str	r2, [r3, #0]
   80fec:	4b11      	ldr	r3, [pc, #68]	; (81034 <system_init_flash+0x90>)
   80fee:	f44f 7200 	mov.w	r2, #512	; 0x200
   80ff2:	601a      	str	r2, [r3, #0]
   80ff4:	e014      	b.n	81020 <system_init_flash+0x7c>
   80ff6:	687a      	ldr	r2, [r7, #4]
   80ff8:	4b11      	ldr	r3, [pc, #68]	; (81040 <system_init_flash+0x9c>)
   80ffa:	429a      	cmp	r2, r3
   80ffc:	d808      	bhi.n	81010 <system_init_flash+0x6c>
   80ffe:	4b0c      	ldr	r3, [pc, #48]	; (81030 <system_init_flash+0x8c>)
   81000:	f44f 7240 	mov.w	r2, #768	; 0x300
   81004:	601a      	str	r2, [r3, #0]
   81006:	4b0b      	ldr	r3, [pc, #44]	; (81034 <system_init_flash+0x90>)
   81008:	f44f 7240 	mov.w	r2, #768	; 0x300
   8100c:	601a      	str	r2, [r3, #0]
   8100e:	e007      	b.n	81020 <system_init_flash+0x7c>
   81010:	4b07      	ldr	r3, [pc, #28]	; (81030 <system_init_flash+0x8c>)
   81012:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81016:	601a      	str	r2, [r3, #0]
   81018:	4b06      	ldr	r3, [pc, #24]	; (81034 <system_init_flash+0x90>)
   8101a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8101e:	601a      	str	r2, [r3, #0]
   81020:	370c      	adds	r7, #12
   81022:	46bd      	mov	sp, r7
   81024:	f85d 7b04 	ldr.w	r7, [sp], #4
   81028:	4770      	bx	lr
   8102a:	bf00      	nop
   8102c:	0157529f 	.word	0x0157529f
   81030:	400e0a00 	.word	0x400e0a00
   81034:	400e0c00 	.word	0x400e0c00
   81038:	0206cc7f 	.word	0x0206cc7f
   8103c:	0328b73f 	.word	0x0328b73f
   81040:	04a62f7f 	.word	0x04a62f7f

00081044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   81044:	b480      	push	{r7}
   81046:	b083      	sub	sp, #12
   81048:	af00      	add	r7, sp, #0
   8104a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8104c:	687b      	ldr	r3, [r7, #4]
   8104e:	f103 0208 	add.w	r2, r3, #8
   81052:	687b      	ldr	r3, [r7, #4]
   81054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81056:	687b      	ldr	r3, [r7, #4]
   81058:	f04f 32ff 	mov.w	r2, #4294967295
   8105c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8105e:	687b      	ldr	r3, [r7, #4]
   81060:	f103 0208 	add.w	r2, r3, #8
   81064:	687b      	ldr	r3, [r7, #4]
   81066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81068:	687b      	ldr	r3, [r7, #4]
   8106a:	f103 0208 	add.w	r2, r3, #8
   8106e:	687b      	ldr	r3, [r7, #4]
   81070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   81072:	687b      	ldr	r3, [r7, #4]
   81074:	2200      	movs	r2, #0
   81076:	601a      	str	r2, [r3, #0]
}
   81078:	370c      	adds	r7, #12
   8107a:	46bd      	mov	sp, r7
   8107c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81080:	4770      	bx	lr
   81082:	bf00      	nop

00081084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   81084:	b480      	push	{r7}
   81086:	b083      	sub	sp, #12
   81088:	af00      	add	r7, sp, #0
   8108a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8108c:	687b      	ldr	r3, [r7, #4]
   8108e:	2200      	movs	r2, #0
   81090:	611a      	str	r2, [r3, #16]
}
   81092:	370c      	adds	r7, #12
   81094:	46bd      	mov	sp, r7
   81096:	f85d 7b04 	ldr.w	r7, [sp], #4
   8109a:	4770      	bx	lr

0008109c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   8109c:	b480      	push	{r7}
   8109e:	b085      	sub	sp, #20
   810a0:	af00      	add	r7, sp, #0
   810a2:	6078      	str	r0, [r7, #4]
   810a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   810a6:	687b      	ldr	r3, [r7, #4]
   810a8:	685b      	ldr	r3, [r3, #4]
   810aa:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   810ac:	683b      	ldr	r3, [r7, #0]
   810ae:	68fa      	ldr	r2, [r7, #12]
   810b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   810b2:	68fb      	ldr	r3, [r7, #12]
   810b4:	689a      	ldr	r2, [r3, #8]
   810b6:	683b      	ldr	r3, [r7, #0]
   810b8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   810ba:	68fb      	ldr	r3, [r7, #12]
   810bc:	689b      	ldr	r3, [r3, #8]
   810be:	683a      	ldr	r2, [r7, #0]
   810c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   810c2:	68fb      	ldr	r3, [r7, #12]
   810c4:	683a      	ldr	r2, [r7, #0]
   810c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   810c8:	683b      	ldr	r3, [r7, #0]
   810ca:	687a      	ldr	r2, [r7, #4]
   810cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   810ce:	687b      	ldr	r3, [r7, #4]
   810d0:	681b      	ldr	r3, [r3, #0]
   810d2:	1c5a      	adds	r2, r3, #1
   810d4:	687b      	ldr	r3, [r7, #4]
   810d6:	601a      	str	r2, [r3, #0]
}
   810d8:	3714      	adds	r7, #20
   810da:	46bd      	mov	sp, r7
   810dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   810e0:	4770      	bx	lr
   810e2:	bf00      	nop

000810e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   810e4:	b480      	push	{r7}
   810e6:	b085      	sub	sp, #20
   810e8:	af00      	add	r7, sp, #0
   810ea:	6078      	str	r0, [r7, #4]
   810ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   810ee:	683b      	ldr	r3, [r7, #0]
   810f0:	681b      	ldr	r3, [r3, #0]
   810f2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   810f4:	68bb      	ldr	r3, [r7, #8]
   810f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   810fa:	d103      	bne.n	81104 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   810fc:	687b      	ldr	r3, [r7, #4]
   810fe:	691b      	ldr	r3, [r3, #16]
   81100:	60fb      	str	r3, [r7, #12]
   81102:	e00c      	b.n	8111e <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81104:	687b      	ldr	r3, [r7, #4]
   81106:	3308      	adds	r3, #8
   81108:	60fb      	str	r3, [r7, #12]
   8110a:	e002      	b.n	81112 <vListInsert+0x2e>
   8110c:	68fb      	ldr	r3, [r7, #12]
   8110e:	685b      	ldr	r3, [r3, #4]
   81110:	60fb      	str	r3, [r7, #12]
   81112:	68fb      	ldr	r3, [r7, #12]
   81114:	685b      	ldr	r3, [r3, #4]
   81116:	681a      	ldr	r2, [r3, #0]
   81118:	68bb      	ldr	r3, [r7, #8]
   8111a:	429a      	cmp	r2, r3
   8111c:	d9f6      	bls.n	8110c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8111e:	68fb      	ldr	r3, [r7, #12]
   81120:	685a      	ldr	r2, [r3, #4]
   81122:	683b      	ldr	r3, [r7, #0]
   81124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   81126:	683b      	ldr	r3, [r7, #0]
   81128:	685b      	ldr	r3, [r3, #4]
   8112a:	683a      	ldr	r2, [r7, #0]
   8112c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8112e:	683b      	ldr	r3, [r7, #0]
   81130:	68fa      	ldr	r2, [r7, #12]
   81132:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   81134:	68fb      	ldr	r3, [r7, #12]
   81136:	683a      	ldr	r2, [r7, #0]
   81138:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8113a:	683b      	ldr	r3, [r7, #0]
   8113c:	687a      	ldr	r2, [r7, #4]
   8113e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   81140:	687b      	ldr	r3, [r7, #4]
   81142:	681b      	ldr	r3, [r3, #0]
   81144:	1c5a      	adds	r2, r3, #1
   81146:	687b      	ldr	r3, [r7, #4]
   81148:	601a      	str	r2, [r3, #0]
}
   8114a:	3714      	adds	r7, #20
   8114c:	46bd      	mov	sp, r7
   8114e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81152:	4770      	bx	lr

00081154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   81154:	b480      	push	{r7}
   81156:	b085      	sub	sp, #20
   81158:	af00      	add	r7, sp, #0
   8115a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   8115c:	687b      	ldr	r3, [r7, #4]
   8115e:	691b      	ldr	r3, [r3, #16]
   81160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81162:	687b      	ldr	r3, [r7, #4]
   81164:	685b      	ldr	r3, [r3, #4]
   81166:	687a      	ldr	r2, [r7, #4]
   81168:	6892      	ldr	r2, [r2, #8]
   8116a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	689b      	ldr	r3, [r3, #8]
   81170:	687a      	ldr	r2, [r7, #4]
   81172:	6852      	ldr	r2, [r2, #4]
   81174:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81176:	68fb      	ldr	r3, [r7, #12]
   81178:	685a      	ldr	r2, [r3, #4]
   8117a:	687b      	ldr	r3, [r7, #4]
   8117c:	429a      	cmp	r2, r3
   8117e:	d103      	bne.n	81188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81180:	687b      	ldr	r3, [r7, #4]
   81182:	689a      	ldr	r2, [r3, #8]
   81184:	68fb      	ldr	r3, [r7, #12]
   81186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81188:	687b      	ldr	r3, [r7, #4]
   8118a:	2200      	movs	r2, #0
   8118c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   8118e:	68fb      	ldr	r3, [r7, #12]
   81190:	681b      	ldr	r3, [r3, #0]
   81192:	1e5a      	subs	r2, r3, #1
   81194:	68fb      	ldr	r3, [r7, #12]
   81196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81198:	68fb      	ldr	r3, [r7, #12]
   8119a:	681b      	ldr	r3, [r3, #0]
}
   8119c:	4618      	mov	r0, r3
   8119e:	3714      	adds	r7, #20
   811a0:	46bd      	mov	sp, r7
   811a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   811a6:	4770      	bx	lr

000811a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   811a8:	b480      	push	{r7}
   811aa:	b085      	sub	sp, #20
   811ac:	af00      	add	r7, sp, #0
   811ae:	60f8      	str	r0, [r7, #12]
   811b0:	60b9      	str	r1, [r7, #8]
   811b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   811b4:	68fb      	ldr	r3, [r7, #12]
   811b6:	3b04      	subs	r3, #4
   811b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   811ba:	68fb      	ldr	r3, [r7, #12]
   811bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   811c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   811c2:	68fb      	ldr	r3, [r7, #12]
   811c4:	3b04      	subs	r3, #4
   811c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   811c8:	68ba      	ldr	r2, [r7, #8]
   811ca:	68fb      	ldr	r3, [r7, #12]
   811cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   811ce:	68fb      	ldr	r3, [r7, #12]
   811d0:	3b04      	subs	r3, #4
   811d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   811d4:	4a09      	ldr	r2, [pc, #36]	; (811fc <pxPortInitialiseStack+0x54>)
   811d6:	68fb      	ldr	r3, [r7, #12]
   811d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   811da:	68fb      	ldr	r3, [r7, #12]
   811dc:	3b14      	subs	r3, #20
   811de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   811e0:	687a      	ldr	r2, [r7, #4]
   811e2:	68fb      	ldr	r3, [r7, #12]
   811e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   811e6:	68fb      	ldr	r3, [r7, #12]
   811e8:	3b20      	subs	r3, #32
   811ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   811ec:	68fb      	ldr	r3, [r7, #12]
}
   811ee:	4618      	mov	r0, r3
   811f0:	3714      	adds	r7, #20
   811f2:	46bd      	mov	sp, r7
   811f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   811f8:	4770      	bx	lr
   811fa:	bf00      	nop
   811fc:	00081201 	.word	0x00081201

00081200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   81200:	b580      	push	{r7, lr}
   81202:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   81204:	4b05      	ldr	r3, [pc, #20]	; (8121c <prvTaskExitError+0x1c>)
   81206:	681b      	ldr	r3, [r3, #0]
   81208:	f1b3 3fff 	cmp.w	r3, #4294967295
   8120c:	d002      	beq.n	81214 <prvTaskExitError+0x14>
   8120e:	4b04      	ldr	r3, [pc, #16]	; (81220 <prvTaskExitError+0x20>)
   81210:	4798      	blx	r3
   81212:	e7fe      	b.n	81212 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   81214:	4b02      	ldr	r3, [pc, #8]	; (81220 <prvTaskExitError+0x20>)
   81216:	4798      	blx	r3
	for( ;; );
   81218:	e7fe      	b.n	81218 <prvTaskExitError+0x18>
   8121a:	bf00      	nop
   8121c:	20070004 	.word	0x20070004
   81220:	000813cd 	.word	0x000813cd

00081224 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   81224:	4b07      	ldr	r3, [pc, #28]	; (81244 <pxCurrentTCBConst2>)
   81226:	6819      	ldr	r1, [r3, #0]
   81228:	6808      	ldr	r0, [r1, #0]
   8122a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8122e:	f380 8809 	msr	PSP, r0
   81232:	f3bf 8f6f 	isb	sy
   81236:	f04f 0000 	mov.w	r0, #0
   8123a:	f380 8811 	msr	BASEPRI, r0
   8123e:	f04e 0e0d 	orr.w	lr, lr, #13
   81242:	4770      	bx	lr

00081244 <pxCurrentTCBConst2>:
   81244:	2007a4e4 	.word	0x2007a4e4

00081248 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81248:	4806      	ldr	r0, [pc, #24]	; (81264 <prvPortStartFirstTask+0x1c>)
   8124a:	6800      	ldr	r0, [r0, #0]
   8124c:	6800      	ldr	r0, [r0, #0]
   8124e:	f380 8808 	msr	MSP, r0
   81252:	b662      	cpsie	i
   81254:	b661      	cpsie	f
   81256:	f3bf 8f4f 	dsb	sy
   8125a:	f3bf 8f6f 	isb	sy
   8125e:	df00      	svc	0
   81260:	bf00      	nop
   81262:	0000      	.short	0x0000
   81264:	e000ed08 	.word	0xe000ed08

00081268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   81268:	b580      	push	{r7, lr}
   8126a:	b084      	sub	sp, #16
   8126c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   8126e:	4b28      	ldr	r3, [pc, #160]	; (81310 <xPortStartScheduler+0xa8>)
   81270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   81272:	68fb      	ldr	r3, [r7, #12]
   81274:	781b      	ldrb	r3, [r3, #0]
   81276:	b2db      	uxtb	r3, r3
   81278:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8127a:	68fb      	ldr	r3, [r7, #12]
   8127c:	22ff      	movs	r2, #255	; 0xff
   8127e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   81280:	68fb      	ldr	r3, [r7, #12]
   81282:	781b      	ldrb	r3, [r3, #0]
   81284:	b2db      	uxtb	r3, r3
   81286:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   81288:	79fb      	ldrb	r3, [r7, #7]
   8128a:	b2db      	uxtb	r3, r3
   8128c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   81290:	b2da      	uxtb	r2, r3
   81292:	4b20      	ldr	r3, [pc, #128]	; (81314 <xPortStartScheduler+0xac>)
   81294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   81296:	4b20      	ldr	r3, [pc, #128]	; (81318 <xPortStartScheduler+0xb0>)
   81298:	2207      	movs	r2, #7
   8129a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8129c:	e009      	b.n	812b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   8129e:	4b1e      	ldr	r3, [pc, #120]	; (81318 <xPortStartScheduler+0xb0>)
   812a0:	681b      	ldr	r3, [r3, #0]
   812a2:	1e5a      	subs	r2, r3, #1
   812a4:	4b1c      	ldr	r3, [pc, #112]	; (81318 <xPortStartScheduler+0xb0>)
   812a6:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   812a8:	79fb      	ldrb	r3, [r7, #7]
   812aa:	b2db      	uxtb	r3, r3
   812ac:	005b      	lsls	r3, r3, #1
   812ae:	b2db      	uxtb	r3, r3
   812b0:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   812b2:	79fb      	ldrb	r3, [r7, #7]
   812b4:	b2db      	uxtb	r3, r3
   812b6:	b2db      	uxtb	r3, r3
   812b8:	b25b      	sxtb	r3, r3
   812ba:	2b00      	cmp	r3, #0
   812bc:	dbef      	blt.n	8129e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   812be:	4b16      	ldr	r3, [pc, #88]	; (81318 <xPortStartScheduler+0xb0>)
   812c0:	681b      	ldr	r3, [r3, #0]
   812c2:	021a      	lsls	r2, r3, #8
   812c4:	4b14      	ldr	r3, [pc, #80]	; (81318 <xPortStartScheduler+0xb0>)
   812c6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   812c8:	4b13      	ldr	r3, [pc, #76]	; (81318 <xPortStartScheduler+0xb0>)
   812ca:	681b      	ldr	r3, [r3, #0]
   812cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   812d0:	4b11      	ldr	r3, [pc, #68]	; (81318 <xPortStartScheduler+0xb0>)
   812d2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   812d4:	68bb      	ldr	r3, [r7, #8]
   812d6:	b2da      	uxtb	r2, r3
   812d8:	68fb      	ldr	r3, [r7, #12]
   812da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   812dc:	4b0f      	ldr	r3, [pc, #60]	; (8131c <xPortStartScheduler+0xb4>)
   812de:	4a0f      	ldr	r2, [pc, #60]	; (8131c <xPortStartScheduler+0xb4>)
   812e0:	6812      	ldr	r2, [r2, #0]
   812e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   812e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   812e8:	4b0c      	ldr	r3, [pc, #48]	; (8131c <xPortStartScheduler+0xb4>)
   812ea:	4a0c      	ldr	r2, [pc, #48]	; (8131c <xPortStartScheduler+0xb4>)
   812ec:	6812      	ldr	r2, [r2, #0]
   812ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   812f2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   812f4:	4b0a      	ldr	r3, [pc, #40]	; (81320 <xPortStartScheduler+0xb8>)
   812f6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   812f8:	4b0a      	ldr	r3, [pc, #40]	; (81324 <xPortStartScheduler+0xbc>)
   812fa:	2200      	movs	r2, #0
   812fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   812fe:	4b0a      	ldr	r3, [pc, #40]	; (81328 <xPortStartScheduler+0xc0>)
   81300:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   81302:	4b0a      	ldr	r3, [pc, #40]	; (8132c <xPortStartScheduler+0xc4>)
   81304:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   81306:	2300      	movs	r3, #0
}
   81308:	4618      	mov	r0, r3
   8130a:	3710      	adds	r7, #16
   8130c:	46bd      	mov	sp, r7
   8130e:	bd80      	pop	{r7, pc}
   81310:	e000e400 	.word	0xe000e400
   81314:	200704c4 	.word	0x200704c4
   81318:	200704c8 	.word	0x200704c8
   8131c:	e000ed20 	.word	0xe000ed20
   81320:	00081461 	.word	0x00081461
   81324:	20070004 	.word	0x20070004
   81328:	00081249 	.word	0x00081249
   8132c:	00081201 	.word	0x00081201

00081330 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   81330:	b480      	push	{r7}
   81332:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81334:	4b05      	ldr	r3, [pc, #20]	; (8134c <vPortYield+0x1c>)
   81336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8133a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   8133c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81340:	f3bf 8f6f 	isb	sy
}
   81344:	46bd      	mov	sp, r7
   81346:	f85d 7b04 	ldr.w	r7, [sp], #4
   8134a:	4770      	bx	lr
   8134c:	e000ed04 	.word	0xe000ed04

00081350 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81350:	b580      	push	{r7, lr}
   81352:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   81354:	4b0c      	ldr	r3, [pc, #48]	; (81388 <vPortEnterCritical+0x38>)
   81356:	4798      	blx	r3
	uxCriticalNesting++;
   81358:	4b0c      	ldr	r3, [pc, #48]	; (8138c <vPortEnterCritical+0x3c>)
   8135a:	681b      	ldr	r3, [r3, #0]
   8135c:	1c5a      	adds	r2, r3, #1
   8135e:	4b0b      	ldr	r3, [pc, #44]	; (8138c <vPortEnterCritical+0x3c>)
   81360:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   81362:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81366:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8136a:	4b08      	ldr	r3, [pc, #32]	; (8138c <vPortEnterCritical+0x3c>)
   8136c:	681b      	ldr	r3, [r3, #0]
   8136e:	2b01      	cmp	r3, #1
   81370:	d108      	bne.n	81384 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81372:	4b07      	ldr	r3, [pc, #28]	; (81390 <vPortEnterCritical+0x40>)
   81374:	681b      	ldr	r3, [r3, #0]
   81376:	f003 031f 	and.w	r3, r3, #31
   8137a:	2b00      	cmp	r3, #0
   8137c:	d002      	beq.n	81384 <vPortEnterCritical+0x34>
   8137e:	4b02      	ldr	r3, [pc, #8]	; (81388 <vPortEnterCritical+0x38>)
   81380:	4798      	blx	r3
   81382:	e7fe      	b.n	81382 <vPortEnterCritical+0x32>
	}
}
   81384:	bd80      	pop	{r7, pc}
   81386:	bf00      	nop
   81388:	000813cd 	.word	0x000813cd
   8138c:	20070004 	.word	0x20070004
   81390:	e000ed04 	.word	0xe000ed04

00081394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81394:	b580      	push	{r7, lr}
   81396:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   81398:	4b09      	ldr	r3, [pc, #36]	; (813c0 <vPortExitCritical+0x2c>)
   8139a:	681b      	ldr	r3, [r3, #0]
   8139c:	2b00      	cmp	r3, #0
   8139e:	d102      	bne.n	813a6 <vPortExitCritical+0x12>
   813a0:	4b08      	ldr	r3, [pc, #32]	; (813c4 <vPortExitCritical+0x30>)
   813a2:	4798      	blx	r3
   813a4:	e7fe      	b.n	813a4 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   813a6:	4b06      	ldr	r3, [pc, #24]	; (813c0 <vPortExitCritical+0x2c>)
   813a8:	681b      	ldr	r3, [r3, #0]
   813aa:	1e5a      	subs	r2, r3, #1
   813ac:	4b04      	ldr	r3, [pc, #16]	; (813c0 <vPortExitCritical+0x2c>)
   813ae:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   813b0:	4b03      	ldr	r3, [pc, #12]	; (813c0 <vPortExitCritical+0x2c>)
   813b2:	681b      	ldr	r3, [r3, #0]
   813b4:	2b00      	cmp	r3, #0
   813b6:	d102      	bne.n	813be <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   813b8:	2000      	movs	r0, #0
   813ba:	4b03      	ldr	r3, [pc, #12]	; (813c8 <vPortExitCritical+0x34>)
   813bc:	4798      	blx	r3
	}
}
   813be:	bd80      	pop	{r7, pc}
   813c0:	20070004 	.word	0x20070004
   813c4:	000813cd 	.word	0x000813cd
   813c8:	000813e1 	.word	0x000813e1

000813cc <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   813cc:	f3ef 8011 	mrs	r0, BASEPRI
   813d0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   813d4:	f381 8811 	msr	BASEPRI, r1
   813d8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   813da:	2300      	movs	r3, #0
}
   813dc:	4618      	mov	r0, r3
   813de:	bf00      	nop

000813e0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   813e0:	f380 8811 	msr	BASEPRI, r0
   813e4:	4770      	bx	lr
   813e6:	bf00      	nop

000813e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   813e8:	f3ef 8009 	mrs	r0, PSP
   813ec:	f3bf 8f6f 	isb	sy
   813f0:	4b0d      	ldr	r3, [pc, #52]	; (81428 <pxCurrentTCBConst>)
   813f2:	681a      	ldr	r2, [r3, #0]
   813f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813f8:	6010      	str	r0, [r2, #0]
   813fa:	e92d 4008 	stmdb	sp!, {r3, lr}
   813fe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81402:	f380 8811 	msr	BASEPRI, r0
   81406:	f001 f973 	bl	826f0 <vTaskSwitchContext>
   8140a:	f04f 0000 	mov.w	r0, #0
   8140e:	f380 8811 	msr	BASEPRI, r0
   81412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81416:	6819      	ldr	r1, [r3, #0]
   81418:	6808      	ldr	r0, [r1, #0]
   8141a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8141e:	f380 8809 	msr	PSP, r0
   81422:	f3bf 8f6f 	isb	sy
   81426:	4770      	bx	lr

00081428 <pxCurrentTCBConst>:
   81428:	2007a4e4 	.word	0x2007a4e4

0008142c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   8142c:	b580      	push	{r7, lr}
   8142e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81430:	4b07      	ldr	r3, [pc, #28]	; (81450 <SysTick_Handler+0x24>)
   81432:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   81434:	4b07      	ldr	r3, [pc, #28]	; (81454 <SysTick_Handler+0x28>)
   81436:	4798      	blx	r3
   81438:	4603      	mov	r3, r0
   8143a:	2b00      	cmp	r3, #0
   8143c:	d003      	beq.n	81446 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8143e:	4b06      	ldr	r3, [pc, #24]	; (81458 <SysTick_Handler+0x2c>)
   81440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81444:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81446:	2000      	movs	r0, #0
   81448:	4b04      	ldr	r3, [pc, #16]	; (8145c <SysTick_Handler+0x30>)
   8144a:	4798      	blx	r3
}
   8144c:	bd80      	pop	{r7, pc}
   8144e:	bf00      	nop
   81450:	000813cd 	.word	0x000813cd
   81454:	00082575 	.word	0x00082575
   81458:	e000ed04 	.word	0xe000ed04
   8145c:	000813e1 	.word	0x000813e1

00081460 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   81460:	b480      	push	{r7}
   81462:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   81464:	4b07      	ldr	r3, [pc, #28]	; (81484 <vPortSetupTimerInterrupt+0x24>)
   81466:	4a08      	ldr	r2, [pc, #32]	; (81488 <vPortSetupTimerInterrupt+0x28>)
   81468:	6811      	ldr	r1, [r2, #0]
   8146a:	4a08      	ldr	r2, [pc, #32]	; (8148c <vPortSetupTimerInterrupt+0x2c>)
   8146c:	fba2 0201 	umull	r0, r2, r2, r1
   81470:	08d2      	lsrs	r2, r2, #3
   81472:	3a01      	subs	r2, #1
   81474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   81476:	4b06      	ldr	r3, [pc, #24]	; (81490 <vPortSetupTimerInterrupt+0x30>)
   81478:	2207      	movs	r2, #7
   8147a:	601a      	str	r2, [r3, #0]
}
   8147c:	46bd      	mov	sp, r7
   8147e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81482:	4770      	bx	lr
   81484:	e000e014 	.word	0xe000e014
   81488:	20070000 	.word	0x20070000
   8148c:	cccccccd 	.word	0xcccccccd
   81490:	e000e010 	.word	0xe000e010

00081494 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81494:	b580      	push	{r7, lr}
   81496:	b082      	sub	sp, #8
   81498:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8149a:	f3ef 8305 	mrs	r3, IPSR
   8149e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   814a0:	687b      	ldr	r3, [r7, #4]
   814a2:	2b0f      	cmp	r3, #15
   814a4:	d90c      	bls.n	814c0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   814a6:	4a0d      	ldr	r2, [pc, #52]	; (814dc <vPortValidateInterruptPriority+0x48>)
   814a8:	687b      	ldr	r3, [r7, #4]
   814aa:	4413      	add	r3, r2
   814ac:	781b      	ldrb	r3, [r3, #0]
   814ae:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   814b0:	4b0b      	ldr	r3, [pc, #44]	; (814e0 <vPortValidateInterruptPriority+0x4c>)
   814b2:	781b      	ldrb	r3, [r3, #0]
   814b4:	78fa      	ldrb	r2, [r7, #3]
   814b6:	429a      	cmp	r2, r3
   814b8:	d202      	bcs.n	814c0 <vPortValidateInterruptPriority+0x2c>
   814ba:	4b0a      	ldr	r3, [pc, #40]	; (814e4 <vPortValidateInterruptPriority+0x50>)
   814bc:	4798      	blx	r3
   814be:	e7fe      	b.n	814be <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   814c0:	4b09      	ldr	r3, [pc, #36]	; (814e8 <vPortValidateInterruptPriority+0x54>)
   814c2:	681b      	ldr	r3, [r3, #0]
   814c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   814c8:	4b08      	ldr	r3, [pc, #32]	; (814ec <vPortValidateInterruptPriority+0x58>)
   814ca:	681b      	ldr	r3, [r3, #0]
   814cc:	429a      	cmp	r2, r3
   814ce:	d902      	bls.n	814d6 <vPortValidateInterruptPriority+0x42>
   814d0:	4b04      	ldr	r3, [pc, #16]	; (814e4 <vPortValidateInterruptPriority+0x50>)
   814d2:	4798      	blx	r3
   814d4:	e7fe      	b.n	814d4 <vPortValidateInterruptPriority+0x40>
	}
   814d6:	3708      	adds	r7, #8
   814d8:	46bd      	mov	sp, r7
   814da:	bd80      	pop	{r7, pc}
   814dc:	e000e3f0 	.word	0xe000e3f0
   814e0:	200704c4 	.word	0x200704c4
   814e4:	000813cd 	.word	0x000813cd
   814e8:	e000ed0c 	.word	0xe000ed0c
   814ec:	200704c8 	.word	0x200704c8

000814f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   814f0:	b580      	push	{r7, lr}
   814f2:	b086      	sub	sp, #24
   814f4:	af00      	add	r7, sp, #0
   814f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   814f8:	2300      	movs	r3, #0
   814fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   814fc:	4b4f      	ldr	r3, [pc, #316]	; (8163c <pvPortMalloc+0x14c>)
   814fe:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81500:	4b4f      	ldr	r3, [pc, #316]	; (81640 <pvPortMalloc+0x150>)
   81502:	681b      	ldr	r3, [r3, #0]
   81504:	2b00      	cmp	r3, #0
   81506:	d101      	bne.n	8150c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   81508:	4b4e      	ldr	r3, [pc, #312]	; (81644 <pvPortMalloc+0x154>)
   8150a:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   8150c:	4b4e      	ldr	r3, [pc, #312]	; (81648 <pvPortMalloc+0x158>)
   8150e:	681a      	ldr	r2, [r3, #0]
   81510:	687b      	ldr	r3, [r7, #4]
   81512:	4013      	ands	r3, r2
   81514:	2b00      	cmp	r3, #0
   81516:	d17d      	bne.n	81614 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   81518:	687b      	ldr	r3, [r7, #4]
   8151a:	2b00      	cmp	r3, #0
   8151c:	d015      	beq.n	8154a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   8151e:	2308      	movs	r3, #8
   81520:	687a      	ldr	r2, [r7, #4]
   81522:	4413      	add	r3, r2
   81524:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   81526:	687b      	ldr	r3, [r7, #4]
   81528:	f003 0307 	and.w	r3, r3, #7
   8152c:	2b00      	cmp	r3, #0
   8152e:	d00c      	beq.n	8154a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81530:	687b      	ldr	r3, [r7, #4]
   81532:	f023 0307 	bic.w	r3, r3, #7
   81536:	3308      	adds	r3, #8
   81538:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   8153a:	687b      	ldr	r3, [r7, #4]
   8153c:	f003 0307 	and.w	r3, r3, #7
   81540:	2b00      	cmp	r3, #0
   81542:	d002      	beq.n	8154a <pvPortMalloc+0x5a>
   81544:	4b41      	ldr	r3, [pc, #260]	; (8164c <pvPortMalloc+0x15c>)
   81546:	4798      	blx	r3
   81548:	e7fe      	b.n	81548 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   8154a:	687b      	ldr	r3, [r7, #4]
   8154c:	2b00      	cmp	r3, #0
   8154e:	d061      	beq.n	81614 <pvPortMalloc+0x124>
   81550:	4b3f      	ldr	r3, [pc, #252]	; (81650 <pvPortMalloc+0x160>)
   81552:	681b      	ldr	r3, [r3, #0]
   81554:	687a      	ldr	r2, [r7, #4]
   81556:	429a      	cmp	r2, r3
   81558:	d85c      	bhi.n	81614 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8155a:	4b3e      	ldr	r3, [pc, #248]	; (81654 <pvPortMalloc+0x164>)
   8155c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   8155e:	4b3d      	ldr	r3, [pc, #244]	; (81654 <pvPortMalloc+0x164>)
   81560:	681b      	ldr	r3, [r3, #0]
   81562:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81564:	e004      	b.n	81570 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   81566:	697b      	ldr	r3, [r7, #20]
   81568:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8156a:	697b      	ldr	r3, [r7, #20]
   8156c:	681b      	ldr	r3, [r3, #0]
   8156e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81570:	697b      	ldr	r3, [r7, #20]
   81572:	685a      	ldr	r2, [r3, #4]
   81574:	687b      	ldr	r3, [r7, #4]
   81576:	429a      	cmp	r2, r3
   81578:	d203      	bcs.n	81582 <pvPortMalloc+0x92>
   8157a:	697b      	ldr	r3, [r7, #20]
   8157c:	681b      	ldr	r3, [r3, #0]
   8157e:	2b00      	cmp	r3, #0
   81580:	d1f1      	bne.n	81566 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   81582:	4b2f      	ldr	r3, [pc, #188]	; (81640 <pvPortMalloc+0x150>)
   81584:	681b      	ldr	r3, [r3, #0]
   81586:	697a      	ldr	r2, [r7, #20]
   81588:	429a      	cmp	r2, r3
   8158a:	d043      	beq.n	81614 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   8158c:	693b      	ldr	r3, [r7, #16]
   8158e:	681a      	ldr	r2, [r3, #0]
   81590:	2308      	movs	r3, #8
   81592:	4413      	add	r3, r2
   81594:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81596:	697b      	ldr	r3, [r7, #20]
   81598:	681a      	ldr	r2, [r3, #0]
   8159a:	693b      	ldr	r3, [r7, #16]
   8159c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8159e:	697b      	ldr	r3, [r7, #20]
   815a0:	685a      	ldr	r2, [r3, #4]
   815a2:	687b      	ldr	r3, [r7, #4]
   815a4:	1ad2      	subs	r2, r2, r3
   815a6:	2308      	movs	r3, #8
   815a8:	005b      	lsls	r3, r3, #1
   815aa:	429a      	cmp	r2, r3
   815ac:	d917      	bls.n	815de <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   815ae:	697a      	ldr	r2, [r7, #20]
   815b0:	687b      	ldr	r3, [r7, #4]
   815b2:	4413      	add	r3, r2
   815b4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   815b6:	68bb      	ldr	r3, [r7, #8]
   815b8:	f003 0307 	and.w	r3, r3, #7
   815bc:	2b00      	cmp	r3, #0
   815be:	d002      	beq.n	815c6 <pvPortMalloc+0xd6>
   815c0:	4b22      	ldr	r3, [pc, #136]	; (8164c <pvPortMalloc+0x15c>)
   815c2:	4798      	blx	r3
   815c4:	e7fe      	b.n	815c4 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   815c6:	697b      	ldr	r3, [r7, #20]
   815c8:	685a      	ldr	r2, [r3, #4]
   815ca:	687b      	ldr	r3, [r7, #4]
   815cc:	1ad2      	subs	r2, r2, r3
   815ce:	68bb      	ldr	r3, [r7, #8]
   815d0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   815d2:	697b      	ldr	r3, [r7, #20]
   815d4:	687a      	ldr	r2, [r7, #4]
   815d6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   815d8:	68b8      	ldr	r0, [r7, #8]
   815da:	4b1f      	ldr	r3, [pc, #124]	; (81658 <pvPortMalloc+0x168>)
   815dc:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   815de:	4b1c      	ldr	r3, [pc, #112]	; (81650 <pvPortMalloc+0x160>)
   815e0:	681a      	ldr	r2, [r3, #0]
   815e2:	697b      	ldr	r3, [r7, #20]
   815e4:	685b      	ldr	r3, [r3, #4]
   815e6:	1ad2      	subs	r2, r2, r3
   815e8:	4b19      	ldr	r3, [pc, #100]	; (81650 <pvPortMalloc+0x160>)
   815ea:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   815ec:	4b18      	ldr	r3, [pc, #96]	; (81650 <pvPortMalloc+0x160>)
   815ee:	681a      	ldr	r2, [r3, #0]
   815f0:	4b1a      	ldr	r3, [pc, #104]	; (8165c <pvPortMalloc+0x16c>)
   815f2:	681b      	ldr	r3, [r3, #0]
   815f4:	429a      	cmp	r2, r3
   815f6:	d203      	bcs.n	81600 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   815f8:	4b15      	ldr	r3, [pc, #84]	; (81650 <pvPortMalloc+0x160>)
   815fa:	681a      	ldr	r2, [r3, #0]
   815fc:	4b17      	ldr	r3, [pc, #92]	; (8165c <pvPortMalloc+0x16c>)
   815fe:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   81600:	697b      	ldr	r3, [r7, #20]
   81602:	685a      	ldr	r2, [r3, #4]
   81604:	4b10      	ldr	r3, [pc, #64]	; (81648 <pvPortMalloc+0x158>)
   81606:	681b      	ldr	r3, [r3, #0]
   81608:	431a      	orrs	r2, r3
   8160a:	697b      	ldr	r3, [r7, #20]
   8160c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8160e:	697b      	ldr	r3, [r7, #20]
   81610:	2200      	movs	r2, #0
   81612:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   81614:	4b12      	ldr	r3, [pc, #72]	; (81660 <pvPortMalloc+0x170>)
   81616:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   81618:	68fb      	ldr	r3, [r7, #12]
   8161a:	2b00      	cmp	r3, #0
   8161c:	d101      	bne.n	81622 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   8161e:	4b11      	ldr	r3, [pc, #68]	; (81664 <pvPortMalloc+0x174>)
   81620:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81622:	68fb      	ldr	r3, [r7, #12]
   81624:	f003 0307 	and.w	r3, r3, #7
   81628:	2b00      	cmp	r3, #0
   8162a:	d002      	beq.n	81632 <pvPortMalloc+0x142>
   8162c:	4b07      	ldr	r3, [pc, #28]	; (8164c <pvPortMalloc+0x15c>)
   8162e:	4798      	blx	r3
   81630:	e7fe      	b.n	81630 <pvPortMalloc+0x140>
	return pvReturn;
   81632:	68fb      	ldr	r3, [r7, #12]
}
   81634:	4618      	mov	r0, r3
   81636:	3718      	adds	r7, #24
   81638:	46bd      	mov	sp, r7
   8163a:	bd80      	pop	{r7, pc}
   8163c:	00082409 	.word	0x00082409
   81640:	2007a4d4 	.word	0x2007a4d4
   81644:	0008170d 	.word	0x0008170d
   81648:	2007a4e0 	.word	0x2007a4e0
   8164c:	000813cd 	.word	0x000813cd
   81650:	2007a4d8 	.word	0x2007a4d8
   81654:	2007a4cc 	.word	0x2007a4cc
   81658:	000817d1 	.word	0x000817d1
   8165c:	2007a4dc 	.word	0x2007a4dc
   81660:	00082425 	.word	0x00082425
   81664:	00083665 	.word	0x00083665

00081668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81668:	b580      	push	{r7, lr}
   8166a:	b084      	sub	sp, #16
   8166c:	af00      	add	r7, sp, #0
   8166e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   81670:	687b      	ldr	r3, [r7, #4]
   81672:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   81674:	687b      	ldr	r3, [r7, #4]
   81676:	2b00      	cmp	r3, #0
   81678:	d038      	beq.n	816ec <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8167a:	2308      	movs	r3, #8
   8167c:	425b      	negs	r3, r3
   8167e:	68fa      	ldr	r2, [r7, #12]
   81680:	4413      	add	r3, r2
   81682:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   81684:	68fb      	ldr	r3, [r7, #12]
   81686:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   81688:	68bb      	ldr	r3, [r7, #8]
   8168a:	685a      	ldr	r2, [r3, #4]
   8168c:	4b19      	ldr	r3, [pc, #100]	; (816f4 <vPortFree+0x8c>)
   8168e:	681b      	ldr	r3, [r3, #0]
   81690:	4013      	ands	r3, r2
   81692:	2b00      	cmp	r3, #0
   81694:	d102      	bne.n	8169c <vPortFree+0x34>
   81696:	4b18      	ldr	r3, [pc, #96]	; (816f8 <vPortFree+0x90>)
   81698:	4798      	blx	r3
   8169a:	e7fe      	b.n	8169a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   8169c:	68bb      	ldr	r3, [r7, #8]
   8169e:	681b      	ldr	r3, [r3, #0]
   816a0:	2b00      	cmp	r3, #0
   816a2:	d002      	beq.n	816aa <vPortFree+0x42>
   816a4:	4b14      	ldr	r3, [pc, #80]	; (816f8 <vPortFree+0x90>)
   816a6:	4798      	blx	r3
   816a8:	e7fe      	b.n	816a8 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   816aa:	68bb      	ldr	r3, [r7, #8]
   816ac:	685a      	ldr	r2, [r3, #4]
   816ae:	4b11      	ldr	r3, [pc, #68]	; (816f4 <vPortFree+0x8c>)
   816b0:	681b      	ldr	r3, [r3, #0]
   816b2:	4013      	ands	r3, r2
   816b4:	2b00      	cmp	r3, #0
   816b6:	d019      	beq.n	816ec <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   816b8:	68bb      	ldr	r3, [r7, #8]
   816ba:	681b      	ldr	r3, [r3, #0]
   816bc:	2b00      	cmp	r3, #0
   816be:	d115      	bne.n	816ec <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   816c0:	68bb      	ldr	r3, [r7, #8]
   816c2:	685a      	ldr	r2, [r3, #4]
   816c4:	4b0b      	ldr	r3, [pc, #44]	; (816f4 <vPortFree+0x8c>)
   816c6:	681b      	ldr	r3, [r3, #0]
   816c8:	43db      	mvns	r3, r3
   816ca:	401a      	ands	r2, r3
   816cc:	68bb      	ldr	r3, [r7, #8]
   816ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   816d0:	4b0a      	ldr	r3, [pc, #40]	; (816fc <vPortFree+0x94>)
   816d2:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   816d4:	68bb      	ldr	r3, [r7, #8]
   816d6:	685a      	ldr	r2, [r3, #4]
   816d8:	4b09      	ldr	r3, [pc, #36]	; (81700 <vPortFree+0x98>)
   816da:	681b      	ldr	r3, [r3, #0]
   816dc:	441a      	add	r2, r3
   816de:	4b08      	ldr	r3, [pc, #32]	; (81700 <vPortFree+0x98>)
   816e0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   816e2:	68b8      	ldr	r0, [r7, #8]
   816e4:	4b07      	ldr	r3, [pc, #28]	; (81704 <vPortFree+0x9c>)
   816e6:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   816e8:	4b07      	ldr	r3, [pc, #28]	; (81708 <vPortFree+0xa0>)
   816ea:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   816ec:	3710      	adds	r7, #16
   816ee:	46bd      	mov	sp, r7
   816f0:	bd80      	pop	{r7, pc}
   816f2:	bf00      	nop
   816f4:	2007a4e0 	.word	0x2007a4e0
   816f8:	000813cd 	.word	0x000813cd
   816fc:	00082409 	.word	0x00082409
   81700:	2007a4d8 	.word	0x2007a4d8
   81704:	000817d1 	.word	0x000817d1
   81708:	00082425 	.word	0x00082425

0008170c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   8170c:	b480      	push	{r7}
   8170e:	b085      	sub	sp, #20
   81710:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   81712:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   81716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   81718:	4b27      	ldr	r3, [pc, #156]	; (817b8 <prvHeapInit+0xac>)
   8171a:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   8171c:	68fb      	ldr	r3, [r7, #12]
   8171e:	f003 0307 	and.w	r3, r3, #7
   81722:	2b00      	cmp	r3, #0
   81724:	d00c      	beq.n	81740 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   81726:	68fb      	ldr	r3, [r7, #12]
   81728:	3307      	adds	r3, #7
   8172a:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   8172c:	68fb      	ldr	r3, [r7, #12]
   8172e:	f023 0307 	bic.w	r3, r3, #7
   81732:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   81734:	68ba      	ldr	r2, [r7, #8]
   81736:	68fb      	ldr	r3, [r7, #12]
   81738:	1ad2      	subs	r2, r2, r3
   8173a:	4b1f      	ldr	r3, [pc, #124]	; (817b8 <prvHeapInit+0xac>)
   8173c:	4413      	add	r3, r2
   8173e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   81740:	68fb      	ldr	r3, [r7, #12]
   81742:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   81744:	4b1d      	ldr	r3, [pc, #116]	; (817bc <prvHeapInit+0xb0>)
   81746:	687a      	ldr	r2, [r7, #4]
   81748:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8174a:	4b1c      	ldr	r3, [pc, #112]	; (817bc <prvHeapInit+0xb0>)
   8174c:	2200      	movs	r2, #0
   8174e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   81750:	687a      	ldr	r2, [r7, #4]
   81752:	68bb      	ldr	r3, [r7, #8]
   81754:	4413      	add	r3, r2
   81756:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   81758:	2308      	movs	r3, #8
   8175a:	68fa      	ldr	r2, [r7, #12]
   8175c:	1ad3      	subs	r3, r2, r3
   8175e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   81760:	68fb      	ldr	r3, [r7, #12]
   81762:	f023 0307 	bic.w	r3, r3, #7
   81766:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   81768:	68fa      	ldr	r2, [r7, #12]
   8176a:	4b15      	ldr	r3, [pc, #84]	; (817c0 <prvHeapInit+0xb4>)
   8176c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   8176e:	4b14      	ldr	r3, [pc, #80]	; (817c0 <prvHeapInit+0xb4>)
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	2200      	movs	r2, #0
   81774:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   81776:	4b12      	ldr	r3, [pc, #72]	; (817c0 <prvHeapInit+0xb4>)
   81778:	681b      	ldr	r3, [r3, #0]
   8177a:	2200      	movs	r2, #0
   8177c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8177e:	687b      	ldr	r3, [r7, #4]
   81780:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   81782:	683b      	ldr	r3, [r7, #0]
   81784:	68fa      	ldr	r2, [r7, #12]
   81786:	1ad2      	subs	r2, r2, r3
   81788:	683b      	ldr	r3, [r7, #0]
   8178a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8178c:	4b0c      	ldr	r3, [pc, #48]	; (817c0 <prvHeapInit+0xb4>)
   8178e:	681a      	ldr	r2, [r3, #0]
   81790:	683b      	ldr	r3, [r7, #0]
   81792:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   81794:	683b      	ldr	r3, [r7, #0]
   81796:	685a      	ldr	r2, [r3, #4]
   81798:	4b0a      	ldr	r3, [pc, #40]	; (817c4 <prvHeapInit+0xb8>)
   8179a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8179c:	683b      	ldr	r3, [r7, #0]
   8179e:	685a      	ldr	r2, [r3, #4]
   817a0:	4b09      	ldr	r3, [pc, #36]	; (817c8 <prvHeapInit+0xbc>)
   817a2:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   817a4:	4b09      	ldr	r3, [pc, #36]	; (817cc <prvHeapInit+0xc0>)
   817a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   817aa:	601a      	str	r2, [r3, #0]
}
   817ac:	3714      	adds	r7, #20
   817ae:	46bd      	mov	sp, r7
   817b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   817b4:	4770      	bx	lr
   817b6:	bf00      	nop
   817b8:	200704cc 	.word	0x200704cc
   817bc:	2007a4cc 	.word	0x2007a4cc
   817c0:	2007a4d4 	.word	0x2007a4d4
   817c4:	2007a4dc 	.word	0x2007a4dc
   817c8:	2007a4d8 	.word	0x2007a4d8
   817cc:	2007a4e0 	.word	0x2007a4e0

000817d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   817d0:	b480      	push	{r7}
   817d2:	b085      	sub	sp, #20
   817d4:	af00      	add	r7, sp, #0
   817d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   817d8:	4b27      	ldr	r3, [pc, #156]	; (81878 <prvInsertBlockIntoFreeList+0xa8>)
   817da:	60fb      	str	r3, [r7, #12]
   817dc:	e002      	b.n	817e4 <prvInsertBlockIntoFreeList+0x14>
   817de:	68fb      	ldr	r3, [r7, #12]
   817e0:	681b      	ldr	r3, [r3, #0]
   817e2:	60fb      	str	r3, [r7, #12]
   817e4:	68fb      	ldr	r3, [r7, #12]
   817e6:	681a      	ldr	r2, [r3, #0]
   817e8:	687b      	ldr	r3, [r7, #4]
   817ea:	429a      	cmp	r2, r3
   817ec:	d3f7      	bcc.n	817de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   817ee:	68fb      	ldr	r3, [r7, #12]
   817f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   817f2:	68fb      	ldr	r3, [r7, #12]
   817f4:	685b      	ldr	r3, [r3, #4]
   817f6:	68ba      	ldr	r2, [r7, #8]
   817f8:	441a      	add	r2, r3
   817fa:	687b      	ldr	r3, [r7, #4]
   817fc:	429a      	cmp	r2, r3
   817fe:	d108      	bne.n	81812 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   81800:	68fb      	ldr	r3, [r7, #12]
   81802:	685a      	ldr	r2, [r3, #4]
   81804:	687b      	ldr	r3, [r7, #4]
   81806:	685b      	ldr	r3, [r3, #4]
   81808:	441a      	add	r2, r3
   8180a:	68fb      	ldr	r3, [r7, #12]
   8180c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   8180e:	68fb      	ldr	r3, [r7, #12]
   81810:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   81812:	687b      	ldr	r3, [r7, #4]
   81814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   81816:	687b      	ldr	r3, [r7, #4]
   81818:	685b      	ldr	r3, [r3, #4]
   8181a:	68ba      	ldr	r2, [r7, #8]
   8181c:	441a      	add	r2, r3
   8181e:	68fb      	ldr	r3, [r7, #12]
   81820:	681b      	ldr	r3, [r3, #0]
   81822:	429a      	cmp	r2, r3
   81824:	d118      	bne.n	81858 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   81826:	68fb      	ldr	r3, [r7, #12]
   81828:	681a      	ldr	r2, [r3, #0]
   8182a:	4b14      	ldr	r3, [pc, #80]	; (8187c <prvInsertBlockIntoFreeList+0xac>)
   8182c:	681b      	ldr	r3, [r3, #0]
   8182e:	429a      	cmp	r2, r3
   81830:	d00d      	beq.n	8184e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81832:	687b      	ldr	r3, [r7, #4]
   81834:	685a      	ldr	r2, [r3, #4]
   81836:	68fb      	ldr	r3, [r7, #12]
   81838:	681b      	ldr	r3, [r3, #0]
   8183a:	685b      	ldr	r3, [r3, #4]
   8183c:	441a      	add	r2, r3
   8183e:	687b      	ldr	r3, [r7, #4]
   81840:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81842:	68fb      	ldr	r3, [r7, #12]
   81844:	681b      	ldr	r3, [r3, #0]
   81846:	681a      	ldr	r2, [r3, #0]
   81848:	687b      	ldr	r3, [r7, #4]
   8184a:	601a      	str	r2, [r3, #0]
   8184c:	e008      	b.n	81860 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8184e:	4b0b      	ldr	r3, [pc, #44]	; (8187c <prvInsertBlockIntoFreeList+0xac>)
   81850:	681a      	ldr	r2, [r3, #0]
   81852:	687b      	ldr	r3, [r7, #4]
   81854:	601a      	str	r2, [r3, #0]
   81856:	e003      	b.n	81860 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   81858:	68fb      	ldr	r3, [r7, #12]
   8185a:	681a      	ldr	r2, [r3, #0]
   8185c:	687b      	ldr	r3, [r7, #4]
   8185e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81860:	68fa      	ldr	r2, [r7, #12]
   81862:	687b      	ldr	r3, [r7, #4]
   81864:	429a      	cmp	r2, r3
   81866:	d002      	beq.n	8186e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81868:	68fb      	ldr	r3, [r7, #12]
   8186a:	687a      	ldr	r2, [r7, #4]
   8186c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   8186e:	3714      	adds	r7, #20
   81870:	46bd      	mov	sp, r7
   81872:	f85d 7b04 	ldr.w	r7, [sp], #4
   81876:	4770      	bx	lr
   81878:	2007a4cc 	.word	0x2007a4cc
   8187c:	2007a4d4 	.word	0x2007a4d4

00081880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   81880:	b580      	push	{r7, lr}
   81882:	b084      	sub	sp, #16
   81884:	af00      	add	r7, sp, #0
   81886:	6078      	str	r0, [r7, #4]
   81888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8188a:	687b      	ldr	r3, [r7, #4]
   8188c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8188e:	68fb      	ldr	r3, [r7, #12]
   81890:	2b00      	cmp	r3, #0
   81892:	d102      	bne.n	8189a <xQueueGenericReset+0x1a>
   81894:	4b26      	ldr	r3, [pc, #152]	; (81930 <xQueueGenericReset+0xb0>)
   81896:	4798      	blx	r3
   81898:	e7fe      	b.n	81898 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8189a:	4b26      	ldr	r3, [pc, #152]	; (81934 <xQueueGenericReset+0xb4>)
   8189c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8189e:	68fb      	ldr	r3, [r7, #12]
   818a0:	681a      	ldr	r2, [r3, #0]
   818a2:	68fb      	ldr	r3, [r7, #12]
   818a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   818a6:	68f9      	ldr	r1, [r7, #12]
   818a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
   818aa:	fb01 f303 	mul.w	r3, r1, r3
   818ae:	441a      	add	r2, r3
   818b0:	68fb      	ldr	r3, [r7, #12]
   818b2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   818b4:	68fb      	ldr	r3, [r7, #12]
   818b6:	2200      	movs	r2, #0
   818b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   818ba:	68fb      	ldr	r3, [r7, #12]
   818bc:	681a      	ldr	r2, [r3, #0]
   818be:	68fb      	ldr	r3, [r7, #12]
   818c0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   818c2:	68fb      	ldr	r3, [r7, #12]
   818c4:	681a      	ldr	r2, [r3, #0]
   818c6:	68fb      	ldr	r3, [r7, #12]
   818c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   818ca:	3b01      	subs	r3, #1
   818cc:	68f9      	ldr	r1, [r7, #12]
   818ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
   818d0:	fb01 f303 	mul.w	r3, r1, r3
   818d4:	441a      	add	r2, r3
   818d6:	68fb      	ldr	r3, [r7, #12]
   818d8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   818da:	68fb      	ldr	r3, [r7, #12]
   818dc:	f04f 32ff 	mov.w	r2, #4294967295
   818e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   818e2:	68fb      	ldr	r3, [r7, #12]
   818e4:	f04f 32ff 	mov.w	r2, #4294967295
   818e8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   818ea:	683b      	ldr	r3, [r7, #0]
   818ec:	2b00      	cmp	r3, #0
   818ee:	d10e      	bne.n	8190e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   818f0:	68fb      	ldr	r3, [r7, #12]
   818f2:	691b      	ldr	r3, [r3, #16]
   818f4:	2b00      	cmp	r3, #0
   818f6:	d014      	beq.n	81922 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   818f8:	68fb      	ldr	r3, [r7, #12]
   818fa:	3310      	adds	r3, #16
   818fc:	4618      	mov	r0, r3
   818fe:	4b0e      	ldr	r3, [pc, #56]	; (81938 <xQueueGenericReset+0xb8>)
   81900:	4798      	blx	r3
   81902:	4603      	mov	r3, r0
   81904:	2b01      	cmp	r3, #1
   81906:	d10c      	bne.n	81922 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   81908:	4b0c      	ldr	r3, [pc, #48]	; (8193c <xQueueGenericReset+0xbc>)
   8190a:	4798      	blx	r3
   8190c:	e009      	b.n	81922 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8190e:	68fb      	ldr	r3, [r7, #12]
   81910:	3310      	adds	r3, #16
   81912:	4618      	mov	r0, r3
   81914:	4b0a      	ldr	r3, [pc, #40]	; (81940 <xQueueGenericReset+0xc0>)
   81916:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81918:	68fb      	ldr	r3, [r7, #12]
   8191a:	3324      	adds	r3, #36	; 0x24
   8191c:	4618      	mov	r0, r3
   8191e:	4b08      	ldr	r3, [pc, #32]	; (81940 <xQueueGenericReset+0xc0>)
   81920:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   81922:	4b08      	ldr	r3, [pc, #32]	; (81944 <xQueueGenericReset+0xc4>)
   81924:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   81926:	2301      	movs	r3, #1
}
   81928:	4618      	mov	r0, r3
   8192a:	3710      	adds	r7, #16
   8192c:	46bd      	mov	sp, r7
   8192e:	bd80      	pop	{r7, pc}
   81930:	000813cd 	.word	0x000813cd
   81934:	00081351 	.word	0x00081351
   81938:	0008290d 	.word	0x0008290d
   8193c:	00081331 	.word	0x00081331
   81940:	00081045 	.word	0x00081045
   81944:	00081395 	.word	0x00081395

00081948 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   81948:	b580      	push	{r7, lr}
   8194a:	b088      	sub	sp, #32
   8194c:	af00      	add	r7, sp, #0
   8194e:	60f8      	str	r0, [r7, #12]
   81950:	60b9      	str	r1, [r7, #8]
   81952:	4613      	mov	r3, r2
   81954:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   81956:	2300      	movs	r3, #0
   81958:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   8195a:	68fb      	ldr	r3, [r7, #12]
   8195c:	2b00      	cmp	r3, #0
   8195e:	d026      	beq.n	819ae <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   81960:	204c      	movs	r0, #76	; 0x4c
   81962:	4b18      	ldr	r3, [pc, #96]	; (819c4 <xQueueGenericCreate+0x7c>)
   81964:	4798      	blx	r3
   81966:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   81968:	69bb      	ldr	r3, [r7, #24]
   8196a:	2b00      	cmp	r3, #0
   8196c:	d01f      	beq.n	819ae <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8196e:	68fb      	ldr	r3, [r7, #12]
   81970:	68ba      	ldr	r2, [r7, #8]
   81972:	fb02 f303 	mul.w	r3, r2, r3
   81976:	3301      	adds	r3, #1
   81978:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8197a:	6978      	ldr	r0, [r7, #20]
   8197c:	4b11      	ldr	r3, [pc, #68]	; (819c4 <xQueueGenericCreate+0x7c>)
   8197e:	4798      	blx	r3
   81980:	4602      	mov	r2, r0
   81982:	69bb      	ldr	r3, [r7, #24]
   81984:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   81986:	69bb      	ldr	r3, [r7, #24]
   81988:	681b      	ldr	r3, [r3, #0]
   8198a:	2b00      	cmp	r3, #0
   8198c:	d00c      	beq.n	819a8 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8198e:	69bb      	ldr	r3, [r7, #24]
   81990:	68fa      	ldr	r2, [r7, #12]
   81992:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81994:	69bb      	ldr	r3, [r7, #24]
   81996:	68ba      	ldr	r2, [r7, #8]
   81998:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8199a:	69b8      	ldr	r0, [r7, #24]
   8199c:	2101      	movs	r1, #1
   8199e:	4b0a      	ldr	r3, [pc, #40]	; (819c8 <xQueueGenericCreate+0x80>)
   819a0:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   819a2:	69bb      	ldr	r3, [r7, #24]
   819a4:	61fb      	str	r3, [r7, #28]
   819a6:	e002      	b.n	819ae <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   819a8:	69b8      	ldr	r0, [r7, #24]
   819aa:	4b08      	ldr	r3, [pc, #32]	; (819cc <xQueueGenericCreate+0x84>)
   819ac:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   819ae:	69fb      	ldr	r3, [r7, #28]
   819b0:	2b00      	cmp	r3, #0
   819b2:	d102      	bne.n	819ba <xQueueGenericCreate+0x72>
   819b4:	4b06      	ldr	r3, [pc, #24]	; (819d0 <xQueueGenericCreate+0x88>)
   819b6:	4798      	blx	r3
   819b8:	e7fe      	b.n	819b8 <xQueueGenericCreate+0x70>

	return xReturn;
   819ba:	69fb      	ldr	r3, [r7, #28]
}
   819bc:	4618      	mov	r0, r3
   819be:	3720      	adds	r7, #32
   819c0:	46bd      	mov	sp, r7
   819c2:	bd80      	pop	{r7, pc}
   819c4:	000814f1 	.word	0x000814f1
   819c8:	00081881 	.word	0x00081881
   819cc:	00081669 	.word	0x00081669
   819d0:	000813cd 	.word	0x000813cd

000819d4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   819d4:	b580      	push	{r7, lr}
   819d6:	b08a      	sub	sp, #40	; 0x28
   819d8:	af00      	add	r7, sp, #0
   819da:	60f8      	str	r0, [r7, #12]
   819dc:	60b9      	str	r1, [r7, #8]
   819de:	607a      	str	r2, [r7, #4]
   819e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   819e2:	2300      	movs	r3, #0
   819e4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   819e6:	68fb      	ldr	r3, [r7, #12]
   819e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   819ea:	6a3b      	ldr	r3, [r7, #32]
   819ec:	2b00      	cmp	r3, #0
   819ee:	d102      	bne.n	819f6 <xQueueGenericSend+0x22>
   819f0:	4b5b      	ldr	r3, [pc, #364]	; (81b60 <xQueueGenericSend+0x18c>)
   819f2:	4798      	blx	r3
   819f4:	e7fe      	b.n	819f4 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   819f6:	68bb      	ldr	r3, [r7, #8]
   819f8:	2b00      	cmp	r3, #0
   819fa:	d103      	bne.n	81a04 <xQueueGenericSend+0x30>
   819fc:	6a3b      	ldr	r3, [r7, #32]
   819fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81a00:	2b00      	cmp	r3, #0
   81a02:	d101      	bne.n	81a08 <xQueueGenericSend+0x34>
   81a04:	2301      	movs	r3, #1
   81a06:	e000      	b.n	81a0a <xQueueGenericSend+0x36>
   81a08:	2300      	movs	r3, #0
   81a0a:	2b00      	cmp	r3, #0
   81a0c:	d102      	bne.n	81a14 <xQueueGenericSend+0x40>
   81a0e:	4b54      	ldr	r3, [pc, #336]	; (81b60 <xQueueGenericSend+0x18c>)
   81a10:	4798      	blx	r3
   81a12:	e7fe      	b.n	81a12 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81a14:	683b      	ldr	r3, [r7, #0]
   81a16:	2b02      	cmp	r3, #2
   81a18:	d103      	bne.n	81a22 <xQueueGenericSend+0x4e>
   81a1a:	6a3b      	ldr	r3, [r7, #32]
   81a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81a1e:	2b01      	cmp	r3, #1
   81a20:	d101      	bne.n	81a26 <xQueueGenericSend+0x52>
   81a22:	2301      	movs	r3, #1
   81a24:	e000      	b.n	81a28 <xQueueGenericSend+0x54>
   81a26:	2300      	movs	r3, #0
   81a28:	2b00      	cmp	r3, #0
   81a2a:	d102      	bne.n	81a32 <xQueueGenericSend+0x5e>
   81a2c:	4b4c      	ldr	r3, [pc, #304]	; (81b60 <xQueueGenericSend+0x18c>)
   81a2e:	4798      	blx	r3
   81a30:	e7fe      	b.n	81a30 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81a32:	4b4c      	ldr	r3, [pc, #304]	; (81b64 <xQueueGenericSend+0x190>)
   81a34:	4798      	blx	r3
   81a36:	4603      	mov	r3, r0
   81a38:	2b00      	cmp	r3, #0
   81a3a:	d102      	bne.n	81a42 <xQueueGenericSend+0x6e>
   81a3c:	687b      	ldr	r3, [r7, #4]
   81a3e:	2b00      	cmp	r3, #0
   81a40:	d101      	bne.n	81a46 <xQueueGenericSend+0x72>
   81a42:	2301      	movs	r3, #1
   81a44:	e000      	b.n	81a48 <xQueueGenericSend+0x74>
   81a46:	2300      	movs	r3, #0
   81a48:	2b00      	cmp	r3, #0
   81a4a:	d102      	bne.n	81a52 <xQueueGenericSend+0x7e>
   81a4c:	4b44      	ldr	r3, [pc, #272]	; (81b60 <xQueueGenericSend+0x18c>)
   81a4e:	4798      	blx	r3
   81a50:	e7fe      	b.n	81a50 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81a52:	4b45      	ldr	r3, [pc, #276]	; (81b68 <xQueueGenericSend+0x194>)
   81a54:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81a56:	6a3b      	ldr	r3, [r7, #32]
   81a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81a5a:	6a3b      	ldr	r3, [r7, #32]
   81a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81a5e:	429a      	cmp	r2, r3
   81a60:	d302      	bcc.n	81a68 <xQueueGenericSend+0x94>
   81a62:	683b      	ldr	r3, [r7, #0]
   81a64:	2b02      	cmp	r3, #2
   81a66:	d11d      	bne.n	81aa4 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81a68:	6a38      	ldr	r0, [r7, #32]
   81a6a:	68b9      	ldr	r1, [r7, #8]
   81a6c:	683a      	ldr	r2, [r7, #0]
   81a6e:	4b3f      	ldr	r3, [pc, #252]	; (81b6c <xQueueGenericSend+0x198>)
   81a70:	4798      	blx	r3
   81a72:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81a74:	6a3b      	ldr	r3, [r7, #32]
   81a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81a78:	2b00      	cmp	r3, #0
   81a7a:	d00a      	beq.n	81a92 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81a7c:	6a3b      	ldr	r3, [r7, #32]
   81a7e:	3324      	adds	r3, #36	; 0x24
   81a80:	4618      	mov	r0, r3
   81a82:	4b3b      	ldr	r3, [pc, #236]	; (81b70 <xQueueGenericSend+0x19c>)
   81a84:	4798      	blx	r3
   81a86:	4603      	mov	r3, r0
   81a88:	2b01      	cmp	r3, #1
   81a8a:	d107      	bne.n	81a9c <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   81a8c:	4b39      	ldr	r3, [pc, #228]	; (81b74 <xQueueGenericSend+0x1a0>)
   81a8e:	4798      	blx	r3
   81a90:	e004      	b.n	81a9c <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   81a92:	69fb      	ldr	r3, [r7, #28]
   81a94:	2b00      	cmp	r3, #0
   81a96:	d001      	beq.n	81a9c <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   81a98:	4b36      	ldr	r3, [pc, #216]	; (81b74 <xQueueGenericSend+0x1a0>)
   81a9a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   81a9c:	4b36      	ldr	r3, [pc, #216]	; (81b78 <xQueueGenericSend+0x1a4>)
   81a9e:	4798      	blx	r3
				return pdPASS;
   81aa0:	2301      	movs	r3, #1
   81aa2:	e059      	b.n	81b58 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   81aa4:	687b      	ldr	r3, [r7, #4]
   81aa6:	2b00      	cmp	r3, #0
   81aa8:	d103      	bne.n	81ab2 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81aaa:	4b33      	ldr	r3, [pc, #204]	; (81b78 <xQueueGenericSend+0x1a4>)
   81aac:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81aae:	2300      	movs	r3, #0
   81ab0:	e052      	b.n	81b58 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   81ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ab4:	2b00      	cmp	r3, #0
   81ab6:	d106      	bne.n	81ac6 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81ab8:	f107 0314 	add.w	r3, r7, #20
   81abc:	4618      	mov	r0, r3
   81abe:	4b2f      	ldr	r3, [pc, #188]	; (81b7c <xQueueGenericSend+0x1a8>)
   81ac0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81ac2:	2301      	movs	r3, #1
   81ac4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   81ac6:	4b2c      	ldr	r3, [pc, #176]	; (81b78 <xQueueGenericSend+0x1a4>)
   81ac8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81aca:	4b2d      	ldr	r3, [pc, #180]	; (81b80 <xQueueGenericSend+0x1ac>)
   81acc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81ace:	4b26      	ldr	r3, [pc, #152]	; (81b68 <xQueueGenericSend+0x194>)
   81ad0:	4798      	blx	r3
   81ad2:	6a3b      	ldr	r3, [r7, #32]
   81ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ada:	d102      	bne.n	81ae2 <xQueueGenericSend+0x10e>
   81adc:	6a3b      	ldr	r3, [r7, #32]
   81ade:	2200      	movs	r2, #0
   81ae0:	645a      	str	r2, [r3, #68]	; 0x44
   81ae2:	6a3b      	ldr	r3, [r7, #32]
   81ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81aea:	d102      	bne.n	81af2 <xQueueGenericSend+0x11e>
   81aec:	6a3b      	ldr	r3, [r7, #32]
   81aee:	2200      	movs	r2, #0
   81af0:	649a      	str	r2, [r3, #72]	; 0x48
   81af2:	4b21      	ldr	r3, [pc, #132]	; (81b78 <xQueueGenericSend+0x1a4>)
   81af4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81af6:	f107 0214 	add.w	r2, r7, #20
   81afa:	1d3b      	adds	r3, r7, #4
   81afc:	4610      	mov	r0, r2
   81afe:	4619      	mov	r1, r3
   81b00:	4b20      	ldr	r3, [pc, #128]	; (81b84 <xQueueGenericSend+0x1b0>)
   81b02:	4798      	blx	r3
   81b04:	4603      	mov	r3, r0
   81b06:	2b00      	cmp	r3, #0
   81b08:	d11e      	bne.n	81b48 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81b0a:	6a38      	ldr	r0, [r7, #32]
   81b0c:	4b1e      	ldr	r3, [pc, #120]	; (81b88 <xQueueGenericSend+0x1b4>)
   81b0e:	4798      	blx	r3
   81b10:	4603      	mov	r3, r0
   81b12:	2b00      	cmp	r3, #0
   81b14:	d012      	beq.n	81b3c <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81b16:	6a3b      	ldr	r3, [r7, #32]
   81b18:	f103 0210 	add.w	r2, r3, #16
   81b1c:	687b      	ldr	r3, [r7, #4]
   81b1e:	4610      	mov	r0, r2
   81b20:	4619      	mov	r1, r3
   81b22:	4b1a      	ldr	r3, [pc, #104]	; (81b8c <xQueueGenericSend+0x1b8>)
   81b24:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81b26:	6a38      	ldr	r0, [r7, #32]
   81b28:	4b19      	ldr	r3, [pc, #100]	; (81b90 <xQueueGenericSend+0x1bc>)
   81b2a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81b2c:	4b19      	ldr	r3, [pc, #100]	; (81b94 <xQueueGenericSend+0x1c0>)
   81b2e:	4798      	blx	r3
   81b30:	4603      	mov	r3, r0
   81b32:	2b00      	cmp	r3, #0
   81b34:	d10f      	bne.n	81b56 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   81b36:	4b0f      	ldr	r3, [pc, #60]	; (81b74 <xQueueGenericSend+0x1a0>)
   81b38:	4798      	blx	r3
   81b3a:	e00c      	b.n	81b56 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81b3c:	6a38      	ldr	r0, [r7, #32]
   81b3e:	4b14      	ldr	r3, [pc, #80]	; (81b90 <xQueueGenericSend+0x1bc>)
   81b40:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81b42:	4b14      	ldr	r3, [pc, #80]	; (81b94 <xQueueGenericSend+0x1c0>)
   81b44:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   81b46:	e784      	b.n	81a52 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81b48:	6a38      	ldr	r0, [r7, #32]
   81b4a:	4b11      	ldr	r3, [pc, #68]	; (81b90 <xQueueGenericSend+0x1bc>)
   81b4c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81b4e:	4b11      	ldr	r3, [pc, #68]	; (81b94 <xQueueGenericSend+0x1c0>)
   81b50:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81b52:	2300      	movs	r3, #0
   81b54:	e000      	b.n	81b58 <xQueueGenericSend+0x184>
		}
	}
   81b56:	e77c      	b.n	81a52 <xQueueGenericSend+0x7e>
}
   81b58:	4618      	mov	r0, r3
   81b5a:	3728      	adds	r7, #40	; 0x28
   81b5c:	46bd      	mov	sp, r7
   81b5e:	bd80      	pop	{r7, pc}
   81b60:	000813cd 	.word	0x000813cd
   81b64:	00082de5 	.word	0x00082de5
   81b68:	00081351 	.word	0x00081351
   81b6c:	00081f59 	.word	0x00081f59
   81b70:	0008290d 	.word	0x0008290d
   81b74:	00081331 	.word	0x00081331
   81b78:	00081395 	.word	0x00081395
   81b7c:	000829cd 	.word	0x000829cd
   81b80:	00082409 	.word	0x00082409
   81b84:	00082a05 	.word	0x00082a05
   81b88:	00082169 	.word	0x00082169
   81b8c:	000827ed 	.word	0x000827ed
   81b90:	0008208d 	.word	0x0008208d
   81b94:	00082425 	.word	0x00082425

00081b98 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   81b98:	b580      	push	{r7, lr}
   81b9a:	b088      	sub	sp, #32
   81b9c:	af00      	add	r7, sp, #0
   81b9e:	60f8      	str	r0, [r7, #12]
   81ba0:	60b9      	str	r1, [r7, #8]
   81ba2:	607a      	str	r2, [r7, #4]
   81ba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81ba6:	68fb      	ldr	r3, [r7, #12]
   81ba8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81baa:	69bb      	ldr	r3, [r7, #24]
   81bac:	2b00      	cmp	r3, #0
   81bae:	d102      	bne.n	81bb6 <xQueueGenericSendFromISR+0x1e>
   81bb0:	4b33      	ldr	r3, [pc, #204]	; (81c80 <xQueueGenericSendFromISR+0xe8>)
   81bb2:	4798      	blx	r3
   81bb4:	e7fe      	b.n	81bb4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81bb6:	68bb      	ldr	r3, [r7, #8]
   81bb8:	2b00      	cmp	r3, #0
   81bba:	d103      	bne.n	81bc4 <xQueueGenericSendFromISR+0x2c>
   81bbc:	69bb      	ldr	r3, [r7, #24]
   81bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81bc0:	2b00      	cmp	r3, #0
   81bc2:	d101      	bne.n	81bc8 <xQueueGenericSendFromISR+0x30>
   81bc4:	2301      	movs	r3, #1
   81bc6:	e000      	b.n	81bca <xQueueGenericSendFromISR+0x32>
   81bc8:	2300      	movs	r3, #0
   81bca:	2b00      	cmp	r3, #0
   81bcc:	d102      	bne.n	81bd4 <xQueueGenericSendFromISR+0x3c>
   81bce:	4b2c      	ldr	r3, [pc, #176]	; (81c80 <xQueueGenericSendFromISR+0xe8>)
   81bd0:	4798      	blx	r3
   81bd2:	e7fe      	b.n	81bd2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81bd4:	683b      	ldr	r3, [r7, #0]
   81bd6:	2b02      	cmp	r3, #2
   81bd8:	d103      	bne.n	81be2 <xQueueGenericSendFromISR+0x4a>
   81bda:	69bb      	ldr	r3, [r7, #24]
   81bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81bde:	2b01      	cmp	r3, #1
   81be0:	d101      	bne.n	81be6 <xQueueGenericSendFromISR+0x4e>
   81be2:	2301      	movs	r3, #1
   81be4:	e000      	b.n	81be8 <xQueueGenericSendFromISR+0x50>
   81be6:	2300      	movs	r3, #0
   81be8:	2b00      	cmp	r3, #0
   81bea:	d102      	bne.n	81bf2 <xQueueGenericSendFromISR+0x5a>
   81bec:	4b24      	ldr	r3, [pc, #144]	; (81c80 <xQueueGenericSendFromISR+0xe8>)
   81bee:	4798      	blx	r3
   81bf0:	e7fe      	b.n	81bf0 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81bf2:	4b24      	ldr	r3, [pc, #144]	; (81c84 <xQueueGenericSendFromISR+0xec>)
   81bf4:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81bf6:	4b22      	ldr	r3, [pc, #136]	; (81c80 <xQueueGenericSendFromISR+0xe8>)
   81bf8:	4798      	blx	r3
   81bfa:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81bfc:	69bb      	ldr	r3, [r7, #24]
   81bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81c00:	69bb      	ldr	r3, [r7, #24]
   81c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81c04:	429a      	cmp	r2, r3
   81c06:	d302      	bcc.n	81c0e <xQueueGenericSendFromISR+0x76>
   81c08:	683b      	ldr	r3, [r7, #0]
   81c0a:	2b02      	cmp	r3, #2
   81c0c:	d12d      	bne.n	81c6a <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   81c0e:	69b8      	ldr	r0, [r7, #24]
   81c10:	68b9      	ldr	r1, [r7, #8]
   81c12:	683a      	ldr	r2, [r7, #0]
   81c14:	4b1c      	ldr	r3, [pc, #112]	; (81c88 <xQueueGenericSendFromISR+0xf0>)
   81c16:	4798      	blx	r3
   81c18:	4603      	mov	r3, r0
   81c1a:	2b00      	cmp	r3, #0
   81c1c:	d005      	beq.n	81c2a <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   81c1e:	687b      	ldr	r3, [r7, #4]
   81c20:	2b00      	cmp	r3, #0
   81c22:	d002      	beq.n	81c2a <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   81c24:	687b      	ldr	r3, [r7, #4]
   81c26:	2201      	movs	r2, #1
   81c28:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81c2a:	69bb      	ldr	r3, [r7, #24]
   81c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81c32:	d112      	bne.n	81c5a <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c34:	69bb      	ldr	r3, [r7, #24]
   81c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81c38:	2b00      	cmp	r3, #0
   81c3a:	d013      	beq.n	81c64 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81c3c:	69bb      	ldr	r3, [r7, #24]
   81c3e:	3324      	adds	r3, #36	; 0x24
   81c40:	4618      	mov	r0, r3
   81c42:	4b12      	ldr	r3, [pc, #72]	; (81c8c <xQueueGenericSendFromISR+0xf4>)
   81c44:	4798      	blx	r3
   81c46:	4603      	mov	r3, r0
   81c48:	2b00      	cmp	r3, #0
   81c4a:	d00b      	beq.n	81c64 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   81c4c:	687b      	ldr	r3, [r7, #4]
   81c4e:	2b00      	cmp	r3, #0
   81c50:	d008      	beq.n	81c64 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   81c52:	687b      	ldr	r3, [r7, #4]
   81c54:	2201      	movs	r2, #1
   81c56:	601a      	str	r2, [r3, #0]
   81c58:	e004      	b.n	81c64 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81c5a:	69bb      	ldr	r3, [r7, #24]
   81c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81c5e:	1c5a      	adds	r2, r3, #1
   81c60:	69bb      	ldr	r3, [r7, #24]
   81c62:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   81c64:	2301      	movs	r3, #1
   81c66:	61fb      	str	r3, [r7, #28]
   81c68:	e001      	b.n	81c6e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81c6a:	2300      	movs	r3, #0
   81c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81c6e:	6978      	ldr	r0, [r7, #20]
   81c70:	4b07      	ldr	r3, [pc, #28]	; (81c90 <xQueueGenericSendFromISR+0xf8>)
   81c72:	4798      	blx	r3

	return xReturn;
   81c74:	69fb      	ldr	r3, [r7, #28]
}
   81c76:	4618      	mov	r0, r3
   81c78:	3720      	adds	r7, #32
   81c7a:	46bd      	mov	sp, r7
   81c7c:	bd80      	pop	{r7, pc}
   81c7e:	bf00      	nop
   81c80:	000813cd 	.word	0x000813cd
   81c84:	00081495 	.word	0x00081495
   81c88:	00081f59 	.word	0x00081f59
   81c8c:	0008290d 	.word	0x0008290d
   81c90:	000813e1 	.word	0x000813e1

00081c94 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   81c94:	b580      	push	{r7, lr}
   81c96:	b08a      	sub	sp, #40	; 0x28
   81c98:	af00      	add	r7, sp, #0
   81c9a:	60f8      	str	r0, [r7, #12]
   81c9c:	60b9      	str	r1, [r7, #8]
   81c9e:	607a      	str	r2, [r7, #4]
   81ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   81ca2:	2300      	movs	r3, #0
   81ca4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81ca6:	68fb      	ldr	r3, [r7, #12]
   81ca8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   81caa:	6a3b      	ldr	r3, [r7, #32]
   81cac:	2b00      	cmp	r3, #0
   81cae:	d102      	bne.n	81cb6 <xQueueGenericReceive+0x22>
   81cb0:	4b67      	ldr	r3, [pc, #412]	; (81e50 <xQueueGenericReceive+0x1bc>)
   81cb2:	4798      	blx	r3
   81cb4:	e7fe      	b.n	81cb4 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81cb6:	68bb      	ldr	r3, [r7, #8]
   81cb8:	2b00      	cmp	r3, #0
   81cba:	d103      	bne.n	81cc4 <xQueueGenericReceive+0x30>
   81cbc:	6a3b      	ldr	r3, [r7, #32]
   81cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81cc0:	2b00      	cmp	r3, #0
   81cc2:	d101      	bne.n	81cc8 <xQueueGenericReceive+0x34>
   81cc4:	2301      	movs	r3, #1
   81cc6:	e000      	b.n	81cca <xQueueGenericReceive+0x36>
   81cc8:	2300      	movs	r3, #0
   81cca:	2b00      	cmp	r3, #0
   81ccc:	d102      	bne.n	81cd4 <xQueueGenericReceive+0x40>
   81cce:	4b60      	ldr	r3, [pc, #384]	; (81e50 <xQueueGenericReceive+0x1bc>)
   81cd0:	4798      	blx	r3
   81cd2:	e7fe      	b.n	81cd2 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81cd4:	4b5f      	ldr	r3, [pc, #380]	; (81e54 <xQueueGenericReceive+0x1c0>)
   81cd6:	4798      	blx	r3
   81cd8:	4603      	mov	r3, r0
   81cda:	2b00      	cmp	r3, #0
   81cdc:	d102      	bne.n	81ce4 <xQueueGenericReceive+0x50>
   81cde:	687b      	ldr	r3, [r7, #4]
   81ce0:	2b00      	cmp	r3, #0
   81ce2:	d101      	bne.n	81ce8 <xQueueGenericReceive+0x54>
   81ce4:	2301      	movs	r3, #1
   81ce6:	e000      	b.n	81cea <xQueueGenericReceive+0x56>
   81ce8:	2300      	movs	r3, #0
   81cea:	2b00      	cmp	r3, #0
   81cec:	d102      	bne.n	81cf4 <xQueueGenericReceive+0x60>
   81cee:	4b58      	ldr	r3, [pc, #352]	; (81e50 <xQueueGenericReceive+0x1bc>)
   81cf0:	4798      	blx	r3
   81cf2:	e7fe      	b.n	81cf2 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81cf4:	4b58      	ldr	r3, [pc, #352]	; (81e58 <xQueueGenericReceive+0x1c4>)
   81cf6:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81cf8:	6a3b      	ldr	r3, [r7, #32]
   81cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81cfc:	2b00      	cmp	r3, #0
   81cfe:	d03b      	beq.n	81d78 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   81d00:	6a3b      	ldr	r3, [r7, #32]
   81d02:	68db      	ldr	r3, [r3, #12]
   81d04:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81d06:	6a38      	ldr	r0, [r7, #32]
   81d08:	68b9      	ldr	r1, [r7, #8]
   81d0a:	4b54      	ldr	r3, [pc, #336]	; (81e5c <xQueueGenericReceive+0x1c8>)
   81d0c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81d0e:	683b      	ldr	r3, [r7, #0]
   81d10:	2b00      	cmp	r3, #0
   81d12:	d11c      	bne.n	81d4e <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   81d14:	6a3b      	ldr	r3, [r7, #32]
   81d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81d18:	1e5a      	subs	r2, r3, #1
   81d1a:	6a3b      	ldr	r3, [r7, #32]
   81d1c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81d1e:	6a3b      	ldr	r3, [r7, #32]
   81d20:	681b      	ldr	r3, [r3, #0]
   81d22:	2b00      	cmp	r3, #0
   81d24:	d104      	bne.n	81d30 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   81d26:	4b4e      	ldr	r3, [pc, #312]	; (81e60 <xQueueGenericReceive+0x1cc>)
   81d28:	4798      	blx	r3
   81d2a:	4602      	mov	r2, r0
   81d2c:	6a3b      	ldr	r3, [r7, #32]
   81d2e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81d30:	6a3b      	ldr	r3, [r7, #32]
   81d32:	691b      	ldr	r3, [r3, #16]
   81d34:	2b00      	cmp	r3, #0
   81d36:	d01b      	beq.n	81d70 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81d38:	6a3b      	ldr	r3, [r7, #32]
   81d3a:	3310      	adds	r3, #16
   81d3c:	4618      	mov	r0, r3
   81d3e:	4b49      	ldr	r3, [pc, #292]	; (81e64 <xQueueGenericReceive+0x1d0>)
   81d40:	4798      	blx	r3
   81d42:	4603      	mov	r3, r0
   81d44:	2b01      	cmp	r3, #1
   81d46:	d113      	bne.n	81d70 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   81d48:	4b47      	ldr	r3, [pc, #284]	; (81e68 <xQueueGenericReceive+0x1d4>)
   81d4a:	4798      	blx	r3
   81d4c:	e010      	b.n	81d70 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   81d4e:	6a3b      	ldr	r3, [r7, #32]
   81d50:	69fa      	ldr	r2, [r7, #28]
   81d52:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81d54:	6a3b      	ldr	r3, [r7, #32]
   81d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81d58:	2b00      	cmp	r3, #0
   81d5a:	d009      	beq.n	81d70 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81d5c:	6a3b      	ldr	r3, [r7, #32]
   81d5e:	3324      	adds	r3, #36	; 0x24
   81d60:	4618      	mov	r0, r3
   81d62:	4b40      	ldr	r3, [pc, #256]	; (81e64 <xQueueGenericReceive+0x1d0>)
   81d64:	4798      	blx	r3
   81d66:	4603      	mov	r3, r0
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d001      	beq.n	81d70 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   81d6c:	4b3e      	ldr	r3, [pc, #248]	; (81e68 <xQueueGenericReceive+0x1d4>)
   81d6e:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   81d70:	4b3e      	ldr	r3, [pc, #248]	; (81e6c <xQueueGenericReceive+0x1d8>)
   81d72:	4798      	blx	r3
				return pdPASS;
   81d74:	2301      	movs	r3, #1
   81d76:	e066      	b.n	81e46 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	2b00      	cmp	r3, #0
   81d7c:	d103      	bne.n	81d86 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81d7e:	4b3b      	ldr	r3, [pc, #236]	; (81e6c <xQueueGenericReceive+0x1d8>)
   81d80:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81d82:	2300      	movs	r3, #0
   81d84:	e05f      	b.n	81e46 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   81d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81d88:	2b00      	cmp	r3, #0
   81d8a:	d106      	bne.n	81d9a <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81d8c:	f107 0314 	add.w	r3, r7, #20
   81d90:	4618      	mov	r0, r3
   81d92:	4b37      	ldr	r3, [pc, #220]	; (81e70 <xQueueGenericReceive+0x1dc>)
   81d94:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81d96:	2301      	movs	r3, #1
   81d98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   81d9a:	4b34      	ldr	r3, [pc, #208]	; (81e6c <xQueueGenericReceive+0x1d8>)
   81d9c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81d9e:	4b35      	ldr	r3, [pc, #212]	; (81e74 <xQueueGenericReceive+0x1e0>)
   81da0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81da2:	4b2d      	ldr	r3, [pc, #180]	; (81e58 <xQueueGenericReceive+0x1c4>)
   81da4:	4798      	blx	r3
   81da6:	6a3b      	ldr	r3, [r7, #32]
   81da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81daa:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dae:	d102      	bne.n	81db6 <xQueueGenericReceive+0x122>
   81db0:	6a3b      	ldr	r3, [r7, #32]
   81db2:	2200      	movs	r2, #0
   81db4:	645a      	str	r2, [r3, #68]	; 0x44
   81db6:	6a3b      	ldr	r3, [r7, #32]
   81db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81dba:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dbe:	d102      	bne.n	81dc6 <xQueueGenericReceive+0x132>
   81dc0:	6a3b      	ldr	r3, [r7, #32]
   81dc2:	2200      	movs	r2, #0
   81dc4:	649a      	str	r2, [r3, #72]	; 0x48
   81dc6:	4b29      	ldr	r3, [pc, #164]	; (81e6c <xQueueGenericReceive+0x1d8>)
   81dc8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81dca:	f107 0214 	add.w	r2, r7, #20
   81dce:	1d3b      	adds	r3, r7, #4
   81dd0:	4610      	mov	r0, r2
   81dd2:	4619      	mov	r1, r3
   81dd4:	4b28      	ldr	r3, [pc, #160]	; (81e78 <xQueueGenericReceive+0x1e4>)
   81dd6:	4798      	blx	r3
   81dd8:	4603      	mov	r3, r0
   81dda:	2b00      	cmp	r3, #0
   81ddc:	d12b      	bne.n	81e36 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81dde:	6a38      	ldr	r0, [r7, #32]
   81de0:	4b26      	ldr	r3, [pc, #152]	; (81e7c <xQueueGenericReceive+0x1e8>)
   81de2:	4798      	blx	r3
   81de4:	4603      	mov	r3, r0
   81de6:	2b00      	cmp	r3, #0
   81de8:	d01f      	beq.n	81e2a <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81dea:	6a3b      	ldr	r3, [r7, #32]
   81dec:	681b      	ldr	r3, [r3, #0]
   81dee:	2b00      	cmp	r3, #0
   81df0:	d108      	bne.n	81e04 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   81df2:	4b19      	ldr	r3, [pc, #100]	; (81e58 <xQueueGenericReceive+0x1c4>)
   81df4:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81df6:	6a3b      	ldr	r3, [r7, #32]
   81df8:	685b      	ldr	r3, [r3, #4]
   81dfa:	4618      	mov	r0, r3
   81dfc:	4b20      	ldr	r3, [pc, #128]	; (81e80 <xQueueGenericReceive+0x1ec>)
   81dfe:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   81e00:	4b1a      	ldr	r3, [pc, #104]	; (81e6c <xQueueGenericReceive+0x1d8>)
   81e02:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81e04:	6a3b      	ldr	r3, [r7, #32]
   81e06:	f103 0224 	add.w	r2, r3, #36	; 0x24
   81e0a:	687b      	ldr	r3, [r7, #4]
   81e0c:	4610      	mov	r0, r2
   81e0e:	4619      	mov	r1, r3
   81e10:	4b1c      	ldr	r3, [pc, #112]	; (81e84 <xQueueGenericReceive+0x1f0>)
   81e12:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81e14:	6a38      	ldr	r0, [r7, #32]
   81e16:	4b1c      	ldr	r3, [pc, #112]	; (81e88 <xQueueGenericReceive+0x1f4>)
   81e18:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81e1a:	4b1c      	ldr	r3, [pc, #112]	; (81e8c <xQueueGenericReceive+0x1f8>)
   81e1c:	4798      	blx	r3
   81e1e:	4603      	mov	r3, r0
   81e20:	2b00      	cmp	r3, #0
   81e22:	d10f      	bne.n	81e44 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   81e24:	4b10      	ldr	r3, [pc, #64]	; (81e68 <xQueueGenericReceive+0x1d4>)
   81e26:	4798      	blx	r3
   81e28:	e00c      	b.n	81e44 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81e2a:	6a38      	ldr	r0, [r7, #32]
   81e2c:	4b16      	ldr	r3, [pc, #88]	; (81e88 <xQueueGenericReceive+0x1f4>)
   81e2e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81e30:	4b16      	ldr	r3, [pc, #88]	; (81e8c <xQueueGenericReceive+0x1f8>)
   81e32:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   81e34:	e75e      	b.n	81cf4 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81e36:	6a38      	ldr	r0, [r7, #32]
   81e38:	4b13      	ldr	r3, [pc, #76]	; (81e88 <xQueueGenericReceive+0x1f4>)
   81e3a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81e3c:	4b13      	ldr	r3, [pc, #76]	; (81e8c <xQueueGenericReceive+0x1f8>)
   81e3e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81e40:	2300      	movs	r3, #0
   81e42:	e000      	b.n	81e46 <xQueueGenericReceive+0x1b2>
		}
	}
   81e44:	e756      	b.n	81cf4 <xQueueGenericReceive+0x60>
}
   81e46:	4618      	mov	r0, r3
   81e48:	3728      	adds	r7, #40	; 0x28
   81e4a:	46bd      	mov	sp, r7
   81e4c:	bd80      	pop	{r7, pc}
   81e4e:	bf00      	nop
   81e50:	000813cd 	.word	0x000813cd
   81e54:	00082de5 	.word	0x00082de5
   81e58:	00081351 	.word	0x00081351
   81e5c:	0008203d 	.word	0x0008203d
   81e60:	00082ff9 	.word	0x00082ff9
   81e64:	0008290d 	.word	0x0008290d
   81e68:	00081331 	.word	0x00081331
   81e6c:	00081395 	.word	0x00081395
   81e70:	000829cd 	.word	0x000829cd
   81e74:	00082409 	.word	0x00082409
   81e78:	00082a05 	.word	0x00082a05
   81e7c:	00082135 	.word	0x00082135
   81e80:	00082e21 	.word	0x00082e21
   81e84:	000827ed 	.word	0x000827ed
   81e88:	0008208d 	.word	0x0008208d
   81e8c:	00082425 	.word	0x00082425

00081e90 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   81e90:	b580      	push	{r7, lr}
   81e92:	b088      	sub	sp, #32
   81e94:	af00      	add	r7, sp, #0
   81e96:	60f8      	str	r0, [r7, #12]
   81e98:	60b9      	str	r1, [r7, #8]
   81e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81e9c:	68fb      	ldr	r3, [r7, #12]
   81e9e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81ea0:	69bb      	ldr	r3, [r7, #24]
   81ea2:	2b00      	cmp	r3, #0
   81ea4:	d102      	bne.n	81eac <xQueueReceiveFromISR+0x1c>
   81ea6:	4b27      	ldr	r3, [pc, #156]	; (81f44 <xQueueReceiveFromISR+0xb4>)
   81ea8:	4798      	blx	r3
   81eaa:	e7fe      	b.n	81eaa <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81eac:	68bb      	ldr	r3, [r7, #8]
   81eae:	2b00      	cmp	r3, #0
   81eb0:	d103      	bne.n	81eba <xQueueReceiveFromISR+0x2a>
   81eb2:	69bb      	ldr	r3, [r7, #24]
   81eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81eb6:	2b00      	cmp	r3, #0
   81eb8:	d101      	bne.n	81ebe <xQueueReceiveFromISR+0x2e>
   81eba:	2301      	movs	r3, #1
   81ebc:	e000      	b.n	81ec0 <xQueueReceiveFromISR+0x30>
   81ebe:	2300      	movs	r3, #0
   81ec0:	2b00      	cmp	r3, #0
   81ec2:	d102      	bne.n	81eca <xQueueReceiveFromISR+0x3a>
   81ec4:	4b1f      	ldr	r3, [pc, #124]	; (81f44 <xQueueReceiveFromISR+0xb4>)
   81ec6:	4798      	blx	r3
   81ec8:	e7fe      	b.n	81ec8 <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81eca:	4b1f      	ldr	r3, [pc, #124]	; (81f48 <xQueueReceiveFromISR+0xb8>)
   81ecc:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81ece:	4b1d      	ldr	r3, [pc, #116]	; (81f44 <xQueueReceiveFromISR+0xb4>)
   81ed0:	4798      	blx	r3
   81ed2:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81ed4:	69bb      	ldr	r3, [r7, #24]
   81ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81ed8:	2b00      	cmp	r3, #0
   81eda:	d028      	beq.n	81f2e <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   81edc:	69b8      	ldr	r0, [r7, #24]
   81ede:	68b9      	ldr	r1, [r7, #8]
   81ee0:	4b1a      	ldr	r3, [pc, #104]	; (81f4c <xQueueReceiveFromISR+0xbc>)
   81ee2:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   81ee4:	69bb      	ldr	r3, [r7, #24]
   81ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81ee8:	1e5a      	subs	r2, r3, #1
   81eea:	69bb      	ldr	r3, [r7, #24]
   81eec:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   81eee:	69bb      	ldr	r3, [r7, #24]
   81ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ef6:	d112      	bne.n	81f1e <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81ef8:	69bb      	ldr	r3, [r7, #24]
   81efa:	691b      	ldr	r3, [r3, #16]
   81efc:	2b00      	cmp	r3, #0
   81efe:	d013      	beq.n	81f28 <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81f00:	69bb      	ldr	r3, [r7, #24]
   81f02:	3310      	adds	r3, #16
   81f04:	4618      	mov	r0, r3
   81f06:	4b12      	ldr	r3, [pc, #72]	; (81f50 <xQueueReceiveFromISR+0xc0>)
   81f08:	4798      	blx	r3
   81f0a:	4603      	mov	r3, r0
   81f0c:	2b00      	cmp	r3, #0
   81f0e:	d00b      	beq.n	81f28 <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   81f10:	687b      	ldr	r3, [r7, #4]
   81f12:	2b00      	cmp	r3, #0
   81f14:	d008      	beq.n	81f28 <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81f16:	687b      	ldr	r3, [r7, #4]
   81f18:	2201      	movs	r2, #1
   81f1a:	601a      	str	r2, [r3, #0]
   81f1c:	e004      	b.n	81f28 <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   81f1e:	69bb      	ldr	r3, [r7, #24]
   81f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81f22:	1c5a      	adds	r2, r3, #1
   81f24:	69bb      	ldr	r3, [r7, #24]
   81f26:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   81f28:	2301      	movs	r3, #1
   81f2a:	61fb      	str	r3, [r7, #28]
   81f2c:	e001      	b.n	81f32 <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   81f2e:	2300      	movs	r3, #0
   81f30:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81f32:	6978      	ldr	r0, [r7, #20]
   81f34:	4b07      	ldr	r3, [pc, #28]	; (81f54 <xQueueReceiveFromISR+0xc4>)
   81f36:	4798      	blx	r3

	return xReturn;
   81f38:	69fb      	ldr	r3, [r7, #28]
}
   81f3a:	4618      	mov	r0, r3
   81f3c:	3720      	adds	r7, #32
   81f3e:	46bd      	mov	sp, r7
   81f40:	bd80      	pop	{r7, pc}
   81f42:	bf00      	nop
   81f44:	000813cd 	.word	0x000813cd
   81f48:	00081495 	.word	0x00081495
   81f4c:	0008203d 	.word	0x0008203d
   81f50:	0008290d 	.word	0x0008290d
   81f54:	000813e1 	.word	0x000813e1

00081f58 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   81f58:	b580      	push	{r7, lr}
   81f5a:	b086      	sub	sp, #24
   81f5c:	af00      	add	r7, sp, #0
   81f5e:	60f8      	str	r0, [r7, #12]
   81f60:	60b9      	str	r1, [r7, #8]
   81f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   81f64:	2300      	movs	r3, #0
   81f66:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   81f68:	68fb      	ldr	r3, [r7, #12]
   81f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	d10d      	bne.n	81f8c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81f70:	68fb      	ldr	r3, [r7, #12]
   81f72:	681b      	ldr	r3, [r3, #0]
   81f74:	2b00      	cmp	r3, #0
   81f76:	d152      	bne.n	8201e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81f78:	68fb      	ldr	r3, [r7, #12]
   81f7a:	685b      	ldr	r3, [r3, #4]
   81f7c:	4618      	mov	r0, r3
   81f7e:	4b2d      	ldr	r3, [pc, #180]	; (82034 <prvCopyDataToQueue+0xdc>)
   81f80:	4798      	blx	r3
   81f82:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   81f84:	68fb      	ldr	r3, [r7, #12]
   81f86:	2200      	movs	r2, #0
   81f88:	605a      	str	r2, [r3, #4]
   81f8a:	e048      	b.n	8201e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   81f8c:	687b      	ldr	r3, [r7, #4]
   81f8e:	2b00      	cmp	r3, #0
   81f90:	d11a      	bne.n	81fc8 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   81f92:	68fb      	ldr	r3, [r7, #12]
   81f94:	689a      	ldr	r2, [r3, #8]
   81f96:	68fb      	ldr	r3, [r7, #12]
   81f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81f9a:	4610      	mov	r0, r2
   81f9c:	68b9      	ldr	r1, [r7, #8]
   81f9e:	461a      	mov	r2, r3
   81fa0:	4b25      	ldr	r3, [pc, #148]	; (82038 <prvCopyDataToQueue+0xe0>)
   81fa2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81fa4:	68fb      	ldr	r3, [r7, #12]
   81fa6:	689a      	ldr	r2, [r3, #8]
   81fa8:	68fb      	ldr	r3, [r7, #12]
   81faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81fac:	441a      	add	r2, r3
   81fae:	68fb      	ldr	r3, [r7, #12]
   81fb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81fb2:	68fb      	ldr	r3, [r7, #12]
   81fb4:	689a      	ldr	r2, [r3, #8]
   81fb6:	68fb      	ldr	r3, [r7, #12]
   81fb8:	685b      	ldr	r3, [r3, #4]
   81fba:	429a      	cmp	r2, r3
   81fbc:	d32f      	bcc.n	8201e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81fbe:	68fb      	ldr	r3, [r7, #12]
   81fc0:	681a      	ldr	r2, [r3, #0]
   81fc2:	68fb      	ldr	r3, [r7, #12]
   81fc4:	609a      	str	r2, [r3, #8]
   81fc6:	e02a      	b.n	8201e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81fc8:	68fb      	ldr	r3, [r7, #12]
   81fca:	68da      	ldr	r2, [r3, #12]
   81fcc:	68fb      	ldr	r3, [r7, #12]
   81fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81fd0:	4610      	mov	r0, r2
   81fd2:	68b9      	ldr	r1, [r7, #8]
   81fd4:	461a      	mov	r2, r3
   81fd6:	4b18      	ldr	r3, [pc, #96]	; (82038 <prvCopyDataToQueue+0xe0>)
   81fd8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   81fda:	68fb      	ldr	r3, [r7, #12]
   81fdc:	68da      	ldr	r2, [r3, #12]
   81fde:	68fb      	ldr	r3, [r7, #12]
   81fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81fe2:	425b      	negs	r3, r3
   81fe4:	441a      	add	r2, r3
   81fe6:	68fb      	ldr	r3, [r7, #12]
   81fe8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81fea:	68fb      	ldr	r3, [r7, #12]
   81fec:	68da      	ldr	r2, [r3, #12]
   81fee:	68fb      	ldr	r3, [r7, #12]
   81ff0:	681b      	ldr	r3, [r3, #0]
   81ff2:	429a      	cmp	r2, r3
   81ff4:	d207      	bcs.n	82006 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81ff6:	68fb      	ldr	r3, [r7, #12]
   81ff8:	685a      	ldr	r2, [r3, #4]
   81ffa:	68fb      	ldr	r3, [r7, #12]
   81ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81ffe:	425b      	negs	r3, r3
   82000:	441a      	add	r2, r3
   82002:	68fb      	ldr	r3, [r7, #12]
   82004:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   82006:	687b      	ldr	r3, [r7, #4]
   82008:	2b02      	cmp	r3, #2
   8200a:	d108      	bne.n	8201e <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   8200c:	68fb      	ldr	r3, [r7, #12]
   8200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82010:	2b00      	cmp	r3, #0
   82012:	d004      	beq.n	8201e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   82014:	68fb      	ldr	r3, [r7, #12]
   82016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82018:	1e5a      	subs	r2, r3, #1
   8201a:	68fb      	ldr	r3, [r7, #12]
   8201c:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8201e:	68fb      	ldr	r3, [r7, #12]
   82020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82022:	1c5a      	adds	r2, r3, #1
   82024:	68fb      	ldr	r3, [r7, #12]
   82026:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   82028:	697b      	ldr	r3, [r7, #20]
}
   8202a:	4618      	mov	r0, r3
   8202c:	3718      	adds	r7, #24
   8202e:	46bd      	mov	sp, r7
   82030:	bd80      	pop	{r7, pc}
   82032:	bf00      	nop
   82034:	00082f15 	.word	0x00082f15
   82038:	000839bd 	.word	0x000839bd

0008203c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   8203c:	b580      	push	{r7, lr}
   8203e:	b082      	sub	sp, #8
   82040:	af00      	add	r7, sp, #0
   82042:	6078      	str	r0, [r7, #4]
   82044:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   82046:	687b      	ldr	r3, [r7, #4]
   82048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8204a:	2b00      	cmp	r3, #0
   8204c:	d019      	beq.n	82082 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   8204e:	687b      	ldr	r3, [r7, #4]
   82050:	68da      	ldr	r2, [r3, #12]
   82052:	687b      	ldr	r3, [r7, #4]
   82054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82056:	441a      	add	r2, r3
   82058:	687b      	ldr	r3, [r7, #4]
   8205a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   8205c:	687b      	ldr	r3, [r7, #4]
   8205e:	68da      	ldr	r2, [r3, #12]
   82060:	687b      	ldr	r3, [r7, #4]
   82062:	685b      	ldr	r3, [r3, #4]
   82064:	429a      	cmp	r2, r3
   82066:	d303      	bcc.n	82070 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   82068:	687b      	ldr	r3, [r7, #4]
   8206a:	681a      	ldr	r2, [r3, #0]
   8206c:	687b      	ldr	r3, [r7, #4]
   8206e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   82070:	687b      	ldr	r3, [r7, #4]
   82072:	68da      	ldr	r2, [r3, #12]
   82074:	687b      	ldr	r3, [r7, #4]
   82076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82078:	6838      	ldr	r0, [r7, #0]
   8207a:	4611      	mov	r1, r2
   8207c:	461a      	mov	r2, r3
   8207e:	4b02      	ldr	r3, [pc, #8]	; (82088 <prvCopyDataFromQueue+0x4c>)
   82080:	4798      	blx	r3
	}
}
   82082:	3708      	adds	r7, #8
   82084:	46bd      	mov	sp, r7
   82086:	bd80      	pop	{r7, pc}
   82088:	000839bd 	.word	0x000839bd

0008208c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   8208c:	b580      	push	{r7, lr}
   8208e:	b082      	sub	sp, #8
   82090:	af00      	add	r7, sp, #0
   82092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   82094:	4b23      	ldr	r3, [pc, #140]	; (82124 <prvUnlockQueue+0x98>)
   82096:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82098:	e014      	b.n	820c4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8209a:	687b      	ldr	r3, [r7, #4]
   8209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8209e:	2b00      	cmp	r3, #0
   820a0:	d00a      	beq.n	820b8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   820a2:	687b      	ldr	r3, [r7, #4]
   820a4:	3324      	adds	r3, #36	; 0x24
   820a6:	4618      	mov	r0, r3
   820a8:	4b1f      	ldr	r3, [pc, #124]	; (82128 <prvUnlockQueue+0x9c>)
   820aa:	4798      	blx	r3
   820ac:	4603      	mov	r3, r0
   820ae:	2b00      	cmp	r3, #0
   820b0:	d003      	beq.n	820ba <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   820b2:	4b1e      	ldr	r3, [pc, #120]	; (8212c <prvUnlockQueue+0xa0>)
   820b4:	4798      	blx	r3
   820b6:	e000      	b.n	820ba <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   820b8:	e008      	b.n	820cc <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   820ba:	687b      	ldr	r3, [r7, #4]
   820bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   820be:	1e5a      	subs	r2, r3, #1
   820c0:	687b      	ldr	r3, [r7, #4]
   820c2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   820c4:	687b      	ldr	r3, [r7, #4]
   820c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   820c8:	2b00      	cmp	r3, #0
   820ca:	dce6      	bgt.n	8209a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   820cc:	687b      	ldr	r3, [r7, #4]
   820ce:	f04f 32ff 	mov.w	r2, #4294967295
   820d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   820d4:	4b16      	ldr	r3, [pc, #88]	; (82130 <prvUnlockQueue+0xa4>)
   820d6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   820d8:	4b12      	ldr	r3, [pc, #72]	; (82124 <prvUnlockQueue+0x98>)
   820da:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   820dc:	e014      	b.n	82108 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   820de:	687b      	ldr	r3, [r7, #4]
   820e0:	691b      	ldr	r3, [r3, #16]
   820e2:	2b00      	cmp	r3, #0
   820e4:	d00f      	beq.n	82106 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   820e6:	687b      	ldr	r3, [r7, #4]
   820e8:	3310      	adds	r3, #16
   820ea:	4618      	mov	r0, r3
   820ec:	4b0e      	ldr	r3, [pc, #56]	; (82128 <prvUnlockQueue+0x9c>)
   820ee:	4798      	blx	r3
   820f0:	4603      	mov	r3, r0
   820f2:	2b00      	cmp	r3, #0
   820f4:	d001      	beq.n	820fa <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   820f6:	4b0d      	ldr	r3, [pc, #52]	; (8212c <prvUnlockQueue+0xa0>)
   820f8:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   820fa:	687b      	ldr	r3, [r7, #4]
   820fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   820fe:	1e5a      	subs	r2, r3, #1
   82100:	687b      	ldr	r3, [r7, #4]
   82102:	645a      	str	r2, [r3, #68]	; 0x44
   82104:	e000      	b.n	82108 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   82106:	e003      	b.n	82110 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82108:	687b      	ldr	r3, [r7, #4]
   8210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8210c:	2b00      	cmp	r3, #0
   8210e:	dce6      	bgt.n	820de <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   82110:	687b      	ldr	r3, [r7, #4]
   82112:	f04f 32ff 	mov.w	r2, #4294967295
   82116:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   82118:	4b05      	ldr	r3, [pc, #20]	; (82130 <prvUnlockQueue+0xa4>)
   8211a:	4798      	blx	r3
}
   8211c:	3708      	adds	r7, #8
   8211e:	46bd      	mov	sp, r7
   82120:	bd80      	pop	{r7, pc}
   82122:	bf00      	nop
   82124:	00081351 	.word	0x00081351
   82128:	0008290d 	.word	0x0008290d
   8212c:	00082ab5 	.word	0x00082ab5
   82130:	00081395 	.word	0x00081395

00082134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   82134:	b580      	push	{r7, lr}
   82136:	b084      	sub	sp, #16
   82138:	af00      	add	r7, sp, #0
   8213a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   8213c:	4b08      	ldr	r3, [pc, #32]	; (82160 <prvIsQueueEmpty+0x2c>)
   8213e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   82140:	687b      	ldr	r3, [r7, #4]
   82142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82144:	2b00      	cmp	r3, #0
   82146:	d102      	bne.n	8214e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   82148:	2301      	movs	r3, #1
   8214a:	60fb      	str	r3, [r7, #12]
   8214c:	e001      	b.n	82152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   8214e:	2300      	movs	r3, #0
   82150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82152:	4b04      	ldr	r3, [pc, #16]	; (82164 <prvIsQueueEmpty+0x30>)
   82154:	4798      	blx	r3

	return xReturn;
   82156:	68fb      	ldr	r3, [r7, #12]
}
   82158:	4618      	mov	r0, r3
   8215a:	3710      	adds	r7, #16
   8215c:	46bd      	mov	sp, r7
   8215e:	bd80      	pop	{r7, pc}
   82160:	00081351 	.word	0x00081351
   82164:	00081395 	.word	0x00081395

00082168 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   82168:	b580      	push	{r7, lr}
   8216a:	b084      	sub	sp, #16
   8216c:	af00      	add	r7, sp, #0
   8216e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   82170:	4b09      	ldr	r3, [pc, #36]	; (82198 <prvIsQueueFull+0x30>)
   82172:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   82174:	687b      	ldr	r3, [r7, #4]
   82176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82178:	687b      	ldr	r3, [r7, #4]
   8217a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8217c:	429a      	cmp	r2, r3
   8217e:	d102      	bne.n	82186 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   82180:	2301      	movs	r3, #1
   82182:	60fb      	str	r3, [r7, #12]
   82184:	e001      	b.n	8218a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   82186:	2300      	movs	r3, #0
   82188:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8218a:	4b04      	ldr	r3, [pc, #16]	; (8219c <prvIsQueueFull+0x34>)
   8218c:	4798      	blx	r3

	return xReturn;
   8218e:	68fb      	ldr	r3, [r7, #12]
}
   82190:	4618      	mov	r0, r3
   82192:	3710      	adds	r7, #16
   82194:	46bd      	mov	sp, r7
   82196:	bd80      	pop	{r7, pc}
   82198:	00081351 	.word	0x00081351
   8219c:	00081395 	.word	0x00081395

000821a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   821a0:	b580      	push	{r7, lr}
   821a2:	b084      	sub	sp, #16
   821a4:	af00      	add	r7, sp, #0
   821a6:	6078      	str	r0, [r7, #4]
   821a8:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   821aa:	687b      	ldr	r3, [r7, #4]
   821ac:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   821ae:	4b12      	ldr	r3, [pc, #72]	; (821f8 <vQueueWaitForMessageRestricted+0x58>)
   821b0:	4798      	blx	r3
   821b2:	68fb      	ldr	r3, [r7, #12]
   821b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   821b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   821ba:	d102      	bne.n	821c2 <vQueueWaitForMessageRestricted+0x22>
   821bc:	68fb      	ldr	r3, [r7, #12]
   821be:	2200      	movs	r2, #0
   821c0:	645a      	str	r2, [r3, #68]	; 0x44
   821c2:	68fb      	ldr	r3, [r7, #12]
   821c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   821c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   821ca:	d102      	bne.n	821d2 <vQueueWaitForMessageRestricted+0x32>
   821cc:	68fb      	ldr	r3, [r7, #12]
   821ce:	2200      	movs	r2, #0
   821d0:	649a      	str	r2, [r3, #72]	; 0x48
   821d2:	4b0a      	ldr	r3, [pc, #40]	; (821fc <vQueueWaitForMessageRestricted+0x5c>)
   821d4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   821d6:	68fb      	ldr	r3, [r7, #12]
   821d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   821da:	2b00      	cmp	r3, #0
   821dc:	d105      	bne.n	821ea <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   821de:	68fb      	ldr	r3, [r7, #12]
   821e0:	3324      	adds	r3, #36	; 0x24
   821e2:	4618      	mov	r0, r3
   821e4:	6839      	ldr	r1, [r7, #0]
   821e6:	4b06      	ldr	r3, [pc, #24]	; (82200 <vQueueWaitForMessageRestricted+0x60>)
   821e8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   821ea:	68f8      	ldr	r0, [r7, #12]
   821ec:	4b05      	ldr	r3, [pc, #20]	; (82204 <vQueueWaitForMessageRestricted+0x64>)
   821ee:	4798      	blx	r3
	}
   821f0:	3710      	adds	r7, #16
   821f2:	46bd      	mov	sp, r7
   821f4:	bd80      	pop	{r7, pc}
   821f6:	bf00      	nop
   821f8:	00081351 	.word	0x00081351
   821fc:	00081395 	.word	0x00081395
   82200:	0008288d 	.word	0x0008288d
   82204:	0008208d 	.word	0x0008208d

00082208 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   82208:	b590      	push	{r4, r7, lr}
   8220a:	b08b      	sub	sp, #44	; 0x2c
   8220c:	af02      	add	r7, sp, #8
   8220e:	60f8      	str	r0, [r7, #12]
   82210:	60b9      	str	r1, [r7, #8]
   82212:	603b      	str	r3, [r7, #0]
   82214:	4613      	mov	r3, r2
   82216:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   82218:	68fb      	ldr	r3, [r7, #12]
   8221a:	2b00      	cmp	r3, #0
   8221c:	d102      	bne.n	82224 <xTaskGenericCreate+0x1c>
   8221e:	4b4b      	ldr	r3, [pc, #300]	; (8234c <xTaskGenericCreate+0x144>)
   82220:	4798      	blx	r3
   82222:	e7fe      	b.n	82222 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82226:	2b04      	cmp	r3, #4
   82228:	d902      	bls.n	82230 <xTaskGenericCreate+0x28>
   8222a:	4b48      	ldr	r3, [pc, #288]	; (8234c <xTaskGenericCreate+0x144>)
   8222c:	4798      	blx	r3
   8222e:	e7fe      	b.n	8222e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   82230:	88fb      	ldrh	r3, [r7, #6]
   82232:	4618      	mov	r0, r3
   82234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   82236:	4b46      	ldr	r3, [pc, #280]	; (82350 <xTaskGenericCreate+0x148>)
   82238:	4798      	blx	r3
   8223a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   8223c:	69bb      	ldr	r3, [r7, #24]
   8223e:	2b00      	cmp	r3, #0
   82240:	d06d      	beq.n	8231e <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   82242:	69bb      	ldr	r3, [r7, #24]
   82244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82246:	88fb      	ldrh	r3, [r7, #6]
   82248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   8224c:	3b01      	subs	r3, #1
   8224e:	009b      	lsls	r3, r3, #2
   82250:	4413      	add	r3, r2
   82252:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   82254:	697b      	ldr	r3, [r7, #20]
   82256:	f023 0307 	bic.w	r3, r3, #7
   8225a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8225c:	697b      	ldr	r3, [r7, #20]
   8225e:	f003 0307 	and.w	r3, r3, #7
   82262:	2b00      	cmp	r3, #0
   82264:	d002      	beq.n	8226c <xTaskGenericCreate+0x64>
   82266:	4b39      	ldr	r3, [pc, #228]	; (8234c <xTaskGenericCreate+0x144>)
   82268:	4798      	blx	r3
   8226a:	e7fe      	b.n	8226a <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   8226c:	88fb      	ldrh	r3, [r7, #6]
   8226e:	9300      	str	r3, [sp, #0]
   82270:	69b8      	ldr	r0, [r7, #24]
   82272:	68b9      	ldr	r1, [r7, #8]
   82274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82278:	4c36      	ldr	r4, [pc, #216]	; (82354 <xTaskGenericCreate+0x14c>)
   8227a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8227c:	6978      	ldr	r0, [r7, #20]
   8227e:	68f9      	ldr	r1, [r7, #12]
   82280:	683a      	ldr	r2, [r7, #0]
   82282:	4b35      	ldr	r3, [pc, #212]	; (82358 <xTaskGenericCreate+0x150>)
   82284:	4798      	blx	r3
   82286:	4602      	mov	r2, r0
   82288:	69bb      	ldr	r3, [r7, #24]
   8228a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   8228c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8228e:	2b00      	cmp	r3, #0
   82290:	d002      	beq.n	82298 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   82292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82294:	69ba      	ldr	r2, [r7, #24]
   82296:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   82298:	4b30      	ldr	r3, [pc, #192]	; (8235c <xTaskGenericCreate+0x154>)
   8229a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   8229c:	4b30      	ldr	r3, [pc, #192]	; (82360 <xTaskGenericCreate+0x158>)
   8229e:	681b      	ldr	r3, [r3, #0]
   822a0:	1c5a      	adds	r2, r3, #1
   822a2:	4b2f      	ldr	r3, [pc, #188]	; (82360 <xTaskGenericCreate+0x158>)
   822a4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   822a6:	4b2f      	ldr	r3, [pc, #188]	; (82364 <xTaskGenericCreate+0x15c>)
   822a8:	681b      	ldr	r3, [r3, #0]
   822aa:	2b00      	cmp	r3, #0
   822ac:	d109      	bne.n	822c2 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   822ae:	4b2d      	ldr	r3, [pc, #180]	; (82364 <xTaskGenericCreate+0x15c>)
   822b0:	69ba      	ldr	r2, [r7, #24]
   822b2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   822b4:	4b2a      	ldr	r3, [pc, #168]	; (82360 <xTaskGenericCreate+0x158>)
   822b6:	681b      	ldr	r3, [r3, #0]
   822b8:	2b01      	cmp	r3, #1
   822ba:	d10f      	bne.n	822dc <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   822bc:	4b2a      	ldr	r3, [pc, #168]	; (82368 <xTaskGenericCreate+0x160>)
   822be:	4798      	blx	r3
   822c0:	e00c      	b.n	822dc <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   822c2:	4b2a      	ldr	r3, [pc, #168]	; (8236c <xTaskGenericCreate+0x164>)
   822c4:	681b      	ldr	r3, [r3, #0]
   822c6:	2b00      	cmp	r3, #0
   822c8:	d108      	bne.n	822dc <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   822ca:	4b26      	ldr	r3, [pc, #152]	; (82364 <xTaskGenericCreate+0x15c>)
   822cc:	681b      	ldr	r3, [r3, #0]
   822ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   822d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   822d2:	429a      	cmp	r2, r3
   822d4:	d802      	bhi.n	822dc <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   822d6:	4b23      	ldr	r3, [pc, #140]	; (82364 <xTaskGenericCreate+0x15c>)
   822d8:	69ba      	ldr	r2, [r7, #24]
   822da:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   822dc:	4b24      	ldr	r3, [pc, #144]	; (82370 <xTaskGenericCreate+0x168>)
   822de:	681b      	ldr	r3, [r3, #0]
   822e0:	1c5a      	adds	r2, r3, #1
   822e2:	4b23      	ldr	r3, [pc, #140]	; (82370 <xTaskGenericCreate+0x168>)
   822e4:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   822e6:	69bb      	ldr	r3, [r7, #24]
   822e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   822ea:	2201      	movs	r2, #1
   822ec:	409a      	lsls	r2, r3
   822ee:	4b21      	ldr	r3, [pc, #132]	; (82374 <xTaskGenericCreate+0x16c>)
   822f0:	681b      	ldr	r3, [r3, #0]
   822f2:	431a      	orrs	r2, r3
   822f4:	4b1f      	ldr	r3, [pc, #124]	; (82374 <xTaskGenericCreate+0x16c>)
   822f6:	601a      	str	r2, [r3, #0]
   822f8:	69bb      	ldr	r3, [r7, #24]
   822fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   822fc:	4613      	mov	r3, r2
   822fe:	009b      	lsls	r3, r3, #2
   82300:	4413      	add	r3, r2
   82302:	009b      	lsls	r3, r3, #2
   82304:	4a1c      	ldr	r2, [pc, #112]	; (82378 <xTaskGenericCreate+0x170>)
   82306:	441a      	add	r2, r3
   82308:	69bb      	ldr	r3, [r7, #24]
   8230a:	3304      	adds	r3, #4
   8230c:	4610      	mov	r0, r2
   8230e:	4619      	mov	r1, r3
   82310:	4b1a      	ldr	r3, [pc, #104]	; (8237c <xTaskGenericCreate+0x174>)
   82312:	4798      	blx	r3

			xReturn = pdPASS;
   82314:	2301      	movs	r3, #1
   82316:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   82318:	4b19      	ldr	r3, [pc, #100]	; (82380 <xTaskGenericCreate+0x178>)
   8231a:	4798      	blx	r3
   8231c:	e002      	b.n	82324 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8231e:	f04f 33ff 	mov.w	r3, #4294967295
   82322:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   82324:	69fb      	ldr	r3, [r7, #28]
   82326:	2b01      	cmp	r3, #1
   82328:	d10b      	bne.n	82342 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   8232a:	4b10      	ldr	r3, [pc, #64]	; (8236c <xTaskGenericCreate+0x164>)
   8232c:	681b      	ldr	r3, [r3, #0]
   8232e:	2b00      	cmp	r3, #0
   82330:	d007      	beq.n	82342 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82332:	4b0c      	ldr	r3, [pc, #48]	; (82364 <xTaskGenericCreate+0x15c>)
   82334:	681b      	ldr	r3, [r3, #0]
   82336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8233a:	429a      	cmp	r2, r3
   8233c:	d201      	bcs.n	82342 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   8233e:	4b11      	ldr	r3, [pc, #68]	; (82384 <xTaskGenericCreate+0x17c>)
   82340:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   82342:	69fb      	ldr	r3, [r7, #28]
}
   82344:	4618      	mov	r0, r3
   82346:	3724      	adds	r7, #36	; 0x24
   82348:	46bd      	mov	sp, r7
   8234a:	bd90      	pop	{r4, r7, pc}
   8234c:	000813cd 	.word	0x000813cd
   82350:	00082d09 	.word	0x00082d09
   82354:	00082af5 	.word	0x00082af5
   82358:	000811a9 	.word	0x000811a9
   8235c:	00081351 	.word	0x00081351
   82360:	2007a5bc 	.word	0x2007a5bc
   82364:	2007a4e4 	.word	0x2007a4e4
   82368:	00082b8d 	.word	0x00082b8d
   8236c:	2007a5c8 	.word	0x2007a5c8
   82370:	2007a5d8 	.word	0x2007a5d8
   82374:	2007a5c4 	.word	0x2007a5c4
   82378:	2007a4e8 	.word	0x2007a4e8
   8237c:	0008109d 	.word	0x0008109d
   82380:	00081395 	.word	0x00081395
   82384:	00081331 	.word	0x00081331

00082388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   82388:	b590      	push	{r4, r7, lr}
   8238a:	b087      	sub	sp, #28
   8238c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   8238e:	2300      	movs	r3, #0
   82390:	9300      	str	r3, [sp, #0]
   82392:	2300      	movs	r3, #0
   82394:	9301      	str	r3, [sp, #4]
   82396:	2300      	movs	r3, #0
   82398:	9302      	str	r3, [sp, #8]
   8239a:	2300      	movs	r3, #0
   8239c:	9303      	str	r3, [sp, #12]
   8239e:	4812      	ldr	r0, [pc, #72]	; (823e8 <vTaskStartScheduler+0x60>)
   823a0:	4912      	ldr	r1, [pc, #72]	; (823ec <vTaskStartScheduler+0x64>)
   823a2:	2282      	movs	r2, #130	; 0x82
   823a4:	2300      	movs	r3, #0
   823a6:	4c12      	ldr	r4, [pc, #72]	; (823f0 <vTaskStartScheduler+0x68>)
   823a8:	47a0      	blx	r4
   823aa:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   823ac:	687b      	ldr	r3, [r7, #4]
   823ae:	2b01      	cmp	r3, #1
   823b0:	d102      	bne.n	823b8 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   823b2:	4b10      	ldr	r3, [pc, #64]	; (823f4 <vTaskStartScheduler+0x6c>)
   823b4:	4798      	blx	r3
   823b6:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   823b8:	687b      	ldr	r3, [r7, #4]
   823ba:	2b01      	cmp	r3, #1
   823bc:	d10a      	bne.n	823d4 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   823be:	4b0e      	ldr	r3, [pc, #56]	; (823f8 <vTaskStartScheduler+0x70>)
   823c0:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   823c2:	4b0e      	ldr	r3, [pc, #56]	; (823fc <vTaskStartScheduler+0x74>)
   823c4:	2201      	movs	r2, #1
   823c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   823c8:	4b0d      	ldr	r3, [pc, #52]	; (82400 <vTaskStartScheduler+0x78>)
   823ca:	2200      	movs	r2, #0
   823cc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   823ce:	4b0d      	ldr	r3, [pc, #52]	; (82404 <vTaskStartScheduler+0x7c>)
   823d0:	4798      	blx	r3
   823d2:	e005      	b.n	823e0 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   823d4:	687b      	ldr	r3, [r7, #4]
   823d6:	2b00      	cmp	r3, #0
   823d8:	d102      	bne.n	823e0 <vTaskStartScheduler+0x58>
   823da:	4b07      	ldr	r3, [pc, #28]	; (823f8 <vTaskStartScheduler+0x70>)
   823dc:	4798      	blx	r3
   823de:	e7fe      	b.n	823de <vTaskStartScheduler+0x56>
	}
}
   823e0:	370c      	adds	r7, #12
   823e2:	46bd      	mov	sp, r7
   823e4:	bd90      	pop	{r4, r7, pc}
   823e6:	bf00      	nop
   823e8:	00082acd 	.word	0x00082acd
   823ec:	00083c34 	.word	0x00083c34
   823f0:	00082209 	.word	0x00082209
   823f4:	00083021 	.word	0x00083021
   823f8:	000813cd 	.word	0x000813cd
   823fc:	2007a5c8 	.word	0x2007a5c8
   82400:	2007a5c0 	.word	0x2007a5c0
   82404:	00081269 	.word	0x00081269

00082408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   82408:	b480      	push	{r7}
   8240a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   8240c:	4b04      	ldr	r3, [pc, #16]	; (82420 <vTaskSuspendAll+0x18>)
   8240e:	681b      	ldr	r3, [r3, #0]
   82410:	1c5a      	adds	r2, r3, #1
   82412:	4b03      	ldr	r3, [pc, #12]	; (82420 <vTaskSuspendAll+0x18>)
   82414:	601a      	str	r2, [r3, #0]
}
   82416:	46bd      	mov	sp, r7
   82418:	f85d 7b04 	ldr.w	r7, [sp], #4
   8241c:	4770      	bx	lr
   8241e:	bf00      	nop
   82420:	2007a5dc 	.word	0x2007a5dc

00082424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   82424:	b580      	push	{r7, lr}
   82426:	b082      	sub	sp, #8
   82428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   8242a:	2300      	movs	r3, #0
   8242c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8242e:	4b37      	ldr	r3, [pc, #220]	; (8250c <xTaskResumeAll+0xe8>)
   82430:	681b      	ldr	r3, [r3, #0]
   82432:	2b00      	cmp	r3, #0
   82434:	d102      	bne.n	8243c <xTaskResumeAll+0x18>
   82436:	4b36      	ldr	r3, [pc, #216]	; (82510 <xTaskResumeAll+0xec>)
   82438:	4798      	blx	r3
   8243a:	e7fe      	b.n	8243a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8243c:	4b35      	ldr	r3, [pc, #212]	; (82514 <xTaskResumeAll+0xf0>)
   8243e:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   82440:	4b32      	ldr	r3, [pc, #200]	; (8250c <xTaskResumeAll+0xe8>)
   82442:	681b      	ldr	r3, [r3, #0]
   82444:	1e5a      	subs	r2, r3, #1
   82446:	4b31      	ldr	r3, [pc, #196]	; (8250c <xTaskResumeAll+0xe8>)
   82448:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8244a:	4b30      	ldr	r3, [pc, #192]	; (8250c <xTaskResumeAll+0xe8>)
   8244c:	681b      	ldr	r3, [r3, #0]
   8244e:	2b00      	cmp	r3, #0
   82450:	d155      	bne.n	824fe <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   82452:	4b31      	ldr	r3, [pc, #196]	; (82518 <xTaskResumeAll+0xf4>)
   82454:	681b      	ldr	r3, [r3, #0]
   82456:	2b00      	cmp	r3, #0
   82458:	d051      	beq.n	824fe <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   8245a:	e02e      	b.n	824ba <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   8245c:	4b2f      	ldr	r3, [pc, #188]	; (8251c <xTaskResumeAll+0xf8>)
   8245e:	68db      	ldr	r3, [r3, #12]
   82460:	68db      	ldr	r3, [r3, #12]
   82462:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82464:	683b      	ldr	r3, [r7, #0]
   82466:	3318      	adds	r3, #24
   82468:	4618      	mov	r0, r3
   8246a:	4b2d      	ldr	r3, [pc, #180]	; (82520 <xTaskResumeAll+0xfc>)
   8246c:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8246e:	683b      	ldr	r3, [r7, #0]
   82470:	3304      	adds	r3, #4
   82472:	4618      	mov	r0, r3
   82474:	4b2a      	ldr	r3, [pc, #168]	; (82520 <xTaskResumeAll+0xfc>)
   82476:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   82478:	683b      	ldr	r3, [r7, #0]
   8247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8247c:	2201      	movs	r2, #1
   8247e:	409a      	lsls	r2, r3
   82480:	4b28      	ldr	r3, [pc, #160]	; (82524 <xTaskResumeAll+0x100>)
   82482:	681b      	ldr	r3, [r3, #0]
   82484:	431a      	orrs	r2, r3
   82486:	4b27      	ldr	r3, [pc, #156]	; (82524 <xTaskResumeAll+0x100>)
   82488:	601a      	str	r2, [r3, #0]
   8248a:	683b      	ldr	r3, [r7, #0]
   8248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8248e:	4613      	mov	r3, r2
   82490:	009b      	lsls	r3, r3, #2
   82492:	4413      	add	r3, r2
   82494:	009b      	lsls	r3, r3, #2
   82496:	4a24      	ldr	r2, [pc, #144]	; (82528 <xTaskResumeAll+0x104>)
   82498:	441a      	add	r2, r3
   8249a:	683b      	ldr	r3, [r7, #0]
   8249c:	3304      	adds	r3, #4
   8249e:	4610      	mov	r0, r2
   824a0:	4619      	mov	r1, r3
   824a2:	4b22      	ldr	r3, [pc, #136]	; (8252c <xTaskResumeAll+0x108>)
   824a4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   824a6:	683b      	ldr	r3, [r7, #0]
   824a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   824aa:	4b21      	ldr	r3, [pc, #132]	; (82530 <xTaskResumeAll+0x10c>)
   824ac:	681b      	ldr	r3, [r3, #0]
   824ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   824b0:	429a      	cmp	r2, r3
   824b2:	d302      	bcc.n	824ba <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   824b4:	4b1f      	ldr	r3, [pc, #124]	; (82534 <xTaskResumeAll+0x110>)
   824b6:	2201      	movs	r2, #1
   824b8:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   824ba:	4b18      	ldr	r3, [pc, #96]	; (8251c <xTaskResumeAll+0xf8>)
   824bc:	681b      	ldr	r3, [r3, #0]
   824be:	2b00      	cmp	r3, #0
   824c0:	d1cc      	bne.n	8245c <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   824c2:	4b1d      	ldr	r3, [pc, #116]	; (82538 <xTaskResumeAll+0x114>)
   824c4:	681b      	ldr	r3, [r3, #0]
   824c6:	2b00      	cmp	r3, #0
   824c8:	d011      	beq.n	824ee <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   824ca:	e00c      	b.n	824e6 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   824cc:	4b1b      	ldr	r3, [pc, #108]	; (8253c <xTaskResumeAll+0x118>)
   824ce:	4798      	blx	r3
   824d0:	4603      	mov	r3, r0
   824d2:	2b00      	cmp	r3, #0
   824d4:	d002      	beq.n	824dc <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   824d6:	4b17      	ldr	r3, [pc, #92]	; (82534 <xTaskResumeAll+0x110>)
   824d8:	2201      	movs	r2, #1
   824da:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   824dc:	4b16      	ldr	r3, [pc, #88]	; (82538 <xTaskResumeAll+0x114>)
   824de:	681b      	ldr	r3, [r3, #0]
   824e0:	1e5a      	subs	r2, r3, #1
   824e2:	4b15      	ldr	r3, [pc, #84]	; (82538 <xTaskResumeAll+0x114>)
   824e4:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   824e6:	4b14      	ldr	r3, [pc, #80]	; (82538 <xTaskResumeAll+0x114>)
   824e8:	681b      	ldr	r3, [r3, #0]
   824ea:	2b00      	cmp	r3, #0
   824ec:	d1ee      	bne.n	824cc <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   824ee:	4b11      	ldr	r3, [pc, #68]	; (82534 <xTaskResumeAll+0x110>)
   824f0:	681b      	ldr	r3, [r3, #0]
   824f2:	2b01      	cmp	r3, #1
   824f4:	d103      	bne.n	824fe <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   824f6:	2301      	movs	r3, #1
   824f8:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   824fa:	4b11      	ldr	r3, [pc, #68]	; (82540 <xTaskResumeAll+0x11c>)
   824fc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   824fe:	4b11      	ldr	r3, [pc, #68]	; (82544 <xTaskResumeAll+0x120>)
   82500:	4798      	blx	r3

	return xAlreadyYielded;
   82502:	687b      	ldr	r3, [r7, #4]
}
   82504:	4618      	mov	r0, r3
   82506:	3708      	adds	r7, #8
   82508:	46bd      	mov	sp, r7
   8250a:	bd80      	pop	{r7, pc}
   8250c:	2007a5dc 	.word	0x2007a5dc
   82510:	000813cd 	.word	0x000813cd
   82514:	00081351 	.word	0x00081351
   82518:	2007a5bc 	.word	0x2007a5bc
   8251c:	2007a57c 	.word	0x2007a57c
   82520:	00081155 	.word	0x00081155
   82524:	2007a5c4 	.word	0x2007a5c4
   82528:	2007a4e8 	.word	0x2007a4e8
   8252c:	0008109d 	.word	0x0008109d
   82530:	2007a4e4 	.word	0x2007a4e4
   82534:	2007a5d0 	.word	0x2007a5d0
   82538:	2007a5cc 	.word	0x2007a5cc
   8253c:	00082575 	.word	0x00082575
   82540:	00081331 	.word	0x00081331
   82544:	00081395 	.word	0x00081395

00082548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   82548:	b580      	push	{r7, lr}
   8254a:	b082      	sub	sp, #8
   8254c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8254e:	4b06      	ldr	r3, [pc, #24]	; (82568 <xTaskGetTickCount+0x20>)
   82550:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82552:	4b06      	ldr	r3, [pc, #24]	; (8256c <xTaskGetTickCount+0x24>)
   82554:	681b      	ldr	r3, [r3, #0]
   82556:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   82558:	4b05      	ldr	r3, [pc, #20]	; (82570 <xTaskGetTickCount+0x28>)
   8255a:	4798      	blx	r3

	return xTicks;
   8255c:	687b      	ldr	r3, [r7, #4]
}
   8255e:	4618      	mov	r0, r3
   82560:	3708      	adds	r7, #8
   82562:	46bd      	mov	sp, r7
   82564:	bd80      	pop	{r7, pc}
   82566:	bf00      	nop
   82568:	00081351 	.word	0x00081351
   8256c:	2007a5c0 	.word	0x2007a5c0
   82570:	00081395 	.word	0x00081395

00082574 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   82574:	b580      	push	{r7, lr}
   82576:	b086      	sub	sp, #24
   82578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8257a:	2300      	movs	r3, #0
   8257c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8257e:	4b4d      	ldr	r3, [pc, #308]	; (826b4 <xTaskIncrementTick+0x140>)
   82580:	681b      	ldr	r3, [r3, #0]
   82582:	2b00      	cmp	r3, #0
   82584:	f040 8086 	bne.w	82694 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   82588:	4b4b      	ldr	r3, [pc, #300]	; (826b8 <xTaskIncrementTick+0x144>)
   8258a:	681b      	ldr	r3, [r3, #0]
   8258c:	1c5a      	adds	r2, r3, #1
   8258e:	4b4a      	ldr	r3, [pc, #296]	; (826b8 <xTaskIncrementTick+0x144>)
   82590:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82592:	4b49      	ldr	r3, [pc, #292]	; (826b8 <xTaskIncrementTick+0x144>)
   82594:	681b      	ldr	r3, [r3, #0]
   82596:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   82598:	693b      	ldr	r3, [r7, #16]
   8259a:	2b00      	cmp	r3, #0
   8259c:	d118      	bne.n	825d0 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   8259e:	4b47      	ldr	r3, [pc, #284]	; (826bc <xTaskIncrementTick+0x148>)
   825a0:	681b      	ldr	r3, [r3, #0]
   825a2:	681b      	ldr	r3, [r3, #0]
   825a4:	2b00      	cmp	r3, #0
   825a6:	d002      	beq.n	825ae <xTaskIncrementTick+0x3a>
   825a8:	4b45      	ldr	r3, [pc, #276]	; (826c0 <xTaskIncrementTick+0x14c>)
   825aa:	4798      	blx	r3
   825ac:	e7fe      	b.n	825ac <xTaskIncrementTick+0x38>
   825ae:	4b43      	ldr	r3, [pc, #268]	; (826bc <xTaskIncrementTick+0x148>)
   825b0:	681b      	ldr	r3, [r3, #0]
   825b2:	60fb      	str	r3, [r7, #12]
   825b4:	4b43      	ldr	r3, [pc, #268]	; (826c4 <xTaskIncrementTick+0x150>)
   825b6:	681a      	ldr	r2, [r3, #0]
   825b8:	4b40      	ldr	r3, [pc, #256]	; (826bc <xTaskIncrementTick+0x148>)
   825ba:	601a      	str	r2, [r3, #0]
   825bc:	4b41      	ldr	r3, [pc, #260]	; (826c4 <xTaskIncrementTick+0x150>)
   825be:	68fa      	ldr	r2, [r7, #12]
   825c0:	601a      	str	r2, [r3, #0]
   825c2:	4b41      	ldr	r3, [pc, #260]	; (826c8 <xTaskIncrementTick+0x154>)
   825c4:	681b      	ldr	r3, [r3, #0]
   825c6:	1c5a      	adds	r2, r3, #1
   825c8:	4b3f      	ldr	r3, [pc, #252]	; (826c8 <xTaskIncrementTick+0x154>)
   825ca:	601a      	str	r2, [r3, #0]
   825cc:	4b3f      	ldr	r3, [pc, #252]	; (826cc <xTaskIncrementTick+0x158>)
   825ce:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   825d0:	4b3f      	ldr	r3, [pc, #252]	; (826d0 <xTaskIncrementTick+0x15c>)
   825d2:	681b      	ldr	r3, [r3, #0]
   825d4:	693a      	ldr	r2, [r7, #16]
   825d6:	429a      	cmp	r2, r3
   825d8:	d34d      	bcc.n	82676 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   825da:	4b38      	ldr	r3, [pc, #224]	; (826bc <xTaskIncrementTick+0x148>)
   825dc:	681b      	ldr	r3, [r3, #0]
   825de:	681b      	ldr	r3, [r3, #0]
   825e0:	2b00      	cmp	r3, #0
   825e2:	d101      	bne.n	825e8 <xTaskIncrementTick+0x74>
   825e4:	2301      	movs	r3, #1
   825e6:	e000      	b.n	825ea <xTaskIncrementTick+0x76>
   825e8:	2300      	movs	r3, #0
   825ea:	2b00      	cmp	r3, #0
   825ec:	d004      	beq.n	825f8 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   825ee:	4b38      	ldr	r3, [pc, #224]	; (826d0 <xTaskIncrementTick+0x15c>)
   825f0:	f04f 32ff 	mov.w	r2, #4294967295
   825f4:	601a      	str	r2, [r3, #0]
						break;
   825f6:	e03e      	b.n	82676 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   825f8:	4b30      	ldr	r3, [pc, #192]	; (826bc <xTaskIncrementTick+0x148>)
   825fa:	681b      	ldr	r3, [r3, #0]
   825fc:	68db      	ldr	r3, [r3, #12]
   825fe:	68db      	ldr	r3, [r3, #12]
   82600:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82602:	68bb      	ldr	r3, [r7, #8]
   82604:	685b      	ldr	r3, [r3, #4]
   82606:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   82608:	693a      	ldr	r2, [r7, #16]
   8260a:	687b      	ldr	r3, [r7, #4]
   8260c:	429a      	cmp	r2, r3
   8260e:	d203      	bcs.n	82618 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   82610:	4b2f      	ldr	r3, [pc, #188]	; (826d0 <xTaskIncrementTick+0x15c>)
   82612:	687a      	ldr	r2, [r7, #4]
   82614:	601a      	str	r2, [r3, #0]
							break;
   82616:	e02e      	b.n	82676 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82618:	68bb      	ldr	r3, [r7, #8]
   8261a:	3304      	adds	r3, #4
   8261c:	4618      	mov	r0, r3
   8261e:	4b2d      	ldr	r3, [pc, #180]	; (826d4 <xTaskIncrementTick+0x160>)
   82620:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   82622:	68bb      	ldr	r3, [r7, #8]
   82624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82626:	2b00      	cmp	r3, #0
   82628:	d004      	beq.n	82634 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8262a:	68bb      	ldr	r3, [r7, #8]
   8262c:	3318      	adds	r3, #24
   8262e:	4618      	mov	r0, r3
   82630:	4b28      	ldr	r3, [pc, #160]	; (826d4 <xTaskIncrementTick+0x160>)
   82632:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   82634:	68bb      	ldr	r3, [r7, #8]
   82636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82638:	2201      	movs	r2, #1
   8263a:	409a      	lsls	r2, r3
   8263c:	4b26      	ldr	r3, [pc, #152]	; (826d8 <xTaskIncrementTick+0x164>)
   8263e:	681b      	ldr	r3, [r3, #0]
   82640:	431a      	orrs	r2, r3
   82642:	4b25      	ldr	r3, [pc, #148]	; (826d8 <xTaskIncrementTick+0x164>)
   82644:	601a      	str	r2, [r3, #0]
   82646:	68bb      	ldr	r3, [r7, #8]
   82648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8264a:	4613      	mov	r3, r2
   8264c:	009b      	lsls	r3, r3, #2
   8264e:	4413      	add	r3, r2
   82650:	009b      	lsls	r3, r3, #2
   82652:	4a22      	ldr	r2, [pc, #136]	; (826dc <xTaskIncrementTick+0x168>)
   82654:	441a      	add	r2, r3
   82656:	68bb      	ldr	r3, [r7, #8]
   82658:	3304      	adds	r3, #4
   8265a:	4610      	mov	r0, r2
   8265c:	4619      	mov	r1, r3
   8265e:	4b20      	ldr	r3, [pc, #128]	; (826e0 <xTaskIncrementTick+0x16c>)
   82660:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82662:	68bb      	ldr	r3, [r7, #8]
   82664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82666:	4b1f      	ldr	r3, [pc, #124]	; (826e4 <xTaskIncrementTick+0x170>)
   82668:	681b      	ldr	r3, [r3, #0]
   8266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8266c:	429a      	cmp	r2, r3
   8266e:	d301      	bcc.n	82674 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   82670:	2301      	movs	r3, #1
   82672:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   82674:	e7b1      	b.n	825da <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   82676:	4b1b      	ldr	r3, [pc, #108]	; (826e4 <xTaskIncrementTick+0x170>)
   82678:	681b      	ldr	r3, [r3, #0]
   8267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8267c:	4917      	ldr	r1, [pc, #92]	; (826dc <xTaskIncrementTick+0x168>)
   8267e:	4613      	mov	r3, r2
   82680:	009b      	lsls	r3, r3, #2
   82682:	4413      	add	r3, r2
   82684:	009b      	lsls	r3, r3, #2
   82686:	440b      	add	r3, r1
   82688:	681b      	ldr	r3, [r3, #0]
   8268a:	2b01      	cmp	r3, #1
   8268c:	d907      	bls.n	8269e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8268e:	2301      	movs	r3, #1
   82690:	617b      	str	r3, [r7, #20]
   82692:	e004      	b.n	8269e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   82694:	4b14      	ldr	r3, [pc, #80]	; (826e8 <xTaskIncrementTick+0x174>)
   82696:	681b      	ldr	r3, [r3, #0]
   82698:	1c5a      	adds	r2, r3, #1
   8269a:	4b13      	ldr	r3, [pc, #76]	; (826e8 <xTaskIncrementTick+0x174>)
   8269c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   8269e:	4b13      	ldr	r3, [pc, #76]	; (826ec <xTaskIncrementTick+0x178>)
   826a0:	681b      	ldr	r3, [r3, #0]
   826a2:	2b00      	cmp	r3, #0
   826a4:	d001      	beq.n	826aa <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   826a6:	2301      	movs	r3, #1
   826a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   826aa:	697b      	ldr	r3, [r7, #20]
}
   826ac:	4618      	mov	r0, r3
   826ae:	3718      	adds	r7, #24
   826b0:	46bd      	mov	sp, r7
   826b2:	bd80      	pop	{r7, pc}
   826b4:	2007a5dc 	.word	0x2007a5dc
   826b8:	2007a5c0 	.word	0x2007a5c0
   826bc:	2007a574 	.word	0x2007a574
   826c0:	000813cd 	.word	0x000813cd
   826c4:	2007a578 	.word	0x2007a578
   826c8:	2007a5d4 	.word	0x2007a5d4
   826cc:	00082d9d 	.word	0x00082d9d
   826d0:	20070008 	.word	0x20070008
   826d4:	00081155 	.word	0x00081155
   826d8:	2007a5c4 	.word	0x2007a5c4
   826dc:	2007a4e8 	.word	0x2007a4e8
   826e0:	0008109d 	.word	0x0008109d
   826e4:	2007a4e4 	.word	0x2007a4e4
   826e8:	2007a5cc 	.word	0x2007a5cc
   826ec:	2007a5d0 	.word	0x2007a5d0

000826f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   826f0:	b580      	push	{r7, lr}
   826f2:	b084      	sub	sp, #16
   826f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   826f6:	4b34      	ldr	r3, [pc, #208]	; (827c8 <vTaskSwitchContext+0xd8>)
   826f8:	681b      	ldr	r3, [r3, #0]
   826fa:	2b00      	cmp	r3, #0
   826fc:	d003      	beq.n	82706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   826fe:	4b33      	ldr	r3, [pc, #204]	; (827cc <vTaskSwitchContext+0xdc>)
   82700:	2201      	movs	r2, #1
   82702:	601a      	str	r2, [r3, #0]
   82704:	e05c      	b.n	827c0 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   82706:	4b31      	ldr	r3, [pc, #196]	; (827cc <vTaskSwitchContext+0xdc>)
   82708:	2200      	movs	r2, #0
   8270a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   8270c:	4b30      	ldr	r3, [pc, #192]	; (827d0 <vTaskSwitchContext+0xe0>)
   8270e:	681b      	ldr	r3, [r3, #0]
   82710:	681a      	ldr	r2, [r3, #0]
   82712:	4b2f      	ldr	r3, [pc, #188]	; (827d0 <vTaskSwitchContext+0xe0>)
   82714:	681b      	ldr	r3, [r3, #0]
   82716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82718:	429a      	cmp	r2, r3
   8271a:	d808      	bhi.n	8272e <vTaskSwitchContext+0x3e>
   8271c:	4b2c      	ldr	r3, [pc, #176]	; (827d0 <vTaskSwitchContext+0xe0>)
   8271e:	681a      	ldr	r2, [r3, #0]
   82720:	4b2b      	ldr	r3, [pc, #172]	; (827d0 <vTaskSwitchContext+0xe0>)
   82722:	681b      	ldr	r3, [r3, #0]
   82724:	3334      	adds	r3, #52	; 0x34
   82726:	4610      	mov	r0, r2
   82728:	4619      	mov	r1, r3
   8272a:	4b2a      	ldr	r3, [pc, #168]	; (827d4 <vTaskSwitchContext+0xe4>)
   8272c:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   8272e:	4b28      	ldr	r3, [pc, #160]	; (827d0 <vTaskSwitchContext+0xe0>)
   82730:	681b      	ldr	r3, [r3, #0]
   82732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82734:	4618      	mov	r0, r3
   82736:	4928      	ldr	r1, [pc, #160]	; (827d8 <vTaskSwitchContext+0xe8>)
   82738:	2214      	movs	r2, #20
   8273a:	4b28      	ldr	r3, [pc, #160]	; (827dc <vTaskSwitchContext+0xec>)
   8273c:	4798      	blx	r3
   8273e:	4603      	mov	r3, r0
   82740:	2b00      	cmp	r3, #0
   82742:	d008      	beq.n	82756 <vTaskSwitchContext+0x66>
   82744:	4b22      	ldr	r3, [pc, #136]	; (827d0 <vTaskSwitchContext+0xe0>)
   82746:	681a      	ldr	r2, [r3, #0]
   82748:	4b21      	ldr	r3, [pc, #132]	; (827d0 <vTaskSwitchContext+0xe0>)
   8274a:	681b      	ldr	r3, [r3, #0]
   8274c:	3334      	adds	r3, #52	; 0x34
   8274e:	4610      	mov	r0, r2
   82750:	4619      	mov	r1, r3
   82752:	4b20      	ldr	r3, [pc, #128]	; (827d4 <vTaskSwitchContext+0xe4>)
   82754:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   82756:	4b22      	ldr	r3, [pc, #136]	; (827e0 <vTaskSwitchContext+0xf0>)
   82758:	681b      	ldr	r3, [r3, #0]
   8275a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   8275c:	687b      	ldr	r3, [r7, #4]
   8275e:	fab3 f383 	clz	r3, r3
   82762:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   82764:	78fb      	ldrb	r3, [r7, #3]
   82766:	f1c3 031f 	rsb	r3, r3, #31
   8276a:	60fb      	str	r3, [r7, #12]
   8276c:	491d      	ldr	r1, [pc, #116]	; (827e4 <vTaskSwitchContext+0xf4>)
   8276e:	68fa      	ldr	r2, [r7, #12]
   82770:	4613      	mov	r3, r2
   82772:	009b      	lsls	r3, r3, #2
   82774:	4413      	add	r3, r2
   82776:	009b      	lsls	r3, r3, #2
   82778:	440b      	add	r3, r1
   8277a:	681b      	ldr	r3, [r3, #0]
   8277c:	2b00      	cmp	r3, #0
   8277e:	d102      	bne.n	82786 <vTaskSwitchContext+0x96>
   82780:	4b19      	ldr	r3, [pc, #100]	; (827e8 <vTaskSwitchContext+0xf8>)
   82782:	4798      	blx	r3
   82784:	e7fe      	b.n	82784 <vTaskSwitchContext+0x94>
   82786:	68fa      	ldr	r2, [r7, #12]
   82788:	4613      	mov	r3, r2
   8278a:	009b      	lsls	r3, r3, #2
   8278c:	4413      	add	r3, r2
   8278e:	009b      	lsls	r3, r3, #2
   82790:	4a14      	ldr	r2, [pc, #80]	; (827e4 <vTaskSwitchContext+0xf4>)
   82792:	4413      	add	r3, r2
   82794:	60bb      	str	r3, [r7, #8]
   82796:	68bb      	ldr	r3, [r7, #8]
   82798:	685b      	ldr	r3, [r3, #4]
   8279a:	685a      	ldr	r2, [r3, #4]
   8279c:	68bb      	ldr	r3, [r7, #8]
   8279e:	605a      	str	r2, [r3, #4]
   827a0:	68bb      	ldr	r3, [r7, #8]
   827a2:	685a      	ldr	r2, [r3, #4]
   827a4:	68bb      	ldr	r3, [r7, #8]
   827a6:	3308      	adds	r3, #8
   827a8:	429a      	cmp	r2, r3
   827aa:	d104      	bne.n	827b6 <vTaskSwitchContext+0xc6>
   827ac:	68bb      	ldr	r3, [r7, #8]
   827ae:	685b      	ldr	r3, [r3, #4]
   827b0:	685a      	ldr	r2, [r3, #4]
   827b2:	68bb      	ldr	r3, [r7, #8]
   827b4:	605a      	str	r2, [r3, #4]
   827b6:	68bb      	ldr	r3, [r7, #8]
   827b8:	685b      	ldr	r3, [r3, #4]
   827ba:	68da      	ldr	r2, [r3, #12]
   827bc:	4b04      	ldr	r3, [pc, #16]	; (827d0 <vTaskSwitchContext+0xe0>)
   827be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   827c0:	3710      	adds	r7, #16
   827c2:	46bd      	mov	sp, r7
   827c4:	bd80      	pop	{r7, pc}
   827c6:	bf00      	nop
   827c8:	2007a5dc 	.word	0x2007a5dc
   827cc:	2007a5d0 	.word	0x2007a5d0
   827d0:	2007a4e4 	.word	0x2007a4e4
   827d4:	00083675 	.word	0x00083675
   827d8:	00083c3c 	.word	0x00083c3c
   827dc:	00083955 	.word	0x00083955
   827e0:	2007a5c4 	.word	0x2007a5c4
   827e4:	2007a4e8 	.word	0x2007a4e8
   827e8:	000813cd 	.word	0x000813cd

000827ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   827ec:	b580      	push	{r7, lr}
   827ee:	b084      	sub	sp, #16
   827f0:	af00      	add	r7, sp, #0
   827f2:	6078      	str	r0, [r7, #4]
   827f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   827f6:	687b      	ldr	r3, [r7, #4]
   827f8:	2b00      	cmp	r3, #0
   827fa:	d102      	bne.n	82802 <vTaskPlaceOnEventList+0x16>
   827fc:	4b1a      	ldr	r3, [pc, #104]	; (82868 <vTaskPlaceOnEventList+0x7c>)
   827fe:	4798      	blx	r3
   82800:	e7fe      	b.n	82800 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   82802:	4b1a      	ldr	r3, [pc, #104]	; (8286c <vTaskPlaceOnEventList+0x80>)
   82804:	681b      	ldr	r3, [r3, #0]
   82806:	3318      	adds	r3, #24
   82808:	6878      	ldr	r0, [r7, #4]
   8280a:	4619      	mov	r1, r3
   8280c:	4b18      	ldr	r3, [pc, #96]	; (82870 <vTaskPlaceOnEventList+0x84>)
   8280e:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82810:	4b16      	ldr	r3, [pc, #88]	; (8286c <vTaskPlaceOnEventList+0x80>)
   82812:	681b      	ldr	r3, [r3, #0]
   82814:	3304      	adds	r3, #4
   82816:	4618      	mov	r0, r3
   82818:	4b16      	ldr	r3, [pc, #88]	; (82874 <vTaskPlaceOnEventList+0x88>)
   8281a:	4798      	blx	r3
   8281c:	4603      	mov	r3, r0
   8281e:	2b00      	cmp	r3, #0
   82820:	d10b      	bne.n	8283a <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   82822:	4b12      	ldr	r3, [pc, #72]	; (8286c <vTaskPlaceOnEventList+0x80>)
   82824:	681b      	ldr	r3, [r3, #0]
   82826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82828:	2201      	movs	r2, #1
   8282a:	fa02 f303 	lsl.w	r3, r2, r3
   8282e:	43da      	mvns	r2, r3
   82830:	4b11      	ldr	r3, [pc, #68]	; (82878 <vTaskPlaceOnEventList+0x8c>)
   82832:	681b      	ldr	r3, [r3, #0]
   82834:	401a      	ands	r2, r3
   82836:	4b10      	ldr	r3, [pc, #64]	; (82878 <vTaskPlaceOnEventList+0x8c>)
   82838:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8283a:	683b      	ldr	r3, [r7, #0]
   8283c:	f1b3 3fff 	cmp.w	r3, #4294967295
   82840:	d107      	bne.n	82852 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   82842:	4b0a      	ldr	r3, [pc, #40]	; (8286c <vTaskPlaceOnEventList+0x80>)
   82844:	681b      	ldr	r3, [r3, #0]
   82846:	3304      	adds	r3, #4
   82848:	480c      	ldr	r0, [pc, #48]	; (8287c <vTaskPlaceOnEventList+0x90>)
   8284a:	4619      	mov	r1, r3
   8284c:	4b0c      	ldr	r3, [pc, #48]	; (82880 <vTaskPlaceOnEventList+0x94>)
   8284e:	4798      	blx	r3
   82850:	e007      	b.n	82862 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   82852:	4b0c      	ldr	r3, [pc, #48]	; (82884 <vTaskPlaceOnEventList+0x98>)
   82854:	681a      	ldr	r2, [r3, #0]
   82856:	683b      	ldr	r3, [r7, #0]
   82858:	4413      	add	r3, r2
   8285a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8285c:	68f8      	ldr	r0, [r7, #12]
   8285e:	4b0a      	ldr	r3, [pc, #40]	; (82888 <vTaskPlaceOnEventList+0x9c>)
   82860:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   82862:	3710      	adds	r7, #16
   82864:	46bd      	mov	sp, r7
   82866:	bd80      	pop	{r7, pc}
   82868:	000813cd 	.word	0x000813cd
   8286c:	2007a4e4 	.word	0x2007a4e4
   82870:	000810e5 	.word	0x000810e5
   82874:	00081155 	.word	0x00081155
   82878:	2007a5c4 	.word	0x2007a5c4
   8287c:	2007a5a8 	.word	0x2007a5a8
   82880:	0008109d 	.word	0x0008109d
   82884:	2007a5c0 	.word	0x2007a5c0
   82888:	00082c99 	.word	0x00082c99

0008288c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   8288c:	b580      	push	{r7, lr}
   8288e:	b084      	sub	sp, #16
   82890:	af00      	add	r7, sp, #0
   82892:	6078      	str	r0, [r7, #4]
   82894:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   82896:	687b      	ldr	r3, [r7, #4]
   82898:	2b00      	cmp	r3, #0
   8289a:	d102      	bne.n	828a2 <vTaskPlaceOnEventListRestricted+0x16>
   8289c:	4b14      	ldr	r3, [pc, #80]	; (828f0 <vTaskPlaceOnEventListRestricted+0x64>)
   8289e:	4798      	blx	r3
   828a0:	e7fe      	b.n	828a0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   828a2:	4b14      	ldr	r3, [pc, #80]	; (828f4 <vTaskPlaceOnEventListRestricted+0x68>)
   828a4:	681b      	ldr	r3, [r3, #0]
   828a6:	3318      	adds	r3, #24
   828a8:	6878      	ldr	r0, [r7, #4]
   828aa:	4619      	mov	r1, r3
   828ac:	4b12      	ldr	r3, [pc, #72]	; (828f8 <vTaskPlaceOnEventListRestricted+0x6c>)
   828ae:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   828b0:	4b10      	ldr	r3, [pc, #64]	; (828f4 <vTaskPlaceOnEventListRestricted+0x68>)
   828b2:	681b      	ldr	r3, [r3, #0]
   828b4:	3304      	adds	r3, #4
   828b6:	4618      	mov	r0, r3
   828b8:	4b10      	ldr	r3, [pc, #64]	; (828fc <vTaskPlaceOnEventListRestricted+0x70>)
   828ba:	4798      	blx	r3
   828bc:	4603      	mov	r3, r0
   828be:	2b00      	cmp	r3, #0
   828c0:	d10b      	bne.n	828da <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   828c2:	4b0c      	ldr	r3, [pc, #48]	; (828f4 <vTaskPlaceOnEventListRestricted+0x68>)
   828c4:	681b      	ldr	r3, [r3, #0]
   828c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   828c8:	2201      	movs	r2, #1
   828ca:	fa02 f303 	lsl.w	r3, r2, r3
   828ce:	43da      	mvns	r2, r3
   828d0:	4b0b      	ldr	r3, [pc, #44]	; (82900 <vTaskPlaceOnEventListRestricted+0x74>)
   828d2:	681b      	ldr	r3, [r3, #0]
   828d4:	401a      	ands	r2, r3
   828d6:	4b0a      	ldr	r3, [pc, #40]	; (82900 <vTaskPlaceOnEventListRestricted+0x74>)
   828d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   828da:	4b0a      	ldr	r3, [pc, #40]	; (82904 <vTaskPlaceOnEventListRestricted+0x78>)
   828dc:	681a      	ldr	r2, [r3, #0]
   828de:	683b      	ldr	r3, [r7, #0]
   828e0:	4413      	add	r3, r2
   828e2:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   828e4:	68f8      	ldr	r0, [r7, #12]
   828e6:	4b08      	ldr	r3, [pc, #32]	; (82908 <vTaskPlaceOnEventListRestricted+0x7c>)
   828e8:	4798      	blx	r3
	}
   828ea:	3710      	adds	r7, #16
   828ec:	46bd      	mov	sp, r7
   828ee:	bd80      	pop	{r7, pc}
   828f0:	000813cd 	.word	0x000813cd
   828f4:	2007a4e4 	.word	0x2007a4e4
   828f8:	0008109d 	.word	0x0008109d
   828fc:	00081155 	.word	0x00081155
   82900:	2007a5c4 	.word	0x2007a5c4
   82904:	2007a5c0 	.word	0x2007a5c0
   82908:	00082c99 	.word	0x00082c99

0008290c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   8290c:	b580      	push	{r7, lr}
   8290e:	b084      	sub	sp, #16
   82910:	af00      	add	r7, sp, #0
   82912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82914:	687b      	ldr	r3, [r7, #4]
   82916:	68db      	ldr	r3, [r3, #12]
   82918:	68db      	ldr	r3, [r3, #12]
   8291a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   8291c:	68bb      	ldr	r3, [r7, #8]
   8291e:	2b00      	cmp	r3, #0
   82920:	d102      	bne.n	82928 <xTaskRemoveFromEventList+0x1c>
   82922:	4b21      	ldr	r3, [pc, #132]	; (829a8 <xTaskRemoveFromEventList+0x9c>)
   82924:	4798      	blx	r3
   82926:	e7fe      	b.n	82926 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82928:	68bb      	ldr	r3, [r7, #8]
   8292a:	3318      	adds	r3, #24
   8292c:	4618      	mov	r0, r3
   8292e:	4b1f      	ldr	r3, [pc, #124]	; (829ac <xTaskRemoveFromEventList+0xa0>)
   82930:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82932:	4b1f      	ldr	r3, [pc, #124]	; (829b0 <xTaskRemoveFromEventList+0xa4>)
   82934:	681b      	ldr	r3, [r3, #0]
   82936:	2b00      	cmp	r3, #0
   82938:	d11c      	bne.n	82974 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8293a:	68bb      	ldr	r3, [r7, #8]
   8293c:	3304      	adds	r3, #4
   8293e:	4618      	mov	r0, r3
   82940:	4b1a      	ldr	r3, [pc, #104]	; (829ac <xTaskRemoveFromEventList+0xa0>)
   82942:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   82944:	68bb      	ldr	r3, [r7, #8]
   82946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82948:	2201      	movs	r2, #1
   8294a:	409a      	lsls	r2, r3
   8294c:	4b19      	ldr	r3, [pc, #100]	; (829b4 <xTaskRemoveFromEventList+0xa8>)
   8294e:	681b      	ldr	r3, [r3, #0]
   82950:	431a      	orrs	r2, r3
   82952:	4b18      	ldr	r3, [pc, #96]	; (829b4 <xTaskRemoveFromEventList+0xa8>)
   82954:	601a      	str	r2, [r3, #0]
   82956:	68bb      	ldr	r3, [r7, #8]
   82958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8295a:	4613      	mov	r3, r2
   8295c:	009b      	lsls	r3, r3, #2
   8295e:	4413      	add	r3, r2
   82960:	009b      	lsls	r3, r3, #2
   82962:	4a15      	ldr	r2, [pc, #84]	; (829b8 <xTaskRemoveFromEventList+0xac>)
   82964:	441a      	add	r2, r3
   82966:	68bb      	ldr	r3, [r7, #8]
   82968:	3304      	adds	r3, #4
   8296a:	4610      	mov	r0, r2
   8296c:	4619      	mov	r1, r3
   8296e:	4b13      	ldr	r3, [pc, #76]	; (829bc <xTaskRemoveFromEventList+0xb0>)
   82970:	4798      	blx	r3
   82972:	e005      	b.n	82980 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   82974:	68bb      	ldr	r3, [r7, #8]
   82976:	3318      	adds	r3, #24
   82978:	4811      	ldr	r0, [pc, #68]	; (829c0 <xTaskRemoveFromEventList+0xb4>)
   8297a:	4619      	mov	r1, r3
   8297c:	4b0f      	ldr	r3, [pc, #60]	; (829bc <xTaskRemoveFromEventList+0xb0>)
   8297e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   82980:	68bb      	ldr	r3, [r7, #8]
   82982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82984:	4b0f      	ldr	r3, [pc, #60]	; (829c4 <xTaskRemoveFromEventList+0xb8>)
   82986:	681b      	ldr	r3, [r3, #0]
   82988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8298a:	429a      	cmp	r2, r3
   8298c:	d905      	bls.n	8299a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8298e:	2301      	movs	r3, #1
   82990:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   82992:	4b0d      	ldr	r3, [pc, #52]	; (829c8 <xTaskRemoveFromEventList+0xbc>)
   82994:	2201      	movs	r2, #1
   82996:	601a      	str	r2, [r3, #0]
   82998:	e001      	b.n	8299e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8299a:	2300      	movs	r3, #0
   8299c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   8299e:	68fb      	ldr	r3, [r7, #12]
}
   829a0:	4618      	mov	r0, r3
   829a2:	3710      	adds	r7, #16
   829a4:	46bd      	mov	sp, r7
   829a6:	bd80      	pop	{r7, pc}
   829a8:	000813cd 	.word	0x000813cd
   829ac:	00081155 	.word	0x00081155
   829b0:	2007a5dc 	.word	0x2007a5dc
   829b4:	2007a5c4 	.word	0x2007a5c4
   829b8:	2007a4e8 	.word	0x2007a4e8
   829bc:	0008109d 	.word	0x0008109d
   829c0:	2007a57c 	.word	0x2007a57c
   829c4:	2007a4e4 	.word	0x2007a4e4
   829c8:	2007a5d0 	.word	0x2007a5d0

000829cc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   829cc:	b580      	push	{r7, lr}
   829ce:	b082      	sub	sp, #8
   829d0:	af00      	add	r7, sp, #0
   829d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   829d4:	687b      	ldr	r3, [r7, #4]
   829d6:	2b00      	cmp	r3, #0
   829d8:	d102      	bne.n	829e0 <vTaskSetTimeOutState+0x14>
   829da:	4b07      	ldr	r3, [pc, #28]	; (829f8 <vTaskSetTimeOutState+0x2c>)
   829dc:	4798      	blx	r3
   829de:	e7fe      	b.n	829de <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   829e0:	4b06      	ldr	r3, [pc, #24]	; (829fc <vTaskSetTimeOutState+0x30>)
   829e2:	681a      	ldr	r2, [r3, #0]
   829e4:	687b      	ldr	r3, [r7, #4]
   829e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   829e8:	4b05      	ldr	r3, [pc, #20]	; (82a00 <vTaskSetTimeOutState+0x34>)
   829ea:	681a      	ldr	r2, [r3, #0]
   829ec:	687b      	ldr	r3, [r7, #4]
   829ee:	605a      	str	r2, [r3, #4]
}
   829f0:	3708      	adds	r7, #8
   829f2:	46bd      	mov	sp, r7
   829f4:	bd80      	pop	{r7, pc}
   829f6:	bf00      	nop
   829f8:	000813cd 	.word	0x000813cd
   829fc:	2007a5d4 	.word	0x2007a5d4
   82a00:	2007a5c0 	.word	0x2007a5c0

00082a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   82a04:	b580      	push	{r7, lr}
   82a06:	b084      	sub	sp, #16
   82a08:	af00      	add	r7, sp, #0
   82a0a:	6078      	str	r0, [r7, #4]
   82a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   82a0e:	687b      	ldr	r3, [r7, #4]
   82a10:	2b00      	cmp	r3, #0
   82a12:	d102      	bne.n	82a1a <xTaskCheckForTimeOut+0x16>
   82a14:	4b21      	ldr	r3, [pc, #132]	; (82a9c <xTaskCheckForTimeOut+0x98>)
   82a16:	4798      	blx	r3
   82a18:	e7fe      	b.n	82a18 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   82a1a:	683b      	ldr	r3, [r7, #0]
   82a1c:	2b00      	cmp	r3, #0
   82a1e:	d102      	bne.n	82a26 <xTaskCheckForTimeOut+0x22>
   82a20:	4b1e      	ldr	r3, [pc, #120]	; (82a9c <xTaskCheckForTimeOut+0x98>)
   82a22:	4798      	blx	r3
   82a24:	e7fe      	b.n	82a24 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   82a26:	4b1e      	ldr	r3, [pc, #120]	; (82aa0 <xTaskCheckForTimeOut+0x9c>)
   82a28:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   82a2a:	4b1e      	ldr	r3, [pc, #120]	; (82aa4 <xTaskCheckForTimeOut+0xa0>)
   82a2c:	681b      	ldr	r3, [r3, #0]
   82a2e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82a30:	683b      	ldr	r3, [r7, #0]
   82a32:	681b      	ldr	r3, [r3, #0]
   82a34:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a38:	d102      	bne.n	82a40 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   82a3a:	2300      	movs	r3, #0
   82a3c:	60fb      	str	r3, [r7, #12]
   82a3e:	e026      	b.n	82a8e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   82a40:	687b      	ldr	r3, [r7, #4]
   82a42:	681a      	ldr	r2, [r3, #0]
   82a44:	4b18      	ldr	r3, [pc, #96]	; (82aa8 <xTaskCheckForTimeOut+0xa4>)
   82a46:	681b      	ldr	r3, [r3, #0]
   82a48:	429a      	cmp	r2, r3
   82a4a:	d007      	beq.n	82a5c <xTaskCheckForTimeOut+0x58>
   82a4c:	687b      	ldr	r3, [r7, #4]
   82a4e:	685a      	ldr	r2, [r3, #4]
   82a50:	68bb      	ldr	r3, [r7, #8]
   82a52:	429a      	cmp	r2, r3
   82a54:	d802      	bhi.n	82a5c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82a56:	2301      	movs	r3, #1
   82a58:	60fb      	str	r3, [r7, #12]
   82a5a:	e018      	b.n	82a8e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   82a5c:	687b      	ldr	r3, [r7, #4]
   82a5e:	685b      	ldr	r3, [r3, #4]
   82a60:	68ba      	ldr	r2, [r7, #8]
   82a62:	1ad2      	subs	r2, r2, r3
   82a64:	683b      	ldr	r3, [r7, #0]
   82a66:	681b      	ldr	r3, [r3, #0]
   82a68:	429a      	cmp	r2, r3
   82a6a:	d20e      	bcs.n	82a8a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   82a6c:	683b      	ldr	r3, [r7, #0]
   82a6e:	681a      	ldr	r2, [r3, #0]
   82a70:	687b      	ldr	r3, [r7, #4]
   82a72:	6859      	ldr	r1, [r3, #4]
   82a74:	68bb      	ldr	r3, [r7, #8]
   82a76:	1acb      	subs	r3, r1, r3
   82a78:	441a      	add	r2, r3
   82a7a:	683b      	ldr	r3, [r7, #0]
   82a7c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82a7e:	6878      	ldr	r0, [r7, #4]
   82a80:	4b0a      	ldr	r3, [pc, #40]	; (82aac <xTaskCheckForTimeOut+0xa8>)
   82a82:	4798      	blx	r3
			xReturn = pdFALSE;
   82a84:	2300      	movs	r3, #0
   82a86:	60fb      	str	r3, [r7, #12]
   82a88:	e001      	b.n	82a8e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   82a8a:	2301      	movs	r3, #1
   82a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82a8e:	4b08      	ldr	r3, [pc, #32]	; (82ab0 <xTaskCheckForTimeOut+0xac>)
   82a90:	4798      	blx	r3

	return xReturn;
   82a92:	68fb      	ldr	r3, [r7, #12]
}
   82a94:	4618      	mov	r0, r3
   82a96:	3710      	adds	r7, #16
   82a98:	46bd      	mov	sp, r7
   82a9a:	bd80      	pop	{r7, pc}
   82a9c:	000813cd 	.word	0x000813cd
   82aa0:	00081351 	.word	0x00081351
   82aa4:	2007a5c0 	.word	0x2007a5c0
   82aa8:	2007a5d4 	.word	0x2007a5d4
   82aac:	000829cd 	.word	0x000829cd
   82ab0:	00081395 	.word	0x00081395

00082ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   82ab4:	b480      	push	{r7}
   82ab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   82ab8:	4b03      	ldr	r3, [pc, #12]	; (82ac8 <vTaskMissedYield+0x14>)
   82aba:	2201      	movs	r2, #1
   82abc:	601a      	str	r2, [r3, #0]
}
   82abe:	46bd      	mov	sp, r7
   82ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ac4:	4770      	bx	lr
   82ac6:	bf00      	nop
   82ac8:	2007a5d0 	.word	0x2007a5d0

00082acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   82acc:	b580      	push	{r7, lr}
   82ace:	b082      	sub	sp, #8
   82ad0:	af00      	add	r7, sp, #0
   82ad2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   82ad4:	4b04      	ldr	r3, [pc, #16]	; (82ae8 <prvIdleTask+0x1c>)
   82ad6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   82ad8:	4b04      	ldr	r3, [pc, #16]	; (82aec <prvIdleTask+0x20>)
   82ada:	681b      	ldr	r3, [r3, #0]
   82adc:	2b01      	cmp	r3, #1
   82ade:	d901      	bls.n	82ae4 <prvIdleTask+0x18>
			{
				taskYIELD();
   82ae0:	4b03      	ldr	r3, [pc, #12]	; (82af0 <prvIdleTask+0x24>)
   82ae2:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   82ae4:	e7f6      	b.n	82ad4 <prvIdleTask+0x8>
   82ae6:	bf00      	nop
   82ae8:	00082c0d 	.word	0x00082c0d
   82aec:	2007a4e8 	.word	0x2007a4e8
   82af0:	00081331 	.word	0x00081331

00082af4 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   82af4:	b580      	push	{r7, lr}
   82af6:	b086      	sub	sp, #24
   82af8:	af00      	add	r7, sp, #0
   82afa:	60f8      	str	r0, [r7, #12]
   82afc:	60b9      	str	r1, [r7, #8]
   82afe:	607a      	str	r2, [r7, #4]
   82b00:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   82b02:	2300      	movs	r3, #0
   82b04:	617b      	str	r3, [r7, #20]
   82b06:	e012      	b.n	82b2e <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   82b08:	68ba      	ldr	r2, [r7, #8]
   82b0a:	697b      	ldr	r3, [r7, #20]
   82b0c:	4413      	add	r3, r2
   82b0e:	781a      	ldrb	r2, [r3, #0]
   82b10:	68f9      	ldr	r1, [r7, #12]
   82b12:	697b      	ldr	r3, [r7, #20]
   82b14:	440b      	add	r3, r1
   82b16:	3330      	adds	r3, #48	; 0x30
   82b18:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   82b1a:	68ba      	ldr	r2, [r7, #8]
   82b1c:	697b      	ldr	r3, [r7, #20]
   82b1e:	4413      	add	r3, r2
   82b20:	781b      	ldrb	r3, [r3, #0]
   82b22:	2b00      	cmp	r3, #0
   82b24:	d100      	bne.n	82b28 <prvInitialiseTCBVariables+0x34>
		{
			break;
   82b26:	e005      	b.n	82b34 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   82b28:	697b      	ldr	r3, [r7, #20]
   82b2a:	3301      	adds	r3, #1
   82b2c:	617b      	str	r3, [r7, #20]
   82b2e:	697b      	ldr	r3, [r7, #20]
   82b30:	2b09      	cmp	r3, #9
   82b32:	d9e9      	bls.n	82b08 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   82b34:	68fb      	ldr	r3, [r7, #12]
   82b36:	2200      	movs	r2, #0
   82b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   82b3c:	687b      	ldr	r3, [r7, #4]
   82b3e:	2b04      	cmp	r3, #4
   82b40:	d901      	bls.n	82b46 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   82b42:	2304      	movs	r3, #4
   82b44:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   82b46:	68fb      	ldr	r3, [r7, #12]
   82b48:	687a      	ldr	r2, [r7, #4]
   82b4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   82b4c:	68fb      	ldr	r3, [r7, #12]
   82b4e:	687a      	ldr	r2, [r7, #4]
   82b50:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   82b52:	68fb      	ldr	r3, [r7, #12]
   82b54:	2200      	movs	r2, #0
   82b56:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   82b58:	68fb      	ldr	r3, [r7, #12]
   82b5a:	3304      	adds	r3, #4
   82b5c:	4618      	mov	r0, r3
   82b5e:	4b0a      	ldr	r3, [pc, #40]	; (82b88 <prvInitialiseTCBVariables+0x94>)
   82b60:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   82b62:	68fb      	ldr	r3, [r7, #12]
   82b64:	3318      	adds	r3, #24
   82b66:	4618      	mov	r0, r3
   82b68:	4b07      	ldr	r3, [pc, #28]	; (82b88 <prvInitialiseTCBVariables+0x94>)
   82b6a:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   82b6c:	68fb      	ldr	r3, [r7, #12]
   82b6e:	68fa      	ldr	r2, [r7, #12]
   82b70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82b72:	687b      	ldr	r3, [r7, #4]
   82b74:	f1c3 0205 	rsb	r2, r3, #5
   82b78:	68fb      	ldr	r3, [r7, #12]
   82b7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82b7c:	68fb      	ldr	r3, [r7, #12]
   82b7e:	68fa      	ldr	r2, [r7, #12]
   82b80:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   82b82:	3718      	adds	r7, #24
   82b84:	46bd      	mov	sp, r7
   82b86:	bd80      	pop	{r7, pc}
   82b88:	00081085 	.word	0x00081085

00082b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   82b8c:	b580      	push	{r7, lr}
   82b8e:	b082      	sub	sp, #8
   82b90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   82b92:	2300      	movs	r3, #0
   82b94:	607b      	str	r3, [r7, #4]
   82b96:	e00c      	b.n	82bb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   82b98:	687a      	ldr	r2, [r7, #4]
   82b9a:	4613      	mov	r3, r2
   82b9c:	009b      	lsls	r3, r3, #2
   82b9e:	4413      	add	r3, r2
   82ba0:	009b      	lsls	r3, r3, #2
   82ba2:	4a11      	ldr	r2, [pc, #68]	; (82be8 <prvInitialiseTaskLists+0x5c>)
   82ba4:	4413      	add	r3, r2
   82ba6:	4618      	mov	r0, r3
   82ba8:	4b10      	ldr	r3, [pc, #64]	; (82bec <prvInitialiseTaskLists+0x60>)
   82baa:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   82bac:	687b      	ldr	r3, [r7, #4]
   82bae:	3301      	adds	r3, #1
   82bb0:	607b      	str	r3, [r7, #4]
   82bb2:	687b      	ldr	r3, [r7, #4]
   82bb4:	2b04      	cmp	r3, #4
   82bb6:	d9ef      	bls.n	82b98 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   82bb8:	480d      	ldr	r0, [pc, #52]	; (82bf0 <prvInitialiseTaskLists+0x64>)
   82bba:	4b0c      	ldr	r3, [pc, #48]	; (82bec <prvInitialiseTaskLists+0x60>)
   82bbc:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   82bbe:	480d      	ldr	r0, [pc, #52]	; (82bf4 <prvInitialiseTaskLists+0x68>)
   82bc0:	4b0a      	ldr	r3, [pc, #40]	; (82bec <prvInitialiseTaskLists+0x60>)
   82bc2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   82bc4:	480c      	ldr	r0, [pc, #48]	; (82bf8 <prvInitialiseTaskLists+0x6c>)
   82bc6:	4b09      	ldr	r3, [pc, #36]	; (82bec <prvInitialiseTaskLists+0x60>)
   82bc8:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   82bca:	480c      	ldr	r0, [pc, #48]	; (82bfc <prvInitialiseTaskLists+0x70>)
   82bcc:	4b07      	ldr	r3, [pc, #28]	; (82bec <prvInitialiseTaskLists+0x60>)
   82bce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   82bd0:	480b      	ldr	r0, [pc, #44]	; (82c00 <prvInitialiseTaskLists+0x74>)
   82bd2:	4b06      	ldr	r3, [pc, #24]	; (82bec <prvInitialiseTaskLists+0x60>)
   82bd4:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82bd6:	4b0b      	ldr	r3, [pc, #44]	; (82c04 <prvInitialiseTaskLists+0x78>)
   82bd8:	4a05      	ldr	r2, [pc, #20]	; (82bf0 <prvInitialiseTaskLists+0x64>)
   82bda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   82bdc:	4b0a      	ldr	r3, [pc, #40]	; (82c08 <prvInitialiseTaskLists+0x7c>)
   82bde:	4a05      	ldr	r2, [pc, #20]	; (82bf4 <prvInitialiseTaskLists+0x68>)
   82be0:	601a      	str	r2, [r3, #0]
}
   82be2:	3708      	adds	r7, #8
   82be4:	46bd      	mov	sp, r7
   82be6:	bd80      	pop	{r7, pc}
   82be8:	2007a4e8 	.word	0x2007a4e8
   82bec:	00081045 	.word	0x00081045
   82bf0:	2007a54c 	.word	0x2007a54c
   82bf4:	2007a560 	.word	0x2007a560
   82bf8:	2007a57c 	.word	0x2007a57c
   82bfc:	2007a590 	.word	0x2007a590
   82c00:	2007a5a8 	.word	0x2007a5a8
   82c04:	2007a574 	.word	0x2007a574
   82c08:	2007a578 	.word	0x2007a578

00082c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   82c0c:	b580      	push	{r7, lr}
   82c0e:	b082      	sub	sp, #8
   82c10:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   82c12:	e028      	b.n	82c66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   82c14:	4b17      	ldr	r3, [pc, #92]	; (82c74 <prvCheckTasksWaitingTermination+0x68>)
   82c16:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   82c18:	4b17      	ldr	r3, [pc, #92]	; (82c78 <prvCheckTasksWaitingTermination+0x6c>)
   82c1a:	681b      	ldr	r3, [r3, #0]
   82c1c:	2b00      	cmp	r3, #0
   82c1e:	bf14      	ite	ne
   82c20:	2300      	movne	r3, #0
   82c22:	2301      	moveq	r3, #1
   82c24:	b2db      	uxtb	r3, r3
   82c26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   82c28:	4b14      	ldr	r3, [pc, #80]	; (82c7c <prvCheckTasksWaitingTermination+0x70>)
   82c2a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   82c2c:	687b      	ldr	r3, [r7, #4]
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d119      	bne.n	82c66 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   82c32:	4b13      	ldr	r3, [pc, #76]	; (82c80 <prvCheckTasksWaitingTermination+0x74>)
   82c34:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   82c36:	4b10      	ldr	r3, [pc, #64]	; (82c78 <prvCheckTasksWaitingTermination+0x6c>)
   82c38:	68db      	ldr	r3, [r3, #12]
   82c3a:	68db      	ldr	r3, [r3, #12]
   82c3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82c3e:	683b      	ldr	r3, [r7, #0]
   82c40:	3304      	adds	r3, #4
   82c42:	4618      	mov	r0, r3
   82c44:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <prvCheckTasksWaitingTermination+0x78>)
   82c46:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   82c48:	4b0f      	ldr	r3, [pc, #60]	; (82c88 <prvCheckTasksWaitingTermination+0x7c>)
   82c4a:	681b      	ldr	r3, [r3, #0]
   82c4c:	1e5a      	subs	r2, r3, #1
   82c4e:	4b0e      	ldr	r3, [pc, #56]	; (82c88 <prvCheckTasksWaitingTermination+0x7c>)
   82c50:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   82c52:	4b0e      	ldr	r3, [pc, #56]	; (82c8c <prvCheckTasksWaitingTermination+0x80>)
   82c54:	681b      	ldr	r3, [r3, #0]
   82c56:	1e5a      	subs	r2, r3, #1
   82c58:	4b0c      	ldr	r3, [pc, #48]	; (82c8c <prvCheckTasksWaitingTermination+0x80>)
   82c5a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   82c5c:	4b0c      	ldr	r3, [pc, #48]	; (82c90 <prvCheckTasksWaitingTermination+0x84>)
   82c5e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   82c60:	6838      	ldr	r0, [r7, #0]
   82c62:	4b0c      	ldr	r3, [pc, #48]	; (82c94 <prvCheckTasksWaitingTermination+0x88>)
   82c64:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   82c66:	4b09      	ldr	r3, [pc, #36]	; (82c8c <prvCheckTasksWaitingTermination+0x80>)
   82c68:	681b      	ldr	r3, [r3, #0]
   82c6a:	2b00      	cmp	r3, #0
   82c6c:	d1d2      	bne.n	82c14 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   82c6e:	3708      	adds	r7, #8
   82c70:	46bd      	mov	sp, r7
   82c72:	bd80      	pop	{r7, pc}
   82c74:	00082409 	.word	0x00082409
   82c78:	2007a590 	.word	0x2007a590
   82c7c:	00082425 	.word	0x00082425
   82c80:	00081351 	.word	0x00081351
   82c84:	00081155 	.word	0x00081155
   82c88:	2007a5bc 	.word	0x2007a5bc
   82c8c:	2007a5a4 	.word	0x2007a5a4
   82c90:	00081395 	.word	0x00081395
   82c94:	00082d79 	.word	0x00082d79

00082c98 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   82c98:	b580      	push	{r7, lr}
   82c9a:	b082      	sub	sp, #8
   82c9c:	af00      	add	r7, sp, #0
   82c9e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82ca0:	4b13      	ldr	r3, [pc, #76]	; (82cf0 <prvAddCurrentTaskToDelayedList+0x58>)
   82ca2:	681b      	ldr	r3, [r3, #0]
   82ca4:	687a      	ldr	r2, [r7, #4]
   82ca6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   82ca8:	4b12      	ldr	r3, [pc, #72]	; (82cf4 <prvAddCurrentTaskToDelayedList+0x5c>)
   82caa:	681b      	ldr	r3, [r3, #0]
   82cac:	687a      	ldr	r2, [r7, #4]
   82cae:	429a      	cmp	r2, r3
   82cb0:	d209      	bcs.n	82cc6 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   82cb2:	4b11      	ldr	r3, [pc, #68]	; (82cf8 <prvAddCurrentTaskToDelayedList+0x60>)
   82cb4:	681a      	ldr	r2, [r3, #0]
   82cb6:	4b0e      	ldr	r3, [pc, #56]	; (82cf0 <prvAddCurrentTaskToDelayedList+0x58>)
   82cb8:	681b      	ldr	r3, [r3, #0]
   82cba:	3304      	adds	r3, #4
   82cbc:	4610      	mov	r0, r2
   82cbe:	4619      	mov	r1, r3
   82cc0:	4b0e      	ldr	r3, [pc, #56]	; (82cfc <prvAddCurrentTaskToDelayedList+0x64>)
   82cc2:	4798      	blx	r3
   82cc4:	e010      	b.n	82ce8 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   82cc6:	4b0e      	ldr	r3, [pc, #56]	; (82d00 <prvAddCurrentTaskToDelayedList+0x68>)
   82cc8:	681a      	ldr	r2, [r3, #0]
   82cca:	4b09      	ldr	r3, [pc, #36]	; (82cf0 <prvAddCurrentTaskToDelayedList+0x58>)
   82ccc:	681b      	ldr	r3, [r3, #0]
   82cce:	3304      	adds	r3, #4
   82cd0:	4610      	mov	r0, r2
   82cd2:	4619      	mov	r1, r3
   82cd4:	4b09      	ldr	r3, [pc, #36]	; (82cfc <prvAddCurrentTaskToDelayedList+0x64>)
   82cd6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82cd8:	4b0a      	ldr	r3, [pc, #40]	; (82d04 <prvAddCurrentTaskToDelayedList+0x6c>)
   82cda:	681b      	ldr	r3, [r3, #0]
   82cdc:	687a      	ldr	r2, [r7, #4]
   82cde:	429a      	cmp	r2, r3
   82ce0:	d202      	bcs.n	82ce8 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   82ce2:	4b08      	ldr	r3, [pc, #32]	; (82d04 <prvAddCurrentTaskToDelayedList+0x6c>)
   82ce4:	687a      	ldr	r2, [r7, #4]
   82ce6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   82ce8:	3708      	adds	r7, #8
   82cea:	46bd      	mov	sp, r7
   82cec:	bd80      	pop	{r7, pc}
   82cee:	bf00      	nop
   82cf0:	2007a4e4 	.word	0x2007a4e4
   82cf4:	2007a5c0 	.word	0x2007a5c0
   82cf8:	2007a578 	.word	0x2007a578
   82cfc:	000810e5 	.word	0x000810e5
   82d00:	2007a574 	.word	0x2007a574
   82d04:	20070008 	.word	0x20070008

00082d08 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   82d08:	b580      	push	{r7, lr}
   82d0a:	b084      	sub	sp, #16
   82d0c:	af00      	add	r7, sp, #0
   82d0e:	4603      	mov	r3, r0
   82d10:	6039      	str	r1, [r7, #0]
   82d12:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   82d14:	2048      	movs	r0, #72	; 0x48
   82d16:	4b15      	ldr	r3, [pc, #84]	; (82d6c <prvAllocateTCBAndStack+0x64>)
   82d18:	4798      	blx	r3
   82d1a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   82d1c:	68fb      	ldr	r3, [r7, #12]
   82d1e:	2b00      	cmp	r3, #0
   82d20:	d01f      	beq.n	82d62 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82d22:	683b      	ldr	r3, [r7, #0]
   82d24:	2b00      	cmp	r3, #0
   82d26:	d106      	bne.n	82d36 <prvAllocateTCBAndStack+0x2e>
   82d28:	88fb      	ldrh	r3, [r7, #6]
   82d2a:	009b      	lsls	r3, r3, #2
   82d2c:	4618      	mov	r0, r3
   82d2e:	4b0f      	ldr	r3, [pc, #60]	; (82d6c <prvAllocateTCBAndStack+0x64>)
   82d30:	4798      	blx	r3
   82d32:	4603      	mov	r3, r0
   82d34:	e000      	b.n	82d38 <prvAllocateTCBAndStack+0x30>
   82d36:	683b      	ldr	r3, [r7, #0]
   82d38:	68fa      	ldr	r2, [r7, #12]
   82d3a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   82d3c:	68fb      	ldr	r3, [r7, #12]
   82d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d40:	2b00      	cmp	r3, #0
   82d42:	d105      	bne.n	82d50 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   82d44:	68f8      	ldr	r0, [r7, #12]
   82d46:	4b0a      	ldr	r3, [pc, #40]	; (82d70 <prvAllocateTCBAndStack+0x68>)
   82d48:	4798      	blx	r3
			pxNewTCB = NULL;
   82d4a:	2300      	movs	r3, #0
   82d4c:	60fb      	str	r3, [r7, #12]
   82d4e:	e008      	b.n	82d62 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   82d50:	68fb      	ldr	r3, [r7, #12]
   82d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82d54:	88fb      	ldrh	r3, [r7, #6]
   82d56:	009b      	lsls	r3, r3, #2
   82d58:	4610      	mov	r0, r2
   82d5a:	21a5      	movs	r1, #165	; 0xa5
   82d5c:	461a      	mov	r2, r3
   82d5e:	4b05      	ldr	r3, [pc, #20]	; (82d74 <prvAllocateTCBAndStack+0x6c>)
   82d60:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   82d62:	68fb      	ldr	r3, [r7, #12]
}
   82d64:	4618      	mov	r0, r3
   82d66:	3710      	adds	r7, #16
   82d68:	46bd      	mov	sp, r7
   82d6a:	bd80      	pop	{r7, pc}
   82d6c:	000814f1 	.word	0x000814f1
   82d70:	00081669 	.word	0x00081669
   82d74:	00083aa9 	.word	0x00083aa9

00082d78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   82d78:	b580      	push	{r7, lr}
   82d7a:	b082      	sub	sp, #8
   82d7c:	af00      	add	r7, sp, #0
   82d7e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   82d80:	687b      	ldr	r3, [r7, #4]
   82d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d84:	4618      	mov	r0, r3
   82d86:	4b04      	ldr	r3, [pc, #16]	; (82d98 <prvDeleteTCB+0x20>)
   82d88:	4798      	blx	r3
		vPortFree( pxTCB );
   82d8a:	6878      	ldr	r0, [r7, #4]
   82d8c:	4b02      	ldr	r3, [pc, #8]	; (82d98 <prvDeleteTCB+0x20>)
   82d8e:	4798      	blx	r3
	}
   82d90:	3708      	adds	r7, #8
   82d92:	46bd      	mov	sp, r7
   82d94:	bd80      	pop	{r7, pc}
   82d96:	bf00      	nop
   82d98:	00081669 	.word	0x00081669

00082d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   82d9c:	b480      	push	{r7}
   82d9e:	b083      	sub	sp, #12
   82da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82da2:	4b0e      	ldr	r3, [pc, #56]	; (82ddc <prvResetNextTaskUnblockTime+0x40>)
   82da4:	681b      	ldr	r3, [r3, #0]
   82da6:	681b      	ldr	r3, [r3, #0]
   82da8:	2b00      	cmp	r3, #0
   82daa:	d101      	bne.n	82db0 <prvResetNextTaskUnblockTime+0x14>
   82dac:	2301      	movs	r3, #1
   82dae:	e000      	b.n	82db2 <prvResetNextTaskUnblockTime+0x16>
   82db0:	2300      	movs	r3, #0
   82db2:	2b00      	cmp	r3, #0
   82db4:	d004      	beq.n	82dc0 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   82db6:	4b0a      	ldr	r3, [pc, #40]	; (82de0 <prvResetNextTaskUnblockTime+0x44>)
   82db8:	f04f 32ff 	mov.w	r2, #4294967295
   82dbc:	601a      	str	r2, [r3, #0]
   82dbe:	e008      	b.n	82dd2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82dc0:	4b06      	ldr	r3, [pc, #24]	; (82ddc <prvResetNextTaskUnblockTime+0x40>)
   82dc2:	681b      	ldr	r3, [r3, #0]
   82dc4:	68db      	ldr	r3, [r3, #12]
   82dc6:	68db      	ldr	r3, [r3, #12]
   82dc8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   82dca:	687b      	ldr	r3, [r7, #4]
   82dcc:	685a      	ldr	r2, [r3, #4]
   82dce:	4b04      	ldr	r3, [pc, #16]	; (82de0 <prvResetNextTaskUnblockTime+0x44>)
   82dd0:	601a      	str	r2, [r3, #0]
	}
}
   82dd2:	370c      	adds	r7, #12
   82dd4:	46bd      	mov	sp, r7
   82dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dda:	4770      	bx	lr
   82ddc:	2007a574 	.word	0x2007a574
   82de0:	20070008 	.word	0x20070008

00082de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   82de4:	b480      	push	{r7}
   82de6:	b083      	sub	sp, #12
   82de8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   82dea:	4b0b      	ldr	r3, [pc, #44]	; (82e18 <xTaskGetSchedulerState+0x34>)
   82dec:	681b      	ldr	r3, [r3, #0]
   82dee:	2b00      	cmp	r3, #0
   82df0:	d102      	bne.n	82df8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82df2:	2301      	movs	r3, #1
   82df4:	607b      	str	r3, [r7, #4]
   82df6:	e008      	b.n	82e0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82df8:	4b08      	ldr	r3, [pc, #32]	; (82e1c <xTaskGetSchedulerState+0x38>)
   82dfa:	681b      	ldr	r3, [r3, #0]
   82dfc:	2b00      	cmp	r3, #0
   82dfe:	d102      	bne.n	82e06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   82e00:	2302      	movs	r3, #2
   82e02:	607b      	str	r3, [r7, #4]
   82e04:	e001      	b.n	82e0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   82e06:	2300      	movs	r3, #0
   82e08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   82e0a:	687b      	ldr	r3, [r7, #4]
	}
   82e0c:	4618      	mov	r0, r3
   82e0e:	370c      	adds	r7, #12
   82e10:	46bd      	mov	sp, r7
   82e12:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e16:	4770      	bx	lr
   82e18:	2007a5c8 	.word	0x2007a5c8
   82e1c:	2007a5dc 	.word	0x2007a5dc

00082e20 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   82e20:	b580      	push	{r7, lr}
   82e22:	b084      	sub	sp, #16
   82e24:	af00      	add	r7, sp, #0
   82e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   82e28:	687b      	ldr	r3, [r7, #4]
   82e2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   82e2c:	687b      	ldr	r3, [r7, #4]
   82e2e:	2b00      	cmp	r3, #0
   82e30:	d062      	beq.n	82ef8 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   82e32:	68fb      	ldr	r3, [r7, #12]
   82e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e36:	4b32      	ldr	r3, [pc, #200]	; (82f00 <vTaskPriorityInherit+0xe0>)
   82e38:	681b      	ldr	r3, [r3, #0]
   82e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e3c:	429a      	cmp	r2, r3
   82e3e:	d25b      	bcs.n	82ef8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   82e40:	68fb      	ldr	r3, [r7, #12]
   82e42:	699b      	ldr	r3, [r3, #24]
   82e44:	2b00      	cmp	r3, #0
   82e46:	db06      	blt.n	82e56 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82e48:	4b2d      	ldr	r3, [pc, #180]	; (82f00 <vTaskPriorityInherit+0xe0>)
   82e4a:	681b      	ldr	r3, [r3, #0]
   82e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e4e:	f1c3 0205 	rsb	r2, r3, #5
   82e52:	68fb      	ldr	r3, [r7, #12]
   82e54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82e56:	68fb      	ldr	r3, [r7, #12]
   82e58:	6959      	ldr	r1, [r3, #20]
   82e5a:	68fb      	ldr	r3, [r7, #12]
   82e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e5e:	4613      	mov	r3, r2
   82e60:	009b      	lsls	r3, r3, #2
   82e62:	4413      	add	r3, r2
   82e64:	009b      	lsls	r3, r3, #2
   82e66:	4a27      	ldr	r2, [pc, #156]	; (82f04 <vTaskPriorityInherit+0xe4>)
   82e68:	4413      	add	r3, r2
   82e6a:	4299      	cmp	r1, r3
   82e6c:	d101      	bne.n	82e72 <vTaskPriorityInherit+0x52>
   82e6e:	2301      	movs	r3, #1
   82e70:	e000      	b.n	82e74 <vTaskPriorityInherit+0x54>
   82e72:	2300      	movs	r3, #0
   82e74:	2b00      	cmp	r3, #0
   82e76:	d03a      	beq.n	82eee <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82e78:	68fb      	ldr	r3, [r7, #12]
   82e7a:	3304      	adds	r3, #4
   82e7c:	4618      	mov	r0, r3
   82e7e:	4b22      	ldr	r3, [pc, #136]	; (82f08 <vTaskPriorityInherit+0xe8>)
   82e80:	4798      	blx	r3
   82e82:	4603      	mov	r3, r0
   82e84:	2b00      	cmp	r3, #0
   82e86:	d115      	bne.n	82eb4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   82e88:	68fb      	ldr	r3, [r7, #12]
   82e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e8c:	491d      	ldr	r1, [pc, #116]	; (82f04 <vTaskPriorityInherit+0xe4>)
   82e8e:	4613      	mov	r3, r2
   82e90:	009b      	lsls	r3, r3, #2
   82e92:	4413      	add	r3, r2
   82e94:	009b      	lsls	r3, r3, #2
   82e96:	440b      	add	r3, r1
   82e98:	681b      	ldr	r3, [r3, #0]
   82e9a:	2b00      	cmp	r3, #0
   82e9c:	d10a      	bne.n	82eb4 <vTaskPriorityInherit+0x94>
   82e9e:	68fb      	ldr	r3, [r7, #12]
   82ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ea2:	2201      	movs	r2, #1
   82ea4:	fa02 f303 	lsl.w	r3, r2, r3
   82ea8:	43da      	mvns	r2, r3
   82eaa:	4b18      	ldr	r3, [pc, #96]	; (82f0c <vTaskPriorityInherit+0xec>)
   82eac:	681b      	ldr	r3, [r3, #0]
   82eae:	401a      	ands	r2, r3
   82eb0:	4b16      	ldr	r3, [pc, #88]	; (82f0c <vTaskPriorityInherit+0xec>)
   82eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82eb4:	4b12      	ldr	r3, [pc, #72]	; (82f00 <vTaskPriorityInherit+0xe0>)
   82eb6:	681b      	ldr	r3, [r3, #0]
   82eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82eba:	68fb      	ldr	r3, [r7, #12]
   82ebc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   82ebe:	68fb      	ldr	r3, [r7, #12]
   82ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ec2:	2201      	movs	r2, #1
   82ec4:	409a      	lsls	r2, r3
   82ec6:	4b11      	ldr	r3, [pc, #68]	; (82f0c <vTaskPriorityInherit+0xec>)
   82ec8:	681b      	ldr	r3, [r3, #0]
   82eca:	431a      	orrs	r2, r3
   82ecc:	4b0f      	ldr	r3, [pc, #60]	; (82f0c <vTaskPriorityInherit+0xec>)
   82ece:	601a      	str	r2, [r3, #0]
   82ed0:	68fb      	ldr	r3, [r7, #12]
   82ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82ed4:	4613      	mov	r3, r2
   82ed6:	009b      	lsls	r3, r3, #2
   82ed8:	4413      	add	r3, r2
   82eda:	009b      	lsls	r3, r3, #2
   82edc:	4a09      	ldr	r2, [pc, #36]	; (82f04 <vTaskPriorityInherit+0xe4>)
   82ede:	441a      	add	r2, r3
   82ee0:	68fb      	ldr	r3, [r7, #12]
   82ee2:	3304      	adds	r3, #4
   82ee4:	4610      	mov	r0, r2
   82ee6:	4619      	mov	r1, r3
   82ee8:	4b09      	ldr	r3, [pc, #36]	; (82f10 <vTaskPriorityInherit+0xf0>)
   82eea:	4798      	blx	r3
   82eec:	e004      	b.n	82ef8 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82eee:	4b04      	ldr	r3, [pc, #16]	; (82f00 <vTaskPriorityInherit+0xe0>)
   82ef0:	681b      	ldr	r3, [r3, #0]
   82ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82ef4:	68fb      	ldr	r3, [r7, #12]
   82ef6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   82ef8:	3710      	adds	r7, #16
   82efa:	46bd      	mov	sp, r7
   82efc:	bd80      	pop	{r7, pc}
   82efe:	bf00      	nop
   82f00:	2007a4e4 	.word	0x2007a4e4
   82f04:	2007a4e8 	.word	0x2007a4e8
   82f08:	00081155 	.word	0x00081155
   82f0c:	2007a5c4 	.word	0x2007a5c4
   82f10:	0008109d 	.word	0x0008109d

00082f14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   82f14:	b580      	push	{r7, lr}
   82f16:	b084      	sub	sp, #16
   82f18:	af00      	add	r7, sp, #0
   82f1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   82f1c:	687b      	ldr	r3, [r7, #4]
   82f1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   82f20:	2300      	movs	r3, #0
   82f22:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   82f24:	687b      	ldr	r3, [r7, #4]
   82f26:	2b00      	cmp	r3, #0
   82f28:	d056      	beq.n	82fd8 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   82f2a:	68bb      	ldr	r3, [r7, #8]
   82f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82f2e:	2b00      	cmp	r3, #0
   82f30:	d102      	bne.n	82f38 <xTaskPriorityDisinherit+0x24>
   82f32:	4b2c      	ldr	r3, [pc, #176]	; (82fe4 <xTaskPriorityDisinherit+0xd0>)
   82f34:	4798      	blx	r3
   82f36:	e7fe      	b.n	82f36 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   82f38:	68bb      	ldr	r3, [r7, #8]
   82f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82f3c:	1e5a      	subs	r2, r3, #1
   82f3e:	68bb      	ldr	r3, [r7, #8]
   82f40:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82f42:	68bb      	ldr	r3, [r7, #8]
   82f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82f46:	68bb      	ldr	r3, [r7, #8]
   82f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82f4a:	429a      	cmp	r2, r3
   82f4c:	d044      	beq.n	82fd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   82f4e:	68bb      	ldr	r3, [r7, #8]
   82f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82f52:	2b00      	cmp	r3, #0
   82f54:	d140      	bne.n	82fd8 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82f56:	68bb      	ldr	r3, [r7, #8]
   82f58:	3304      	adds	r3, #4
   82f5a:	4618      	mov	r0, r3
   82f5c:	4b22      	ldr	r3, [pc, #136]	; (82fe8 <xTaskPriorityDisinherit+0xd4>)
   82f5e:	4798      	blx	r3
   82f60:	4603      	mov	r3, r0
   82f62:	2b00      	cmp	r3, #0
   82f64:	d115      	bne.n	82f92 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   82f66:	68bb      	ldr	r3, [r7, #8]
   82f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82f6a:	4920      	ldr	r1, [pc, #128]	; (82fec <xTaskPriorityDisinherit+0xd8>)
   82f6c:	4613      	mov	r3, r2
   82f6e:	009b      	lsls	r3, r3, #2
   82f70:	4413      	add	r3, r2
   82f72:	009b      	lsls	r3, r3, #2
   82f74:	440b      	add	r3, r1
   82f76:	681b      	ldr	r3, [r3, #0]
   82f78:	2b00      	cmp	r3, #0
   82f7a:	d10a      	bne.n	82f92 <xTaskPriorityDisinherit+0x7e>
   82f7c:	68bb      	ldr	r3, [r7, #8]
   82f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82f80:	2201      	movs	r2, #1
   82f82:	fa02 f303 	lsl.w	r3, r2, r3
   82f86:	43da      	mvns	r2, r3
   82f88:	4b19      	ldr	r3, [pc, #100]	; (82ff0 <xTaskPriorityDisinherit+0xdc>)
   82f8a:	681b      	ldr	r3, [r3, #0]
   82f8c:	401a      	ands	r2, r3
   82f8e:	4b18      	ldr	r3, [pc, #96]	; (82ff0 <xTaskPriorityDisinherit+0xdc>)
   82f90:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   82f92:	68bb      	ldr	r3, [r7, #8]
   82f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   82f96:	68bb      	ldr	r3, [r7, #8]
   82f98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82f9a:	68bb      	ldr	r3, [r7, #8]
   82f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82f9e:	f1c3 0205 	rsb	r2, r3, #5
   82fa2:	68bb      	ldr	r3, [r7, #8]
   82fa4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   82fa6:	68bb      	ldr	r3, [r7, #8]
   82fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82faa:	2201      	movs	r2, #1
   82fac:	409a      	lsls	r2, r3
   82fae:	4b10      	ldr	r3, [pc, #64]	; (82ff0 <xTaskPriorityDisinherit+0xdc>)
   82fb0:	681b      	ldr	r3, [r3, #0]
   82fb2:	431a      	orrs	r2, r3
   82fb4:	4b0e      	ldr	r3, [pc, #56]	; (82ff0 <xTaskPriorityDisinherit+0xdc>)
   82fb6:	601a      	str	r2, [r3, #0]
   82fb8:	68bb      	ldr	r3, [r7, #8]
   82fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82fbc:	4613      	mov	r3, r2
   82fbe:	009b      	lsls	r3, r3, #2
   82fc0:	4413      	add	r3, r2
   82fc2:	009b      	lsls	r3, r3, #2
   82fc4:	4a09      	ldr	r2, [pc, #36]	; (82fec <xTaskPriorityDisinherit+0xd8>)
   82fc6:	441a      	add	r2, r3
   82fc8:	68bb      	ldr	r3, [r7, #8]
   82fca:	3304      	adds	r3, #4
   82fcc:	4610      	mov	r0, r2
   82fce:	4619      	mov	r1, r3
   82fd0:	4b08      	ldr	r3, [pc, #32]	; (82ff4 <xTaskPriorityDisinherit+0xe0>)
   82fd2:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   82fd4:	2301      	movs	r3, #1
   82fd6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   82fd8:	68fb      	ldr	r3, [r7, #12]
	}
   82fda:	4618      	mov	r0, r3
   82fdc:	3710      	adds	r7, #16
   82fde:	46bd      	mov	sp, r7
   82fe0:	bd80      	pop	{r7, pc}
   82fe2:	bf00      	nop
   82fe4:	000813cd 	.word	0x000813cd
   82fe8:	00081155 	.word	0x00081155
   82fec:	2007a4e8 	.word	0x2007a4e8
   82ff0:	2007a5c4 	.word	0x2007a5c4
   82ff4:	0008109d 	.word	0x0008109d

00082ff8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   82ff8:	b480      	push	{r7}
   82ffa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   82ffc:	4b07      	ldr	r3, [pc, #28]	; (8301c <pvTaskIncrementMutexHeldCount+0x24>)
   82ffe:	681b      	ldr	r3, [r3, #0]
   83000:	2b00      	cmp	r3, #0
   83002:	d004      	beq.n	8300e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   83004:	4b05      	ldr	r3, [pc, #20]	; (8301c <pvTaskIncrementMutexHeldCount+0x24>)
   83006:	681b      	ldr	r3, [r3, #0]
   83008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   8300a:	3201      	adds	r2, #1
   8300c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   8300e:	4b03      	ldr	r3, [pc, #12]	; (8301c <pvTaskIncrementMutexHeldCount+0x24>)
   83010:	681b      	ldr	r3, [r3, #0]
	}
   83012:	4618      	mov	r0, r3
   83014:	46bd      	mov	sp, r7
   83016:	f85d 7b04 	ldr.w	r7, [sp], #4
   8301a:	4770      	bx	lr
   8301c:	2007a4e4 	.word	0x2007a4e4

00083020 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   83020:	b590      	push	{r4, r7, lr}
   83022:	b087      	sub	sp, #28
   83024:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   83026:	2300      	movs	r3, #0
   83028:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   8302a:	4b10      	ldr	r3, [pc, #64]	; (8306c <xTimerCreateTimerTask+0x4c>)
   8302c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8302e:	4b10      	ldr	r3, [pc, #64]	; (83070 <xTimerCreateTimerTask+0x50>)
   83030:	681b      	ldr	r3, [r3, #0]
   83032:	2b00      	cmp	r3, #0
   83034:	d00f      	beq.n	83056 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   83036:	2302      	movs	r3, #2
   83038:	9300      	str	r3, [sp, #0]
   8303a:	2300      	movs	r3, #0
   8303c:	9301      	str	r3, [sp, #4]
   8303e:	2300      	movs	r3, #0
   83040:	9302      	str	r3, [sp, #8]
   83042:	2300      	movs	r3, #0
   83044:	9303      	str	r3, [sp, #12]
   83046:	480b      	ldr	r0, [pc, #44]	; (83074 <xTimerCreateTimerTask+0x54>)
   83048:	490b      	ldr	r1, [pc, #44]	; (83078 <xTimerCreateTimerTask+0x58>)
   8304a:	f44f 7282 	mov.w	r2, #260	; 0x104
   8304e:	2300      	movs	r3, #0
   83050:	4c0a      	ldr	r4, [pc, #40]	; (8307c <xTimerCreateTimerTask+0x5c>)
   83052:	47a0      	blx	r4
   83054:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83056:	687b      	ldr	r3, [r7, #4]
   83058:	2b00      	cmp	r3, #0
   8305a:	d102      	bne.n	83062 <xTimerCreateTimerTask+0x42>
   8305c:	4b08      	ldr	r3, [pc, #32]	; (83080 <xTimerCreateTimerTask+0x60>)
   8305e:	4798      	blx	r3
   83060:	e7fe      	b.n	83060 <xTimerCreateTimerTask+0x40>
	return xReturn;
   83062:	687b      	ldr	r3, [r7, #4]
}
   83064:	4618      	mov	r0, r3
   83066:	370c      	adds	r7, #12
   83068:	46bd      	mov	sp, r7
   8306a:	bd90      	pop	{r4, r7, pc}
   8306c:	00083555 	.word	0x00083555
   83070:	2007a610 	.word	0x2007a610
   83074:	0008319d 	.word	0x0008319d
   83078:	00083c50 	.word	0x00083c50
   8307c:	00082209 	.word	0x00082209
   83080:	000813cd 	.word	0x000813cd

00083084 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   83084:	b590      	push	{r4, r7, lr}
   83086:	b089      	sub	sp, #36	; 0x24
   83088:	af00      	add	r7, sp, #0
   8308a:	60f8      	str	r0, [r7, #12]
   8308c:	60b9      	str	r1, [r7, #8]
   8308e:	607a      	str	r2, [r7, #4]
   83090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   83092:	2300      	movs	r3, #0
   83094:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83096:	4b1d      	ldr	r3, [pc, #116]	; (8310c <xTimerGenericCommand+0x88>)
   83098:	681b      	ldr	r3, [r3, #0]
   8309a:	2b00      	cmp	r3, #0
   8309c:	d030      	beq.n	83100 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8309e:	68bb      	ldr	r3, [r7, #8]
   830a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   830a2:	687b      	ldr	r3, [r7, #4]
   830a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   830a6:	68fb      	ldr	r3, [r7, #12]
   830a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   830aa:	68bb      	ldr	r3, [r7, #8]
   830ac:	2b05      	cmp	r3, #5
   830ae:	dc1c      	bgt.n	830ea <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   830b0:	4b17      	ldr	r3, [pc, #92]	; (83110 <xTimerGenericCommand+0x8c>)
   830b2:	4798      	blx	r3
   830b4:	4603      	mov	r3, r0
   830b6:	2b02      	cmp	r3, #2
   830b8:	d10b      	bne.n	830d2 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   830ba:	4b14      	ldr	r3, [pc, #80]	; (8310c <xTimerGenericCommand+0x88>)
   830bc:	681a      	ldr	r2, [r3, #0]
   830be:	f107 0310 	add.w	r3, r7, #16
   830c2:	4610      	mov	r0, r2
   830c4:	4619      	mov	r1, r3
   830c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   830c8:	2300      	movs	r3, #0
   830ca:	4c12      	ldr	r4, [pc, #72]	; (83114 <xTimerGenericCommand+0x90>)
   830cc:	47a0      	blx	r4
   830ce:	61f8      	str	r0, [r7, #28]
   830d0:	e016      	b.n	83100 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   830d2:	4b0e      	ldr	r3, [pc, #56]	; (8310c <xTimerGenericCommand+0x88>)
   830d4:	681a      	ldr	r2, [r3, #0]
   830d6:	f107 0310 	add.w	r3, r7, #16
   830da:	4610      	mov	r0, r2
   830dc:	4619      	mov	r1, r3
   830de:	2200      	movs	r2, #0
   830e0:	2300      	movs	r3, #0
   830e2:	4c0c      	ldr	r4, [pc, #48]	; (83114 <xTimerGenericCommand+0x90>)
   830e4:	47a0      	blx	r4
   830e6:	61f8      	str	r0, [r7, #28]
   830e8:	e00a      	b.n	83100 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   830ea:	4b08      	ldr	r3, [pc, #32]	; (8310c <xTimerGenericCommand+0x88>)
   830ec:	681a      	ldr	r2, [r3, #0]
   830ee:	f107 0310 	add.w	r3, r7, #16
   830f2:	4610      	mov	r0, r2
   830f4:	4619      	mov	r1, r3
   830f6:	683a      	ldr	r2, [r7, #0]
   830f8:	2300      	movs	r3, #0
   830fa:	4c07      	ldr	r4, [pc, #28]	; (83118 <xTimerGenericCommand+0x94>)
   830fc:	47a0      	blx	r4
   830fe:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   83100:	69fb      	ldr	r3, [r7, #28]
}
   83102:	4618      	mov	r0, r3
   83104:	3724      	adds	r7, #36	; 0x24
   83106:	46bd      	mov	sp, r7
   83108:	bd90      	pop	{r4, r7, pc}
   8310a:	bf00      	nop
   8310c:	2007a610 	.word	0x2007a610
   83110:	00082de5 	.word	0x00082de5
   83114:	000819d5 	.word	0x000819d5
   83118:	00081b99 	.word	0x00081b99

0008311c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   8311c:	b590      	push	{r4, r7, lr}
   8311e:	b087      	sub	sp, #28
   83120:	af02      	add	r7, sp, #8
   83122:	6078      	str	r0, [r7, #4]
   83124:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83126:	4b18      	ldr	r3, [pc, #96]	; (83188 <prvProcessExpiredTimer+0x6c>)
   83128:	681b      	ldr	r3, [r3, #0]
   8312a:	68db      	ldr	r3, [r3, #12]
   8312c:	68db      	ldr	r3, [r3, #12]
   8312e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83130:	68fb      	ldr	r3, [r7, #12]
   83132:	3304      	adds	r3, #4
   83134:	4618      	mov	r0, r3
   83136:	4b15      	ldr	r3, [pc, #84]	; (8318c <prvProcessExpiredTimer+0x70>)
   83138:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8313a:	68fb      	ldr	r3, [r7, #12]
   8313c:	69db      	ldr	r3, [r3, #28]
   8313e:	2b01      	cmp	r3, #1
   83140:	d11b      	bne.n	8317a <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83142:	68fb      	ldr	r3, [r7, #12]
   83144:	699a      	ldr	r2, [r3, #24]
   83146:	687b      	ldr	r3, [r7, #4]
   83148:	4413      	add	r3, r2
   8314a:	68f8      	ldr	r0, [r7, #12]
   8314c:	4619      	mov	r1, r3
   8314e:	683a      	ldr	r2, [r7, #0]
   83150:	687b      	ldr	r3, [r7, #4]
   83152:	4c0f      	ldr	r4, [pc, #60]	; (83190 <prvProcessExpiredTimer+0x74>)
   83154:	47a0      	blx	r4
   83156:	4603      	mov	r3, r0
   83158:	2b01      	cmp	r3, #1
   8315a:	d10e      	bne.n	8317a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8315c:	2300      	movs	r3, #0
   8315e:	9300      	str	r3, [sp, #0]
   83160:	68f8      	ldr	r0, [r7, #12]
   83162:	2100      	movs	r1, #0
   83164:	687a      	ldr	r2, [r7, #4]
   83166:	2300      	movs	r3, #0
   83168:	4c0a      	ldr	r4, [pc, #40]	; (83194 <prvProcessExpiredTimer+0x78>)
   8316a:	47a0      	blx	r4
   8316c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   8316e:	68bb      	ldr	r3, [r7, #8]
   83170:	2b00      	cmp	r3, #0
   83172:	d102      	bne.n	8317a <prvProcessExpiredTimer+0x5e>
   83174:	4b08      	ldr	r3, [pc, #32]	; (83198 <prvProcessExpiredTimer+0x7c>)
   83176:	4798      	blx	r3
   83178:	e7fe      	b.n	83178 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8317a:	68fb      	ldr	r3, [r7, #12]
   8317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8317e:	68f8      	ldr	r0, [r7, #12]
   83180:	4798      	blx	r3
}
   83182:	3714      	adds	r7, #20
   83184:	46bd      	mov	sp, r7
   83186:	bd90      	pop	{r4, r7, pc}
   83188:	2007a608 	.word	0x2007a608
   8318c:	00081155 	.word	0x00081155
   83190:	000832e1 	.word	0x000832e1
   83194:	00083085 	.word	0x00083085
   83198:	000813cd 	.word	0x000813cd

0008319c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8319c:	b580      	push	{r7, lr}
   8319e:	b084      	sub	sp, #16
   831a0:	af00      	add	r7, sp, #0
   831a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   831a4:	f107 0308 	add.w	r3, r7, #8
   831a8:	4618      	mov	r0, r3
   831aa:	4b05      	ldr	r3, [pc, #20]	; (831c0 <prvTimerTask+0x24>)
   831ac:	4798      	blx	r3
   831ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   831b0:	68bb      	ldr	r3, [r7, #8]
   831b2:	68f8      	ldr	r0, [r7, #12]
   831b4:	4619      	mov	r1, r3
   831b6:	4b03      	ldr	r3, [pc, #12]	; (831c4 <prvTimerTask+0x28>)
   831b8:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   831ba:	4b03      	ldr	r3, [pc, #12]	; (831c8 <prvTimerTask+0x2c>)
   831bc:	4798      	blx	r3
	}
   831be:	e7f1      	b.n	831a4 <prvTimerTask+0x8>
   831c0:	00083251 	.word	0x00083251
   831c4:	000831cd 	.word	0x000831cd
   831c8:	00083369 	.word	0x00083369

000831cc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   831cc:	b580      	push	{r7, lr}
   831ce:	b084      	sub	sp, #16
   831d0:	af00      	add	r7, sp, #0
   831d2:	6078      	str	r0, [r7, #4]
   831d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   831d6:	4b17      	ldr	r3, [pc, #92]	; (83234 <prvProcessTimerOrBlockTask+0x68>)
   831d8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   831da:	f107 0308 	add.w	r3, r7, #8
   831de:	4618      	mov	r0, r3
   831e0:	4b15      	ldr	r3, [pc, #84]	; (83238 <prvProcessTimerOrBlockTask+0x6c>)
   831e2:	4798      	blx	r3
   831e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   831e6:	68bb      	ldr	r3, [r7, #8]
   831e8:	2b00      	cmp	r3, #0
   831ea:	d11e      	bne.n	8322a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   831ec:	683b      	ldr	r3, [r7, #0]
   831ee:	2b00      	cmp	r3, #0
   831f0:	d10a      	bne.n	83208 <prvProcessTimerOrBlockTask+0x3c>
   831f2:	687a      	ldr	r2, [r7, #4]
   831f4:	68fb      	ldr	r3, [r7, #12]
   831f6:	429a      	cmp	r2, r3
   831f8:	d806      	bhi.n	83208 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   831fa:	4b10      	ldr	r3, [pc, #64]	; (8323c <prvProcessTimerOrBlockTask+0x70>)
   831fc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   831fe:	6878      	ldr	r0, [r7, #4]
   83200:	68f9      	ldr	r1, [r7, #12]
   83202:	4b0f      	ldr	r3, [pc, #60]	; (83240 <prvProcessTimerOrBlockTask+0x74>)
   83204:	4798      	blx	r3
   83206:	e012      	b.n	8322e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83208:	4b0e      	ldr	r3, [pc, #56]	; (83244 <prvProcessTimerOrBlockTask+0x78>)
   8320a:	681a      	ldr	r2, [r3, #0]
   8320c:	6879      	ldr	r1, [r7, #4]
   8320e:	68fb      	ldr	r3, [r7, #12]
   83210:	1acb      	subs	r3, r1, r3
   83212:	4610      	mov	r0, r2
   83214:	4619      	mov	r1, r3
   83216:	4b0c      	ldr	r3, [pc, #48]	; (83248 <prvProcessTimerOrBlockTask+0x7c>)
   83218:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8321a:	4b08      	ldr	r3, [pc, #32]	; (8323c <prvProcessTimerOrBlockTask+0x70>)
   8321c:	4798      	blx	r3
   8321e:	4603      	mov	r3, r0
   83220:	2b00      	cmp	r3, #0
   83222:	d104      	bne.n	8322e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83224:	4b09      	ldr	r3, [pc, #36]	; (8324c <prvProcessTimerOrBlockTask+0x80>)
   83226:	4798      	blx	r3
   83228:	e001      	b.n	8322e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   8322a:	4b04      	ldr	r3, [pc, #16]	; (8323c <prvProcessTimerOrBlockTask+0x70>)
   8322c:	4798      	blx	r3
		}
	}
}
   8322e:	3710      	adds	r7, #16
   83230:	46bd      	mov	sp, r7
   83232:	bd80      	pop	{r7, pc}
   83234:	00082409 	.word	0x00082409
   83238:	00083299 	.word	0x00083299
   8323c:	00082425 	.word	0x00082425
   83240:	0008311d 	.word	0x0008311d
   83244:	2007a610 	.word	0x2007a610
   83248:	000821a1 	.word	0x000821a1
   8324c:	00081331 	.word	0x00081331

00083250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   83250:	b480      	push	{r7}
   83252:	b085      	sub	sp, #20
   83254:	af00      	add	r7, sp, #0
   83256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83258:	4b0e      	ldr	r3, [pc, #56]	; (83294 <prvGetNextExpireTime+0x44>)
   8325a:	681b      	ldr	r3, [r3, #0]
   8325c:	681b      	ldr	r3, [r3, #0]
   8325e:	2b00      	cmp	r3, #0
   83260:	bf14      	ite	ne
   83262:	2300      	movne	r3, #0
   83264:	2301      	moveq	r3, #1
   83266:	b2db      	uxtb	r3, r3
   83268:	461a      	mov	r2, r3
   8326a:	687b      	ldr	r3, [r7, #4]
   8326c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8326e:	687b      	ldr	r3, [r7, #4]
   83270:	681b      	ldr	r3, [r3, #0]
   83272:	2b00      	cmp	r3, #0
   83274:	d105      	bne.n	83282 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83276:	4b07      	ldr	r3, [pc, #28]	; (83294 <prvGetNextExpireTime+0x44>)
   83278:	681b      	ldr	r3, [r3, #0]
   8327a:	68db      	ldr	r3, [r3, #12]
   8327c:	681b      	ldr	r3, [r3, #0]
   8327e:	60fb      	str	r3, [r7, #12]
   83280:	e001      	b.n	83286 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   83282:	2300      	movs	r3, #0
   83284:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   83286:	68fb      	ldr	r3, [r7, #12]
}
   83288:	4618      	mov	r0, r3
   8328a:	3714      	adds	r7, #20
   8328c:	46bd      	mov	sp, r7
   8328e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83292:	4770      	bx	lr
   83294:	2007a608 	.word	0x2007a608

00083298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   83298:	b580      	push	{r7, lr}
   8329a:	b084      	sub	sp, #16
   8329c:	af00      	add	r7, sp, #0
   8329e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   832a0:	4b0c      	ldr	r3, [pc, #48]	; (832d4 <prvSampleTimeNow+0x3c>)
   832a2:	4798      	blx	r3
   832a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   832a6:	4b0c      	ldr	r3, [pc, #48]	; (832d8 <prvSampleTimeNow+0x40>)
   832a8:	681b      	ldr	r3, [r3, #0]
   832aa:	68fa      	ldr	r2, [r7, #12]
   832ac:	429a      	cmp	r2, r3
   832ae:	d205      	bcs.n	832bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   832b0:	4b0a      	ldr	r3, [pc, #40]	; (832dc <prvSampleTimeNow+0x44>)
   832b2:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   832b4:	687b      	ldr	r3, [r7, #4]
   832b6:	2201      	movs	r2, #1
   832b8:	601a      	str	r2, [r3, #0]
   832ba:	e002      	b.n	832c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   832bc:	687b      	ldr	r3, [r7, #4]
   832be:	2200      	movs	r2, #0
   832c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   832c2:	4b05      	ldr	r3, [pc, #20]	; (832d8 <prvSampleTimeNow+0x40>)
   832c4:	68fa      	ldr	r2, [r7, #12]
   832c6:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   832c8:	68fb      	ldr	r3, [r7, #12]
}
   832ca:	4618      	mov	r0, r3
   832cc:	3710      	adds	r7, #16
   832ce:	46bd      	mov	sp, r7
   832d0:	bd80      	pop	{r7, pc}
   832d2:	bf00      	nop
   832d4:	00082549 	.word	0x00082549
   832d8:	2007a614 	.word	0x2007a614
   832dc:	00083495 	.word	0x00083495

000832e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   832e0:	b580      	push	{r7, lr}
   832e2:	b086      	sub	sp, #24
   832e4:	af00      	add	r7, sp, #0
   832e6:	60f8      	str	r0, [r7, #12]
   832e8:	60b9      	str	r1, [r7, #8]
   832ea:	607a      	str	r2, [r7, #4]
   832ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   832ee:	2300      	movs	r3, #0
   832f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   832f2:	68fb      	ldr	r3, [r7, #12]
   832f4:	68ba      	ldr	r2, [r7, #8]
   832f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   832f8:	68fb      	ldr	r3, [r7, #12]
   832fa:	68fa      	ldr	r2, [r7, #12]
   832fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   832fe:	68ba      	ldr	r2, [r7, #8]
   83300:	687b      	ldr	r3, [r7, #4]
   83302:	429a      	cmp	r2, r3
   83304:	d812      	bhi.n	8332c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   83306:	687a      	ldr	r2, [r7, #4]
   83308:	683b      	ldr	r3, [r7, #0]
   8330a:	1ad2      	subs	r2, r2, r3
   8330c:	68fb      	ldr	r3, [r7, #12]
   8330e:	699b      	ldr	r3, [r3, #24]
   83310:	429a      	cmp	r2, r3
   83312:	d302      	bcc.n	8331a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83314:	2301      	movs	r3, #1
   83316:	617b      	str	r3, [r7, #20]
   83318:	e01b      	b.n	83352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8331a:	4b10      	ldr	r3, [pc, #64]	; (8335c <prvInsertTimerInActiveList+0x7c>)
   8331c:	681a      	ldr	r2, [r3, #0]
   8331e:	68fb      	ldr	r3, [r7, #12]
   83320:	3304      	adds	r3, #4
   83322:	4610      	mov	r0, r2
   83324:	4619      	mov	r1, r3
   83326:	4b0e      	ldr	r3, [pc, #56]	; (83360 <prvInsertTimerInActiveList+0x80>)
   83328:	4798      	blx	r3
   8332a:	e012      	b.n	83352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8332c:	687a      	ldr	r2, [r7, #4]
   8332e:	683b      	ldr	r3, [r7, #0]
   83330:	429a      	cmp	r2, r3
   83332:	d206      	bcs.n	83342 <prvInsertTimerInActiveList+0x62>
   83334:	68ba      	ldr	r2, [r7, #8]
   83336:	683b      	ldr	r3, [r7, #0]
   83338:	429a      	cmp	r2, r3
   8333a:	d302      	bcc.n	83342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   8333c:	2301      	movs	r3, #1
   8333e:	617b      	str	r3, [r7, #20]
   83340:	e007      	b.n	83352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83342:	4b08      	ldr	r3, [pc, #32]	; (83364 <prvInsertTimerInActiveList+0x84>)
   83344:	681a      	ldr	r2, [r3, #0]
   83346:	68fb      	ldr	r3, [r7, #12]
   83348:	3304      	adds	r3, #4
   8334a:	4610      	mov	r0, r2
   8334c:	4619      	mov	r1, r3
   8334e:	4b04      	ldr	r3, [pc, #16]	; (83360 <prvInsertTimerInActiveList+0x80>)
   83350:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   83352:	697b      	ldr	r3, [r7, #20]
}
   83354:	4618      	mov	r0, r3
   83356:	3718      	adds	r7, #24
   83358:	46bd      	mov	sp, r7
   8335a:	bd80      	pop	{r7, pc}
   8335c:	2007a60c 	.word	0x2007a60c
   83360:	000810e5 	.word	0x000810e5
   83364:	2007a608 	.word	0x2007a608

00083368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   83368:	b590      	push	{r4, r7, lr}
   8336a:	b08b      	sub	sp, #44	; 0x2c
   8336c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   8336e:	e070      	b.n	83452 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   83370:	68bb      	ldr	r3, [r7, #8]
   83372:	2b00      	cmp	r3, #0
   83374:	db6d      	blt.n	83452 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   83376:	693b      	ldr	r3, [r7, #16]
   83378:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8337a:	69fb      	ldr	r3, [r7, #28]
   8337c:	695b      	ldr	r3, [r3, #20]
   8337e:	2b00      	cmp	r3, #0
   83380:	d004      	beq.n	8338c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83382:	69fb      	ldr	r3, [r7, #28]
   83384:	3304      	adds	r3, #4
   83386:	4618      	mov	r0, r3
   83388:	4b3a      	ldr	r3, [pc, #232]	; (83474 <prvProcessReceivedCommands+0x10c>)
   8338a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8338c:	1d3b      	adds	r3, r7, #4
   8338e:	4618      	mov	r0, r3
   83390:	4b39      	ldr	r3, [pc, #228]	; (83478 <prvProcessReceivedCommands+0x110>)
   83392:	4798      	blx	r3
   83394:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   83396:	68bb      	ldr	r3, [r7, #8]
   83398:	2b09      	cmp	r3, #9
   8339a:	d859      	bhi.n	83450 <prvProcessReceivedCommands+0xe8>
   8339c:	a201      	add	r2, pc, #4	; (adr r2, 833a4 <prvProcessReceivedCommands+0x3c>)
   8339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833a2:	bf00      	nop
   833a4:	000833cd 	.word	0x000833cd
   833a8:	000833cd 	.word	0x000833cd
   833ac:	000833cd 	.word	0x000833cd
   833b0:	00083451 	.word	0x00083451
   833b4:	0008341f 	.word	0x0008341f
   833b8:	00083449 	.word	0x00083449
   833bc:	000833cd 	.word	0x000833cd
   833c0:	000833cd 	.word	0x000833cd
   833c4:	00083451 	.word	0x00083451
   833c8:	0008341f 	.word	0x0008341f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   833cc:	68fa      	ldr	r2, [r7, #12]
   833ce:	69fb      	ldr	r3, [r7, #28]
   833d0:	699b      	ldr	r3, [r3, #24]
   833d2:	441a      	add	r2, r3
   833d4:	68fb      	ldr	r3, [r7, #12]
   833d6:	69f8      	ldr	r0, [r7, #28]
   833d8:	4611      	mov	r1, r2
   833da:	69ba      	ldr	r2, [r7, #24]
   833dc:	4c27      	ldr	r4, [pc, #156]	; (8347c <prvProcessReceivedCommands+0x114>)
   833de:	47a0      	blx	r4
   833e0:	4603      	mov	r3, r0
   833e2:	2b01      	cmp	r3, #1
   833e4:	d11a      	bne.n	8341c <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   833e6:	69fb      	ldr	r3, [r7, #28]
   833e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   833ea:	69f8      	ldr	r0, [r7, #28]
   833ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   833ee:	69fb      	ldr	r3, [r7, #28]
   833f0:	69db      	ldr	r3, [r3, #28]
   833f2:	2b01      	cmp	r3, #1
   833f4:	d112      	bne.n	8341c <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   833f6:	68fa      	ldr	r2, [r7, #12]
   833f8:	69fb      	ldr	r3, [r7, #28]
   833fa:	699b      	ldr	r3, [r3, #24]
   833fc:	4413      	add	r3, r2
   833fe:	2200      	movs	r2, #0
   83400:	9200      	str	r2, [sp, #0]
   83402:	69f8      	ldr	r0, [r7, #28]
   83404:	2100      	movs	r1, #0
   83406:	461a      	mov	r2, r3
   83408:	2300      	movs	r3, #0
   8340a:	4c1d      	ldr	r4, [pc, #116]	; (83480 <prvProcessReceivedCommands+0x118>)
   8340c:	47a0      	blx	r4
   8340e:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   83410:	697b      	ldr	r3, [r7, #20]
   83412:	2b00      	cmp	r3, #0
   83414:	d102      	bne.n	8341c <prvProcessReceivedCommands+0xb4>
   83416:	4b1b      	ldr	r3, [pc, #108]	; (83484 <prvProcessReceivedCommands+0x11c>)
   83418:	4798      	blx	r3
   8341a:	e7fe      	b.n	8341a <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   8341c:	e019      	b.n	83452 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   8341e:	68fa      	ldr	r2, [r7, #12]
   83420:	69fb      	ldr	r3, [r7, #28]
   83422:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83424:	69fb      	ldr	r3, [r7, #28]
   83426:	699b      	ldr	r3, [r3, #24]
   83428:	2b00      	cmp	r3, #0
   8342a:	d102      	bne.n	83432 <prvProcessReceivedCommands+0xca>
   8342c:	4b15      	ldr	r3, [pc, #84]	; (83484 <prvProcessReceivedCommands+0x11c>)
   8342e:	4798      	blx	r3
   83430:	e7fe      	b.n	83430 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83432:	69fb      	ldr	r3, [r7, #28]
   83434:	699a      	ldr	r2, [r3, #24]
   83436:	69bb      	ldr	r3, [r7, #24]
   83438:	4413      	add	r3, r2
   8343a:	69f8      	ldr	r0, [r7, #28]
   8343c:	4619      	mov	r1, r3
   8343e:	69ba      	ldr	r2, [r7, #24]
   83440:	69bb      	ldr	r3, [r7, #24]
   83442:	4c0e      	ldr	r4, [pc, #56]	; (8347c <prvProcessReceivedCommands+0x114>)
   83444:	47a0      	blx	r4
					break;
   83446:	e004      	b.n	83452 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   83448:	69f8      	ldr	r0, [r7, #28]
   8344a:	4b0f      	ldr	r3, [pc, #60]	; (83488 <prvProcessReceivedCommands+0x120>)
   8344c:	4798      	blx	r3
					break;
   8344e:	e000      	b.n	83452 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   83450:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83452:	4b0e      	ldr	r3, [pc, #56]	; (8348c <prvProcessReceivedCommands+0x124>)
   83454:	681a      	ldr	r2, [r3, #0]
   83456:	f107 0308 	add.w	r3, r7, #8
   8345a:	4610      	mov	r0, r2
   8345c:	4619      	mov	r1, r3
   8345e:	2200      	movs	r2, #0
   83460:	2300      	movs	r3, #0
   83462:	4c0b      	ldr	r4, [pc, #44]	; (83490 <prvProcessReceivedCommands+0x128>)
   83464:	47a0      	blx	r4
   83466:	4603      	mov	r3, r0
   83468:	2b00      	cmp	r3, #0
   8346a:	d181      	bne.n	83370 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   8346c:	3724      	adds	r7, #36	; 0x24
   8346e:	46bd      	mov	sp, r7
   83470:	bd90      	pop	{r4, r7, pc}
   83472:	bf00      	nop
   83474:	00081155 	.word	0x00081155
   83478:	00083299 	.word	0x00083299
   8347c:	000832e1 	.word	0x000832e1
   83480:	00083085 	.word	0x00083085
   83484:	000813cd 	.word	0x000813cd
   83488:	00081669 	.word	0x00081669
   8348c:	2007a610 	.word	0x2007a610
   83490:	00081c95 	.word	0x00081c95

00083494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   83494:	b590      	push	{r4, r7, lr}
   83496:	b089      	sub	sp, #36	; 0x24
   83498:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8349a:	e03d      	b.n	83518 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8349c:	4b27      	ldr	r3, [pc, #156]	; (8353c <prvSwitchTimerLists+0xa8>)
   8349e:	681b      	ldr	r3, [r3, #0]
   834a0:	68db      	ldr	r3, [r3, #12]
   834a2:	681b      	ldr	r3, [r3, #0]
   834a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   834a6:	4b25      	ldr	r3, [pc, #148]	; (8353c <prvSwitchTimerLists+0xa8>)
   834a8:	681b      	ldr	r3, [r3, #0]
   834aa:	68db      	ldr	r3, [r3, #12]
   834ac:	68db      	ldr	r3, [r3, #12]
   834ae:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   834b0:	693b      	ldr	r3, [r7, #16]
   834b2:	3304      	adds	r3, #4
   834b4:	4618      	mov	r0, r3
   834b6:	4b22      	ldr	r3, [pc, #136]	; (83540 <prvSwitchTimerLists+0xac>)
   834b8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   834ba:	693b      	ldr	r3, [r7, #16]
   834bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   834be:	6938      	ldr	r0, [r7, #16]
   834c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   834c2:	693b      	ldr	r3, [r7, #16]
   834c4:	69db      	ldr	r3, [r3, #28]
   834c6:	2b01      	cmp	r3, #1
   834c8:	d126      	bne.n	83518 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   834ca:	693b      	ldr	r3, [r7, #16]
   834cc:	699a      	ldr	r2, [r3, #24]
   834ce:	697b      	ldr	r3, [r7, #20]
   834d0:	4413      	add	r3, r2
   834d2:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   834d4:	68fa      	ldr	r2, [r7, #12]
   834d6:	697b      	ldr	r3, [r7, #20]
   834d8:	429a      	cmp	r2, r3
   834da:	d90e      	bls.n	834fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   834dc:	693b      	ldr	r3, [r7, #16]
   834de:	68fa      	ldr	r2, [r7, #12]
   834e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   834e2:	693b      	ldr	r3, [r7, #16]
   834e4:	693a      	ldr	r2, [r7, #16]
   834e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   834e8:	4b14      	ldr	r3, [pc, #80]	; (8353c <prvSwitchTimerLists+0xa8>)
   834ea:	681a      	ldr	r2, [r3, #0]
   834ec:	693b      	ldr	r3, [r7, #16]
   834ee:	3304      	adds	r3, #4
   834f0:	4610      	mov	r0, r2
   834f2:	4619      	mov	r1, r3
   834f4:	4b13      	ldr	r3, [pc, #76]	; (83544 <prvSwitchTimerLists+0xb0>)
   834f6:	4798      	blx	r3
   834f8:	e00e      	b.n	83518 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   834fa:	2300      	movs	r3, #0
   834fc:	9300      	str	r3, [sp, #0]
   834fe:	6938      	ldr	r0, [r7, #16]
   83500:	2100      	movs	r1, #0
   83502:	697a      	ldr	r2, [r7, #20]
   83504:	2300      	movs	r3, #0
   83506:	4c10      	ldr	r4, [pc, #64]	; (83548 <prvSwitchTimerLists+0xb4>)
   83508:	47a0      	blx	r4
   8350a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   8350c:	68bb      	ldr	r3, [r7, #8]
   8350e:	2b00      	cmp	r3, #0
   83510:	d102      	bne.n	83518 <prvSwitchTimerLists+0x84>
   83512:	4b0e      	ldr	r3, [pc, #56]	; (8354c <prvSwitchTimerLists+0xb8>)
   83514:	4798      	blx	r3
   83516:	e7fe      	b.n	83516 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83518:	4b08      	ldr	r3, [pc, #32]	; (8353c <prvSwitchTimerLists+0xa8>)
   8351a:	681b      	ldr	r3, [r3, #0]
   8351c:	681b      	ldr	r3, [r3, #0]
   8351e:	2b00      	cmp	r3, #0
   83520:	d1bc      	bne.n	8349c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   83522:	4b06      	ldr	r3, [pc, #24]	; (8353c <prvSwitchTimerLists+0xa8>)
   83524:	681b      	ldr	r3, [r3, #0]
   83526:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   83528:	4b09      	ldr	r3, [pc, #36]	; (83550 <prvSwitchTimerLists+0xbc>)
   8352a:	681a      	ldr	r2, [r3, #0]
   8352c:	4b03      	ldr	r3, [pc, #12]	; (8353c <prvSwitchTimerLists+0xa8>)
   8352e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   83530:	4b07      	ldr	r3, [pc, #28]	; (83550 <prvSwitchTimerLists+0xbc>)
   83532:	687a      	ldr	r2, [r7, #4]
   83534:	601a      	str	r2, [r3, #0]
}
   83536:	371c      	adds	r7, #28
   83538:	46bd      	mov	sp, r7
   8353a:	bd90      	pop	{r4, r7, pc}
   8353c:	2007a608 	.word	0x2007a608
   83540:	00081155 	.word	0x00081155
   83544:	000810e5 	.word	0x000810e5
   83548:	00083085 	.word	0x00083085
   8354c:	000813cd 	.word	0x000813cd
   83550:	2007a60c 	.word	0x2007a60c

00083554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83554:	b580      	push	{r7, lr}
   83556:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83558:	4b11      	ldr	r3, [pc, #68]	; (835a0 <prvCheckForValidListAndQueue+0x4c>)
   8355a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8355c:	4b11      	ldr	r3, [pc, #68]	; (835a4 <prvCheckForValidListAndQueue+0x50>)
   8355e:	681b      	ldr	r3, [r3, #0]
   83560:	2b00      	cmp	r3, #0
   83562:	d11a      	bne.n	8359a <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   83564:	4810      	ldr	r0, [pc, #64]	; (835a8 <prvCheckForValidListAndQueue+0x54>)
   83566:	4b11      	ldr	r3, [pc, #68]	; (835ac <prvCheckForValidListAndQueue+0x58>)
   83568:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   8356a:	4811      	ldr	r0, [pc, #68]	; (835b0 <prvCheckForValidListAndQueue+0x5c>)
   8356c:	4b0f      	ldr	r3, [pc, #60]	; (835ac <prvCheckForValidListAndQueue+0x58>)
   8356e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   83570:	4b10      	ldr	r3, [pc, #64]	; (835b4 <prvCheckForValidListAndQueue+0x60>)
   83572:	4a0d      	ldr	r2, [pc, #52]	; (835a8 <prvCheckForValidListAndQueue+0x54>)
   83574:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83576:	4b10      	ldr	r3, [pc, #64]	; (835b8 <prvCheckForValidListAndQueue+0x64>)
   83578:	4a0d      	ldr	r2, [pc, #52]	; (835b0 <prvCheckForValidListAndQueue+0x5c>)
   8357a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   8357c:	2005      	movs	r0, #5
   8357e:	210c      	movs	r1, #12
   83580:	2200      	movs	r2, #0
   83582:	4b0e      	ldr	r3, [pc, #56]	; (835bc <prvCheckForValidListAndQueue+0x68>)
   83584:	4798      	blx	r3
   83586:	4602      	mov	r2, r0
   83588:	4b06      	ldr	r3, [pc, #24]	; (835a4 <prvCheckForValidListAndQueue+0x50>)
   8358a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   8358c:	4b05      	ldr	r3, [pc, #20]	; (835a4 <prvCheckForValidListAndQueue+0x50>)
   8358e:	681b      	ldr	r3, [r3, #0]
   83590:	2b00      	cmp	r3, #0
   83592:	d102      	bne.n	8359a <prvCheckForValidListAndQueue+0x46>
   83594:	4b0a      	ldr	r3, [pc, #40]	; (835c0 <prvCheckForValidListAndQueue+0x6c>)
   83596:	4798      	blx	r3
   83598:	e7fe      	b.n	83598 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8359a:	4b0a      	ldr	r3, [pc, #40]	; (835c4 <prvCheckForValidListAndQueue+0x70>)
   8359c:	4798      	blx	r3
}
   8359e:	bd80      	pop	{r7, pc}
   835a0:	00081351 	.word	0x00081351
   835a4:	2007a610 	.word	0x2007a610
   835a8:	2007a5e0 	.word	0x2007a5e0
   835ac:	00081045 	.word	0x00081045
   835b0:	2007a5f4 	.word	0x2007a5f4
   835b4:	2007a608 	.word	0x2007a608
   835b8:	2007a60c 	.word	0x2007a60c
   835bc:	00081949 	.word	0x00081949
   835c0:	000813cd 	.word	0x000813cd
   835c4:	00081395 	.word	0x00081395

000835c8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   835c8:	b480      	push	{r7}
   835ca:	b085      	sub	sp, #20
   835cc:	af00      	add	r7, sp, #0
   835ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   835d0:	687b      	ldr	r3, [r7, #4]
   835d2:	f003 0307 	and.w	r3, r3, #7
   835d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   835d8:	4b0c      	ldr	r3, [pc, #48]	; (8360c <NVIC_SetPriorityGrouping+0x44>)
   835da:	68db      	ldr	r3, [r3, #12]
   835dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   835de:	68ba      	ldr	r2, [r7, #8]
   835e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   835e4:	4013      	ands	r3, r2
   835e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   835e8:	68fb      	ldr	r3, [r7, #12]
   835ea:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   835ec:	68bb      	ldr	r3, [r7, #8]
   835ee:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   835f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   835f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   835f8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   835fa:	4b04      	ldr	r3, [pc, #16]	; (8360c <NVIC_SetPriorityGrouping+0x44>)
   835fc:	68ba      	ldr	r2, [r7, #8]
   835fe:	60da      	str	r2, [r3, #12]
}
   83600:	3714      	adds	r7, #20
   83602:	46bd      	mov	sp, r7
   83604:	f85d 7b04 	ldr.w	r7, [sp], #4
   83608:	4770      	bx	lr
   8360a:	bf00      	nop
   8360c:	e000ed00 	.word	0xe000ed00

00083610 <main>:

/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
   83610:	b580      	push	{r7, lr}
   83612:	af00      	add	r7, sp, #0
	prvSetupHardware();
   83614:	4b06      	ldr	r3, [pc, #24]	; (83630 <main+0x20>)
   83616:	4798      	blx	r3
	of this file. */
	#if mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1
	{
// 		vParTestToggleLED(0);
//		vParTestToggleLED(1);
		vParTestToggleLED(2);		//Detects if the pin corresponding to LED0 has been set? (look at pin sections)
   83618:	2002      	movs	r0, #2
   8361a:	4b06      	ldr	r3, [pc, #24]	; (83634 <main+0x24>)
   8361c:	4798      	blx	r3
		vParTestToggleLED(3);
   8361e:	2003      	movs	r0, #3
   83620:	4b04      	ldr	r3, [pc, #16]	; (83634 <main+0x24>)
   83622:	4798      	blx	r3
		//{
			//
			//i++;
		//}
		
		my_blink();
   83624:	4b04      	ldr	r3, [pc, #16]	; (83638 <main+0x28>)
   83626:	4798      	blx	r3
	{
		main_full();
	}
	#endif

	return 0;
   83628:	2300      	movs	r3, #0
}
   8362a:	4618      	mov	r0, r3
   8362c:	bd80      	pop	{r7, pc}
   8362e:	bf00      	nop
   83630:	0008363d 	.word	0x0008363d
   83634:	000837f9 	.word	0x000837f9
   83638:	00083689 	.word	0x00083689

0008363c <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
   8363c:	b580      	push	{r7, lr}
   8363e:	af00      	add	r7, sp, #0
extern void SystemCoreClockUpdate( void );

	/* ASF function to setup clocking. */
	sysclk_init();
   83640:	4b04      	ldr	r3, [pc, #16]	; (83654 <prvSetupHardware+0x18>)
   83642:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping( 0 );
   83644:	2000      	movs	r0, #0
   83646:	4b04      	ldr	r3, [pc, #16]	; (83658 <prvSetupHardware+0x1c>)
   83648:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   8364a:	4b04      	ldr	r3, [pc, #16]	; (8365c <prvSetupHardware+0x20>)
   8364c:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   8364e:	4b04      	ldr	r3, [pc, #16]	; (83660 <prvSetupHardware+0x24>)
   83650:	4798      	blx	r3
}
   83652:	bd80      	pop	{r7, pc}
   83654:	00080431 	.word	0x00080431
   83658:	000835c9 	.word	0x000835c9
   8365c:	00080499 	.word	0x00080499
   83660:	00083741 	.word	0x00083741

00083664 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   83664:	b580      	push	{r7, lr}
   83666:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   83668:	4b01      	ldr	r3, [pc, #4]	; (83670 <vApplicationMallocFailedHook+0xc>)
   8366a:	4798      	blx	r3
	for( ;; );
   8366c:	e7fe      	b.n	8366c <vApplicationMallocFailedHook+0x8>
   8366e:	bf00      	nop
   83670:	000813cd 	.word	0x000813cd

00083674 <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
   83674:	b580      	push	{r7, lr}
   83676:	b082      	sub	sp, #8
   83678:	af00      	add	r7, sp, #0
   8367a:	6078      	str	r0, [r7, #4]
   8367c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   8367e:	4b01      	ldr	r3, [pc, #4]	; (83684 <vApplicationStackOverflowHook+0x10>)
   83680:	4798      	blx	r3
	for( ;; );
   83682:	e7fe      	b.n	83682 <vApplicationStackOverflowHook+0xe>
   83684:	000813cd 	.word	0x000813cd

00083688 <my_blink>:
//static QueueHandle_t xQueue1 = NULL;
//static QueueHandle_t xQueue2 = NULL;


void my_blink( void )
{
   83688:	b590      	push	{r4, r7, lr}
   8368a:	b085      	sub	sp, #20
   8368c:	af04      	add	r7, sp, #16
		//xQueue1 = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );		// Create Queue1
		//xQueue2 = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );		// Create Queue2
		
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvTurnOnTask,					/* The function that implements the task. */
   8368e:	2301      	movs	r3, #1
   83690:	9300      	str	r3, [sp, #0]
   83692:	2300      	movs	r3, #0
   83694:	9301      	str	r3, [sp, #4]
   83696:	2300      	movs	r3, #0
   83698:	9302      	str	r3, [sp, #8]
   8369a:	2300      	movs	r3, #0
   8369c:	9303      	str	r3, [sp, #12]
   8369e:	480c      	ldr	r0, [pc, #48]	; (836d0 <my_blink+0x48>)
   836a0:	490c      	ldr	r1, [pc, #48]	; (836d4 <my_blink+0x4c>)
   836a2:	2282      	movs	r2, #130	; 0x82
   836a4:	f241 2334 	movw	r3, #4660	; 0x1234
   836a8:	4c0b      	ldr	r4, [pc, #44]	; (836d8 <my_blink+0x50>)
   836aa:	47a0      	blx	r4
					configMINIMAL_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
					( void * ) TurnOn_PARAMETER, /* The parameter passed to the task - just to check the functionality. */
					TurnOn_TASK_PRIORITY, 		/* The priority assigned to the task. */
					NULL );									/* The task handle is not required, so NULL is passed. */

		xTaskCreate( prvTurnOffTask, 
   836ac:	2301      	movs	r3, #1
   836ae:	9300      	str	r3, [sp, #0]
   836b0:	2300      	movs	r3, #0
   836b2:	9301      	str	r3, [sp, #4]
   836b4:	2300      	movs	r3, #0
   836b6:	9302      	str	r3, [sp, #8]
   836b8:	2300      	movs	r3, #0
   836ba:	9303      	str	r3, [sp, #12]
   836bc:	4807      	ldr	r0, [pc, #28]	; (836dc <my_blink+0x54>)
   836be:	4908      	ldr	r1, [pc, #32]	; (836e0 <my_blink+0x58>)
   836c0:	2282      	movs	r2, #130	; 0x82
   836c2:	f245 6378 	movw	r3, #22136	; 0x5678
   836c6:	4c04      	ldr	r4, [pc, #16]	; (836d8 <my_blink+0x50>)
   836c8:	47a0      	blx	r4
					 ( void * ) TurnOff_PARAMETER, 
					 TurnOn_TASK_PRIORITY, 
					 NULL );
					 
		/* Start the tasks and timer running. */
		vTaskStartScheduler();
   836ca:	4b06      	ldr	r3, [pc, #24]	; (836e4 <my_blink+0x5c>)
   836cc:	4798      	blx	r3
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	for( ;; );
   836ce:	e7fe      	b.n	836ce <my_blink+0x46>
   836d0:	000836e9 	.word	0x000836e9
   836d4:	00083c58 	.word	0x00083c58
   836d8:	00082209 	.word	0x00082209
   836dc:	00083715 	.word	0x00083715
   836e0:	00083c5c 	.word	0x00083c5c
   836e4:	00082389 	.word	0x00082389

000836e8 <prvTurnOnTask>:
}
/*-----------------------------------------------------------*/

static void prvTurnOnTask( void *pvParameters )
{
   836e8:	b580      	push	{r7, lr}
   836ea:	b082      	sub	sp, #8
   836ec:	af00      	add	r7, sp, #0
   836ee:	6078      	str	r0, [r7, #4]
	//const unsigned long send_int = 100UL;	// Send  = '1'
	//unsigned long led_flag = 100UL;
	//const TickType_t  del = 3;
	
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   836f0:	687a      	ldr	r2, [r7, #4]
   836f2:	f241 2334 	movw	r3, #4660	; 0x1234
   836f6:	429a      	cmp	r2, r3
   836f8:	d002      	beq.n	83700 <prvTurnOnTask+0x18>
   836fa:	4b04      	ldr	r3, [pc, #16]	; (8370c <prvTurnOnTask+0x24>)
   836fc:	4798      	blx	r3
   836fe:	e7fe      	b.n	836fe <prvTurnOnTask+0x16>
				//vParTestToggleLED( 0 );
				//vTaskDelay(del);
			//}
			//
		//xQueueReceive( xQueue1, &led_flag, portMAX_DELAY );
		vParTestSetLED( 0, 1 );
   83700:	2000      	movs	r0, #0
   83702:	2101      	movs	r1, #1
   83704:	4b02      	ldr	r3, [pc, #8]	; (83710 <prvTurnOnTask+0x28>)
   83706:	4798      	blx	r3
	}
   83708:	e7fa      	b.n	83700 <prvTurnOnTask+0x18>
   8370a:	bf00      	nop
   8370c:	000813cd 	.word	0x000813cd
   83710:	00083785 	.word	0x00083785

00083714 <prvTurnOffTask>:
}
/*-----------------------------------------------------------*/

static void prvTurnOffTask( void *pvParameters )
{
   83714:	b580      	push	{r7, lr}
   83716:	b082      	sub	sp, #8
   83718:	af00      	add	r7, sp, #0
   8371a:	6078      	str	r0, [r7, #4]
	//const unsigned long send_int = 100UL;	// Send  = '1'
	//unsigned long led_flag = 0UL;
	//const TickType_t  del = 3;
	
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   8371c:	687a      	ldr	r2, [r7, #4]
   8371e:	f245 6378 	movw	r3, #22136	; 0x5678
   83722:	429a      	cmp	r2, r3
   83724:	d002      	beq.n	8372c <prvTurnOffTask+0x18>
   83726:	4b04      	ldr	r3, [pc, #16]	; (83738 <prvTurnOffTask+0x24>)
   83728:	4798      	blx	r3
   8372a:	e7fe      	b.n	8372a <prvTurnOffTask+0x16>
				//vParTestToggleLED( 0 );
			//}
			//
		//}
		//xQueueReceive( xQueue2, &led_flag, portMAX_DELAY );
		vParTestSetLED( 0, 0 );
   8372c:	2000      	movs	r0, #0
   8372e:	2100      	movs	r1, #0
   83730:	4b02      	ldr	r3, [pc, #8]	; (8373c <prvTurnOffTask+0x28>)
   83732:	4798      	blx	r3
	}
   83734:	e7fa      	b.n	8372c <prvTurnOffTask+0x18>
   83736:	bf00      	nop
   83738:	000813cd 	.word	0x000813cd
   8373c:	00083785 	.word	0x00083785

00083740 <vParTestInitialise>:
static const uint32_t ulLED[] = { LED2_GPIO, LED0_GPIO, LED1_GPIO };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
   83740:	b580      	push	{r7, lr}
   83742:	b082      	sub	sp, #8
   83744:	af00      	add	r7, sp, #0
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   83746:	2300      	movs	r3, #0
   83748:	607b      	str	r3, [r7, #4]
   8374a:	e00f      	b.n	8376c <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   8374c:	4b0a      	ldr	r3, [pc, #40]	; (83778 <vParTestInitialise+0x38>)
   8374e:	687a      	ldr	r2, [r7, #4]
   83750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83754:	4618      	mov	r0, r3
   83756:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8375a:	4b08      	ldr	r3, [pc, #32]	; (8377c <vParTestInitialise+0x3c>)
   8375c:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8375e:	6878      	ldr	r0, [r7, #4]
   83760:	2100      	movs	r1, #0
   83762:	4b07      	ldr	r3, [pc, #28]	; (83780 <vParTestInitialise+0x40>)
   83764:	4798      	blx	r3

void vParTestInitialise( void )
{
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   83766:	687b      	ldr	r3, [r7, #4]
   83768:	3301      	adds	r3, #1
   8376a:	607b      	str	r3, [r7, #4]
   8376c:	687b      	ldr	r3, [r7, #4]
   8376e:	2b02      	cmp	r3, #2
   83770:	d9ec      	bls.n	8374c <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   83772:	3708      	adds	r7, #8
   83774:	46bd      	mov	sp, r7
   83776:	bd80      	pop	{r7, pc}
   83778:	00083c60 	.word	0x00083c60
   8377c:	000807c1 	.word	0x000807c1
   83780:	00083785 	.word	0x00083785

00083784 <vParTestSetLED>:
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   83784:	b580      	push	{r7, lr}
   83786:	b082      	sub	sp, #8
   83788:	af00      	add	r7, sp, #0
   8378a:	6078      	str	r0, [r7, #4]
   8378c:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8378e:	687b      	ldr	r3, [r7, #4]
   83790:	2b02      	cmp	r3, #2
   83792:	d823      	bhi.n	837dc <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   83794:	687b      	ldr	r3, [r7, #4]
   83796:	2b00      	cmp	r3, #0
   83798:	d106      	bne.n	837a8 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8379a:	683b      	ldr	r3, [r7, #0]
   8379c:	2b00      	cmp	r3, #0
   8379e:	bf14      	ite	ne
   837a0:	2300      	movne	r3, #0
   837a2:	2301      	moveq	r3, #1
   837a4:	b2db      	uxtb	r3, r3
   837a6:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   837a8:	683b      	ldr	r3, [r7, #0]
   837aa:	2b00      	cmp	r3, #0
   837ac:	d00b      	beq.n	837c6 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   837ae:	4b0d      	ldr	r3, [pc, #52]	; (837e4 <vParTestSetLED+0x60>)
   837b0:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   837b2:	4b0d      	ldr	r3, [pc, #52]	; (837e8 <vParTestSetLED+0x64>)
   837b4:	687a      	ldr	r2, [r7, #4]
   837b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   837ba:	4618      	mov	r0, r3
   837bc:	4b0b      	ldr	r3, [pc, #44]	; (837ec <vParTestSetLED+0x68>)
   837be:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   837c0:	4b0b      	ldr	r3, [pc, #44]	; (837f0 <vParTestSetLED+0x6c>)
   837c2:	4798      	blx	r3
   837c4:	e00a      	b.n	837dc <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   837c6:	4b07      	ldr	r3, [pc, #28]	; (837e4 <vParTestSetLED+0x60>)
   837c8:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   837ca:	4b07      	ldr	r3, [pc, #28]	; (837e8 <vParTestSetLED+0x64>)
   837cc:	687a      	ldr	r2, [r7, #4]
   837ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   837d2:	4618      	mov	r0, r3
   837d4:	4b07      	ldr	r3, [pc, #28]	; (837f4 <vParTestSetLED+0x70>)
   837d6:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   837d8:	4b05      	ldr	r3, [pc, #20]	; (837f0 <vParTestSetLED+0x6c>)
   837da:	4798      	blx	r3
		}
	}
}
   837dc:	3708      	adds	r7, #8
   837de:	46bd      	mov	sp, r7
   837e0:	bd80      	pop	{r7, pc}
   837e2:	bf00      	nop
   837e4:	00081351 	.word	0x00081351
   837e8:	00083c60 	.word	0x00083c60
   837ec:	0008072d 	.word	0x0008072d
   837f0:	00081395 	.word	0x00081395
   837f4:	000806f9 	.word	0x000806f9

000837f8 <vParTestToggleLED>:
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
   837f8:	b580      	push	{r7, lr}
   837fa:	b082      	sub	sp, #8
   837fc:	af00      	add	r7, sp, #0
   837fe:	6078      	str	r0, [r7, #4]
	if( uxLED < partestNUM_LEDS )
   83800:	687b      	ldr	r3, [r7, #4]
   83802:	2b02      	cmp	r3, #2
   83804:	d80a      	bhi.n	8381c <vParTestToggleLED+0x24>
	{
		taskENTER_CRITICAL();
   83806:	4b07      	ldr	r3, [pc, #28]	; (83824 <vParTestToggleLED+0x2c>)
   83808:	4798      	blx	r3
		{
			gpio_toggle_pin( ulLED[ uxLED ] );
   8380a:	4b07      	ldr	r3, [pc, #28]	; (83828 <vParTestToggleLED+0x30>)
   8380c:	687a      	ldr	r2, [r7, #4]
   8380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83812:	4618      	mov	r0, r3
   83814:	4b05      	ldr	r3, [pc, #20]	; (8382c <vParTestToggleLED+0x34>)
   83816:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
   83818:	4b05      	ldr	r3, [pc, #20]	; (83830 <vParTestToggleLED+0x38>)
   8381a:	4798      	blx	r3
	}
}
   8381c:	3708      	adds	r7, #8
   8381e:	46bd      	mov	sp, r7
   83820:	bd80      	pop	{r7, pc}
   83822:	bf00      	nop
   83824:	00081351 	.word	0x00081351
   83828:	00083c60 	.word	0x00083c60
   8382c:	00080761 	.word	0x00080761
   83830:	00081395 	.word	0x00081395

00083834 <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   83834:	b590      	push	{r4, r7, lr}
   83836:	b087      	sub	sp, #28
   83838:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   8383a:	2300      	movs	r3, #0
   8383c:	60fb      	str	r3, [r7, #12]
uint8_t ucChar;
uint32_t ulChar;
uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   8383e:	4826      	ldr	r0, [pc, #152]	; (838d8 <USART0_Handler+0xa4>)
   83840:	4b26      	ldr	r3, [pc, #152]	; (838dc <USART0_Handler+0xa8>)
   83842:	4798      	blx	r3
   83844:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   83846:	4824      	ldr	r0, [pc, #144]	; (838d8 <USART0_Handler+0xa4>)
   83848:	4b25      	ldr	r3, [pc, #148]	; (838e0 <USART0_Handler+0xac>)
   8384a:	4798      	blx	r3
   8384c:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   8384e:	697a      	ldr	r2, [r7, #20]
   83850:	693b      	ldr	r3, [r7, #16]
   83852:	4013      	ands	r3, r2
   83854:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   83856:	697b      	ldr	r3, [r7, #20]
   83858:	f003 0302 	and.w	r3, r3, #2
   8385c:	2b00      	cmp	r3, #0
   8385e:	d017      	beq.n	83890 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   83860:	4b20      	ldr	r3, [pc, #128]	; (838e4 <USART0_Handler+0xb0>)
   83862:	6819      	ldr	r1, [r3, #0]
   83864:	f107 020b 	add.w	r2, r7, #11
   83868:	f107 030c 	add.w	r3, r7, #12
   8386c:	4608      	mov	r0, r1
   8386e:	4611      	mov	r1, r2
   83870:	461a      	mov	r2, r3
   83872:	4b1d      	ldr	r3, [pc, #116]	; (838e8 <USART0_Handler+0xb4>)
   83874:	4798      	blx	r3
   83876:	4603      	mov	r3, r0
   83878:	2b01      	cmp	r3, #1
   8387a:	d105      	bne.n	83888 <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   8387c:	7afb      	ldrb	r3, [r7, #11]
   8387e:	4816      	ldr	r0, [pc, #88]	; (838d8 <USART0_Handler+0xa4>)
   83880:	4619      	mov	r1, r3
   83882:	4b1a      	ldr	r3, [pc, #104]	; (838ec <USART0_Handler+0xb8>)
   83884:	4798      	blx	r3
   83886:	e003      	b.n	83890 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   83888:	4813      	ldr	r0, [pc, #76]	; (838d8 <USART0_Handler+0xa4>)
   8388a:	2102      	movs	r1, #2
   8388c:	4b18      	ldr	r3, [pc, #96]	; (838f0 <USART0_Handler+0xbc>)
   8388e:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   83890:	697b      	ldr	r3, [r7, #20]
   83892:	f003 0301 	and.w	r3, r3, #1
   83896:	2b00      	cmp	r3, #0
   83898:	d013      	beq.n	838c2 <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   8389a:	1d3b      	adds	r3, r7, #4
   8389c:	480e      	ldr	r0, [pc, #56]	; (838d8 <USART0_Handler+0xa4>)
   8389e:	4619      	mov	r1, r3
   838a0:	4b14      	ldr	r3, [pc, #80]	; (838f4 <USART0_Handler+0xc0>)
   838a2:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   838a4:	687b      	ldr	r3, [r7, #4]
   838a6:	b2db      	uxtb	r3, r3
   838a8:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   838aa:	4b13      	ldr	r3, [pc, #76]	; (838f8 <USART0_Handler+0xc4>)
   838ac:	6819      	ldr	r1, [r3, #0]
   838ae:	f107 020b 	add.w	r2, r7, #11
   838b2:	f107 030c 	add.w	r3, r7, #12
   838b6:	4608      	mov	r0, r1
   838b8:	4611      	mov	r1, r2
   838ba:	461a      	mov	r2, r3
   838bc:	2300      	movs	r3, #0
   838be:	4c0f      	ldr	r4, [pc, #60]	; (838fc <USART0_Handler+0xc8>)
   838c0:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   838c2:	68fb      	ldr	r3, [r7, #12]
   838c4:	2b00      	cmp	r3, #0
   838c6:	d003      	beq.n	838d0 <USART0_Handler+0x9c>
   838c8:	4b0d      	ldr	r3, [pc, #52]	; (83900 <USART0_Handler+0xcc>)
   838ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   838ce:	601a      	str	r2, [r3, #0]
}
   838d0:	371c      	adds	r7, #28
   838d2:	46bd      	mov	sp, r7
   838d4:	bd90      	pop	{r4, r7, pc}
   838d6:	bf00      	nop
   838d8:	40098000 	.word	0x40098000
   838dc:	00080cd1 	.word	0x00080cd1
   838e0:	00080cb9 	.word	0x00080cb9
   838e4:	2007a61c 	.word	0x2007a61c
   838e8:	00081e91 	.word	0x00081e91
   838ec:	00080ce9 	.word	0x00080ce9
   838f0:	00080c9d 	.word	0x00080c9d
   838f4:	00080d2d 	.word	0x00080d2d
   838f8:	2007a618 	.word	0x2007a618
   838fc:	00081b99 	.word	0x00081b99
   83900:	e000ed04 	.word	0xe000ed04

00083904 <__libc_init_array>:
   83904:	b570      	push	{r4, r5, r6, lr}
   83906:	4e0f      	ldr	r6, [pc, #60]	; (83944 <__libc_init_array+0x40>)
   83908:	4d0f      	ldr	r5, [pc, #60]	; (83948 <__libc_init_array+0x44>)
   8390a:	1b76      	subs	r6, r6, r5
   8390c:	10b6      	asrs	r6, r6, #2
   8390e:	d007      	beq.n	83920 <__libc_init_array+0x1c>
   83910:	3d04      	subs	r5, #4
   83912:	2400      	movs	r4, #0
   83914:	3401      	adds	r4, #1
   83916:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8391a:	4798      	blx	r3
   8391c:	42a6      	cmp	r6, r4
   8391e:	d1f9      	bne.n	83914 <__libc_init_array+0x10>
   83920:	4e0a      	ldr	r6, [pc, #40]	; (8394c <__libc_init_array+0x48>)
   83922:	4d0b      	ldr	r5, [pc, #44]	; (83950 <__libc_init_array+0x4c>)
   83924:	f000 f9a6 	bl	83c74 <_init>
   83928:	1b76      	subs	r6, r6, r5
   8392a:	10b6      	asrs	r6, r6, #2
   8392c:	d008      	beq.n	83940 <__libc_init_array+0x3c>
   8392e:	3d04      	subs	r5, #4
   83930:	2400      	movs	r4, #0
   83932:	3401      	adds	r4, #1
   83934:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83938:	4798      	blx	r3
   8393a:	42a6      	cmp	r6, r4
   8393c:	d1f9      	bne.n	83932 <__libc_init_array+0x2e>
   8393e:	bd70      	pop	{r4, r5, r6, pc}
   83940:	bd70      	pop	{r4, r5, r6, pc}
   83942:	bf00      	nop
   83944:	00083c80 	.word	0x00083c80
   83948:	00083c80 	.word	0x00083c80
   8394c:	00083c88 	.word	0x00083c88
   83950:	00083c80 	.word	0x00083c80

00083954 <memcmp>:
   83954:	2a03      	cmp	r2, #3
   83956:	b470      	push	{r4, r5, r6}
   83958:	d928      	bls.n	839ac <memcmp+0x58>
   8395a:	ea40 0301 	orr.w	r3, r0, r1
   8395e:	079b      	lsls	r3, r3, #30
   83960:	d013      	beq.n	8398a <memcmp+0x36>
   83962:	7805      	ldrb	r5, [r0, #0]
   83964:	780c      	ldrb	r4, [r1, #0]
   83966:	42a5      	cmp	r5, r4
   83968:	d124      	bne.n	839b4 <memcmp+0x60>
   8396a:	3a01      	subs	r2, #1
   8396c:	2300      	movs	r3, #0
   8396e:	e005      	b.n	8397c <memcmp+0x28>
   83970:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   83974:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   83978:	42a5      	cmp	r5, r4
   8397a:	d11b      	bne.n	839b4 <memcmp+0x60>
   8397c:	4293      	cmp	r3, r2
   8397e:	f103 0301 	add.w	r3, r3, #1
   83982:	d1f5      	bne.n	83970 <memcmp+0x1c>
   83984:	2000      	movs	r0, #0
   83986:	bc70      	pop	{r4, r5, r6}
   83988:	4770      	bx	lr
   8398a:	460c      	mov	r4, r1
   8398c:	4603      	mov	r3, r0
   8398e:	6825      	ldr	r5, [r4, #0]
   83990:	681e      	ldr	r6, [r3, #0]
   83992:	4621      	mov	r1, r4
   83994:	42ae      	cmp	r6, r5
   83996:	4618      	mov	r0, r3
   83998:	f104 0404 	add.w	r4, r4, #4
   8399c:	f103 0304 	add.w	r3, r3, #4
   839a0:	d104      	bne.n	839ac <memcmp+0x58>
   839a2:	3a04      	subs	r2, #4
   839a4:	2a03      	cmp	r2, #3
   839a6:	4618      	mov	r0, r3
   839a8:	4621      	mov	r1, r4
   839aa:	d8f0      	bhi.n	8398e <memcmp+0x3a>
   839ac:	2a00      	cmp	r2, #0
   839ae:	d1d8      	bne.n	83962 <memcmp+0xe>
   839b0:	4610      	mov	r0, r2
   839b2:	e7e8      	b.n	83986 <memcmp+0x32>
   839b4:	1b28      	subs	r0, r5, r4
   839b6:	bc70      	pop	{r4, r5, r6}
   839b8:	4770      	bx	lr
   839ba:	bf00      	nop

000839bc <memcpy>:
   839bc:	4684      	mov	ip, r0
   839be:	ea41 0300 	orr.w	r3, r1, r0
   839c2:	f013 0303 	ands.w	r3, r3, #3
   839c6:	d149      	bne.n	83a5c <memcpy+0xa0>
   839c8:	3a40      	subs	r2, #64	; 0x40
   839ca:	d323      	bcc.n	83a14 <memcpy+0x58>
   839cc:	680b      	ldr	r3, [r1, #0]
   839ce:	6003      	str	r3, [r0, #0]
   839d0:	684b      	ldr	r3, [r1, #4]
   839d2:	6043      	str	r3, [r0, #4]
   839d4:	688b      	ldr	r3, [r1, #8]
   839d6:	6083      	str	r3, [r0, #8]
   839d8:	68cb      	ldr	r3, [r1, #12]
   839da:	60c3      	str	r3, [r0, #12]
   839dc:	690b      	ldr	r3, [r1, #16]
   839de:	6103      	str	r3, [r0, #16]
   839e0:	694b      	ldr	r3, [r1, #20]
   839e2:	6143      	str	r3, [r0, #20]
   839e4:	698b      	ldr	r3, [r1, #24]
   839e6:	6183      	str	r3, [r0, #24]
   839e8:	69cb      	ldr	r3, [r1, #28]
   839ea:	61c3      	str	r3, [r0, #28]
   839ec:	6a0b      	ldr	r3, [r1, #32]
   839ee:	6203      	str	r3, [r0, #32]
   839f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   839f2:	6243      	str	r3, [r0, #36]	; 0x24
   839f4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   839f6:	6283      	str	r3, [r0, #40]	; 0x28
   839f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   839fa:	62c3      	str	r3, [r0, #44]	; 0x2c
   839fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   839fe:	6303      	str	r3, [r0, #48]	; 0x30
   83a00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83a02:	6343      	str	r3, [r0, #52]	; 0x34
   83a04:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83a06:	6383      	str	r3, [r0, #56]	; 0x38
   83a08:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83a0a:	63c3      	str	r3, [r0, #60]	; 0x3c
   83a0c:	3040      	adds	r0, #64	; 0x40
   83a0e:	3140      	adds	r1, #64	; 0x40
   83a10:	3a40      	subs	r2, #64	; 0x40
   83a12:	d2db      	bcs.n	839cc <memcpy+0x10>
   83a14:	3230      	adds	r2, #48	; 0x30
   83a16:	d30b      	bcc.n	83a30 <memcpy+0x74>
   83a18:	680b      	ldr	r3, [r1, #0]
   83a1a:	6003      	str	r3, [r0, #0]
   83a1c:	684b      	ldr	r3, [r1, #4]
   83a1e:	6043      	str	r3, [r0, #4]
   83a20:	688b      	ldr	r3, [r1, #8]
   83a22:	6083      	str	r3, [r0, #8]
   83a24:	68cb      	ldr	r3, [r1, #12]
   83a26:	60c3      	str	r3, [r0, #12]
   83a28:	3010      	adds	r0, #16
   83a2a:	3110      	adds	r1, #16
   83a2c:	3a10      	subs	r2, #16
   83a2e:	d2f3      	bcs.n	83a18 <memcpy+0x5c>
   83a30:	320c      	adds	r2, #12
   83a32:	d305      	bcc.n	83a40 <memcpy+0x84>
   83a34:	f851 3b04 	ldr.w	r3, [r1], #4
   83a38:	f840 3b04 	str.w	r3, [r0], #4
   83a3c:	3a04      	subs	r2, #4
   83a3e:	d2f9      	bcs.n	83a34 <memcpy+0x78>
   83a40:	3204      	adds	r2, #4
   83a42:	d008      	beq.n	83a56 <memcpy+0x9a>
   83a44:	07d2      	lsls	r2, r2, #31
   83a46:	bf1c      	itt	ne
   83a48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a4c:	f800 3b01 	strbne.w	r3, [r0], #1
   83a50:	d301      	bcc.n	83a56 <memcpy+0x9a>
   83a52:	880b      	ldrh	r3, [r1, #0]
   83a54:	8003      	strh	r3, [r0, #0]
   83a56:	4660      	mov	r0, ip
   83a58:	4770      	bx	lr
   83a5a:	bf00      	nop
   83a5c:	2a08      	cmp	r2, #8
   83a5e:	d313      	bcc.n	83a88 <memcpy+0xcc>
   83a60:	078b      	lsls	r3, r1, #30
   83a62:	d0b1      	beq.n	839c8 <memcpy+0xc>
   83a64:	f010 0303 	ands.w	r3, r0, #3
   83a68:	d0ae      	beq.n	839c8 <memcpy+0xc>
   83a6a:	f1c3 0304 	rsb	r3, r3, #4
   83a6e:	1ad2      	subs	r2, r2, r3
   83a70:	07db      	lsls	r3, r3, #31
   83a72:	bf1c      	itt	ne
   83a74:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a78:	f800 3b01 	strbne.w	r3, [r0], #1
   83a7c:	d3a4      	bcc.n	839c8 <memcpy+0xc>
   83a7e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83a82:	f820 3b02 	strh.w	r3, [r0], #2
   83a86:	e79f      	b.n	839c8 <memcpy+0xc>
   83a88:	3a04      	subs	r2, #4
   83a8a:	d3d9      	bcc.n	83a40 <memcpy+0x84>
   83a8c:	3a01      	subs	r2, #1
   83a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83a92:	f800 3b01 	strb.w	r3, [r0], #1
   83a96:	d2f9      	bcs.n	83a8c <memcpy+0xd0>
   83a98:	780b      	ldrb	r3, [r1, #0]
   83a9a:	7003      	strb	r3, [r0, #0]
   83a9c:	784b      	ldrb	r3, [r1, #1]
   83a9e:	7043      	strb	r3, [r0, #1]
   83aa0:	788b      	ldrb	r3, [r1, #2]
   83aa2:	7083      	strb	r3, [r0, #2]
   83aa4:	4660      	mov	r0, ip
   83aa6:	4770      	bx	lr

00083aa8 <memset>:
   83aa8:	b4f0      	push	{r4, r5, r6, r7}
   83aaa:	0784      	lsls	r4, r0, #30
   83aac:	d043      	beq.n	83b36 <memset+0x8e>
   83aae:	1e54      	subs	r4, r2, #1
   83ab0:	2a00      	cmp	r2, #0
   83ab2:	d03e      	beq.n	83b32 <memset+0x8a>
   83ab4:	b2cd      	uxtb	r5, r1
   83ab6:	4603      	mov	r3, r0
   83ab8:	e003      	b.n	83ac2 <memset+0x1a>
   83aba:	1e62      	subs	r2, r4, #1
   83abc:	2c00      	cmp	r4, #0
   83abe:	d038      	beq.n	83b32 <memset+0x8a>
   83ac0:	4614      	mov	r4, r2
   83ac2:	f803 5b01 	strb.w	r5, [r3], #1
   83ac6:	079a      	lsls	r2, r3, #30
   83ac8:	d1f7      	bne.n	83aba <memset+0x12>
   83aca:	2c03      	cmp	r4, #3
   83acc:	d92a      	bls.n	83b24 <memset+0x7c>
   83ace:	b2cd      	uxtb	r5, r1
   83ad0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83ad4:	2c0f      	cmp	r4, #15
   83ad6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83ada:	d915      	bls.n	83b08 <memset+0x60>
   83adc:	f1a4 0710 	sub.w	r7, r4, #16
   83ae0:	093f      	lsrs	r7, r7, #4
   83ae2:	f103 0610 	add.w	r6, r3, #16
   83ae6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   83aea:	461a      	mov	r2, r3
   83aec:	6015      	str	r5, [r2, #0]
   83aee:	6055      	str	r5, [r2, #4]
   83af0:	6095      	str	r5, [r2, #8]
   83af2:	60d5      	str	r5, [r2, #12]
   83af4:	3210      	adds	r2, #16
   83af6:	42b2      	cmp	r2, r6
   83af8:	d1f8      	bne.n	83aec <memset+0x44>
   83afa:	f004 040f 	and.w	r4, r4, #15
   83afe:	3701      	adds	r7, #1
   83b00:	2c03      	cmp	r4, #3
   83b02:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   83b06:	d90d      	bls.n	83b24 <memset+0x7c>
   83b08:	461e      	mov	r6, r3
   83b0a:	4622      	mov	r2, r4
   83b0c:	3a04      	subs	r2, #4
   83b0e:	2a03      	cmp	r2, #3
   83b10:	f846 5b04 	str.w	r5, [r6], #4
   83b14:	d8fa      	bhi.n	83b0c <memset+0x64>
   83b16:	1f22      	subs	r2, r4, #4
   83b18:	f022 0203 	bic.w	r2, r2, #3
   83b1c:	3204      	adds	r2, #4
   83b1e:	4413      	add	r3, r2
   83b20:	f004 0403 	and.w	r4, r4, #3
   83b24:	b12c      	cbz	r4, 83b32 <memset+0x8a>
   83b26:	b2c9      	uxtb	r1, r1
   83b28:	441c      	add	r4, r3
   83b2a:	f803 1b01 	strb.w	r1, [r3], #1
   83b2e:	42a3      	cmp	r3, r4
   83b30:	d1fb      	bne.n	83b2a <memset+0x82>
   83b32:	bcf0      	pop	{r4, r5, r6, r7}
   83b34:	4770      	bx	lr
   83b36:	4614      	mov	r4, r2
   83b38:	4603      	mov	r3, r0
   83b3a:	e7c6      	b.n	83aca <memset+0x22>

00083b3c <register_fini>:
   83b3c:	4b02      	ldr	r3, [pc, #8]	; (83b48 <register_fini+0xc>)
   83b3e:	b113      	cbz	r3, 83b46 <register_fini+0xa>
   83b40:	4802      	ldr	r0, [pc, #8]	; (83b4c <register_fini+0x10>)
   83b42:	f000 b805 	b.w	83b50 <atexit>
   83b46:	4770      	bx	lr
   83b48:	00000000 	.word	0x00000000
   83b4c:	00083b5d 	.word	0x00083b5d

00083b50 <atexit>:
   83b50:	4601      	mov	r1, r0
   83b52:	2000      	movs	r0, #0
   83b54:	4602      	mov	r2, r0
   83b56:	4603      	mov	r3, r0
   83b58:	f000 b818 	b.w	83b8c <__register_exitproc>

00083b5c <__libc_fini_array>:
   83b5c:	b538      	push	{r3, r4, r5, lr}
   83b5e:	4d09      	ldr	r5, [pc, #36]	; (83b84 <__libc_fini_array+0x28>)
   83b60:	4c09      	ldr	r4, [pc, #36]	; (83b88 <__libc_fini_array+0x2c>)
   83b62:	1b64      	subs	r4, r4, r5
   83b64:	10a4      	asrs	r4, r4, #2
   83b66:	bf18      	it	ne
   83b68:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83b6c:	d005      	beq.n	83b7a <__libc_fini_array+0x1e>
   83b6e:	3c01      	subs	r4, #1
   83b70:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83b74:	4798      	blx	r3
   83b76:	2c00      	cmp	r4, #0
   83b78:	d1f9      	bne.n	83b6e <__libc_fini_array+0x12>
   83b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83b7e:	f000 b883 	b.w	83c88 <_fini>
   83b82:	bf00      	nop
   83b84:	00083c94 	.word	0x00083c94
   83b88:	00083c98 	.word	0x00083c98

00083b8c <__register_exitproc>:
   83b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   83b8e:	4c27      	ldr	r4, [pc, #156]	; (83c2c <__register_exitproc+0xa0>)
   83b90:	b085      	sub	sp, #20
   83b92:	6826      	ldr	r6, [r4, #0]
   83b94:	4607      	mov	r7, r0
   83b96:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   83b9a:	2c00      	cmp	r4, #0
   83b9c:	d040      	beq.n	83c20 <__register_exitproc+0x94>
   83b9e:	6865      	ldr	r5, [r4, #4]
   83ba0:	2d1f      	cmp	r5, #31
   83ba2:	dd1e      	ble.n	83be2 <__register_exitproc+0x56>
   83ba4:	4822      	ldr	r0, [pc, #136]	; (83c30 <__register_exitproc+0xa4>)
   83ba6:	b918      	cbnz	r0, 83bb0 <__register_exitproc+0x24>
   83ba8:	f04f 30ff 	mov.w	r0, #4294967295
   83bac:	b005      	add	sp, #20
   83bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83bb4:	9103      	str	r1, [sp, #12]
   83bb6:	9202      	str	r2, [sp, #8]
   83bb8:	9301      	str	r3, [sp, #4]
   83bba:	f3af 8000 	nop.w
   83bbe:	9903      	ldr	r1, [sp, #12]
   83bc0:	4604      	mov	r4, r0
   83bc2:	9a02      	ldr	r2, [sp, #8]
   83bc4:	9b01      	ldr	r3, [sp, #4]
   83bc6:	2800      	cmp	r0, #0
   83bc8:	d0ee      	beq.n	83ba8 <__register_exitproc+0x1c>
   83bca:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83bce:	2000      	movs	r0, #0
   83bd0:	6025      	str	r5, [r4, #0]
   83bd2:	6060      	str	r0, [r4, #4]
   83bd4:	4605      	mov	r5, r0
   83bd6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83bda:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83bde:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83be2:	b93f      	cbnz	r7, 83bf4 <__register_exitproc+0x68>
   83be4:	1c6b      	adds	r3, r5, #1
   83be6:	2000      	movs	r0, #0
   83be8:	3502      	adds	r5, #2
   83bea:	6063      	str	r3, [r4, #4]
   83bec:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83bf0:	b005      	add	sp, #20
   83bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bf4:	2601      	movs	r6, #1
   83bf6:	40ae      	lsls	r6, r5
   83bf8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   83bfc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83c00:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83c04:	2f02      	cmp	r7, #2
   83c06:	ea42 0206 	orr.w	r2, r2, r6
   83c0a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   83c0e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   83c12:	d1e7      	bne.n	83be4 <__register_exitproc+0x58>
   83c14:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83c18:	431e      	orrs	r6, r3
   83c1a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   83c1e:	e7e1      	b.n	83be4 <__register_exitproc+0x58>
   83c20:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   83c24:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   83c28:	e7b9      	b.n	83b9e <__register_exitproc+0x12>
   83c2a:	bf00      	nop
   83c2c:	00083c70 	.word	0x00083c70
   83c30:	00000000 	.word	0x00000000
   83c34:	454c4449 	.word	0x454c4449
   83c38:	00000000 	.word	0x00000000

00083c3c <ucExpectedStackBytes.5295>:
   83c3c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   83c4c:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   83c5c:	0046464f                                OFF.

00083c60 <ulLED>:
   83c60:	00000056 0000003b 00000055 00000043     V...;...U...C...

00083c70 <_global_impure_ptr>:
   83c70:	20070010                                ... 

00083c74 <_init>:
   83c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c76:	bf00      	nop
   83c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c7a:	bc08      	pop	{r3}
   83c7c:	469e      	mov	lr, r3
   83c7e:	4770      	bx	lr

00083c80 <__init_array_start>:
   83c80:	00083b3d 	.word	0x00083b3d

00083c84 <__frame_dummy_init_array_entry>:
   83c84:	00080119                                ....

00083c88 <_fini>:
   83c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c8a:	bf00      	nop
   83c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83c8e:	bc08      	pop	{r3}
   83c90:	469e      	mov	lr, r3
   83c92:	4770      	bx	lr

00083c94 <__fini_array_start>:
   83c94:	000800f5 	.word	0x000800f5
