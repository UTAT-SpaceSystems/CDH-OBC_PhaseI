
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00082ab0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018c  20070438  00082ee8  00010438  2**2
                  ALLOC
  3 .stack        00002004  200705c4  00083074  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a1dd  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d49  00000000  00000000  0001a699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004e1c  00000000  00000000  0001c3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d88  00000000  00000000  000211fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c48  00000000  00000000  00021f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001851b  00000000  00000000  00022bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ed97  00000000  00000000  0003b0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000663d2  00000000  00000000  00049e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c40  00000000  00000000  000b0254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725c8 	.word	0x200725c8
   80004:	000814dd 	.word	0x000814dd
   80008:	000814d5 	.word	0x000814d5
   8000c:	000814d5 	.word	0x000814d5
   80010:	000814d5 	.word	0x000814d5
   80014:	000814d5 	.word	0x000814d5
   80018:	000814d5 	.word	0x000814d5
	...
   8002c:	00081841 	.word	0x00081841
   80030:	000814d5 	.word	0x000814d5
   80034:	00000000 	.word	0x00000000
   80038:	000818fd 	.word	0x000818fd
   8003c:	00081941 	.word	0x00081941
   80040:	000814d5 	.word	0x000814d5
   80044:	000814d5 	.word	0x000814d5
   80048:	000814d5 	.word	0x000814d5
   8004c:	000814d5 	.word	0x000814d5
   80050:	000825ad 	.word	0x000825ad
   80054:	000814d5 	.word	0x000814d5
   80058:	000814d5 	.word	0x000814d5
   8005c:	000814d5 	.word	0x000814d5
   80060:	000814d5 	.word	0x000814d5
   80064:	000814d5 	.word	0x000814d5
   80068:	00000000 	.word	0x00000000
   8006c:	0008106d 	.word	0x0008106d
   80070:	00081085 	.word	0x00081085
   80074:	0008109d 	.word	0x0008109d
   80078:	000810b5 	.word	0x000810b5
	...
   80084:	0008268d 	.word	0x0008268d
   80088:	000814d5 	.word	0x000814d5
   8008c:	000814d5 	.word	0x000814d5
   80090:	000814d5 	.word	0x000814d5
   80094:	000814d5 	.word	0x000814d5
   80098:	000814d5 	.word	0x000814d5
   8009c:	000814d5 	.word	0x000814d5
   800a0:	000814d5 	.word	0x000814d5
   800a4:	00000000 	.word	0x00000000
   800a8:	000814d5 	.word	0x000814d5
   800ac:	000814d5 	.word	0x000814d5
   800b0:	000814d5 	.word	0x000814d5
   800b4:	000814d5 	.word	0x000814d5
   800b8:	000814d5 	.word	0x000814d5
   800bc:	000814d5 	.word	0x000814d5
   800c0:	000814d5 	.word	0x000814d5
   800c4:	000814d5 	.word	0x000814d5
   800c8:	000814d5 	.word	0x000814d5
   800cc:	000814d5 	.word	0x000814d5
   800d0:	000814d5 	.word	0x000814d5
   800d4:	000814d5 	.word	0x000814d5
   800d8:	000814d5 	.word	0x000814d5
   800dc:	000814d5 	.word	0x000814d5
   800e0:	000814d5 	.word	0x000814d5
   800e4:	000814d5 	.word	0x000814d5
   800e8:	000814d5 	.word	0x000814d5
   800ec:	000814d5 	.word	0x000814d5
   800f0:	00082201 	.word	0x00082201

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00082ab0 	.word	0x00082ab0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00082ab0 	.word	0x00082ab0
   8013c:	2007043c 	.word	0x2007043c
   80140:	00082ab0 	.word	0x00082ab0
   80144:	00000000 	.word	0x00000000

00080148 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	2b07      	cmp	r3, #7
   80154:	d82e      	bhi.n	801b4 <osc_enable+0x6c>
   80156:	a201      	add	r2, pc, #4	; (adr r2, 8015c <osc_enable+0x14>)
   80158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8015c:	000801b5 	.word	0x000801b5
   80160:	0008017d 	.word	0x0008017d
   80164:	00080185 	.word	0x00080185
   80168:	0008018d 	.word	0x0008018d
   8016c:	00080195 	.word	0x00080195
   80170:	0008019d 	.word	0x0008019d
   80174:	000801a5 	.word	0x000801a5
   80178:	000801ad 	.word	0x000801ad
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8017c:	2000      	movs	r0, #0
   8017e:	4b0f      	ldr	r3, [pc, #60]	; (801bc <osc_enable+0x74>)
   80180:	4798      	blx	r3
		break;
   80182:	e017      	b.n	801b4 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80184:	2001      	movs	r0, #1
   80186:	4b0d      	ldr	r3, [pc, #52]	; (801bc <osc_enable+0x74>)
   80188:	4798      	blx	r3
		break;
   8018a:	e013      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8018c:	2000      	movs	r0, #0
   8018e:	4b0c      	ldr	r3, [pc, #48]	; (801c0 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e00f      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80194:	2010      	movs	r0, #16
   80196:	4b0a      	ldr	r3, [pc, #40]	; (801c0 <osc_enable+0x78>)
   80198:	4798      	blx	r3
		break;
   8019a:	e00b      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8019c:	2020      	movs	r0, #32
   8019e:	4b08      	ldr	r3, [pc, #32]	; (801c0 <osc_enable+0x78>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e007      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   801a4:	2000      	movs	r0, #0
   801a6:	4b07      	ldr	r3, [pc, #28]	; (801c4 <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e003      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   801ac:	2001      	movs	r0, #1
   801ae:	4b05      	ldr	r3, [pc, #20]	; (801c4 <osc_enable+0x7c>)
   801b0:	4798      	blx	r3
		break;
   801b2:	bf00      	nop
	}
}
   801b4:	3708      	adds	r7, #8
   801b6:	46bd      	mov	sp, r7
   801b8:	bd80      	pop	{r7, pc}
   801ba:	bf00      	nop
   801bc:	00081151 	.word	0x00081151
   801c0:	000811c1 	.word	0x000811c1
   801c4:	00081261 	.word	0x00081261

000801c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801c8:	b580      	push	{r7, lr}
   801ca:	b082      	sub	sp, #8
   801cc:	af00      	add	r7, sp, #0
   801ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	2b07      	cmp	r3, #7
   801d4:	d826      	bhi.n	80224 <osc_is_ready+0x5c>
   801d6:	a201      	add	r2, pc, #4	; (adr r2, 801dc <osc_is_ready+0x14>)
   801d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801dc:	000801fd 	.word	0x000801fd
   801e0:	00080201 	.word	0x00080201
   801e4:	00080201 	.word	0x00080201
   801e8:	00080213 	.word	0x00080213
   801ec:	00080213 	.word	0x00080213
   801f0:	00080213 	.word	0x00080213
   801f4:	00080213 	.word	0x00080213
   801f8:	00080213 	.word	0x00080213
	case OSC_SLCK_32K_RC:
		return 1;
   801fc:	2301      	movs	r3, #1
   801fe:	e012      	b.n	80226 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80200:	4b0b      	ldr	r3, [pc, #44]	; (80230 <osc_is_ready+0x68>)
   80202:	4798      	blx	r3
   80204:	4603      	mov	r3, r0
   80206:	2b00      	cmp	r3, #0
   80208:	bf0c      	ite	eq
   8020a:	2300      	moveq	r3, #0
   8020c:	2301      	movne	r3, #1
   8020e:	b2db      	uxtb	r3, r3
   80210:	e009      	b.n	80226 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80212:	4b08      	ldr	r3, [pc, #32]	; (80234 <osc_is_ready+0x6c>)
   80214:	4798      	blx	r3
   80216:	4603      	mov	r3, r0
   80218:	2b00      	cmp	r3, #0
   8021a:	bf0c      	ite	eq
   8021c:	2300      	moveq	r3, #0
   8021e:	2301      	movne	r3, #1
   80220:	b2db      	uxtb	r3, r3
   80222:	e000      	b.n	80226 <osc_is_ready+0x5e>
	}

	return 0;
   80224:	2300      	movs	r3, #0
}
   80226:	4618      	mov	r0, r3
   80228:	3708      	adds	r7, #8
   8022a:	46bd      	mov	sp, r7
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	0008118d 	.word	0x0008118d
   80234:	000812cd 	.word	0x000812cd

00080238 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80238:	b480      	push	{r7}
   8023a:	b083      	sub	sp, #12
   8023c:	af00      	add	r7, sp, #0
   8023e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80240:	687b      	ldr	r3, [r7, #4]
   80242:	2b07      	cmp	r3, #7
   80244:	d825      	bhi.n	80292 <osc_get_rate+0x5a>
   80246:	a201      	add	r2, pc, #4	; (adr r2, 8024c <osc_get_rate+0x14>)
   80248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8024c:	0008026d 	.word	0x0008026d
   80250:	00080273 	.word	0x00080273
   80254:	00080279 	.word	0x00080279
   80258:	0008027f 	.word	0x0008027f
   8025c:	00080283 	.word	0x00080283
   80260:	00080287 	.word	0x00080287
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8026c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80270:	e010      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80276:	e00d      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8027c:	e00a      	b.n	80294 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <osc_get_rate+0x68>)
   80280:	e008      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80282:	4b08      	ldr	r3, [pc, #32]	; (802a4 <osc_get_rate+0x6c>)
   80284:	e006      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80286:	4b08      	ldr	r3, [pc, #32]	; (802a8 <osc_get_rate+0x70>)
   80288:	e004      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8028a:	4b07      	ldr	r3, [pc, #28]	; (802a8 <osc_get_rate+0x70>)
   8028c:	e002      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8028e:	4b06      	ldr	r3, [pc, #24]	; (802a8 <osc_get_rate+0x70>)
   80290:	e000      	b.n	80294 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80292:	2300      	movs	r3, #0
}
   80294:	4618      	mov	r0, r3
   80296:	370c      	adds	r7, #12
   80298:	46bd      	mov	sp, r7
   8029a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8029e:	4770      	bx	lr
   802a0:	003d0900 	.word	0x003d0900
   802a4:	007a1200 	.word	0x007a1200
   802a8:	00b71b00 	.word	0x00b71b00

000802ac <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802ac:	b580      	push	{r7, lr}
   802ae:	b082      	sub	sp, #8
   802b0:	af00      	add	r7, sp, #0
   802b2:	4603      	mov	r3, r0
   802b4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802b6:	bf00      	nop
   802b8:	79fb      	ldrb	r3, [r7, #7]
   802ba:	4618      	mov	r0, r3
   802bc:	4b05      	ldr	r3, [pc, #20]	; (802d4 <osc_wait_ready+0x28>)
   802be:	4798      	blx	r3
   802c0:	4603      	mov	r3, r0
   802c2:	f083 0301 	eor.w	r3, r3, #1
   802c6:	b2db      	uxtb	r3, r3
   802c8:	2b00      	cmp	r3, #0
   802ca:	d1f5      	bne.n	802b8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802cc:	3708      	adds	r7, #8
   802ce:	46bd      	mov	sp, r7
   802d0:	bd80      	pop	{r7, pc}
   802d2:	bf00      	nop
   802d4:	000801c9 	.word	0x000801c9

000802d8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802d8:	b580      	push	{r7, lr}
   802da:	b086      	sub	sp, #24
   802dc:	af00      	add	r7, sp, #0
   802de:	60f8      	str	r0, [r7, #12]
   802e0:	607a      	str	r2, [r7, #4]
   802e2:	603b      	str	r3, [r7, #0]
   802e4:	460b      	mov	r3, r1
   802e6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802e8:	687b      	ldr	r3, [r7, #4]
   802ea:	2b00      	cmp	r3, #0
   802ec:	d107      	bne.n	802fe <pll_config_init+0x26>
   802ee:	683b      	ldr	r3, [r7, #0]
   802f0:	2b00      	cmp	r3, #0
   802f2:	d104      	bne.n	802fe <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802f4:	68fb      	ldr	r3, [r7, #12]
   802f6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802fa:	601a      	str	r2, [r3, #0]
   802fc:	e019      	b.n	80332 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802fe:	7afb      	ldrb	r3, [r7, #11]
   80300:	4618      	mov	r0, r3
   80302:	4b0d      	ldr	r3, [pc, #52]	; (80338 <pll_config_init+0x60>)
   80304:	4798      	blx	r3
   80306:	4602      	mov	r2, r0
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	fbb2 f3f3 	udiv	r3, r2, r3
   8030e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80310:	697b      	ldr	r3, [r7, #20]
   80312:	683a      	ldr	r2, [r7, #0]
   80314:	fb02 f303 	mul.w	r3, r2, r3
   80318:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	3b01      	subs	r3, #1
   8031e:	041a      	lsls	r2, r3, #16
   80320:	4b06      	ldr	r3, [pc, #24]	; (8033c <pll_config_init+0x64>)
   80322:	4013      	ands	r3, r2
   80324:	687a      	ldr	r2, [r7, #4]
   80326:	b2d2      	uxtb	r2, r2
   80328:	4313      	orrs	r3, r2
   8032a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	601a      	str	r2, [r3, #0]
	}
}
   80332:	3718      	adds	r7, #24
   80334:	46bd      	mov	sp, r7
   80336:	bd80      	pop	{r7, pc}
   80338:	00080239 	.word	0x00080239
   8033c:	07ff0000 	.word	0x07ff0000

00080340 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80340:	b580      	push	{r7, lr}
   80342:	b082      	sub	sp, #8
   80344:	af00      	add	r7, sp, #0
   80346:	6078      	str	r0, [r7, #4]
   80348:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8034a:	683b      	ldr	r3, [r7, #0]
   8034c:	2b00      	cmp	r3, #0
   8034e:	d108      	bne.n	80362 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <pll_enable+0x34>)
   80352:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80354:	4b08      	ldr	r3, [pc, #32]	; (80378 <pll_enable+0x38>)
   80356:	687a      	ldr	r2, [r7, #4]
   80358:	6812      	ldr	r2, [r2, #0]
   8035a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8035e:	629a      	str	r2, [r3, #40]	; 0x28
   80360:	e005      	b.n	8036e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80362:	4b05      	ldr	r3, [pc, #20]	; (80378 <pll_enable+0x38>)
   80364:	687a      	ldr	r2, [r7, #4]
   80366:	6812      	ldr	r2, [r2, #0]
   80368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8036c:	61da      	str	r2, [r3, #28]
	}
}
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	000812e9 	.word	0x000812e9
   80378:	400e0600 	.word	0x400e0600

0008037c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80384:	687b      	ldr	r3, [r7, #4]
   80386:	2b00      	cmp	r3, #0
   80388:	d103      	bne.n	80392 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <pll_is_locked+0x24>)
   8038c:	4798      	blx	r3
   8038e:	4603      	mov	r3, r0
   80390:	e002      	b.n	80398 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80392:	4b04      	ldr	r3, [pc, #16]	; (803a4 <pll_is_locked+0x28>)
   80394:	4798      	blx	r3
   80396:	4603      	mov	r3, r0
}
   80398:	4618      	mov	r0, r3
   8039a:	3708      	adds	r7, #8
   8039c:	46bd      	mov	sp, r7
   8039e:	bd80      	pop	{r7, pc}
   803a0:	00081301 	.word	0x00081301
   803a4:	0008131d 	.word	0x0008131d

000803a8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a8:	b580      	push	{r7, lr}
   803aa:	b082      	sub	sp, #8
   803ac:	af00      	add	r7, sp, #0
   803ae:	4603      	mov	r3, r0
   803b0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803b2:	79fb      	ldrb	r3, [r7, #7]
   803b4:	3b03      	subs	r3, #3
   803b6:	2b04      	cmp	r3, #4
   803b8:	d808      	bhi.n	803cc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803ba:	79fb      	ldrb	r3, [r7, #7]
   803bc:	4618      	mov	r0, r3
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <pll_enable_source+0x2c>)
   803c0:	4798      	blx	r3
		osc_wait_ready(e_src);
   803c2:	79fb      	ldrb	r3, [r7, #7]
   803c4:	4618      	mov	r0, r3
   803c6:	4b04      	ldr	r3, [pc, #16]	; (803d8 <pll_enable_source+0x30>)
   803c8:	4798      	blx	r3
		break;
   803ca:	e000      	b.n	803ce <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803cc:	bf00      	nop
	}
}
   803ce:	3708      	adds	r7, #8
   803d0:	46bd      	mov	sp, r7
   803d2:	bd80      	pop	{r7, pc}
   803d4:	00080149 	.word	0x00080149
   803d8:	000802ad 	.word	0x000802ad

000803dc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803dc:	b580      	push	{r7, lr}
   803de:	b082      	sub	sp, #8
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803e4:	bf00      	nop
   803e6:	6878      	ldr	r0, [r7, #4]
   803e8:	4b04      	ldr	r3, [pc, #16]	; (803fc <pll_wait_for_lock+0x20>)
   803ea:	4798      	blx	r3
   803ec:	4603      	mov	r3, r0
   803ee:	2b00      	cmp	r3, #0
   803f0:	d0f9      	beq.n	803e6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803f2:	2300      	movs	r3, #0
}
   803f4:	4618      	mov	r0, r3
   803f6:	3708      	adds	r7, #8
   803f8:	46bd      	mov	sp, r7
   803fa:	bd80      	pop	{r7, pc}
   803fc:	0008037d 	.word	0x0008037d

00080400 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80400:	b580      	push	{r7, lr}
   80402:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80404:	2006      	movs	r0, #6
   80406:	4b04      	ldr	r3, [pc, #16]	; (80418 <sysclk_get_main_hz+0x18>)
   80408:	4798      	blx	r3
   8040a:	4602      	mov	r2, r0
   8040c:	4613      	mov	r3, r2
   8040e:	00db      	lsls	r3, r3, #3
   80410:	1a9b      	subs	r3, r3, r2
   80412:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80414:	4618      	mov	r0, r3
   80416:	bd80      	pop	{r7, pc}
   80418:	00080239 	.word	0x00080239

0008041c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80420:	4b02      	ldr	r3, [pc, #8]	; (8042c <sysclk_get_cpu_hz+0x10>)
   80422:	4798      	blx	r3
   80424:	4603      	mov	r3, r0
   80426:	085b      	lsrs	r3, r3, #1
}
   80428:	4618      	mov	r0, r3
   8042a:	bd80      	pop	{r7, pc}
   8042c:	00080401 	.word	0x00080401

00080430 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80430:	b590      	push	{r4, r7, lr}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80436:	4b10      	ldr	r3, [pc, #64]	; (80478 <sysclk_init+0x48>)
   80438:	4798      	blx	r3
   8043a:	4603      	mov	r3, r0
   8043c:	4618      	mov	r0, r3
   8043e:	4b0f      	ldr	r3, [pc, #60]	; (8047c <sysclk_init+0x4c>)
   80440:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80442:	2006      	movs	r0, #6
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <sysclk_init+0x50>)
   80446:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80448:	1d3b      	adds	r3, r7, #4
   8044a:	4618      	mov	r0, r3
   8044c:	2106      	movs	r1, #6
   8044e:	2201      	movs	r2, #1
   80450:	230e      	movs	r3, #14
   80452:	4c0c      	ldr	r4, [pc, #48]	; (80484 <sysclk_init+0x54>)
   80454:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80456:	1d3b      	adds	r3, r7, #4
   80458:	4618      	mov	r0, r3
   8045a:	2100      	movs	r1, #0
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <sysclk_init+0x58>)
   8045e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80460:	2000      	movs	r0, #0
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <sysclk_init+0x5c>)
   80464:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80466:	2010      	movs	r0, #16
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <sysclk_init+0x60>)
   8046a:	4798      	blx	r3
		break;
   8046c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8046e:	4b09      	ldr	r3, [pc, #36]	; (80494 <sysclk_init+0x64>)
   80470:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bd90      	pop	{r4, r7, pc}
   80478:	0008041d 	.word	0x0008041d
   8047c:	00081705 	.word	0x00081705
   80480:	000803a9 	.word	0x000803a9
   80484:	000802d9 	.word	0x000802d9
   80488:	00080341 	.word	0x00080341
   8048c:	000803dd 	.word	0x000803dd
   80490:	000810cd 	.word	0x000810cd
   80494:	00081585 	.word	0x00081585

00080498 <board_init>:
#include "gpio.h"
#include "asf.h"


void board_init(void)
{
   80498:	b580      	push	{r7, lr}
   8049a:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8049c:	4b2e      	ldr	r3, [pc, #184]	; (80558 <board_init+0xc0>)
   8049e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a2:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   804a4:	2001      	movs	r0, #1
   804a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804aa:	4b2c      	ldr	r3, [pc, #176]	; (8055c <board_init+0xc4>)
   804ac:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   804ae:	2000      	movs	r0, #0
   804b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804b4:	4b29      	ldr	r3, [pc, #164]	; (8055c <board_init+0xc4>)
   804b6:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   804b8:	2034      	movs	r0, #52	; 0x34
   804ba:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804be:	4b27      	ldr	r3, [pc, #156]	; (8055c <board_init+0xc4>)
   804c0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   804c2:	2035      	movs	r0, #53	; 0x35
   804c4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804c8:	4b24      	ldr	r3, [pc, #144]	; (8055c <board_init+0xc4>)
   804ca:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   804cc:	202f      	movs	r0, #47	; 0x2f
   804ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804d2:	4b22      	ldr	r3, [pc, #136]	; (8055c <board_init+0xc4>)
   804d4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   804d6:	202e      	movs	r0, #46	; 0x2e
   804d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804dc:	4b1f      	ldr	r3, [pc, #124]	; (8055c <board_init+0xc4>)
   804de:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   804e0:	208f      	movs	r0, #143	; 0x8f
   804e2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804e6:	4b1d      	ldr	r3, [pc, #116]	; (8055c <board_init+0xc4>)
   804e8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   804ea:	2090      	movs	r0, #144	; 0x90
   804ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804f0:	4b1a      	ldr	r3, [pc, #104]	; (8055c <board_init+0xc4>)
   804f2:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   804f4:	2057      	movs	r0, #87	; 0x57
   804f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804fa:	4b18      	ldr	r3, [pc, #96]	; (8055c <board_init+0xc4>)
   804fc:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   804fe:	2057      	movs	r0, #87	; 0x57
   80500:	4b17      	ldr	r3, [pc, #92]	; (80560 <board_init+0xc8>)
   80502:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80504:	203b      	movs	r0, #59	; 0x3b
   80506:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8050a:	4b14      	ldr	r3, [pc, #80]	; (8055c <board_init+0xc4>)
   8050c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8050e:	2055      	movs	r0, #85	; 0x55
   80510:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80514:	4b11      	ldr	r3, [pc, #68]	; (8055c <board_init+0xc4>)
   80516:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80518:	2056      	movs	r0, #86	; 0x56
   8051a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051e:	4b0f      	ldr	r3, [pc, #60]	; (8055c <board_init+0xc4>)
   80520:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80522:	2087      	movs	r0, #135	; 0x87
   80524:	490f      	ldr	r1, [pc, #60]	; (80564 <board_init+0xcc>)
   80526:	4b0d      	ldr	r3, [pc, #52]	; (8055c <board_init+0xc4>)
   80528:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8052a:	2037      	movs	r0, #55	; 0x37
   8052c:	490e      	ldr	r1, [pc, #56]	; (80568 <board_init+0xd0>)
   8052e:	4b0b      	ldr	r3, [pc, #44]	; (8055c <board_init+0xc4>)
   80530:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80532:	200a      	movs	r0, #10
   80534:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80538:	4b08      	ldr	r3, [pc, #32]	; (8055c <board_init+0xc4>)
   8053a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   8053c:	200b      	movs	r0, #11
   8053e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80542:	4b06      	ldr	r3, [pc, #24]	; (8055c <board_init+0xc4>)
   80544:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   80546:	208e      	movs	r0, #142	; 0x8e
   80548:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8054c:	4b03      	ldr	r3, [pc, #12]	; (8055c <board_init+0xc4>)
   8054e:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80550:	208e      	movs	r0, #142	; 0x8e
   80552:	4b06      	ldr	r3, [pc, #24]	; (8056c <board_init+0xd4>)
   80554:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80556:	bd80      	pop	{r7, pc}
   80558:	400e1a50 	.word	0x400e1a50
   8055c:	00080e8d 	.word	0x00080e8d
   80560:	00080dc5 	.word	0x00080dc5
   80564:	28000079 	.word	0x28000079
   80568:	28000059 	.word	0x28000059
   8056c:	00080df9 	.word	0x00080df9

00080570 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80570:	b480      	push	{r7}
   80572:	b083      	sub	sp, #12
   80574:	af00      	add	r7, sp, #0
   80576:	6078      	str	r0, [r7, #4]
   80578:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8057a:	687b      	ldr	r3, [r7, #4]
   8057c:	683a      	ldr	r2, [r7, #0]
   8057e:	601a      	str	r2, [r3, #0]
}
   80580:	370c      	adds	r7, #12
   80582:	46bd      	mov	sp, r7
   80584:	f85d 7b04 	ldr.w	r7, [sp], #4
   80588:	4770      	bx	lr
   8058a:	bf00      	nop

0008058c <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   8058c:	b480      	push	{r7}
   8058e:	b083      	sub	sp, #12
   80590:	af00      	add	r7, sp, #0
   80592:	6078      	str	r0, [r7, #4]
   80594:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80596:	687b      	ldr	r3, [r7, #4]
   80598:	683a      	ldr	r2, [r7, #0]
   8059a:	605a      	str	r2, [r3, #4]
}
   8059c:	370c      	adds	r7, #12
   8059e:	46bd      	mov	sp, r7
   805a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   805a4:	4770      	bx	lr
   805a6:	bf00      	nop

000805a8 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   805a8:	b580      	push	{r7, lr}
   805aa:	b082      	sub	sp, #8
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	685b      	ldr	r3, [r3, #4]
   805b4:	4618      	mov	r0, r3
   805b6:	4b02      	ldr	r3, [pc, #8]	; (805c0 <sn65hvd234_enable+0x18>)
   805b8:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   805ba:	3708      	adds	r7, #8
   805bc:	46bd      	mov	sp, r7
   805be:	bd80      	pop	{r7, pc}
   805c0:	00080dc5 	.word	0x00080dc5

000805c4 <sn65hvd234_disable>:
 * \brief Disable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable(sn65hvd234_ctrl_t *p_component)
{
   805c4:	b580      	push	{r7, lr}
   805c6:	b082      	sub	sp, #8
   805c8:	af00      	add	r7, sp, #0
   805ca:	6078      	str	r0, [r7, #4]
	/* Lower EN pin of SN65HVD234 to Low Level (0.0v). */
	pio_set_pin_low(p_component->pio_en_idx);
   805cc:	687b      	ldr	r3, [r7, #4]
   805ce:	685b      	ldr	r3, [r3, #4]
   805d0:	4618      	mov	r0, r3
   805d2:	4b02      	ldr	r3, [pc, #8]	; (805dc <sn65hvd234_disable+0x18>)
   805d4:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_LOW);
}
   805d6:	3708      	adds	r7, #8
   805d8:	46bd      	mov	sp, r7
   805da:	bd80      	pop	{r7, pc}
   805dc:	00080df9 	.word	0x00080df9

000805e0 <sn65hvd234_enable_low_power>:
 * \brief Turn the component into low power mode, listening only.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable_low_power(sn65hvd234_ctrl_t *p_component)
{
   805e0:	b580      	push	{r7, lr}
   805e2:	b082      	sub	sp, #8
   805e4:	af00      	add	r7, sp, #0
   805e6:	6078      	str	r0, [r7, #4]
	/* Raise RS pin of SN65HVD234 to more than 0.75v. */
	pio_set_pin_high(p_component->pio_rs_idx);
   805e8:	687b      	ldr	r3, [r7, #4]
   805ea:	681b      	ldr	r3, [r3, #0]
   805ec:	4618      	mov	r0, r3
   805ee:	4b02      	ldr	r3, [pc, #8]	; (805f8 <sn65hvd234_enable_low_power+0x18>)
   805f0:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_HIGH);
}
   805f2:	3708      	adds	r7, #8
   805f4:	46bd      	mov	sp, r7
   805f6:	bd80      	pop	{r7, pc}
   805f8:	00080dc5 	.word	0x00080dc5

000805fc <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   805fc:	b580      	push	{r7, lr}
   805fe:	b082      	sub	sp, #8
   80600:	af00      	add	r7, sp, #0
   80602:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   80604:	687b      	ldr	r3, [r7, #4]
   80606:	681b      	ldr	r3, [r3, #0]
   80608:	4618      	mov	r0, r3
   8060a:	4b02      	ldr	r3, [pc, #8]	; (80614 <sn65hvd234_disable_low_power+0x18>)
   8060c:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   8060e:	3708      	adds	r7, #8
   80610:	46bd      	mov	sp, r7
   80612:	bd80      	pop	{r7, pc}
   80614:	00080df9 	.word	0x00080df9

00080618 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80618:	b580      	push	{r7, lr}
   8061a:	b08a      	sub	sp, #40	; 0x28
   8061c:	af00      	add	r7, sp, #0
   8061e:	60f8      	str	r0, [r7, #12]
   80620:	60b9      	str	r1, [r7, #8]
   80622:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80624:	687b      	ldr	r3, [r7, #4]
   80626:	f246 12a8 	movw	r2, #25000	; 0x61a8
   8062a:	fb02 f203 	mul.w	r2, r2, r3
   8062e:	68bb      	ldr	r3, [r7, #8]
   80630:	4413      	add	r3, r2
   80632:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   80634:	687b      	ldr	r3, [r7, #4]
   80636:	f246 11a8 	movw	r1, #25000	; 0x61a8
   8063a:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8063e:	fbb2 f3f3 	udiv	r3, r2, r3
   80642:	2b80      	cmp	r3, #128	; 0x80
   80644:	d901      	bls.n	8064a <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   80646:	2300      	movs	r3, #0
   80648:	e085      	b.n	80756 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   8064a:	68bb      	ldr	r3, [r7, #8]
   8064c:	085a      	lsrs	r2, r3, #1
   8064e:	687b      	ldr	r3, [r7, #4]
   80650:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80654:	fb01 f303 	mul.w	r3, r1, r3
   80658:	429a      	cmp	r2, r3
   8065a:	d201      	bcs.n	80660 <can_set_baudrate+0x48>
		return 0;
   8065c:	2300      	movs	r3, #0
   8065e:	e07a      	b.n	80756 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   80660:	2308      	movs	r3, #8
   80662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   80666:	f04f 33ff 	mov.w	r3, #4294967295
   8066a:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8066c:	2308      	movs	r3, #8
   8066e:	77fb      	strb	r3, [r7, #31]
   80670:	e02b      	b.n	806ca <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80672:	7ffb      	ldrb	r3, [r7, #31]
   80674:	687a      	ldr	r2, [r7, #4]
   80676:	fb02 f303 	mul.w	r3, r2, r3
   8067a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8067e:	fb02 f303 	mul.w	r3, r2, r3
   80682:	68ba      	ldr	r2, [r7, #8]
   80684:	fbb2 f3f3 	udiv	r3, r2, r3
   80688:	2b80      	cmp	r3, #128	; 0x80
   8068a:	d81b      	bhi.n	806c4 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   8068c:	7ffb      	ldrb	r3, [r7, #31]
   8068e:	687a      	ldr	r2, [r7, #4]
   80690:	fb02 f303 	mul.w	r3, r2, r3
   80694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80698:	fb02 f203 	mul.w	r2, r2, r3
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	fbb3 f1f2 	udiv	r1, r3, r2
   806a2:	fb02 f201 	mul.w	r2, r2, r1
   806a6:	1a9b      	subs	r3, r3, r2
   806a8:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   806aa:	69ba      	ldr	r2, [r7, #24]
   806ac:	6a3b      	ldr	r3, [r7, #32]
   806ae:	429a      	cmp	r2, r3
   806b0:	d208      	bcs.n	806c4 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   806b2:	69bb      	ldr	r3, [r7, #24]
   806b4:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   806b6:	7ffb      	ldrb	r3, [r7, #31]
   806b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   806bc:	6a3b      	ldr	r3, [r7, #32]
   806be:	2b00      	cmp	r3, #0
   806c0:	d100      	bne.n	806c4 <can_set_baudrate+0xac>
					break;
   806c2:	e005      	b.n	806d0 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   806c4:	7ffb      	ldrb	r3, [r7, #31]
   806c6:	3301      	adds	r3, #1
   806c8:	77fb      	strb	r3, [r7, #31]
   806ca:	7ffb      	ldrb	r3, [r7, #31]
   806cc:	2b19      	cmp	r3, #25
   806ce:	d9d0      	bls.n	80672 <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   806d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   806d4:	687a      	ldr	r2, [r7, #4]
   806d6:	fb02 f303 	mul.w	r3, r2, r3
   806da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   806de:	fb02 f303 	mul.w	r3, r2, r3
   806e2:	68ba      	ldr	r2, [r7, #8]
   806e4:	fbb2 f3f3 	udiv	r3, r2, r3
   806e8:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   806ea:	7dfb      	ldrb	r3, [r7, #23]
   806ec:	2b01      	cmp	r3, #1
   806ee:	d801      	bhi.n	806f4 <can_set_baudrate+0xdc>
		return 0;
   806f0:	2300      	movs	r3, #0
   806f2:	e030      	b.n	80756 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   806f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   806f8:	f1a3 0208 	sub.w	r2, r3, #8
   806fc:	4613      	mov	r3, r2
   806fe:	005b      	lsls	r3, r3, #1
   80700:	4413      	add	r3, r2
   80702:	005b      	lsls	r3, r3, #1
   80704:	4a16      	ldr	r2, [pc, #88]	; (80760 <can_set_baudrate+0x148>)
   80706:	4413      	add	r3, r2
   80708:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   8070a:	68f8      	ldr	r0, [r7, #12]
   8070c:	4b15      	ldr	r3, [pc, #84]	; (80764 <can_set_baudrate+0x14c>)
   8070e:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80710:	693b      	ldr	r3, [r7, #16]
   80712:	78db      	ldrb	r3, [r3, #3]
   80714:	3b01      	subs	r3, #1
   80716:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   8071a:	693b      	ldr	r3, [r7, #16]
   8071c:	789b      	ldrb	r3, [r3, #2]
   8071e:	3b01      	subs	r3, #1
   80720:	011b      	lsls	r3, r3, #4
   80722:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80726:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80728:	693b      	ldr	r3, [r7, #16]
   8072a:	785b      	ldrb	r3, [r3, #1]
   8072c:	3b01      	subs	r3, #1
   8072e:	021b      	lsls	r3, r3, #8
   80730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80734:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80736:	693b      	ldr	r3, [r7, #16]
   80738:	791b      	ldrb	r3, [r3, #4]
   8073a:	3b01      	subs	r3, #1
   8073c:	031b      	lsls	r3, r3, #12
   8073e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80742:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   80744:	7dfb      	ldrb	r3, [r7, #23]
   80746:	3b01      	subs	r3, #1
   80748:	041b      	lsls	r3, r3, #16
   8074a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8074e:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80750:	68fb      	ldr	r3, [r7, #12]
   80752:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   80754:	2301      	movs	r3, #1
}
   80756:	4618      	mov	r0, r3
   80758:	3728      	adds	r7, #40	; 0x28
   8075a:	46bd      	mov	sp, r7
   8075c:	bd80      	pop	{r7, pc}
   8075e:	bf00      	nop
   80760:	000829f8 	.word	0x000829f8
   80764:	00080811 	.word	0x00080811

00080768 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   80768:	b580      	push	{r7, lr}
   8076a:	b086      	sub	sp, #24
   8076c:	af00      	add	r7, sp, #0
   8076e:	60f8      	str	r0, [r7, #12]
   80770:	60b9      	str	r1, [r7, #8]
   80772:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   80774:	68f8      	ldr	r0, [r7, #12]
   80776:	68b9      	ldr	r1, [r7, #8]
   80778:	687a      	ldr	r2, [r7, #4]
   8077a:	4b17      	ldr	r3, [pc, #92]	; (807d8 <can_init+0x70>)
   8077c:	4798      	blx	r3
   8077e:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   80780:	697b      	ldr	r3, [r7, #20]
   80782:	2b00      	cmp	r3, #0
   80784:	d101      	bne.n	8078a <can_init+0x22>
		return 0;
   80786:	2300      	movs	r3, #0
   80788:	e021      	b.n	807ce <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   8078a:	68f8      	ldr	r0, [r7, #12]
   8078c:	4b13      	ldr	r3, [pc, #76]	; (807dc <can_init+0x74>)
   8078e:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   80790:	68f8      	ldr	r0, [r7, #12]
   80792:	4b13      	ldr	r3, [pc, #76]	; (807e0 <can_init+0x78>)
   80794:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80796:	2300      	movs	r3, #0
   80798:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   8079a:	2300      	movs	r3, #0
   8079c:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8079e:	e006      	b.n	807ae <can_init+0x46>
		ul_flag = can_get_status(p_can);
   807a0:	68f8      	ldr	r0, [r7, #12]
   807a2:	4b10      	ldr	r3, [pc, #64]	; (807e4 <can_init+0x7c>)
   807a4:	4798      	blx	r3
   807a6:	6178      	str	r0, [r7, #20]
		ul_tick++;
   807a8:	693b      	ldr	r3, [r7, #16]
   807aa:	3301      	adds	r3, #1
   807ac:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   807ae:	697b      	ldr	r3, [r7, #20]
   807b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   807b4:	2b00      	cmp	r3, #0
   807b6:	d103      	bne.n	807c0 <can_init+0x58>
   807b8:	693a      	ldr	r2, [r7, #16]
   807ba:	4b0b      	ldr	r3, [pc, #44]	; (807e8 <can_init+0x80>)
   807bc:	429a      	cmp	r2, r3
   807be:	d9ef      	bls.n	807a0 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   807c0:	693a      	ldr	r2, [r7, #16]
   807c2:	4b0a      	ldr	r3, [pc, #40]	; (807ec <can_init+0x84>)
   807c4:	429a      	cmp	r2, r3
   807c6:	d101      	bne.n	807cc <can_init+0x64>
		return 0;
   807c8:	2300      	movs	r3, #0
   807ca:	e000      	b.n	807ce <can_init+0x66>
	} else {
		return 1;
   807cc:	2301      	movs	r3, #1
	}
}
   807ce:	4618      	mov	r0, r3
   807d0:	3718      	adds	r7, #24
   807d2:	46bd      	mov	sp, r7
   807d4:	bd80      	pop	{r7, pc}
   807d6:	bf00      	nop
   807d8:	00080619 	.word	0x00080619
   807dc:	00080ba9 	.word	0x00080ba9
   807e0:	000807f1 	.word	0x000807f1
   807e4:	00080869 	.word	0x00080869
   807e8:	0001869f 	.word	0x0001869f
   807ec:	000186a0 	.word	0x000186a0

000807f0 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   807f0:	b480      	push	{r7}
   807f2:	b083      	sub	sp, #12
   807f4:	af00      	add	r7, sp, #0
   807f6:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   807f8:	687b      	ldr	r3, [r7, #4]
   807fa:	681b      	ldr	r3, [r3, #0]
   807fc:	f043 0201 	orr.w	r2, r3, #1
   80800:	687b      	ldr	r3, [r7, #4]
   80802:	601a      	str	r2, [r3, #0]
}
   80804:	370c      	adds	r7, #12
   80806:	46bd      	mov	sp, r7
   80808:	f85d 7b04 	ldr.w	r7, [sp], #4
   8080c:	4770      	bx	lr
   8080e:	bf00      	nop

00080810 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   80810:	b480      	push	{r7}
   80812:	b083      	sub	sp, #12
   80814:	af00      	add	r7, sp, #0
   80816:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80818:	687b      	ldr	r3, [r7, #4]
   8081a:	681b      	ldr	r3, [r3, #0]
   8081c:	f023 0201 	bic.w	r2, r3, #1
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	601a      	str	r2, [r3, #0]
}
   80824:	370c      	adds	r7, #12
   80826:	46bd      	mov	sp, r7
   80828:	f85d 7b04 	ldr.w	r7, [sp], #4
   8082c:	4770      	bx	lr
   8082e:	bf00      	nop

00080830 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   80830:	b480      	push	{r7}
   80832:	b083      	sub	sp, #12
   80834:	af00      	add	r7, sp, #0
   80836:	6078      	str	r0, [r7, #4]
   80838:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   8083a:	687b      	ldr	r3, [r7, #4]
   8083c:	683a      	ldr	r2, [r7, #0]
   8083e:	605a      	str	r2, [r3, #4]
}
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	f85d 7b04 	ldr.w	r7, [sp], #4
   80848:	4770      	bx	lr
   8084a:	bf00      	nop

0008084c <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8084c:	b480      	push	{r7}
   8084e:	b083      	sub	sp, #12
   80850:	af00      	add	r7, sp, #0
   80852:	6078      	str	r0, [r7, #4]
   80854:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   80856:	687b      	ldr	r3, [r7, #4]
   80858:	683a      	ldr	r2, [r7, #0]
   8085a:	609a      	str	r2, [r3, #8]
}
   8085c:	370c      	adds	r7, #12
   8085e:	46bd      	mov	sp, r7
   80860:	f85d 7b04 	ldr.w	r7, [sp], #4
   80864:	4770      	bx	lr
   80866:	bf00      	nop

00080868 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   80868:	b480      	push	{r7}
   8086a:	b083      	sub	sp, #12
   8086c:	af00      	add	r7, sp, #0
   8086e:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	691b      	ldr	r3, [r3, #16]
}
   80874:	4618      	mov	r0, r3
   80876:	370c      	adds	r7, #12
   80878:	46bd      	mov	sp, r7
   8087a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8087e:	4770      	bx	lr

00080880 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   80880:	b480      	push	{r7}
   80882:	b085      	sub	sp, #20
   80884:	af00      	add	r7, sp, #0
   80886:	6078      	str	r0, [r7, #4]
   80888:	460b      	mov	r3, r1
   8088a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   8088c:	687b      	ldr	r3, [r7, #4]
   8088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   80890:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80894:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   80896:	78fa      	ldrb	r2, [r7, #3]
   80898:	68fb      	ldr	r3, [r7, #12]
   8089a:	431a      	orrs	r2, r3
   8089c:	687b      	ldr	r3, [r7, #4]
   8089e:	625a      	str	r2, [r3, #36]	; 0x24
}
   808a0:	3714      	adds	r7, #20
   808a2:	46bd      	mov	sp, r7
   808a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   808a8:	4770      	bx	lr
   808aa:	bf00      	nop

000808ac <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   808ac:	b480      	push	{r7}
   808ae:	b083      	sub	sp, #12
   808b0:	af00      	add	r7, sp, #0
   808b2:	6078      	str	r0, [r7, #4]
   808b4:	460b      	mov	r3, r1
   808b6:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   808b8:	78fb      	ldrb	r3, [r7, #3]
   808ba:	687a      	ldr	r2, [r7, #4]
   808bc:	015b      	lsls	r3, r3, #5
   808be:	4413      	add	r3, r2
   808c0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   808c4:	681b      	ldr	r3, [r3, #0]
}
   808c6:	4618      	mov	r0, r3
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop

000808d4 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   808d4:	b480      	push	{r7}
   808d6:	b085      	sub	sp, #20
   808d8:	af00      	add	r7, sp, #0
   808da:	6078      	str	r0, [r7, #4]
   808dc:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   808de:	683b      	ldr	r3, [r7, #0]
   808e0:	681b      	ldr	r3, [r3, #0]
   808e2:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   808e4:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   808e6:	683a      	ldr	r2, [r7, #0]
   808e8:	7992      	ldrb	r2, [r2, #6]
   808ea:	0412      	lsls	r2, r2, #16
   808ec:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   808f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   808f4:	6879      	ldr	r1, [r7, #4]
   808f6:	015b      	lsls	r3, r3, #5
   808f8:	440b      	add	r3, r1
   808fa:	f503 7306 	add.w	r3, r3, #536	; 0x218
   808fe:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   80900:	3714      	adds	r7, #20
   80902:	46bd      	mov	sp, r7
   80904:	f85d 7b04 	ldr.w	r7, [sp], #4
   80908:	4770      	bx	lr
   8090a:	bf00      	nop

0008090c <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   8090c:	b480      	push	{r7}
   8090e:	b085      	sub	sp, #20
   80910:	af00      	add	r7, sp, #0
   80912:	6078      	str	r0, [r7, #4]
   80914:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80916:	683b      	ldr	r3, [r7, #0]
   80918:	681b      	ldr	r3, [r3, #0]
   8091a:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8091c:	683b      	ldr	r3, [r7, #0]
   8091e:	791b      	ldrb	r3, [r3, #4]
   80920:	2b00      	cmp	r3, #0
   80922:	d12e      	bne.n	80982 <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   80924:	7bfb      	ldrb	r3, [r7, #15]
   80926:	687a      	ldr	r2, [r7, #4]
   80928:	3310      	adds	r3, #16
   8092a:	015b      	lsls	r3, r3, #5
   8092c:	4413      	add	r3, r2
   8092e:	2200      	movs	r2, #0
   80930:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   80932:	7bfb      	ldrb	r3, [r7, #15]
   80934:	687a      	ldr	r2, [r7, #4]
   80936:	3310      	adds	r3, #16
   80938:	015b      	lsls	r3, r3, #5
   8093a:	4413      	add	r3, r2
   8093c:	2200      	movs	r2, #0
   8093e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   80940:	7bfb      	ldrb	r3, [r7, #15]
   80942:	687a      	ldr	r2, [r7, #4]
   80944:	015b      	lsls	r3, r3, #5
   80946:	4413      	add	r3, r2
   80948:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8094c:	2200      	movs	r2, #0
   8094e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   80950:	7bfb      	ldrb	r3, [r7, #15]
   80952:	687a      	ldr	r2, [r7, #4]
   80954:	015b      	lsls	r3, r3, #5
   80956:	4413      	add	r3, r2
   80958:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8095c:	2200      	movs	r2, #0
   8095e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   80960:	7bfb      	ldrb	r3, [r7, #15]
   80962:	687a      	ldr	r2, [r7, #4]
   80964:	015b      	lsls	r3, r3, #5
   80966:	4413      	add	r3, r2
   80968:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8096c:	2200      	movs	r2, #0
   8096e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   80970:	7bfb      	ldrb	r3, [r7, #15]
   80972:	687a      	ldr	r2, [r7, #4]
   80974:	015b      	lsls	r3, r3, #5
   80976:	4413      	add	r3, r2
   80978:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8097c:	2200      	movs	r2, #0
   8097e:	605a      	str	r2, [r3, #4]
		return;
   80980:	e04e      	b.n	80a20 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80982:	7bfb      	ldrb	r3, [r7, #15]
   80984:	7bfa      	ldrb	r2, [r7, #15]
   80986:	6879      	ldr	r1, [r7, #4]
   80988:	3210      	adds	r2, #16
   8098a:	0152      	lsls	r2, r2, #5
   8098c:	440a      	add	r2, r1
   8098e:	6812      	ldr	r2, [r2, #0]
   80990:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   80994:	683a      	ldr	r2, [r7, #0]
   80996:	79d2      	ldrb	r2, [r2, #7]
   80998:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   8099a:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   8099c:	6879      	ldr	r1, [r7, #4]
   8099e:	3310      	adds	r3, #16
   809a0:	015b      	lsls	r3, r3, #5
   809a2:	440b      	add	r3, r1
   809a4:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   809a6:	683b      	ldr	r3, [r7, #0]
   809a8:	795b      	ldrb	r3, [r3, #5]
   809aa:	2b00      	cmp	r3, #0
   809ac:	d015      	beq.n	809da <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   809ae:	7bfb      	ldrb	r3, [r7, #15]
   809b0:	683a      	ldr	r2, [r7, #0]
   809b2:	68d2      	ldr	r2, [r2, #12]
   809b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   809b8:	6879      	ldr	r1, [r7, #4]
   809ba:	3310      	adds	r3, #16
   809bc:	015b      	lsls	r3, r3, #5
   809be:	440b      	add	r3, r1
   809c0:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   809c2:	7bfb      	ldrb	r3, [r7, #15]
   809c4:	683a      	ldr	r2, [r7, #0]
   809c6:	6912      	ldr	r2, [r2, #16]
   809c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   809cc:	6879      	ldr	r1, [r7, #4]
   809ce:	015b      	lsls	r3, r3, #5
   809d0:	440b      	add	r3, r1
   809d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   809d6:	601a      	str	r2, [r3, #0]
   809d8:	e010      	b.n	809fc <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   809da:	7bfb      	ldrb	r3, [r7, #15]
   809dc:	683a      	ldr	r2, [r7, #0]
   809de:	68d2      	ldr	r2, [r2, #12]
   809e0:	6879      	ldr	r1, [r7, #4]
   809e2:	3310      	adds	r3, #16
   809e4:	015b      	lsls	r3, r3, #5
   809e6:	440b      	add	r3, r1
   809e8:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   809ea:	7bfb      	ldrb	r3, [r7, #15]
   809ec:	683a      	ldr	r2, [r7, #0]
   809ee:	6912      	ldr	r2, [r2, #16]
   809f0:	6879      	ldr	r1, [r7, #4]
   809f2:	015b      	lsls	r3, r3, #5
   809f4:	440b      	add	r3, r1
   809f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   809fa:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   809fc:	7bfb      	ldrb	r3, [r7, #15]
   809fe:	7bfa      	ldrb	r2, [r7, #15]
   80a00:	6879      	ldr	r1, [r7, #4]
   80a02:	3210      	adds	r2, #16
   80a04:	0152      	lsls	r2, r2, #5
   80a06:	440a      	add	r2, r1
   80a08:	6812      	ldr	r2, [r2, #0]
   80a0a:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80a0e:	683a      	ldr	r2, [r7, #0]
   80a10:	7912      	ldrb	r2, [r2, #4]
   80a12:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   80a14:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a16:	6879      	ldr	r1, [r7, #4]
   80a18:	3310      	adds	r3, #16
   80a1a:	015b      	lsls	r3, r3, #5
   80a1c:	440b      	add	r3, r1
   80a1e:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80a20:	3714      	adds	r7, #20
   80a22:	46bd      	mov	sp, r7
   80a24:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop

00080a2c <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80a2c:	b580      	push	{r7, lr}
   80a2e:	b086      	sub	sp, #24
   80a30:	af00      	add	r7, sp, #0
   80a32:	6078      	str	r0, [r7, #4]
   80a34:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80a36:	2300      	movs	r3, #0
   80a38:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80a3a:	683b      	ldr	r3, [r7, #0]
   80a3c:	681b      	ldr	r3, [r3, #0]
   80a3e:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   80a40:	683b      	ldr	r3, [r7, #0]
   80a42:	689b      	ldr	r3, [r3, #8]
   80a44:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   80a46:	68fb      	ldr	r3, [r7, #12]
   80a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80a4c:	2b00      	cmp	r3, #0
   80a4e:	d006      	beq.n	80a5e <can_mailbox_read+0x32>
   80a50:	68fb      	ldr	r3, [r7, #12]
   80a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80a56:	2b00      	cmp	r3, #0
   80a58:	d001      	beq.n	80a5e <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   80a5a:	2302      	movs	r3, #2
   80a5c:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   80a5e:	7cfb      	ldrb	r3, [r7, #19]
   80a60:	687a      	ldr	r2, [r7, #4]
   80a62:	015b      	lsls	r3, r3, #5
   80a64:	4413      	add	r3, r2
   80a66:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a6a:	685b      	ldr	r3, [r3, #4]
   80a6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80a70:	683b      	ldr	r3, [r7, #0]
   80a72:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80a74:	68fb      	ldr	r3, [r7, #12]
   80a76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80a7a:	0c1b      	lsrs	r3, r3, #16
   80a7c:	b2da      	uxtb	r2, r3
   80a7e:	683b      	ldr	r3, [r7, #0]
   80a80:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   80a82:	7cfb      	ldrb	r3, [r7, #19]
   80a84:	687a      	ldr	r2, [r7, #4]
   80a86:	015b      	lsls	r3, r3, #5
   80a88:	4413      	add	r3, r2
   80a8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80a8e:	685a      	ldr	r2, [r3, #4]
   80a90:	683b      	ldr	r3, [r7, #0]
   80a92:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   80a94:	683b      	ldr	r3, [r7, #0]
   80a96:	799b      	ldrb	r3, [r3, #6]
   80a98:	2b04      	cmp	r3, #4
   80a9a:	d908      	bls.n	80aae <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   80a9c:	7cfb      	ldrb	r3, [r7, #19]
   80a9e:	687a      	ldr	r2, [r7, #4]
   80aa0:	015b      	lsls	r3, r3, #5
   80aa2:	4413      	add	r3, r2
   80aa4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80aa8:	681a      	ldr	r2, [r3, #0]
   80aaa:	683b      	ldr	r3, [r7, #0]
   80aac:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   80aae:	7cfb      	ldrb	r3, [r7, #19]
   80ab0:	687a      	ldr	r2, [r7, #4]
   80ab2:	015b      	lsls	r3, r3, #5
   80ab4:	4413      	add	r3, r2
   80ab6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80aba:	681a      	ldr	r2, [r3, #0]
   80abc:	683b      	ldr	r3, [r7, #0]
   80abe:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80ac0:	683b      	ldr	r3, [r7, #0]
   80ac2:	689b      	ldr	r3, [r3, #8]
   80ac4:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   80ac6:	68fb      	ldr	r3, [r7, #12]
   80ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80acc:	2b00      	cmp	r3, #0
   80ace:	d003      	beq.n	80ad8 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   80ad0:	697b      	ldr	r3, [r7, #20]
   80ad2:	f043 0304 	orr.w	r3, r3, #4
   80ad6:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   80ad8:	6878      	ldr	r0, [r7, #4]
   80ada:	6839      	ldr	r1, [r7, #0]
   80adc:	4b03      	ldr	r3, [pc, #12]	; (80aec <can_mailbox_read+0xc0>)
   80ade:	4798      	blx	r3

	return ul_retval;
   80ae0:	697b      	ldr	r3, [r7, #20]
}
   80ae2:	4618      	mov	r0, r3
   80ae4:	3718      	adds	r7, #24
   80ae6:	46bd      	mov	sp, r7
   80ae8:	bd80      	pop	{r7, pc}
   80aea:	bf00      	nop
   80aec:	000808d5 	.word	0x000808d5

00080af0 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80af0:	b580      	push	{r7, lr}
   80af2:	b084      	sub	sp, #16
   80af4:	af00      	add	r7, sp, #0
   80af6:	6078      	str	r0, [r7, #4]
   80af8:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80afa:	683b      	ldr	r3, [r7, #0]
   80afc:	681b      	ldr	r3, [r3, #0]
   80afe:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   80b00:	7bfb      	ldrb	r3, [r7, #15]
   80b02:	6878      	ldr	r0, [r7, #4]
   80b04:	4619      	mov	r1, r3
   80b06:	4b27      	ldr	r3, [pc, #156]	; (80ba4 <can_mailbox_write+0xb4>)
   80b08:	4798      	blx	r3
   80b0a:	4602      	mov	r2, r0
   80b0c:	683b      	ldr	r3, [r7, #0]
   80b0e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b10:	683b      	ldr	r3, [r7, #0]
   80b12:	689b      	ldr	r3, [r3, #8]
   80b14:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   80b16:	68bb      	ldr	r3, [r7, #8]
   80b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80b1c:	2b00      	cmp	r3, #0
   80b1e:	d101      	bne.n	80b24 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80b20:	2301      	movs	r3, #1
   80b22:	e03b      	b.n	80b9c <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   80b24:	683b      	ldr	r3, [r7, #0]
   80b26:	795b      	ldrb	r3, [r3, #5]
   80b28:	2b00      	cmp	r3, #0
   80b2a:	d00b      	beq.n	80b44 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80b2c:	7bfb      	ldrb	r3, [r7, #15]
   80b2e:	683a      	ldr	r2, [r7, #0]
   80b30:	6912      	ldr	r2, [r2, #16]
   80b32:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80b36:	6879      	ldr	r1, [r7, #4]
   80b38:	015b      	lsls	r3, r3, #5
   80b3a:	440b      	add	r3, r1
   80b3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80b40:	601a      	str	r2, [r3, #0]
   80b42:	e008      	b.n	80b56 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80b44:	7bfb      	ldrb	r3, [r7, #15]
   80b46:	683a      	ldr	r2, [r7, #0]
   80b48:	6912      	ldr	r2, [r2, #16]
   80b4a:	6879      	ldr	r1, [r7, #4]
   80b4c:	015b      	lsls	r3, r3, #5
   80b4e:	440b      	add	r3, r1
   80b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80b54:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80b56:	7bfb      	ldrb	r3, [r7, #15]
   80b58:	683a      	ldr	r2, [r7, #0]
   80b5a:	6992      	ldr	r2, [r2, #24]
   80b5c:	6879      	ldr	r1, [r7, #4]
   80b5e:	015b      	lsls	r3, r3, #5
   80b60:	440b      	add	r3, r1
   80b62:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80b66:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   80b68:	683b      	ldr	r3, [r7, #0]
   80b6a:	799b      	ldrb	r3, [r3, #6]
   80b6c:	2b04      	cmp	r3, #4
   80b6e:	d908      	bls.n	80b82 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80b70:	7bfb      	ldrb	r3, [r7, #15]
   80b72:	683a      	ldr	r2, [r7, #0]
   80b74:	69d2      	ldr	r2, [r2, #28]
   80b76:	6879      	ldr	r1, [r7, #4]
   80b78:	015b      	lsls	r3, r3, #5
   80b7a:	440b      	add	r3, r1
   80b7c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80b80:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80b82:	7bfb      	ldrb	r3, [r7, #15]
   80b84:	683a      	ldr	r2, [r7, #0]
   80b86:	7992      	ldrb	r2, [r2, #6]
   80b88:	0412      	lsls	r2, r2, #16
   80b8a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80b8e:	6879      	ldr	r1, [r7, #4]
   80b90:	015b      	lsls	r3, r3, #5
   80b92:	440b      	add	r3, r1
   80b94:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80b98:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   80b9a:	2300      	movs	r3, #0
}
   80b9c:	4618      	mov	r0, r3
   80b9e:	3710      	adds	r7, #16
   80ba0:	46bd      	mov	sp, r7
   80ba2:	bd80      	pop	{r7, pc}
   80ba4:	000808ad 	.word	0x000808ad

00080ba8 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80ba8:	b580      	push	{r7, lr}
   80baa:	b08c      	sub	sp, #48	; 0x30
   80bac:	af00      	add	r7, sp, #0
   80bae:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80bb0:	2300      	movs	r3, #0
   80bb2:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80bb4:	2300      	movs	r3, #0
   80bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80bba:	e00d      	b.n	80bd8 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   80bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80bc0:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   80bc2:	f107 030c 	add.w	r3, r7, #12
   80bc6:	6878      	ldr	r0, [r7, #4]
   80bc8:	4619      	mov	r1, r3
   80bca:	4b07      	ldr	r3, [pc, #28]	; (80be8 <can_reset_all_mailbox+0x40>)
   80bcc:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80bd2:	3301      	adds	r3, #1
   80bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80bdc:	2b07      	cmp	r3, #7
   80bde:	d9ed      	bls.n	80bbc <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80be0:	3730      	adds	r7, #48	; 0x30
   80be2:	46bd      	mov	sp, r7
   80be4:	bd80      	pop	{r7, pc}
   80be6:	bf00      	nop
   80be8:	0008090d 	.word	0x0008090d

00080bec <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80bec:	b480      	push	{r7}
   80bee:	b085      	sub	sp, #20
   80bf0:	af00      	add	r7, sp, #0
   80bf2:	60f8      	str	r0, [r7, #12]
   80bf4:	60b9      	str	r1, [r7, #8]
   80bf6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80bf8:	687b      	ldr	r3, [r7, #4]
   80bfa:	2b00      	cmp	r3, #0
   80bfc:	d003      	beq.n	80c06 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80bfe:	68fb      	ldr	r3, [r7, #12]
   80c00:	68ba      	ldr	r2, [r7, #8]
   80c02:	665a      	str	r2, [r3, #100]	; 0x64
   80c04:	e002      	b.n	80c0c <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c06:	68fb      	ldr	r3, [r7, #12]
   80c08:	68ba      	ldr	r2, [r7, #8]
   80c0a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80c0c:	3714      	adds	r7, #20
   80c0e:	46bd      	mov	sp, r7
   80c10:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c14:	4770      	bx	lr
   80c16:	bf00      	nop

00080c18 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   80c18:	b480      	push	{r7}
   80c1a:	b087      	sub	sp, #28
   80c1c:	af00      	add	r7, sp, #0
   80c1e:	60f8      	str	r0, [r7, #12]
   80c20:	60b9      	str	r1, [r7, #8]
   80c22:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80c24:	68fb      	ldr	r3, [r7, #12]
   80c26:	687a      	ldr	r2, [r7, #4]
   80c28:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80c2a:	68bb      	ldr	r3, [r7, #8]
   80c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c30:	d01f      	beq.n	80c72 <pio_set_peripheral+0x5a>
   80c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c36:	d805      	bhi.n	80c44 <pio_set_peripheral+0x2c>
   80c38:	2b00      	cmp	r3, #0
   80c3a:	d027      	beq.n	80c8c <pio_set_peripheral+0x74>
   80c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80c40:	d00a      	beq.n	80c58 <pio_set_peripheral+0x40>
   80c42:	e01f      	b.n	80c84 <pio_set_peripheral+0x6c>
   80c44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80c48:	d020      	beq.n	80c8c <pio_set_peripheral+0x74>
   80c4a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80c4e:	d01d      	beq.n	80c8c <pio_set_peripheral+0x74>
   80c50:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80c54:	d01a      	beq.n	80c8c <pio_set_peripheral+0x74>
   80c56:	e015      	b.n	80c84 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80c58:	68fb      	ldr	r3, [r7, #12]
   80c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80c5c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80c5e:	68fb      	ldr	r3, [r7, #12]
   80c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c62:	687b      	ldr	r3, [r7, #4]
   80c64:	43d9      	mvns	r1, r3
   80c66:	697b      	ldr	r3, [r7, #20]
   80c68:	400b      	ands	r3, r1
   80c6a:	401a      	ands	r2, r3
   80c6c:	68fb      	ldr	r3, [r7, #12]
   80c6e:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80c70:	e008      	b.n	80c84 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80c72:	68fb      	ldr	r3, [r7, #12]
   80c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80c76:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80c78:	687a      	ldr	r2, [r7, #4]
   80c7a:	697b      	ldr	r3, [r7, #20]
   80c7c:	431a      	orrs	r2, r3
   80c7e:	68fb      	ldr	r3, [r7, #12]
   80c80:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80c82:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   80c84:	68fb      	ldr	r3, [r7, #12]
   80c86:	687a      	ldr	r2, [r7, #4]
   80c88:	605a      	str	r2, [r3, #4]
   80c8a:	e000      	b.n	80c8e <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   80c8c:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   80c8e:	371c      	adds	r7, #28
   80c90:	46bd      	mov	sp, r7
   80c92:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c96:	4770      	bx	lr

00080c98 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80c98:	b580      	push	{r7, lr}
   80c9a:	b084      	sub	sp, #16
   80c9c:	af00      	add	r7, sp, #0
   80c9e:	60f8      	str	r0, [r7, #12]
   80ca0:	60b9      	str	r1, [r7, #8]
   80ca2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   80ca4:	68f8      	ldr	r0, [r7, #12]
   80ca6:	68b9      	ldr	r1, [r7, #8]
   80ca8:	4b18      	ldr	r3, [pc, #96]	; (80d0c <pio_set_input+0x74>)
   80caa:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80cac:	687b      	ldr	r3, [r7, #4]
   80cae:	f003 0301 	and.w	r3, r3, #1
   80cb2:	68f8      	ldr	r0, [r7, #12]
   80cb4:	68b9      	ldr	r1, [r7, #8]
   80cb6:	461a      	mov	r2, r3
   80cb8:	4b15      	ldr	r3, [pc, #84]	; (80d10 <pio_set_input+0x78>)
   80cba:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80cbc:	687b      	ldr	r3, [r7, #4]
   80cbe:	f003 030a 	and.w	r3, r3, #10
   80cc2:	2b00      	cmp	r3, #0
   80cc4:	d003      	beq.n	80cce <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   80cc6:	68fb      	ldr	r3, [r7, #12]
   80cc8:	68ba      	ldr	r2, [r7, #8]
   80cca:	621a      	str	r2, [r3, #32]
   80ccc:	e002      	b.n	80cd4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80cce:	68fb      	ldr	r3, [r7, #12]
   80cd0:	68ba      	ldr	r2, [r7, #8]
   80cd2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80cd4:	687b      	ldr	r3, [r7, #4]
   80cd6:	f003 0302 	and.w	r3, r3, #2
   80cda:	2b00      	cmp	r3, #0
   80cdc:	d004      	beq.n	80ce8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80cde:	68fb      	ldr	r3, [r7, #12]
   80ce0:	68ba      	ldr	r2, [r7, #8]
   80ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   80ce6:	e008      	b.n	80cfa <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80ce8:	687b      	ldr	r3, [r7, #4]
   80cea:	f003 0308 	and.w	r3, r3, #8
   80cee:	2b00      	cmp	r3, #0
   80cf0:	d003      	beq.n	80cfa <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80cf2:	68fb      	ldr	r3, [r7, #12]
   80cf4:	68ba      	ldr	r2, [r7, #8]
   80cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80cfa:	68fb      	ldr	r3, [r7, #12]
   80cfc:	68ba      	ldr	r2, [r7, #8]
   80cfe:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80d00:	68fb      	ldr	r3, [r7, #12]
   80d02:	68ba      	ldr	r2, [r7, #8]
   80d04:	601a      	str	r2, [r3, #0]
}
   80d06:	3710      	adds	r7, #16
   80d08:	46bd      	mov	sp, r7
   80d0a:	bd80      	pop	{r7, pc}
   80d0c:	00080d79 	.word	0x00080d79
   80d10:	00080bed 	.word	0x00080bed

00080d14 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80d14:	b580      	push	{r7, lr}
   80d16:	b084      	sub	sp, #16
   80d18:	af00      	add	r7, sp, #0
   80d1a:	60f8      	str	r0, [r7, #12]
   80d1c:	60b9      	str	r1, [r7, #8]
   80d1e:	607a      	str	r2, [r7, #4]
   80d20:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80d22:	68f8      	ldr	r0, [r7, #12]
   80d24:	68b9      	ldr	r1, [r7, #8]
   80d26:	4b12      	ldr	r3, [pc, #72]	; (80d70 <pio_set_output+0x5c>)
   80d28:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80d2a:	68f8      	ldr	r0, [r7, #12]
   80d2c:	68b9      	ldr	r1, [r7, #8]
   80d2e:	69ba      	ldr	r2, [r7, #24]
   80d30:	4b10      	ldr	r3, [pc, #64]	; (80d74 <pio_set_output+0x60>)
   80d32:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80d34:	683b      	ldr	r3, [r7, #0]
   80d36:	2b00      	cmp	r3, #0
   80d38:	d003      	beq.n	80d42 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   80d3a:	68fb      	ldr	r3, [r7, #12]
   80d3c:	68ba      	ldr	r2, [r7, #8]
   80d3e:	651a      	str	r2, [r3, #80]	; 0x50
   80d40:	e002      	b.n	80d48 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80d42:	68fb      	ldr	r3, [r7, #12]
   80d44:	68ba      	ldr	r2, [r7, #8]
   80d46:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80d48:	687b      	ldr	r3, [r7, #4]
   80d4a:	2b00      	cmp	r3, #0
   80d4c:	d003      	beq.n	80d56 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80d4e:	68fb      	ldr	r3, [r7, #12]
   80d50:	68ba      	ldr	r2, [r7, #8]
   80d52:	631a      	str	r2, [r3, #48]	; 0x30
   80d54:	e002      	b.n	80d5c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80d56:	68fb      	ldr	r3, [r7, #12]
   80d58:	68ba      	ldr	r2, [r7, #8]
   80d5a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80d5c:	68fb      	ldr	r3, [r7, #12]
   80d5e:	68ba      	ldr	r2, [r7, #8]
   80d60:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80d62:	68fb      	ldr	r3, [r7, #12]
   80d64:	68ba      	ldr	r2, [r7, #8]
   80d66:	601a      	str	r2, [r3, #0]
}
   80d68:	3710      	adds	r7, #16
   80d6a:	46bd      	mov	sp, r7
   80d6c:	bd80      	pop	{r7, pc}
   80d6e:	bf00      	nop
   80d70:	00080d79 	.word	0x00080d79
   80d74:	00080bed 	.word	0x00080bed

00080d78 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   80d78:	b480      	push	{r7}
   80d7a:	b083      	sub	sp, #12
   80d7c:	af00      	add	r7, sp, #0
   80d7e:	6078      	str	r0, [r7, #4]
   80d80:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   80d82:	687b      	ldr	r3, [r7, #4]
   80d84:	683a      	ldr	r2, [r7, #0]
   80d86:	645a      	str	r2, [r3, #68]	; 0x44
}
   80d88:	370c      	adds	r7, #12
   80d8a:	46bd      	mov	sp, r7
   80d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d90:	4770      	bx	lr
   80d92:	bf00      	nop

00080d94 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   80d94:	b480      	push	{r7}
   80d96:	b083      	sub	sp, #12
   80d98:	af00      	add	r7, sp, #0
   80d9a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   80d9c:	687b      	ldr	r3, [r7, #4]
   80d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   80da0:	4618      	mov	r0, r3
   80da2:	370c      	adds	r7, #12
   80da4:	46bd      	mov	sp, r7
   80da6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80daa:	4770      	bx	lr

00080dac <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   80dac:	b480      	push	{r7}
   80dae:	b083      	sub	sp, #12
   80db0:	af00      	add	r7, sp, #0
   80db2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   80db4:	687b      	ldr	r3, [r7, #4]
   80db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   80db8:	4618      	mov	r0, r3
   80dba:	370c      	adds	r7, #12
   80dbc:	46bd      	mov	sp, r7
   80dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dc2:	4770      	bx	lr

00080dc4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   80dc4:	b480      	push	{r7}
   80dc6:	b085      	sub	sp, #20
   80dc8:	af00      	add	r7, sp, #0
   80dca:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	095b      	lsrs	r3, r3, #5
   80dd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80dd4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80dd8:	025b      	lsls	r3, r3, #9
   80dda:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80ddc:	687b      	ldr	r3, [r7, #4]
   80dde:	f003 031f 	and.w	r3, r3, #31
   80de2:	2201      	movs	r2, #1
   80de4:	fa02 f303 	lsl.w	r3, r2, r3
   80de8:	461a      	mov	r2, r3
   80dea:	68fb      	ldr	r3, [r7, #12]
   80dec:	631a      	str	r2, [r3, #48]	; 0x30
}
   80dee:	3714      	adds	r7, #20
   80df0:	46bd      	mov	sp, r7
   80df2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80df6:	4770      	bx	lr

00080df8 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   80df8:	b480      	push	{r7}
   80dfa:	b085      	sub	sp, #20
   80dfc:	af00      	add	r7, sp, #0
   80dfe:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e00:	687b      	ldr	r3, [r7, #4]
   80e02:	095b      	lsrs	r3, r3, #5
   80e04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e08:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e0c:	025b      	lsls	r3, r3, #9
   80e0e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80e10:	687b      	ldr	r3, [r7, #4]
   80e12:	f003 031f 	and.w	r3, r3, #31
   80e16:	2201      	movs	r2, #1
   80e18:	fa02 f303 	lsl.w	r3, r2, r3
   80e1c:	461a      	mov	r2, r3
   80e1e:	68fb      	ldr	r3, [r7, #12]
   80e20:	635a      	str	r2, [r3, #52]	; 0x34
}
   80e22:	3714      	adds	r7, #20
   80e24:	46bd      	mov	sp, r7
   80e26:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e2a:	4770      	bx	lr

00080e2c <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80e2c:	b480      	push	{r7}
   80e2e:	b085      	sub	sp, #20
   80e30:	af00      	add	r7, sp, #0
   80e32:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e34:	687b      	ldr	r3, [r7, #4]
   80e36:	095b      	lsrs	r3, r3, #5
   80e38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e3c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e40:	025b      	lsls	r3, r3, #9
   80e42:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80e44:	68fb      	ldr	r3, [r7, #12]
   80e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   80e48:	687b      	ldr	r3, [r7, #4]
   80e4a:	f003 031f 	and.w	r3, r3, #31
   80e4e:	2101      	movs	r1, #1
   80e50:	fa01 f303 	lsl.w	r3, r1, r3
   80e54:	4013      	ands	r3, r2
   80e56:	2b00      	cmp	r3, #0
   80e58:	d009      	beq.n	80e6e <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80e5a:	687b      	ldr	r3, [r7, #4]
   80e5c:	f003 031f 	and.w	r3, r3, #31
   80e60:	2201      	movs	r2, #1
   80e62:	fa02 f303 	lsl.w	r3, r2, r3
   80e66:	461a      	mov	r2, r3
   80e68:	68fb      	ldr	r3, [r7, #12]
   80e6a:	635a      	str	r2, [r3, #52]	; 0x34
   80e6c:	e008      	b.n	80e80 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80e6e:	687b      	ldr	r3, [r7, #4]
   80e70:	f003 031f 	and.w	r3, r3, #31
   80e74:	2201      	movs	r2, #1
   80e76:	fa02 f303 	lsl.w	r3, r2, r3
   80e7a:	461a      	mov	r2, r3
   80e7c:	68fb      	ldr	r3, [r7, #12]
   80e7e:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   80e80:	3714      	adds	r7, #20
   80e82:	46bd      	mov	sp, r7
   80e84:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e88:	4770      	bx	lr
   80e8a:	bf00      	nop

00080e8c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80e8c:	b590      	push	{r4, r7, lr}
   80e8e:	b087      	sub	sp, #28
   80e90:	af02      	add	r7, sp, #8
   80e92:	6078      	str	r0, [r7, #4]
   80e94:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e96:	687b      	ldr	r3, [r7, #4]
   80e98:	095b      	lsrs	r3, r3, #5
   80e9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e9e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ea2:	025b      	lsls	r3, r3, #9
   80ea4:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80ea6:	683b      	ldr	r3, [r7, #0]
   80ea8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   80eac:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80eb0:	d048      	beq.n	80f44 <pio_configure_pin+0xb8>
   80eb2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80eb6:	d806      	bhi.n	80ec6 <pio_configure_pin+0x3a>
   80eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ebc:	d00a      	beq.n	80ed4 <pio_configure_pin+0x48>
   80ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ec2:	d023      	beq.n	80f0c <pio_configure_pin+0x80>
   80ec4:	e070      	b.n	80fa8 <pio_configure_pin+0x11c>
   80ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80eca:	d047      	beq.n	80f5c <pio_configure_pin+0xd0>
   80ecc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ed0:	d044      	beq.n	80f5c <pio_configure_pin+0xd0>
   80ed2:	e069      	b.n	80fa8 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ed4:	687b      	ldr	r3, [r7, #4]
   80ed6:	f003 031f 	and.w	r3, r3, #31
   80eda:	2201      	movs	r2, #1
   80edc:	fa02 f303 	lsl.w	r3, r2, r3
   80ee0:	68f8      	ldr	r0, [r7, #12]
   80ee2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ee6:	461a      	mov	r2, r3
   80ee8:	4b33      	ldr	r3, [pc, #204]	; (80fb8 <pio_configure_pin+0x12c>)
   80eea:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80eec:	687b      	ldr	r3, [r7, #4]
   80eee:	f003 031f 	and.w	r3, r3, #31
   80ef2:	2201      	movs	r2, #1
   80ef4:	fa02 f303 	lsl.w	r3, r2, r3
   80ef8:	461a      	mov	r2, r3
   80efa:	683b      	ldr	r3, [r7, #0]
   80efc:	f003 0301 	and.w	r3, r3, #1
   80f00:	68f8      	ldr	r0, [r7, #12]
   80f02:	4611      	mov	r1, r2
   80f04:	461a      	mov	r2, r3
   80f06:	4b2d      	ldr	r3, [pc, #180]	; (80fbc <pio_configure_pin+0x130>)
   80f08:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80f0a:	e04f      	b.n	80fac <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f0c:	687b      	ldr	r3, [r7, #4]
   80f0e:	f003 031f 	and.w	r3, r3, #31
   80f12:	2201      	movs	r2, #1
   80f14:	fa02 f303 	lsl.w	r3, r2, r3
   80f18:	68f8      	ldr	r0, [r7, #12]
   80f1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f1e:	461a      	mov	r2, r3
   80f20:	4b25      	ldr	r3, [pc, #148]	; (80fb8 <pio_configure_pin+0x12c>)
   80f22:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f24:	687b      	ldr	r3, [r7, #4]
   80f26:	f003 031f 	and.w	r3, r3, #31
   80f2a:	2201      	movs	r2, #1
   80f2c:	fa02 f303 	lsl.w	r3, r2, r3
   80f30:	461a      	mov	r2, r3
   80f32:	683b      	ldr	r3, [r7, #0]
   80f34:	f003 0301 	and.w	r3, r3, #1
   80f38:	68f8      	ldr	r0, [r7, #12]
   80f3a:	4611      	mov	r1, r2
   80f3c:	461a      	mov	r2, r3
   80f3e:	4b1f      	ldr	r3, [pc, #124]	; (80fbc <pio_configure_pin+0x130>)
   80f40:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80f42:	e033      	b.n	80fac <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f44:	687b      	ldr	r3, [r7, #4]
   80f46:	f003 031f 	and.w	r3, r3, #31
   80f4a:	2201      	movs	r2, #1
   80f4c:	fa02 f303 	lsl.w	r3, r2, r3
   80f50:	68f8      	ldr	r0, [r7, #12]
   80f52:	4619      	mov	r1, r3
   80f54:	683a      	ldr	r2, [r7, #0]
   80f56:	4b1a      	ldr	r3, [pc, #104]	; (80fc0 <pio_configure_pin+0x134>)
   80f58:	4798      	blx	r3
		break;
   80f5a:	e027      	b.n	80fac <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f5c:	687b      	ldr	r3, [r7, #4]
   80f5e:	f003 031f 	and.w	r3, r3, #31
   80f62:	2201      	movs	r2, #1
   80f64:	fa02 f303 	lsl.w	r3, r2, r3
   80f68:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f6a:	683b      	ldr	r3, [r7, #0]
   80f6c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f70:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f74:	bf14      	ite	ne
   80f76:	2300      	movne	r3, #0
   80f78:	2301      	moveq	r3, #1
   80f7a:	b2db      	uxtb	r3, r3
   80f7c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   80f7e:	683b      	ldr	r3, [r7, #0]
   80f80:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f84:	2b00      	cmp	r3, #0
   80f86:	bf0c      	ite	eq
   80f88:	2300      	moveq	r3, #0
   80f8a:	2301      	movne	r3, #1
   80f8c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   80f8e:	6838      	ldr	r0, [r7, #0]
   80f90:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f94:	2800      	cmp	r0, #0
   80f96:	bf0c      	ite	eq
   80f98:	2000      	moveq	r0, #0
   80f9a:	2001      	movne	r0, #1
   80f9c:	b2c0      	uxtb	r0, r0
   80f9e:	9000      	str	r0, [sp, #0]
   80fa0:	68f8      	ldr	r0, [r7, #12]
   80fa2:	4c08      	ldr	r4, [pc, #32]	; (80fc4 <pio_configure_pin+0x138>)
   80fa4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80fa6:	e001      	b.n	80fac <pio_configure_pin+0x120>

	default:
		return 0;
   80fa8:	2300      	movs	r3, #0
   80faa:	e000      	b.n	80fae <pio_configure_pin+0x122>
	}

	return 1;
   80fac:	2301      	movs	r3, #1
}
   80fae:	4618      	mov	r0, r3
   80fb0:	3714      	adds	r7, #20
   80fb2:	46bd      	mov	sp, r7
   80fb4:	bd90      	pop	{r4, r7, pc}
   80fb6:	bf00      	nop
   80fb8:	00080c19 	.word	0x00080c19
   80fbc:	00080bed 	.word	0x00080bed
   80fc0:	00080c99 	.word	0x00080c99
   80fc4:	00080d15 	.word	0x00080d15

00080fc8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80fc8:	b580      	push	{r7, lr}
   80fca:	b084      	sub	sp, #16
   80fcc:	af00      	add	r7, sp, #0
   80fce:	6078      	str	r0, [r7, #4]
   80fd0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80fd2:	6878      	ldr	r0, [r7, #4]
   80fd4:	4b22      	ldr	r3, [pc, #136]	; (81060 <pio_handler_process+0x98>)
   80fd6:	4798      	blx	r3
   80fd8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   80fda:	6878      	ldr	r0, [r7, #4]
   80fdc:	4b21      	ldr	r3, [pc, #132]	; (81064 <pio_handler_process+0x9c>)
   80fde:	4798      	blx	r3
   80fe0:	4603      	mov	r3, r0
   80fe2:	68fa      	ldr	r2, [r7, #12]
   80fe4:	4013      	ands	r3, r2
   80fe6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   80fe8:	68fb      	ldr	r3, [r7, #12]
   80fea:	2b00      	cmp	r3, #0
   80fec:	d035      	beq.n	8105a <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   80fee:	2300      	movs	r3, #0
   80ff0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   80ff2:	e02f      	b.n	81054 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ff4:	4a1c      	ldr	r2, [pc, #112]	; (81068 <pio_handler_process+0xa0>)
   80ff6:	68bb      	ldr	r3, [r7, #8]
   80ff8:	011b      	lsls	r3, r3, #4
   80ffa:	4413      	add	r3, r2
   80ffc:	681a      	ldr	r2, [r3, #0]
   80ffe:	683b      	ldr	r3, [r7, #0]
   81000:	429a      	cmp	r2, r3
   81002:	d124      	bne.n	8104e <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81004:	4a18      	ldr	r2, [pc, #96]	; (81068 <pio_handler_process+0xa0>)
   81006:	68bb      	ldr	r3, [r7, #8]
   81008:	011b      	lsls	r3, r3, #4
   8100a:	4413      	add	r3, r2
   8100c:	685a      	ldr	r2, [r3, #4]
   8100e:	68fb      	ldr	r3, [r7, #12]
   81010:	4013      	ands	r3, r2
   81012:	2b00      	cmp	r3, #0
   81014:	d01b      	beq.n	8104e <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81016:	4a14      	ldr	r2, [pc, #80]	; (81068 <pio_handler_process+0xa0>)
   81018:	68bb      	ldr	r3, [r7, #8]
   8101a:	011b      	lsls	r3, r3, #4
   8101c:	4413      	add	r3, r2
   8101e:	3308      	adds	r3, #8
   81020:	685b      	ldr	r3, [r3, #4]
   81022:	4911      	ldr	r1, [pc, #68]	; (81068 <pio_handler_process+0xa0>)
   81024:	68ba      	ldr	r2, [r7, #8]
   81026:	0112      	lsls	r2, r2, #4
   81028:	440a      	add	r2, r1
   8102a:	6811      	ldr	r1, [r2, #0]
   8102c:	480e      	ldr	r0, [pc, #56]	; (81068 <pio_handler_process+0xa0>)
   8102e:	68ba      	ldr	r2, [r7, #8]
   81030:	0112      	lsls	r2, r2, #4
   81032:	4402      	add	r2, r0
   81034:	6852      	ldr	r2, [r2, #4]
   81036:	4608      	mov	r0, r1
   81038:	4611      	mov	r1, r2
   8103a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8103c:	4a0a      	ldr	r2, [pc, #40]	; (81068 <pio_handler_process+0xa0>)
   8103e:	68bb      	ldr	r3, [r7, #8]
   81040:	011b      	lsls	r3, r3, #4
   81042:	4413      	add	r3, r2
   81044:	685b      	ldr	r3, [r3, #4]
   81046:	43db      	mvns	r3, r3
   81048:	68fa      	ldr	r2, [r7, #12]
   8104a:	4013      	ands	r3, r2
   8104c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8104e:	68bb      	ldr	r3, [r7, #8]
   81050:	3301      	adds	r3, #1
   81052:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81054:	68fb      	ldr	r3, [r7, #12]
   81056:	2b00      	cmp	r3, #0
   81058:	d1cc      	bne.n	80ff4 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8105a:	3710      	adds	r7, #16
   8105c:	46bd      	mov	sp, r7
   8105e:	bd80      	pop	{r7, pc}
   81060:	00080d95 	.word	0x00080d95
   81064:	00080dad 	.word	0x00080dad
   81068:	20070454 	.word	0x20070454

0008106c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8106c:	b580      	push	{r7, lr}
   8106e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81070:	4802      	ldr	r0, [pc, #8]	; (8107c <PIOA_Handler+0x10>)
   81072:	210b      	movs	r1, #11
   81074:	4b02      	ldr	r3, [pc, #8]	; (81080 <PIOA_Handler+0x14>)
   81076:	4798      	blx	r3
}
   81078:	bd80      	pop	{r7, pc}
   8107a:	bf00      	nop
   8107c:	400e0e00 	.word	0x400e0e00
   81080:	00080fc9 	.word	0x00080fc9

00081084 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81084:	b580      	push	{r7, lr}
   81086:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81088:	4802      	ldr	r0, [pc, #8]	; (81094 <PIOB_Handler+0x10>)
   8108a:	210c      	movs	r1, #12
   8108c:	4b02      	ldr	r3, [pc, #8]	; (81098 <PIOB_Handler+0x14>)
   8108e:	4798      	blx	r3
}
   81090:	bd80      	pop	{r7, pc}
   81092:	bf00      	nop
   81094:	400e1000 	.word	0x400e1000
   81098:	00080fc9 	.word	0x00080fc9

0008109c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8109c:	b580      	push	{r7, lr}
   8109e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   810a0:	4802      	ldr	r0, [pc, #8]	; (810ac <PIOC_Handler+0x10>)
   810a2:	210d      	movs	r1, #13
   810a4:	4b02      	ldr	r3, [pc, #8]	; (810b0 <PIOC_Handler+0x14>)
   810a6:	4798      	blx	r3
}
   810a8:	bd80      	pop	{r7, pc}
   810aa:	bf00      	nop
   810ac:	400e1200 	.word	0x400e1200
   810b0:	00080fc9 	.word	0x00080fc9

000810b4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   810b4:	b580      	push	{r7, lr}
   810b6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   810b8:	4802      	ldr	r0, [pc, #8]	; (810c4 <PIOD_Handler+0x10>)
   810ba:	210e      	movs	r1, #14
   810bc:	4b02      	ldr	r3, [pc, #8]	; (810c8 <PIOD_Handler+0x14>)
   810be:	4798      	blx	r3
}
   810c0:	bd80      	pop	{r7, pc}
   810c2:	bf00      	nop
   810c4:	400e1400 	.word	0x400e1400
   810c8:	00080fc9 	.word	0x00080fc9

000810cc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   810cc:	b480      	push	{r7}
   810ce:	b085      	sub	sp, #20
   810d0:	af00      	add	r7, sp, #0
   810d2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   810d4:	4b1d      	ldr	r3, [pc, #116]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   810d6:	4a1d      	ldr	r2, [pc, #116]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   810d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   810da:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   810de:	687a      	ldr	r2, [r7, #4]
   810e0:	430a      	orrs	r2, r1
   810e2:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   810e8:	60fb      	str	r3, [r7, #12]
   810ea:	e007      	b.n	810fc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   810ec:	68fb      	ldr	r3, [r7, #12]
   810ee:	2b00      	cmp	r3, #0
   810f0:	d101      	bne.n	810f6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   810f2:	2301      	movs	r3, #1
   810f4:	e023      	b.n	8113e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   810f6:	68fb      	ldr	r3, [r7, #12]
   810f8:	3b01      	subs	r3, #1
   810fa:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   810fc:	4b13      	ldr	r3, [pc, #76]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   810fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81100:	f003 0308 	and.w	r3, r3, #8
   81104:	2b00      	cmp	r3, #0
   81106:	d0f1      	beq.n	810ec <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81108:	4b10      	ldr	r3, [pc, #64]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   8110a:	4a10      	ldr	r2, [pc, #64]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   8110c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8110e:	f022 0203 	bic.w	r2, r2, #3
   81112:	f042 0202 	orr.w	r2, r2, #2
   81116:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81118:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8111c:	60fb      	str	r3, [r7, #12]
   8111e:	e007      	b.n	81130 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81120:	68fb      	ldr	r3, [r7, #12]
   81122:	2b00      	cmp	r3, #0
   81124:	d101      	bne.n	8112a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81126:	2301      	movs	r3, #1
   81128:	e009      	b.n	8113e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8112a:	68fb      	ldr	r3, [r7, #12]
   8112c:	3b01      	subs	r3, #1
   8112e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81130:	4b06      	ldr	r3, [pc, #24]	; (8114c <pmc_switch_mck_to_pllack+0x80>)
   81132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81134:	f003 0308 	and.w	r3, r3, #8
   81138:	2b00      	cmp	r3, #0
   8113a:	d0f1      	beq.n	81120 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8113c:	2300      	movs	r3, #0
}
   8113e:	4618      	mov	r0, r3
   81140:	3714      	adds	r7, #20
   81142:	46bd      	mov	sp, r7
   81144:	f85d 7b04 	ldr.w	r7, [sp], #4
   81148:	4770      	bx	lr
   8114a:	bf00      	nop
   8114c:	400e0600 	.word	0x400e0600

00081150 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   81150:	b480      	push	{r7}
   81152:	b083      	sub	sp, #12
   81154:	af00      	add	r7, sp, #0
   81156:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81158:	687b      	ldr	r3, [r7, #4]
   8115a:	2b01      	cmp	r3, #1
   8115c:	d107      	bne.n	8116e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   8115e:	4a0a      	ldr	r2, [pc, #40]	; (81188 <pmc_switch_sclk_to_32kxtal+0x38>)
   81160:	4b09      	ldr	r3, [pc, #36]	; (81188 <pmc_switch_sclk_to_32kxtal+0x38>)
   81162:	689b      	ldr	r3, [r3, #8]
   81164:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8116c:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8116e:	4a06      	ldr	r2, [pc, #24]	; (81188 <pmc_switch_sclk_to_32kxtal+0x38>)
   81170:	4b05      	ldr	r3, [pc, #20]	; (81188 <pmc_switch_sclk_to_32kxtal+0x38>)
   81172:	681b      	ldr	r3, [r3, #0]
   81174:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81178:	f043 0308 	orr.w	r3, r3, #8
   8117c:	6013      	str	r3, [r2, #0]
}
   8117e:	370c      	adds	r7, #12
   81180:	46bd      	mov	sp, r7
   81182:	f85d 7b04 	ldr.w	r7, [sp], #4
   81186:	4770      	bx	lr
   81188:	400e1a10 	.word	0x400e1a10

0008118c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8118c:	b480      	push	{r7}
   8118e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81190:	4b09      	ldr	r3, [pc, #36]	; (811b8 <pmc_osc_is_ready_32kxtal+0x2c>)
   81192:	695b      	ldr	r3, [r3, #20]
   81194:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81198:	2b00      	cmp	r3, #0
   8119a:	d007      	beq.n	811ac <pmc_osc_is_ready_32kxtal+0x20>
   8119c:	4b07      	ldr	r3, [pc, #28]	; (811bc <pmc_osc_is_ready_32kxtal+0x30>)
   8119e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   811a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   811a4:	2b00      	cmp	r3, #0
   811a6:	d001      	beq.n	811ac <pmc_osc_is_ready_32kxtal+0x20>
   811a8:	2301      	movs	r3, #1
   811aa:	e000      	b.n	811ae <pmc_osc_is_ready_32kxtal+0x22>
   811ac:	2300      	movs	r3, #0
}
   811ae:	4618      	mov	r0, r3
   811b0:	46bd      	mov	sp, r7
   811b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   811b6:	4770      	bx	lr
   811b8:	400e1a10 	.word	0x400e1a10
   811bc:	400e0600 	.word	0x400e0600

000811c0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   811c0:	b480      	push	{r7}
   811c2:	b085      	sub	sp, #20
   811c4:	af00      	add	r7, sp, #0
   811c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   811c8:	2300      	movs	r3, #0
   811ca:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   811cc:	4b21      	ldr	r3, [pc, #132]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   811ce:	6a1b      	ldr	r3, [r3, #32]
   811d0:	f003 0301 	and.w	r3, r3, #1
   811d4:	2b00      	cmp	r3, #0
   811d6:	d00e      	beq.n	811f6 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   811d8:	4a1e      	ldr	r2, [pc, #120]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   811da:	4b1e      	ldr	r3, [pc, #120]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   811dc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   811de:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   811e2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   811e6:	6879      	ldr	r1, [r7, #4]
   811e8:	430b      	orrs	r3, r1
   811ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   811ee:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   811f2:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   811f4:	e00b      	b.n	8120e <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   811f6:	2301      	movs	r3, #1
   811f8:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   811fa:	4a16      	ldr	r2, [pc, #88]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   811fc:	4b15      	ldr	r3, [pc, #84]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   811fe:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   81200:	4b15      	ldr	r3, [pc, #84]	; (81258 <pmc_switch_mainck_to_fastrc+0x98>)
   81202:	400b      	ands	r3, r1
   81204:	6879      	ldr	r1, [r7, #4]
   81206:	4319      	orrs	r1, r3
   81208:	4b14      	ldr	r3, [pc, #80]	; (8125c <pmc_switch_mainck_to_fastrc+0x9c>)
   8120a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8120c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8120e:	bf00      	nop
   81210:	4b10      	ldr	r3, [pc, #64]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   81212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81218:	2b00      	cmp	r3, #0
   8121a:	d0f9      	beq.n	81210 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   8121c:	4a0d      	ldr	r2, [pc, #52]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   8121e:	4b0d      	ldr	r3, [pc, #52]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   81220:	6a1b      	ldr	r3, [r3, #32]
   81222:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   81226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8122a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8122e:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   81230:	68fb      	ldr	r3, [r7, #12]
   81232:	2b00      	cmp	r3, #0
   81234:	d009      	beq.n	8124a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81236:	4a07      	ldr	r2, [pc, #28]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   81238:	4b06      	ldr	r3, [pc, #24]	; (81254 <pmc_switch_mainck_to_fastrc+0x94>)
   8123a:	6a1b      	ldr	r3, [r3, #32]
   8123c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81240:	f023 0301 	bic.w	r3, r3, #1
   81244:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81248:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   8124a:	3714      	adds	r7, #20
   8124c:	46bd      	mov	sp, r7
   8124e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81252:	4770      	bx	lr
   81254:	400e0600 	.word	0x400e0600
   81258:	ffc8c086 	.word	0xffc8c086
   8125c:	00373f09 	.word	0x00373f09

00081260 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   81260:	b480      	push	{r7}
   81262:	b083      	sub	sp, #12
   81264:	af00      	add	r7, sp, #0
   81266:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81268:	687b      	ldr	r3, [r7, #4]
   8126a:	2b00      	cmp	r3, #0
   8126c:	d008      	beq.n	81280 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8126e:	4912      	ldr	r1, [pc, #72]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   81270:	4b11      	ldr	r3, [pc, #68]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   81272:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   81274:	4a11      	ldr	r2, [pc, #68]	; (812bc <pmc_switch_mainck_to_xtal+0x5c>)
   81276:	401a      	ands	r2, r3
   81278:	4b11      	ldr	r3, [pc, #68]	; (812c0 <pmc_switch_mainck_to_xtal+0x60>)
   8127a:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8127c:	620b      	str	r3, [r1, #32]
   8127e:	e016      	b.n	812ae <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81280:	490d      	ldr	r1, [pc, #52]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   81282:	4b0d      	ldr	r3, [pc, #52]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   81284:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   81286:	4a0f      	ldr	r2, [pc, #60]	; (812c4 <pmc_switch_mainck_to_xtal+0x64>)
   81288:	401a      	ands	r2, r3
   8128a:	4b0f      	ldr	r3, [pc, #60]	; (812c8 <pmc_switch_mainck_to_xtal+0x68>)
   8128c:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8128e:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81290:	bf00      	nop
   81292:	4b09      	ldr	r3, [pc, #36]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   81294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81296:	f003 0301 	and.w	r3, r3, #1
   8129a:	2b00      	cmp	r3, #0
   8129c:	d0f9      	beq.n	81292 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8129e:	4a06      	ldr	r2, [pc, #24]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   812a0:	4b05      	ldr	r3, [pc, #20]	; (812b8 <pmc_switch_mainck_to_xtal+0x58>)
   812a2:	6a1b      	ldr	r3, [r3, #32]
   812a4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   812a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   812ac:	6213      	str	r3, [r2, #32]
	}
}
   812ae:	370c      	adds	r7, #12
   812b0:	46bd      	mov	sp, r7
   812b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   812b6:	4770      	bx	lr
   812b8:	400e0600 	.word	0x400e0600
   812bc:	fec8fffc 	.word	0xfec8fffc
   812c0:	01370002 	.word	0x01370002
   812c4:	ffc8c0fc 	.word	0xffc8c0fc
   812c8:	00373f01 	.word	0x00373f01

000812cc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   812cc:	b480      	push	{r7}
   812ce:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   812d0:	4b04      	ldr	r3, [pc, #16]	; (812e4 <pmc_osc_is_ready_mainck+0x18>)
   812d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   812d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   812d8:	4618      	mov	r0, r3
   812da:	46bd      	mov	sp, r7
   812dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   812e0:	4770      	bx	lr
   812e2:	bf00      	nop
   812e4:	400e0600 	.word	0x400e0600

000812e8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   812e8:	b480      	push	{r7}
   812ea:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   812ec:	4b03      	ldr	r3, [pc, #12]	; (812fc <pmc_disable_pllack+0x14>)
   812ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   812f2:	629a      	str	r2, [r3, #40]	; 0x28
}
   812f4:	46bd      	mov	sp, r7
   812f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   812fa:	4770      	bx	lr
   812fc:	400e0600 	.word	0x400e0600

00081300 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81300:	b480      	push	{r7}
   81302:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81304:	4b04      	ldr	r3, [pc, #16]	; (81318 <pmc_is_locked_pllack+0x18>)
   81306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81308:	f003 0302 	and.w	r3, r3, #2
}
   8130c:	4618      	mov	r0, r3
   8130e:	46bd      	mov	sp, r7
   81310:	f85d 7b04 	ldr.w	r7, [sp], #4
   81314:	4770      	bx	lr
   81316:	bf00      	nop
   81318:	400e0600 	.word	0x400e0600

0008131c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8131c:	b480      	push	{r7}
   8131e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   81320:	4b04      	ldr	r3, [pc, #16]	; (81334 <pmc_is_locked_upll+0x18>)
   81322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81324:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81328:	4618      	mov	r0, r3
   8132a:	46bd      	mov	sp, r7
   8132c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81330:	4770      	bx	lr
   81332:	bf00      	nop
   81334:	400e0600 	.word	0x400e0600

00081338 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   81338:	b480      	push	{r7}
   8133a:	b083      	sub	sp, #12
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   81340:	687b      	ldr	r3, [r7, #4]
   81342:	2b2c      	cmp	r3, #44	; 0x2c
   81344:	d901      	bls.n	8134a <pmc_enable_periph_clk+0x12>
		return 1;
   81346:	2301      	movs	r3, #1
   81348:	e02f      	b.n	813aa <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   8134a:	687b      	ldr	r3, [r7, #4]
   8134c:	2b1f      	cmp	r3, #31
   8134e:	d813      	bhi.n	81378 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81350:	4b19      	ldr	r3, [pc, #100]	; (813b8 <pmc_enable_periph_clk+0x80>)
   81352:	699a      	ldr	r2, [r3, #24]
   81354:	687b      	ldr	r3, [r7, #4]
   81356:	2101      	movs	r1, #1
   81358:	fa01 f303 	lsl.w	r3, r1, r3
   8135c:	401a      	ands	r2, r3
   8135e:	687b      	ldr	r3, [r7, #4]
   81360:	2101      	movs	r1, #1
   81362:	fa01 f303 	lsl.w	r3, r1, r3
   81366:	429a      	cmp	r2, r3
   81368:	d01e      	beq.n	813a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   8136a:	4b13      	ldr	r3, [pc, #76]	; (813b8 <pmc_enable_periph_clk+0x80>)
   8136c:	687a      	ldr	r2, [r7, #4]
   8136e:	2101      	movs	r1, #1
   81370:	fa01 f202 	lsl.w	r2, r1, r2
   81374:	611a      	str	r2, [r3, #16]
   81376:	e017      	b.n	813a8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   81378:	687b      	ldr	r3, [r7, #4]
   8137a:	3b20      	subs	r3, #32
   8137c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8137e:	4b0e      	ldr	r3, [pc, #56]	; (813b8 <pmc_enable_periph_clk+0x80>)
   81380:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81384:	687b      	ldr	r3, [r7, #4]
   81386:	2101      	movs	r1, #1
   81388:	fa01 f303 	lsl.w	r3, r1, r3
   8138c:	401a      	ands	r2, r3
   8138e:	687b      	ldr	r3, [r7, #4]
   81390:	2101      	movs	r1, #1
   81392:	fa01 f303 	lsl.w	r3, r1, r3
   81396:	429a      	cmp	r2, r3
   81398:	d006      	beq.n	813a8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8139a:	4b07      	ldr	r3, [pc, #28]	; (813b8 <pmc_enable_periph_clk+0x80>)
   8139c:	687a      	ldr	r2, [r7, #4]
   8139e:	2101      	movs	r1, #1
   813a0:	fa01 f202 	lsl.w	r2, r1, r2
   813a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   813a8:	2300      	movs	r3, #0
}
   813aa:	4618      	mov	r0, r3
   813ac:	370c      	adds	r7, #12
   813ae:	46bd      	mov	sp, r7
   813b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   813b4:	4770      	bx	lr
   813b6:	bf00      	nop
   813b8:	400e0600 	.word	0x400e0600

000813bc <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   813bc:	b480      	push	{r7}
   813be:	b083      	sub	sp, #12
   813c0:	af00      	add	r7, sp, #0
   813c2:	6078      	str	r0, [r7, #4]
   813c4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   813c6:	687b      	ldr	r3, [r7, #4]
   813c8:	683a      	ldr	r2, [r7, #0]
   813ca:	60da      	str	r2, [r3, #12]
}
   813cc:	370c      	adds	r7, #12
   813ce:	46bd      	mov	sp, r7
   813d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   813d4:	4770      	bx	lr
   813d6:	bf00      	nop

000813d8 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   813d8:	b480      	push	{r7}
   813da:	b083      	sub	sp, #12
   813dc:	af00      	add	r7, sp, #0
   813de:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   813e0:	687b      	ldr	r3, [r7, #4]
   813e2:	691b      	ldr	r3, [r3, #16]
}
   813e4:	4618      	mov	r0, r3
   813e6:	370c      	adds	r7, #12
   813e8:	46bd      	mov	sp, r7
   813ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   813ee:	4770      	bx	lr

000813f0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   813f0:	b480      	push	{r7}
   813f2:	b083      	sub	sp, #12
   813f4:	af00      	add	r7, sp, #0
   813f6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   813f8:	687b      	ldr	r3, [r7, #4]
   813fa:	695b      	ldr	r3, [r3, #20]
}
   813fc:	4618      	mov	r0, r3
   813fe:	370c      	adds	r7, #12
   81400:	46bd      	mov	sp, r7
   81402:	f85d 7b04 	ldr.w	r7, [sp], #4
   81406:	4770      	bx	lr

00081408 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   81408:	b480      	push	{r7}
   8140a:	b085      	sub	sp, #20
   8140c:	af00      	add	r7, sp, #0
   8140e:	6078      	str	r0, [r7, #4]
   81410:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   81412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   81416:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81418:	e006      	b.n	81428 <usart_putchar+0x20>
		if (!timeout--) {
   8141a:	68fb      	ldr	r3, [r7, #12]
   8141c:	1e5a      	subs	r2, r3, #1
   8141e:	60fa      	str	r2, [r7, #12]
   81420:	2b00      	cmp	r3, #0
   81422:	d101      	bne.n	81428 <usart_putchar+0x20>
			return 1;
   81424:	2301      	movs	r3, #1
   81426:	e00b      	b.n	81440 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81428:	687b      	ldr	r3, [r7, #4]
   8142a:	695b      	ldr	r3, [r3, #20]
   8142c:	f003 0302 	and.w	r3, r3, #2
   81430:	2b00      	cmp	r3, #0
   81432:	d0f2      	beq.n	8141a <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81434:	683b      	ldr	r3, [r7, #0]
   81436:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8143a:	687b      	ldr	r3, [r7, #4]
   8143c:	61da      	str	r2, [r3, #28]

	return 0;
   8143e:	2300      	movs	r3, #0
}
   81440:	4618      	mov	r0, r3
   81442:	3714      	adds	r7, #20
   81444:	46bd      	mov	sp, r7
   81446:	f85d 7b04 	ldr.w	r7, [sp], #4
   8144a:	4770      	bx	lr

0008144c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   8144c:	b480      	push	{r7}
   8144e:	b085      	sub	sp, #20
   81450:	af00      	add	r7, sp, #0
   81452:	6078      	str	r0, [r7, #4]
   81454:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   81456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8145a:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8145c:	e006      	b.n	8146c <usart_getchar+0x20>
		if (!timeout--) {
   8145e:	68fb      	ldr	r3, [r7, #12]
   81460:	1e5a      	subs	r2, r3, #1
   81462:	60fa      	str	r2, [r7, #12]
   81464:	2b00      	cmp	r3, #0
   81466:	d101      	bne.n	8146c <usart_getchar+0x20>
			return 1;
   81468:	2301      	movs	r3, #1
   8146a:	e00c      	b.n	81486 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8146c:	687b      	ldr	r3, [r7, #4]
   8146e:	695b      	ldr	r3, [r3, #20]
   81470:	f003 0301 	and.w	r3, r3, #1
   81474:	2b00      	cmp	r3, #0
   81476:	d0f2      	beq.n	8145e <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81478:	687b      	ldr	r3, [r7, #4]
   8147a:	699b      	ldr	r3, [r3, #24]
   8147c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81480:	683b      	ldr	r3, [r7, #0]
   81482:	601a      	str	r2, [r3, #0]

	return 0;
   81484:	2300      	movs	r3, #0
}
   81486:	4618      	mov	r0, r3
   81488:	3714      	adds	r7, #20
   8148a:	46bd      	mov	sp, r7
   8148c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81490:	4770      	bx	lr
   81492:	bf00      	nop

00081494 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   81494:	b480      	push	{r7}
   81496:	b083      	sub	sp, #12
   81498:	af00      	add	r7, sp, #0
   8149a:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   8149c:	687a      	ldr	r2, [r7, #4]
   8149e:	4b05      	ldr	r3, [pc, #20]	; (814b4 <wdt_restart+0x20>)
   814a0:	429a      	cmp	r2, r3
   814a2:	d102      	bne.n	814aa <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   814a4:	687b      	ldr	r3, [r7, #4]
   814a6:	4a04      	ldr	r2, [pc, #16]	; (814b8 <wdt_restart+0x24>)
   814a8:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   814aa:	370c      	adds	r7, #12
   814ac:	46bd      	mov	sp, r7
   814ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   814b2:	4770      	bx	lr
   814b4:	400e1a50 	.word	0x400e1a50
   814b8:	a5000001 	.word	0xa5000001

000814bc <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   814bc:	b480      	push	{r7}
   814be:	b083      	sub	sp, #12
   814c0:	af00      	add	r7, sp, #0
   814c2:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   814c4:	687b      	ldr	r3, [r7, #4]
   814c6:	689b      	ldr	r3, [r3, #8]
}
   814c8:	4618      	mov	r0, r3
   814ca:	370c      	adds	r7, #12
   814cc:	46bd      	mov	sp, r7
   814ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   814d2:	4770      	bx	lr

000814d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   814d4:	b480      	push	{r7}
   814d6:	af00      	add	r7, sp, #0
	while (1) {
	}
   814d8:	e7fe      	b.n	814d8 <Dummy_Handler+0x4>
   814da:	bf00      	nop

000814dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   814dc:	b580      	push	{r7, lr}
   814de:	b082      	sub	sp, #8
   814e0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   814e2:	4b1e      	ldr	r3, [pc, #120]	; (8155c <Reset_Handler+0x80>)
   814e4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   814e6:	4b1e      	ldr	r3, [pc, #120]	; (81560 <Reset_Handler+0x84>)
   814e8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   814ea:	687a      	ldr	r2, [r7, #4]
   814ec:	683b      	ldr	r3, [r7, #0]
   814ee:	429a      	cmp	r2, r3
   814f0:	d00c      	beq.n	8150c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   814f2:	e007      	b.n	81504 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   814f4:	683b      	ldr	r3, [r7, #0]
   814f6:	1d1a      	adds	r2, r3, #4
   814f8:	603a      	str	r2, [r7, #0]
   814fa:	687a      	ldr	r2, [r7, #4]
   814fc:	1d11      	adds	r1, r2, #4
   814fe:	6079      	str	r1, [r7, #4]
   81500:	6812      	ldr	r2, [r2, #0]
   81502:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81504:	683a      	ldr	r2, [r7, #0]
   81506:	4b17      	ldr	r3, [pc, #92]	; (81564 <Reset_Handler+0x88>)
   81508:	429a      	cmp	r2, r3
   8150a:	d3f3      	bcc.n	814f4 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8150c:	4b16      	ldr	r3, [pc, #88]	; (81568 <Reset_Handler+0x8c>)
   8150e:	603b      	str	r3, [r7, #0]
   81510:	e004      	b.n	8151c <Reset_Handler+0x40>
		*pDest++ = 0;
   81512:	683b      	ldr	r3, [r7, #0]
   81514:	1d1a      	adds	r2, r3, #4
   81516:	603a      	str	r2, [r7, #0]
   81518:	2200      	movs	r2, #0
   8151a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8151c:	683a      	ldr	r2, [r7, #0]
   8151e:	4b13      	ldr	r3, [pc, #76]	; (8156c <Reset_Handler+0x90>)
   81520:	429a      	cmp	r2, r3
   81522:	d3f6      	bcc.n	81512 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81524:	4b12      	ldr	r3, [pc, #72]	; (81570 <Reset_Handler+0x94>)
   81526:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81528:	4a12      	ldr	r2, [pc, #72]	; (81574 <Reset_Handler+0x98>)
   8152a:	687b      	ldr	r3, [r7, #4]
   8152c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   81530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81534:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81536:	687b      	ldr	r3, [r7, #4]
   81538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8153c:	d309      	bcc.n	81552 <Reset_Handler+0x76>
   8153e:	687a      	ldr	r2, [r7, #4]
   81540:	4b0d      	ldr	r3, [pc, #52]	; (81578 <Reset_Handler+0x9c>)
   81542:	429a      	cmp	r2, r3
   81544:	d805      	bhi.n	81552 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81546:	4b0b      	ldr	r3, [pc, #44]	; (81574 <Reset_Handler+0x98>)
   81548:	4a0a      	ldr	r2, [pc, #40]	; (81574 <Reset_Handler+0x98>)
   8154a:	6892      	ldr	r2, [r2, #8]
   8154c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81550:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81552:	4b0a      	ldr	r3, [pc, #40]	; (8157c <Reset_Handler+0xa0>)
   81554:	4798      	blx	r3

	/* Branch to main function */
	main();
   81556:	4b0a      	ldr	r3, [pc, #40]	; (81580 <Reset_Handler+0xa4>)
   81558:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8155a:	e7fe      	b.n	8155a <Reset_Handler+0x7e>
   8155c:	00082ab0 	.word	0x00082ab0
   81560:	20070000 	.word	0x20070000
   81564:	20070438 	.word	0x20070438
   81568:	20070438 	.word	0x20070438
   8156c:	200705c4 	.word	0x200705c4
   81570:	00080000 	.word	0x00080000
   81574:	e000ed00 	.word	0xe000ed00
   81578:	200fffff 	.word	0x200fffff
   8157c:	0008275d 	.word	0x0008275d
   81580:	00082559 	.word	0x00082559

00081584 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81584:	b480      	push	{r7}
   81586:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81588:	4b56      	ldr	r3, [pc, #344]	; (816e4 <SystemCoreClockUpdate+0x160>)
   8158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8158c:	f003 0303 	and.w	r3, r3, #3
   81590:	2b03      	cmp	r3, #3
   81592:	f200 808a 	bhi.w	816aa <SystemCoreClockUpdate+0x126>
   81596:	a101      	add	r1, pc, #4	; (adr r1, 8159c <SystemCoreClockUpdate+0x18>)
   81598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   8159c:	000815ad 	.word	0x000815ad
   815a0:	000815cd 	.word	0x000815cd
   815a4:	0008161d 	.word	0x0008161d
   815a8:	0008161d 	.word	0x0008161d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815ac:	4b4e      	ldr	r3, [pc, #312]	; (816e8 <SystemCoreClockUpdate+0x164>)
   815ae:	695b      	ldr	r3, [r3, #20]
   815b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   815b4:	2b00      	cmp	r3, #0
   815b6:	d004      	beq.n	815c2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815b8:	4b4c      	ldr	r3, [pc, #304]	; (816ec <SystemCoreClockUpdate+0x168>)
   815ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   815be:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   815c0:	e073      	b.n	816aa <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   815c2:	4b4a      	ldr	r3, [pc, #296]	; (816ec <SystemCoreClockUpdate+0x168>)
   815c4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   815c8:	601a      	str	r2, [r3, #0]
		}
		break;
   815ca:	e06e      	b.n	816aa <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815cc:	4b45      	ldr	r3, [pc, #276]	; (816e4 <SystemCoreClockUpdate+0x160>)
   815ce:	6a1b      	ldr	r3, [r3, #32]
   815d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   815d4:	2b00      	cmp	r3, #0
   815d6:	d003      	beq.n	815e0 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   815d8:	4b44      	ldr	r3, [pc, #272]	; (816ec <SystemCoreClockUpdate+0x168>)
   815da:	4a45      	ldr	r2, [pc, #276]	; (816f0 <SystemCoreClockUpdate+0x16c>)
   815dc:	601a      	str	r2, [r3, #0]
   815de:	e01c      	b.n	8161a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   815e0:	4b42      	ldr	r3, [pc, #264]	; (816ec <SystemCoreClockUpdate+0x168>)
   815e2:	4a44      	ldr	r2, [pc, #272]	; (816f4 <SystemCoreClockUpdate+0x170>)
   815e4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   815e6:	4b3f      	ldr	r3, [pc, #252]	; (816e4 <SystemCoreClockUpdate+0x160>)
   815e8:	6a1b      	ldr	r3, [r3, #32]
   815ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   815ee:	2b10      	cmp	r3, #16
   815f0:	d004      	beq.n	815fc <SystemCoreClockUpdate+0x78>
   815f2:	2b20      	cmp	r3, #32
   815f4:	d008      	beq.n	81608 <SystemCoreClockUpdate+0x84>
   815f6:	2b00      	cmp	r3, #0
   815f8:	d00e      	beq.n	81618 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   815fa:	e00e      	b.n	8161a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   815fc:	4b3b      	ldr	r3, [pc, #236]	; (816ec <SystemCoreClockUpdate+0x168>)
   815fe:	681b      	ldr	r3, [r3, #0]
   81600:	005a      	lsls	r2, r3, #1
   81602:	4b3a      	ldr	r3, [pc, #232]	; (816ec <SystemCoreClockUpdate+0x168>)
   81604:	601a      	str	r2, [r3, #0]
				break;
   81606:	e008      	b.n	8161a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81608:	4b38      	ldr	r3, [pc, #224]	; (816ec <SystemCoreClockUpdate+0x168>)
   8160a:	681a      	ldr	r2, [r3, #0]
   8160c:	4613      	mov	r3, r2
   8160e:	005b      	lsls	r3, r3, #1
   81610:	441a      	add	r2, r3
   81612:	4b36      	ldr	r3, [pc, #216]	; (816ec <SystemCoreClockUpdate+0x168>)
   81614:	601a      	str	r2, [r3, #0]
				break;
   81616:	e000      	b.n	8161a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   81618:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8161a:	e046      	b.n	816aa <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8161c:	4b31      	ldr	r3, [pc, #196]	; (816e4 <SystemCoreClockUpdate+0x160>)
   8161e:	6a1b      	ldr	r3, [r3, #32]
   81620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81624:	2b00      	cmp	r3, #0
   81626:	d003      	beq.n	81630 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81628:	4b30      	ldr	r3, [pc, #192]	; (816ec <SystemCoreClockUpdate+0x168>)
   8162a:	4a31      	ldr	r2, [pc, #196]	; (816f0 <SystemCoreClockUpdate+0x16c>)
   8162c:	601a      	str	r2, [r3, #0]
   8162e:	e01c      	b.n	8166a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81630:	4b2e      	ldr	r3, [pc, #184]	; (816ec <SystemCoreClockUpdate+0x168>)
   81632:	4a30      	ldr	r2, [pc, #192]	; (816f4 <SystemCoreClockUpdate+0x170>)
   81634:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81636:	4b2b      	ldr	r3, [pc, #172]	; (816e4 <SystemCoreClockUpdate+0x160>)
   81638:	6a1b      	ldr	r3, [r3, #32]
   8163a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8163e:	2b10      	cmp	r3, #16
   81640:	d004      	beq.n	8164c <SystemCoreClockUpdate+0xc8>
   81642:	2b20      	cmp	r3, #32
   81644:	d008      	beq.n	81658 <SystemCoreClockUpdate+0xd4>
   81646:	2b00      	cmp	r3, #0
   81648:	d00e      	beq.n	81668 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8164a:	e00e      	b.n	8166a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8164c:	4b27      	ldr	r3, [pc, #156]	; (816ec <SystemCoreClockUpdate+0x168>)
   8164e:	681b      	ldr	r3, [r3, #0]
   81650:	005a      	lsls	r2, r3, #1
   81652:	4b26      	ldr	r3, [pc, #152]	; (816ec <SystemCoreClockUpdate+0x168>)
   81654:	601a      	str	r2, [r3, #0]
				break;
   81656:	e008      	b.n	8166a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81658:	4b24      	ldr	r3, [pc, #144]	; (816ec <SystemCoreClockUpdate+0x168>)
   8165a:	681a      	ldr	r2, [r3, #0]
   8165c:	4613      	mov	r3, r2
   8165e:	005b      	lsls	r3, r3, #1
   81660:	441a      	add	r2, r3
   81662:	4b22      	ldr	r3, [pc, #136]	; (816ec <SystemCoreClockUpdate+0x168>)
   81664:	601a      	str	r2, [r3, #0]
				break;
   81666:	e000      	b.n	8166a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   81668:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8166a:	4b1e      	ldr	r3, [pc, #120]	; (816e4 <SystemCoreClockUpdate+0x160>)
   8166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8166e:	f003 0303 	and.w	r3, r3, #3
   81672:	2b02      	cmp	r3, #2
   81674:	d115      	bne.n	816a2 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81676:	4b1b      	ldr	r3, [pc, #108]	; (816e4 <SystemCoreClockUpdate+0x160>)
   81678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8167a:	4b1f      	ldr	r3, [pc, #124]	; (816f8 <SystemCoreClockUpdate+0x174>)
   8167c:	4013      	ands	r3, r2
   8167e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   81680:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81682:	4a1a      	ldr	r2, [pc, #104]	; (816ec <SystemCoreClockUpdate+0x168>)
   81684:	6812      	ldr	r2, [r2, #0]
   81686:	fb02 f203 	mul.w	r2, r2, r3
   8168a:	4b18      	ldr	r3, [pc, #96]	; (816ec <SystemCoreClockUpdate+0x168>)
   8168c:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8168e:	4b17      	ldr	r3, [pc, #92]	; (816ec <SystemCoreClockUpdate+0x168>)
   81690:	681a      	ldr	r2, [r3, #0]
   81692:	4b14      	ldr	r3, [pc, #80]	; (816e4 <SystemCoreClockUpdate+0x160>)
   81694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81696:	b2db      	uxtb	r3, r3
   81698:	fbb2 f2f3 	udiv	r2, r2, r3
   8169c:	4b13      	ldr	r3, [pc, #76]	; (816ec <SystemCoreClockUpdate+0x168>)
   8169e:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   816a0:	e002      	b.n	816a8 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   816a2:	4b12      	ldr	r3, [pc, #72]	; (816ec <SystemCoreClockUpdate+0x168>)
   816a4:	4a15      	ldr	r2, [pc, #84]	; (816fc <SystemCoreClockUpdate+0x178>)
   816a6:	601a      	str	r2, [r3, #0]
		}
		break;
   816a8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   816aa:	4b0e      	ldr	r3, [pc, #56]	; (816e4 <SystemCoreClockUpdate+0x160>)
   816ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   816b2:	2b70      	cmp	r3, #112	; 0x70
   816b4:	d108      	bne.n	816c8 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   816b6:	4b0d      	ldr	r3, [pc, #52]	; (816ec <SystemCoreClockUpdate+0x168>)
   816b8:	681a      	ldr	r2, [r3, #0]
   816ba:	4b11      	ldr	r3, [pc, #68]	; (81700 <SystemCoreClockUpdate+0x17c>)
   816bc:	fba3 1302 	umull	r1, r3, r3, r2
   816c0:	085a      	lsrs	r2, r3, #1
   816c2:	4b0a      	ldr	r3, [pc, #40]	; (816ec <SystemCoreClockUpdate+0x168>)
   816c4:	601a      	str	r2, [r3, #0]
   816c6:	e009      	b.n	816dc <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   816c8:	4b08      	ldr	r3, [pc, #32]	; (816ec <SystemCoreClockUpdate+0x168>)
   816ca:	681a      	ldr	r2, [r3, #0]
   816cc:	4b05      	ldr	r3, [pc, #20]	; (816e4 <SystemCoreClockUpdate+0x160>)
   816ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   816d4:	091b      	lsrs	r3, r3, #4
   816d6:	40da      	lsrs	r2, r3
   816d8:	4b04      	ldr	r3, [pc, #16]	; (816ec <SystemCoreClockUpdate+0x168>)
   816da:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   816dc:	46bd      	mov	sp, r7
   816de:	f85d 7b04 	ldr.w	r7, [sp], #4
   816e2:	4770      	bx	lr
   816e4:	400e0600 	.word	0x400e0600
   816e8:	400e1a10 	.word	0x400e1a10
   816ec:	20070000 	.word	0x20070000
   816f0:	00b71b00 	.word	0x00b71b00
   816f4:	003d0900 	.word	0x003d0900
   816f8:	07ff0000 	.word	0x07ff0000
   816fc:	0e4e1c00 	.word	0x0e4e1c00
   81700:	aaaaaaab 	.word	0xaaaaaaab

00081704 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   81704:	b480      	push	{r7}
   81706:	b083      	sub	sp, #12
   81708:	af00      	add	r7, sp, #0
   8170a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8170c:	687a      	ldr	r2, [r7, #4]
   8170e:	4b1f      	ldr	r3, [pc, #124]	; (8178c <system_init_flash+0x88>)
   81710:	429a      	cmp	r2, r3
   81712:	d806      	bhi.n	81722 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81714:	4b1e      	ldr	r3, [pc, #120]	; (81790 <system_init_flash+0x8c>)
   81716:	2200      	movs	r2, #0
   81718:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8171a:	4b1e      	ldr	r3, [pc, #120]	; (81794 <system_init_flash+0x90>)
   8171c:	2200      	movs	r2, #0
   8171e:	601a      	str	r2, [r3, #0]
   81720:	e02e      	b.n	81780 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81722:	687a      	ldr	r2, [r7, #4]
   81724:	4b1c      	ldr	r3, [pc, #112]	; (81798 <system_init_flash+0x94>)
   81726:	429a      	cmp	r2, r3
   81728:	d808      	bhi.n	8173c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8172a:	4b19      	ldr	r3, [pc, #100]	; (81790 <system_init_flash+0x8c>)
   8172c:	f44f 7280 	mov.w	r2, #256	; 0x100
   81730:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81732:	4b18      	ldr	r3, [pc, #96]	; (81794 <system_init_flash+0x90>)
   81734:	f44f 7280 	mov.w	r2, #256	; 0x100
   81738:	601a      	str	r2, [r3, #0]
   8173a:	e021      	b.n	81780 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8173c:	687a      	ldr	r2, [r7, #4]
   8173e:	4b17      	ldr	r3, [pc, #92]	; (8179c <system_init_flash+0x98>)
   81740:	429a      	cmp	r2, r3
   81742:	d808      	bhi.n	81756 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81744:	4b12      	ldr	r3, [pc, #72]	; (81790 <system_init_flash+0x8c>)
   81746:	f44f 7200 	mov.w	r2, #512	; 0x200
   8174a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   8174c:	4b11      	ldr	r3, [pc, #68]	; (81794 <system_init_flash+0x90>)
   8174e:	f44f 7200 	mov.w	r2, #512	; 0x200
   81752:	601a      	str	r2, [r3, #0]
   81754:	e014      	b.n	81780 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   81756:	687a      	ldr	r2, [r7, #4]
   81758:	4b11      	ldr	r3, [pc, #68]	; (817a0 <system_init_flash+0x9c>)
   8175a:	429a      	cmp	r2, r3
   8175c:	d808      	bhi.n	81770 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8175e:	4b0c      	ldr	r3, [pc, #48]	; (81790 <system_init_flash+0x8c>)
   81760:	f44f 7240 	mov.w	r2, #768	; 0x300
   81764:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   81766:	4b0b      	ldr	r3, [pc, #44]	; (81794 <system_init_flash+0x90>)
   81768:	f44f 7240 	mov.w	r2, #768	; 0x300
   8176c:	601a      	str	r2, [r3, #0]
   8176e:	e007      	b.n	81780 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   81770:	4b07      	ldr	r3, [pc, #28]	; (81790 <system_init_flash+0x8c>)
   81772:	f44f 6280 	mov.w	r2, #1024	; 0x400
   81776:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   81778:	4b06      	ldr	r3, [pc, #24]	; (81794 <system_init_flash+0x90>)
   8177a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8177e:	601a      	str	r2, [r3, #0]
	}
}
   81780:	370c      	adds	r7, #12
   81782:	46bd      	mov	sp, r7
   81784:	f85d 7b04 	ldr.w	r7, [sp], #4
   81788:	4770      	bx	lr
   8178a:	bf00      	nop
   8178c:	0157529f 	.word	0x0157529f
   81790:	400e0a00 	.word	0x400e0a00
   81794:	400e0c00 	.word	0x400e0c00
   81798:	0206cc7f 	.word	0x0206cc7f
   8179c:	0328b73f 	.word	0x0328b73f
   817a0:	04a62f7f 	.word	0x04a62f7f

000817a4 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   817a4:	b480      	push	{r7}
   817a6:	b085      	sub	sp, #20
   817a8:	af00      	add	r7, sp, #0
   817aa:	6078      	str	r0, [r7, #4]
   817ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   817ae:	687b      	ldr	r3, [r7, #4]
   817b0:	685b      	ldr	r3, [r3, #4]
   817b2:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   817b4:	683b      	ldr	r3, [r7, #0]
   817b6:	68fa      	ldr	r2, [r7, #12]
   817b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   817ba:	68fb      	ldr	r3, [r7, #12]
   817bc:	689a      	ldr	r2, [r3, #8]
   817be:	683b      	ldr	r3, [r7, #0]
   817c0:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   817c2:	68fb      	ldr	r3, [r7, #12]
   817c4:	689b      	ldr	r3, [r3, #8]
   817c6:	683a      	ldr	r2, [r7, #0]
   817c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   817ca:	68fb      	ldr	r3, [r7, #12]
   817cc:	683a      	ldr	r2, [r7, #0]
   817ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   817d0:	683b      	ldr	r3, [r7, #0]
   817d2:	687a      	ldr	r2, [r7, #4]
   817d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   817d6:	687b      	ldr	r3, [r7, #4]
   817d8:	681b      	ldr	r3, [r3, #0]
   817da:	1c5a      	adds	r2, r3, #1
   817dc:	687b      	ldr	r3, [r7, #4]
   817de:	601a      	str	r2, [r3, #0]
}
   817e0:	3714      	adds	r7, #20
   817e2:	46bd      	mov	sp, r7
   817e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop

000817ec <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   817ec:	b480      	push	{r7}
   817ee:	b085      	sub	sp, #20
   817f0:	af00      	add	r7, sp, #0
   817f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   817f4:	687b      	ldr	r3, [r7, #4]
   817f6:	691b      	ldr	r3, [r3, #16]
   817f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   817fa:	687b      	ldr	r3, [r7, #4]
   817fc:	685b      	ldr	r3, [r3, #4]
   817fe:	687a      	ldr	r2, [r7, #4]
   81800:	6892      	ldr	r2, [r2, #8]
   81802:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81804:	687b      	ldr	r3, [r7, #4]
   81806:	689b      	ldr	r3, [r3, #8]
   81808:	687a      	ldr	r2, [r7, #4]
   8180a:	6852      	ldr	r2, [r2, #4]
   8180c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8180e:	68fb      	ldr	r3, [r7, #12]
   81810:	685a      	ldr	r2, [r3, #4]
   81812:	687b      	ldr	r3, [r7, #4]
   81814:	429a      	cmp	r2, r3
   81816:	d103      	bne.n	81820 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81818:	687b      	ldr	r3, [r7, #4]
   8181a:	689a      	ldr	r2, [r3, #8]
   8181c:	68fb      	ldr	r3, [r7, #12]
   8181e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81820:	687b      	ldr	r3, [r7, #4]
   81822:	2200      	movs	r2, #0
   81824:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   81826:	68fb      	ldr	r3, [r7, #12]
   81828:	681b      	ldr	r3, [r3, #0]
   8182a:	1e5a      	subs	r2, r3, #1
   8182c:	68fb      	ldr	r3, [r7, #12]
   8182e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81830:	68fb      	ldr	r3, [r7, #12]
   81832:	681b      	ldr	r3, [r3, #0]
}
   81834:	4618      	mov	r0, r3
   81836:	3714      	adds	r7, #20
   81838:	46bd      	mov	sp, r7
   8183a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8183e:	4770      	bx	lr

00081840 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   81840:	4b07      	ldr	r3, [pc, #28]	; (81860 <pxCurrentTCBConst2>)
   81842:	6819      	ldr	r1, [r3, #0]
   81844:	6808      	ldr	r0, [r1, #0]
   81846:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8184a:	f380 8809 	msr	PSP, r0
   8184e:	f3bf 8f6f 	isb	sy
   81852:	f04f 0000 	mov.w	r0, #0
   81856:	f380 8811 	msr	BASEPRI, r0
   8185a:	f04e 0e0d 	orr.w	lr, lr, #13
   8185e:	4770      	bx	lr

00081860 <pxCurrentTCBConst2>:
   81860:	200704cc 	.word	0x200704cc

00081864 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81864:	b580      	push	{r7, lr}
   81866:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   81868:	4b0c      	ldr	r3, [pc, #48]	; (8189c <vPortEnterCritical+0x38>)
   8186a:	4798      	blx	r3
	uxCriticalNesting++;
   8186c:	4b0c      	ldr	r3, [pc, #48]	; (818a0 <vPortEnterCritical+0x3c>)
   8186e:	681b      	ldr	r3, [r3, #0]
   81870:	1c5a      	adds	r2, r3, #1
   81872:	4b0b      	ldr	r3, [pc, #44]	; (818a0 <vPortEnterCritical+0x3c>)
   81874:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   81876:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   8187a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8187e:	4b08      	ldr	r3, [pc, #32]	; (818a0 <vPortEnterCritical+0x3c>)
   81880:	681b      	ldr	r3, [r3, #0]
   81882:	2b01      	cmp	r3, #1
   81884:	d108      	bne.n	81898 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81886:	4b07      	ldr	r3, [pc, #28]	; (818a4 <vPortEnterCritical+0x40>)
   81888:	681b      	ldr	r3, [r3, #0]
   8188a:	f003 031f 	and.w	r3, r3, #31
   8188e:	2b00      	cmp	r3, #0
   81890:	d002      	beq.n	81898 <vPortEnterCritical+0x34>
   81892:	4b02      	ldr	r3, [pc, #8]	; (8189c <vPortEnterCritical+0x38>)
   81894:	4798      	blx	r3
   81896:	e7fe      	b.n	81896 <vPortEnterCritical+0x32>
	}
}
   81898:	bd80      	pop	{r7, pc}
   8189a:	bf00      	nop
   8189c:	000818e1 	.word	0x000818e1
   818a0:	20070004 	.word	0x20070004
   818a4:	e000ed04 	.word	0xe000ed04

000818a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   818a8:	b580      	push	{r7, lr}
   818aa:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   818ac:	4b09      	ldr	r3, [pc, #36]	; (818d4 <vPortExitCritical+0x2c>)
   818ae:	681b      	ldr	r3, [r3, #0]
   818b0:	2b00      	cmp	r3, #0
   818b2:	d102      	bne.n	818ba <vPortExitCritical+0x12>
   818b4:	4b08      	ldr	r3, [pc, #32]	; (818d8 <vPortExitCritical+0x30>)
   818b6:	4798      	blx	r3
   818b8:	e7fe      	b.n	818b8 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   818ba:	4b06      	ldr	r3, [pc, #24]	; (818d4 <vPortExitCritical+0x2c>)
   818bc:	681b      	ldr	r3, [r3, #0]
   818be:	1e5a      	subs	r2, r3, #1
   818c0:	4b04      	ldr	r3, [pc, #16]	; (818d4 <vPortExitCritical+0x2c>)
   818c2:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   818c4:	4b03      	ldr	r3, [pc, #12]	; (818d4 <vPortExitCritical+0x2c>)
   818c6:	681b      	ldr	r3, [r3, #0]
   818c8:	2b00      	cmp	r3, #0
   818ca:	d102      	bne.n	818d2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   818cc:	2000      	movs	r0, #0
   818ce:	4b03      	ldr	r3, [pc, #12]	; (818dc <vPortExitCritical+0x34>)
   818d0:	4798      	blx	r3
	}
}
   818d2:	bd80      	pop	{r7, pc}
   818d4:	20070004 	.word	0x20070004
   818d8:	000818e1 	.word	0x000818e1
   818dc:	000818f5 	.word	0x000818f5

000818e0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   818e0:	f3ef 8011 	mrs	r0, BASEPRI
   818e4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   818e8:	f381 8811 	msr	BASEPRI, r1
   818ec:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   818ee:	2300      	movs	r3, #0
}
   818f0:	4618      	mov	r0, r3
   818f2:	bf00      	nop

000818f4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   818f4:	f380 8811 	msr	BASEPRI, r0
   818f8:	4770      	bx	lr
   818fa:	bf00      	nop

000818fc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   818fc:	f3ef 8009 	mrs	r0, PSP
   81900:	f3bf 8f6f 	isb	sy
   81904:	4b0d      	ldr	r3, [pc, #52]	; (8193c <pxCurrentTCBConst>)
   81906:	681a      	ldr	r2, [r3, #0]
   81908:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8190c:	6010      	str	r0, [r2, #0]
   8190e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81912:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81916:	f380 8811 	msr	BASEPRI, r0
   8191a:	f000 fa93 	bl	81e44 <vTaskSwitchContext>
   8191e:	f04f 0000 	mov.w	r0, #0
   81922:	f380 8811 	msr	BASEPRI, r0
   81926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8192a:	6819      	ldr	r1, [r3, #0]
   8192c:	6808      	ldr	r0, [r1, #0]
   8192e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81932:	f380 8809 	msr	PSP, r0
   81936:	f3bf 8f6f 	isb	sy
   8193a:	4770      	bx	lr

0008193c <pxCurrentTCBConst>:
   8193c:	200704cc 	.word	0x200704cc

00081940 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   81940:	b580      	push	{r7, lr}
   81942:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81944:	4b07      	ldr	r3, [pc, #28]	; (81964 <SysTick_Handler+0x24>)
   81946:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   81948:	4b07      	ldr	r3, [pc, #28]	; (81968 <SysTick_Handler+0x28>)
   8194a:	4798      	blx	r3
   8194c:	4603      	mov	r3, r0
   8194e:	2b00      	cmp	r3, #0
   81950:	d003      	beq.n	8195a <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81952:	4b06      	ldr	r3, [pc, #24]	; (8196c <SysTick_Handler+0x2c>)
   81954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81958:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8195a:	2000      	movs	r0, #0
   8195c:	4b04      	ldr	r3, [pc, #16]	; (81970 <SysTick_Handler+0x30>)
   8195e:	4798      	blx	r3
}
   81960:	bd80      	pop	{r7, pc}
   81962:	bf00      	nop
   81964:	000818e1 	.word	0x000818e1
   81968:	00081cc9 	.word	0x00081cc9
   8196c:	e000ed04 	.word	0xe000ed04
   81970:	000818f5 	.word	0x000818f5

00081974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81974:	b580      	push	{r7, lr}
   81976:	b082      	sub	sp, #8
   81978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8197a:	f3ef 8305 	mrs	r3, IPSR
   8197e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   81980:	687b      	ldr	r3, [r7, #4]
   81982:	2b0f      	cmp	r3, #15
   81984:	d90c      	bls.n	819a0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   81986:	4a0d      	ldr	r2, [pc, #52]	; (819bc <vPortValidateInterruptPriority+0x48>)
   81988:	687b      	ldr	r3, [r7, #4]
   8198a:	4413      	add	r3, r2
   8198c:	781b      	ldrb	r3, [r3, #0]
   8198e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81990:	4b0b      	ldr	r3, [pc, #44]	; (819c0 <vPortValidateInterruptPriority+0x4c>)
   81992:	781b      	ldrb	r3, [r3, #0]
   81994:	78fa      	ldrb	r2, [r7, #3]
   81996:	429a      	cmp	r2, r3
   81998:	d202      	bcs.n	819a0 <vPortValidateInterruptPriority+0x2c>
   8199a:	4b0a      	ldr	r3, [pc, #40]	; (819c4 <vPortValidateInterruptPriority+0x50>)
   8199c:	4798      	blx	r3
   8199e:	e7fe      	b.n	8199e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   819a0:	4b09      	ldr	r3, [pc, #36]	; (819c8 <vPortValidateInterruptPriority+0x54>)
   819a2:	681b      	ldr	r3, [r3, #0]
   819a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   819a8:	4b08      	ldr	r3, [pc, #32]	; (819cc <vPortValidateInterruptPriority+0x58>)
   819aa:	681b      	ldr	r3, [r3, #0]
   819ac:	429a      	cmp	r2, r3
   819ae:	d902      	bls.n	819b6 <vPortValidateInterruptPriority+0x42>
   819b0:	4b04      	ldr	r3, [pc, #16]	; (819c4 <vPortValidateInterruptPriority+0x50>)
   819b2:	4798      	blx	r3
   819b4:	e7fe      	b.n	819b4 <vPortValidateInterruptPriority+0x40>
	}
   819b6:	3708      	adds	r7, #8
   819b8:	46bd      	mov	sp, r7
   819ba:	bd80      	pop	{r7, pc}
   819bc:	e000e3f0 	.word	0xe000e3f0
   819c0:	200704c4 	.word	0x200704c4
   819c4:	000818e1 	.word	0x000818e1
   819c8:	e000ed0c 	.word	0xe000ed0c
   819cc:	200704c8 	.word	0x200704c8

000819d0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   819d0:	b580      	push	{r7, lr}
   819d2:	b088      	sub	sp, #32
   819d4:	af00      	add	r7, sp, #0
   819d6:	60f8      	str	r0, [r7, #12]
   819d8:	60b9      	str	r1, [r7, #8]
   819da:	607a      	str	r2, [r7, #4]
   819dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   819de:	68fb      	ldr	r3, [r7, #12]
   819e0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   819e2:	69bb      	ldr	r3, [r7, #24]
   819e4:	2b00      	cmp	r3, #0
   819e6:	d102      	bne.n	819ee <xQueueGenericSendFromISR+0x1e>
   819e8:	4b33      	ldr	r3, [pc, #204]	; (81ab8 <xQueueGenericSendFromISR+0xe8>)
   819ea:	4798      	blx	r3
   819ec:	e7fe      	b.n	819ec <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   819ee:	68bb      	ldr	r3, [r7, #8]
   819f0:	2b00      	cmp	r3, #0
   819f2:	d103      	bne.n	819fc <xQueueGenericSendFromISR+0x2c>
   819f4:	69bb      	ldr	r3, [r7, #24]
   819f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   819f8:	2b00      	cmp	r3, #0
   819fa:	d101      	bne.n	81a00 <xQueueGenericSendFromISR+0x30>
   819fc:	2301      	movs	r3, #1
   819fe:	e000      	b.n	81a02 <xQueueGenericSendFromISR+0x32>
   81a00:	2300      	movs	r3, #0
   81a02:	2b00      	cmp	r3, #0
   81a04:	d102      	bne.n	81a0c <xQueueGenericSendFromISR+0x3c>
   81a06:	4b2c      	ldr	r3, [pc, #176]	; (81ab8 <xQueueGenericSendFromISR+0xe8>)
   81a08:	4798      	blx	r3
   81a0a:	e7fe      	b.n	81a0a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81a0c:	683b      	ldr	r3, [r7, #0]
   81a0e:	2b02      	cmp	r3, #2
   81a10:	d103      	bne.n	81a1a <xQueueGenericSendFromISR+0x4a>
   81a12:	69bb      	ldr	r3, [r7, #24]
   81a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81a16:	2b01      	cmp	r3, #1
   81a18:	d101      	bne.n	81a1e <xQueueGenericSendFromISR+0x4e>
   81a1a:	2301      	movs	r3, #1
   81a1c:	e000      	b.n	81a20 <xQueueGenericSendFromISR+0x50>
   81a1e:	2300      	movs	r3, #0
   81a20:	2b00      	cmp	r3, #0
   81a22:	d102      	bne.n	81a2a <xQueueGenericSendFromISR+0x5a>
   81a24:	4b24      	ldr	r3, [pc, #144]	; (81ab8 <xQueueGenericSendFromISR+0xe8>)
   81a26:	4798      	blx	r3
   81a28:	e7fe      	b.n	81a28 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81a2a:	4b24      	ldr	r3, [pc, #144]	; (81abc <xQueueGenericSendFromISR+0xec>)
   81a2c:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81a2e:	4b22      	ldr	r3, [pc, #136]	; (81ab8 <xQueueGenericSendFromISR+0xe8>)
   81a30:	4798      	blx	r3
   81a32:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81a34:	69bb      	ldr	r3, [r7, #24]
   81a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81a38:	69bb      	ldr	r3, [r7, #24]
   81a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81a3c:	429a      	cmp	r2, r3
   81a3e:	d302      	bcc.n	81a46 <xQueueGenericSendFromISR+0x76>
   81a40:	683b      	ldr	r3, [r7, #0]
   81a42:	2b02      	cmp	r3, #2
   81a44:	d12d      	bne.n	81aa2 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   81a46:	69b8      	ldr	r0, [r7, #24]
   81a48:	68b9      	ldr	r1, [r7, #8]
   81a4a:	683a      	ldr	r2, [r7, #0]
   81a4c:	4b1c      	ldr	r3, [pc, #112]	; (81ac0 <xQueueGenericSendFromISR+0xf0>)
   81a4e:	4798      	blx	r3
   81a50:	4603      	mov	r3, r0
   81a52:	2b00      	cmp	r3, #0
   81a54:	d005      	beq.n	81a62 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   81a56:	687b      	ldr	r3, [r7, #4]
   81a58:	2b00      	cmp	r3, #0
   81a5a:	d002      	beq.n	81a62 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   81a5c:	687b      	ldr	r3, [r7, #4]
   81a5e:	2201      	movs	r2, #1
   81a60:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81a62:	69bb      	ldr	r3, [r7, #24]
   81a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81a66:	f1b3 3fff 	cmp.w	r3, #4294967295
   81a6a:	d112      	bne.n	81a92 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81a6c:	69bb      	ldr	r3, [r7, #24]
   81a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81a70:	2b00      	cmp	r3, #0
   81a72:	d013      	beq.n	81a9c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81a74:	69bb      	ldr	r3, [r7, #24]
   81a76:	3324      	adds	r3, #36	; 0x24
   81a78:	4618      	mov	r0, r3
   81a7a:	4b12      	ldr	r3, [pc, #72]	; (81ac4 <xQueueGenericSendFromISR+0xf4>)
   81a7c:	4798      	blx	r3
   81a7e:	4603      	mov	r3, r0
   81a80:	2b00      	cmp	r3, #0
   81a82:	d00b      	beq.n	81a9c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   81a84:	687b      	ldr	r3, [r7, #4]
   81a86:	2b00      	cmp	r3, #0
   81a88:	d008      	beq.n	81a9c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   81a8a:	687b      	ldr	r3, [r7, #4]
   81a8c:	2201      	movs	r2, #1
   81a8e:	601a      	str	r2, [r3, #0]
   81a90:	e004      	b.n	81a9c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81a92:	69bb      	ldr	r3, [r7, #24]
   81a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81a96:	1c5a      	adds	r2, r3, #1
   81a98:	69bb      	ldr	r3, [r7, #24]
   81a9a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   81a9c:	2301      	movs	r3, #1
   81a9e:	61fb      	str	r3, [r7, #28]
   81aa0:	e001      	b.n	81aa6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81aa2:	2300      	movs	r3, #0
   81aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81aa6:	6978      	ldr	r0, [r7, #20]
   81aa8:	4b07      	ldr	r3, [pc, #28]	; (81ac8 <xQueueGenericSendFromISR+0xf8>)
   81aaa:	4798      	blx	r3

	return xReturn;
   81aac:	69fb      	ldr	r3, [r7, #28]
}
   81aae:	4618      	mov	r0, r3
   81ab0:	3720      	adds	r7, #32
   81ab2:	46bd      	mov	sp, r7
   81ab4:	bd80      	pop	{r7, pc}
   81ab6:	bf00      	nop
   81ab8:	000818e1 	.word	0x000818e1
   81abc:	00081975 	.word	0x00081975
   81ac0:	00081b95 	.word	0x00081b95
   81ac4:	00081f41 	.word	0x00081f41
   81ac8:	000818f5 	.word	0x000818f5

00081acc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   81acc:	b580      	push	{r7, lr}
   81ace:	b088      	sub	sp, #32
   81ad0:	af00      	add	r7, sp, #0
   81ad2:	60f8      	str	r0, [r7, #12]
   81ad4:	60b9      	str	r1, [r7, #8]
   81ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81ad8:	68fb      	ldr	r3, [r7, #12]
   81ada:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81adc:	69bb      	ldr	r3, [r7, #24]
   81ade:	2b00      	cmp	r3, #0
   81ae0:	d102      	bne.n	81ae8 <xQueueReceiveFromISR+0x1c>
   81ae2:	4b27      	ldr	r3, [pc, #156]	; (81b80 <xQueueReceiveFromISR+0xb4>)
   81ae4:	4798      	blx	r3
   81ae6:	e7fe      	b.n	81ae6 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81ae8:	68bb      	ldr	r3, [r7, #8]
   81aea:	2b00      	cmp	r3, #0
   81aec:	d103      	bne.n	81af6 <xQueueReceiveFromISR+0x2a>
   81aee:	69bb      	ldr	r3, [r7, #24]
   81af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81af2:	2b00      	cmp	r3, #0
   81af4:	d101      	bne.n	81afa <xQueueReceiveFromISR+0x2e>
   81af6:	2301      	movs	r3, #1
   81af8:	e000      	b.n	81afc <xQueueReceiveFromISR+0x30>
   81afa:	2300      	movs	r3, #0
   81afc:	2b00      	cmp	r3, #0
   81afe:	d102      	bne.n	81b06 <xQueueReceiveFromISR+0x3a>
   81b00:	4b1f      	ldr	r3, [pc, #124]	; (81b80 <xQueueReceiveFromISR+0xb4>)
   81b02:	4798      	blx	r3
   81b04:	e7fe      	b.n	81b04 <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81b06:	4b1f      	ldr	r3, [pc, #124]	; (81b84 <xQueueReceiveFromISR+0xb8>)
   81b08:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81b0a:	4b1d      	ldr	r3, [pc, #116]	; (81b80 <xQueueReceiveFromISR+0xb4>)
   81b0c:	4798      	blx	r3
   81b0e:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81b10:	69bb      	ldr	r3, [r7, #24]
   81b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81b14:	2b00      	cmp	r3, #0
   81b16:	d028      	beq.n	81b6a <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   81b18:	69b8      	ldr	r0, [r7, #24]
   81b1a:	68b9      	ldr	r1, [r7, #8]
   81b1c:	4b1a      	ldr	r3, [pc, #104]	; (81b88 <xQueueReceiveFromISR+0xbc>)
   81b1e:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   81b20:	69bb      	ldr	r3, [r7, #24]
   81b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81b24:	1e5a      	subs	r2, r3, #1
   81b26:	69bb      	ldr	r3, [r7, #24]
   81b28:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   81b2a:	69bb      	ldr	r3, [r7, #24]
   81b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81b32:	d112      	bne.n	81b5a <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81b34:	69bb      	ldr	r3, [r7, #24]
   81b36:	691b      	ldr	r3, [r3, #16]
   81b38:	2b00      	cmp	r3, #0
   81b3a:	d013      	beq.n	81b64 <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81b3c:	69bb      	ldr	r3, [r7, #24]
   81b3e:	3310      	adds	r3, #16
   81b40:	4618      	mov	r0, r3
   81b42:	4b12      	ldr	r3, [pc, #72]	; (81b8c <xQueueReceiveFromISR+0xc0>)
   81b44:	4798      	blx	r3
   81b46:	4603      	mov	r3, r0
   81b48:	2b00      	cmp	r3, #0
   81b4a:	d00b      	beq.n	81b64 <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   81b4c:	687b      	ldr	r3, [r7, #4]
   81b4e:	2b00      	cmp	r3, #0
   81b50:	d008      	beq.n	81b64 <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81b52:	687b      	ldr	r3, [r7, #4]
   81b54:	2201      	movs	r2, #1
   81b56:	601a      	str	r2, [r3, #0]
   81b58:	e004      	b.n	81b64 <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   81b5a:	69bb      	ldr	r3, [r7, #24]
   81b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81b5e:	1c5a      	adds	r2, r3, #1
   81b60:	69bb      	ldr	r3, [r7, #24]
   81b62:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   81b64:	2301      	movs	r3, #1
   81b66:	61fb      	str	r3, [r7, #28]
   81b68:	e001      	b.n	81b6e <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   81b6a:	2300      	movs	r3, #0
   81b6c:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81b6e:	6978      	ldr	r0, [r7, #20]
   81b70:	4b07      	ldr	r3, [pc, #28]	; (81b90 <xQueueReceiveFromISR+0xc4>)
   81b72:	4798      	blx	r3

	return xReturn;
   81b74:	69fb      	ldr	r3, [r7, #28]
}
   81b76:	4618      	mov	r0, r3
   81b78:	3720      	adds	r7, #32
   81b7a:	46bd      	mov	sp, r7
   81b7c:	bd80      	pop	{r7, pc}
   81b7e:	bf00      	nop
   81b80:	000818e1 	.word	0x000818e1
   81b84:	00081975 	.word	0x00081975
   81b88:	00081c79 	.word	0x00081c79
   81b8c:	00081f41 	.word	0x00081f41
   81b90:	000818f5 	.word	0x000818f5

00081b94 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   81b94:	b580      	push	{r7, lr}
   81b96:	b086      	sub	sp, #24
   81b98:	af00      	add	r7, sp, #0
   81b9a:	60f8      	str	r0, [r7, #12]
   81b9c:	60b9      	str	r1, [r7, #8]
   81b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   81ba0:	2300      	movs	r3, #0
   81ba2:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   81ba4:	68fb      	ldr	r3, [r7, #12]
   81ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81ba8:	2b00      	cmp	r3, #0
   81baa:	d10d      	bne.n	81bc8 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81bac:	68fb      	ldr	r3, [r7, #12]
   81bae:	681b      	ldr	r3, [r3, #0]
   81bb0:	2b00      	cmp	r3, #0
   81bb2:	d152      	bne.n	81c5a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81bb4:	68fb      	ldr	r3, [r7, #12]
   81bb6:	685b      	ldr	r3, [r3, #4]
   81bb8:	4618      	mov	r0, r3
   81bba:	4b2d      	ldr	r3, [pc, #180]	; (81c70 <prvCopyDataToQueue+0xdc>)
   81bbc:	4798      	blx	r3
   81bbe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   81bc0:	68fb      	ldr	r3, [r7, #12]
   81bc2:	2200      	movs	r2, #0
   81bc4:	605a      	str	r2, [r3, #4]
   81bc6:	e048      	b.n	81c5a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   81bc8:	687b      	ldr	r3, [r7, #4]
   81bca:	2b00      	cmp	r3, #0
   81bcc:	d11a      	bne.n	81c04 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   81bce:	68fb      	ldr	r3, [r7, #12]
   81bd0:	689a      	ldr	r2, [r3, #8]
   81bd2:	68fb      	ldr	r3, [r7, #12]
   81bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81bd6:	4610      	mov	r0, r2
   81bd8:	68b9      	ldr	r1, [r7, #8]
   81bda:	461a      	mov	r2, r3
   81bdc:	4b25      	ldr	r3, [pc, #148]	; (81c74 <prvCopyDataToQueue+0xe0>)
   81bde:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81be0:	68fb      	ldr	r3, [r7, #12]
   81be2:	689a      	ldr	r2, [r3, #8]
   81be4:	68fb      	ldr	r3, [r7, #12]
   81be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81be8:	441a      	add	r2, r3
   81bea:	68fb      	ldr	r3, [r7, #12]
   81bec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81bee:	68fb      	ldr	r3, [r7, #12]
   81bf0:	689a      	ldr	r2, [r3, #8]
   81bf2:	68fb      	ldr	r3, [r7, #12]
   81bf4:	685b      	ldr	r3, [r3, #4]
   81bf6:	429a      	cmp	r2, r3
   81bf8:	d32f      	bcc.n	81c5a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81bfa:	68fb      	ldr	r3, [r7, #12]
   81bfc:	681a      	ldr	r2, [r3, #0]
   81bfe:	68fb      	ldr	r3, [r7, #12]
   81c00:	609a      	str	r2, [r3, #8]
   81c02:	e02a      	b.n	81c5a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81c04:	68fb      	ldr	r3, [r7, #12]
   81c06:	68da      	ldr	r2, [r3, #12]
   81c08:	68fb      	ldr	r3, [r7, #12]
   81c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c0c:	4610      	mov	r0, r2
   81c0e:	68b9      	ldr	r1, [r7, #8]
   81c10:	461a      	mov	r2, r3
   81c12:	4b18      	ldr	r3, [pc, #96]	; (81c74 <prvCopyDataToQueue+0xe0>)
   81c14:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   81c16:	68fb      	ldr	r3, [r7, #12]
   81c18:	68da      	ldr	r2, [r3, #12]
   81c1a:	68fb      	ldr	r3, [r7, #12]
   81c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c1e:	425b      	negs	r3, r3
   81c20:	441a      	add	r2, r3
   81c22:	68fb      	ldr	r3, [r7, #12]
   81c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81c26:	68fb      	ldr	r3, [r7, #12]
   81c28:	68da      	ldr	r2, [r3, #12]
   81c2a:	68fb      	ldr	r3, [r7, #12]
   81c2c:	681b      	ldr	r3, [r3, #0]
   81c2e:	429a      	cmp	r2, r3
   81c30:	d207      	bcs.n	81c42 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81c32:	68fb      	ldr	r3, [r7, #12]
   81c34:	685a      	ldr	r2, [r3, #4]
   81c36:	68fb      	ldr	r3, [r7, #12]
   81c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c3a:	425b      	negs	r3, r3
   81c3c:	441a      	add	r2, r3
   81c3e:	68fb      	ldr	r3, [r7, #12]
   81c40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   81c42:	687b      	ldr	r3, [r7, #4]
   81c44:	2b02      	cmp	r3, #2
   81c46:	d108      	bne.n	81c5a <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81c48:	68fb      	ldr	r3, [r7, #12]
   81c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81c4c:	2b00      	cmp	r3, #0
   81c4e:	d004      	beq.n	81c5a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   81c50:	68fb      	ldr	r3, [r7, #12]
   81c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81c54:	1e5a      	subs	r2, r3, #1
   81c56:	68fb      	ldr	r3, [r7, #12]
   81c58:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81c5a:	68fb      	ldr	r3, [r7, #12]
   81c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81c5e:	1c5a      	adds	r2, r3, #1
   81c60:	68fb      	ldr	r3, [r7, #12]
   81c62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   81c64:	697b      	ldr	r3, [r7, #20]
}
   81c66:	4618      	mov	r0, r3
   81c68:	3718      	adds	r7, #24
   81c6a:	46bd      	mov	sp, r7
   81c6c:	bd80      	pop	{r7, pc}
   81c6e:	bf00      	nop
   81c70:	00082049 	.word	0x00082049
   81c74:	00082815 	.word	0x00082815

00081c78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   81c78:	b580      	push	{r7, lr}
   81c7a:	b082      	sub	sp, #8
   81c7c:	af00      	add	r7, sp, #0
   81c7e:	6078      	str	r0, [r7, #4]
   81c80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   81c82:	687b      	ldr	r3, [r7, #4]
   81c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c86:	2b00      	cmp	r3, #0
   81c88:	d019      	beq.n	81cbe <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   81c8a:	687b      	ldr	r3, [r7, #4]
   81c8c:	68da      	ldr	r2, [r3, #12]
   81c8e:	687b      	ldr	r3, [r7, #4]
   81c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81c92:	441a      	add	r2, r3
   81c94:	687b      	ldr	r3, [r7, #4]
   81c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   81c98:	687b      	ldr	r3, [r7, #4]
   81c9a:	68da      	ldr	r2, [r3, #12]
   81c9c:	687b      	ldr	r3, [r7, #4]
   81c9e:	685b      	ldr	r3, [r3, #4]
   81ca0:	429a      	cmp	r2, r3
   81ca2:	d303      	bcc.n	81cac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   81ca4:	687b      	ldr	r3, [r7, #4]
   81ca6:	681a      	ldr	r2, [r3, #0]
   81ca8:	687b      	ldr	r3, [r7, #4]
   81caa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   81cac:	687b      	ldr	r3, [r7, #4]
   81cae:	68da      	ldr	r2, [r3, #12]
   81cb0:	687b      	ldr	r3, [r7, #4]
   81cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81cb4:	6838      	ldr	r0, [r7, #0]
   81cb6:	4611      	mov	r1, r2
   81cb8:	461a      	mov	r2, r3
   81cba:	4b02      	ldr	r3, [pc, #8]	; (81cc4 <prvCopyDataFromQueue+0x4c>)
   81cbc:	4798      	blx	r3
	}
}
   81cbe:	3708      	adds	r7, #8
   81cc0:	46bd      	mov	sp, r7
   81cc2:	bd80      	pop	{r7, pc}
   81cc4:	00082815 	.word	0x00082815

00081cc8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b086      	sub	sp, #24
   81ccc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   81cce:	2300      	movs	r3, #0
   81cd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81cd2:	4b4d      	ldr	r3, [pc, #308]	; (81e08 <xTaskIncrementTick+0x140>)
   81cd4:	681b      	ldr	r3, [r3, #0]
   81cd6:	2b00      	cmp	r3, #0
   81cd8:	f040 8086 	bne.w	81de8 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   81cdc:	4b4b      	ldr	r3, [pc, #300]	; (81e0c <xTaskIncrementTick+0x144>)
   81cde:	681b      	ldr	r3, [r3, #0]
   81ce0:	1c5a      	adds	r2, r3, #1
   81ce2:	4b4a      	ldr	r3, [pc, #296]	; (81e0c <xTaskIncrementTick+0x144>)
   81ce4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   81ce6:	4b49      	ldr	r3, [pc, #292]	; (81e0c <xTaskIncrementTick+0x144>)
   81ce8:	681b      	ldr	r3, [r3, #0]
   81cea:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   81cec:	693b      	ldr	r3, [r7, #16]
   81cee:	2b00      	cmp	r3, #0
   81cf0:	d118      	bne.n	81d24 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   81cf2:	4b47      	ldr	r3, [pc, #284]	; (81e10 <xTaskIncrementTick+0x148>)
   81cf4:	681b      	ldr	r3, [r3, #0]
   81cf6:	681b      	ldr	r3, [r3, #0]
   81cf8:	2b00      	cmp	r3, #0
   81cfa:	d002      	beq.n	81d02 <xTaskIncrementTick+0x3a>
   81cfc:	4b45      	ldr	r3, [pc, #276]	; (81e14 <xTaskIncrementTick+0x14c>)
   81cfe:	4798      	blx	r3
   81d00:	e7fe      	b.n	81d00 <xTaskIncrementTick+0x38>
   81d02:	4b43      	ldr	r3, [pc, #268]	; (81e10 <xTaskIncrementTick+0x148>)
   81d04:	681b      	ldr	r3, [r3, #0]
   81d06:	60fb      	str	r3, [r7, #12]
   81d08:	4b43      	ldr	r3, [pc, #268]	; (81e18 <xTaskIncrementTick+0x150>)
   81d0a:	681a      	ldr	r2, [r3, #0]
   81d0c:	4b40      	ldr	r3, [pc, #256]	; (81e10 <xTaskIncrementTick+0x148>)
   81d0e:	601a      	str	r2, [r3, #0]
   81d10:	4b41      	ldr	r3, [pc, #260]	; (81e18 <xTaskIncrementTick+0x150>)
   81d12:	68fa      	ldr	r2, [r7, #12]
   81d14:	601a      	str	r2, [r3, #0]
   81d16:	4b41      	ldr	r3, [pc, #260]	; (81e1c <xTaskIncrementTick+0x154>)
   81d18:	681b      	ldr	r3, [r3, #0]
   81d1a:	1c5a      	adds	r2, r3, #1
   81d1c:	4b3f      	ldr	r3, [pc, #252]	; (81e1c <xTaskIncrementTick+0x154>)
   81d1e:	601a      	str	r2, [r3, #0]
   81d20:	4b3f      	ldr	r3, [pc, #252]	; (81e20 <xTaskIncrementTick+0x158>)
   81d22:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   81d24:	4b3f      	ldr	r3, [pc, #252]	; (81e24 <xTaskIncrementTick+0x15c>)
   81d26:	681b      	ldr	r3, [r3, #0]
   81d28:	693a      	ldr	r2, [r7, #16]
   81d2a:	429a      	cmp	r2, r3
   81d2c:	d34d      	bcc.n	81dca <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81d2e:	4b38      	ldr	r3, [pc, #224]	; (81e10 <xTaskIncrementTick+0x148>)
   81d30:	681b      	ldr	r3, [r3, #0]
   81d32:	681b      	ldr	r3, [r3, #0]
   81d34:	2b00      	cmp	r3, #0
   81d36:	d101      	bne.n	81d3c <xTaskIncrementTick+0x74>
   81d38:	2301      	movs	r3, #1
   81d3a:	e000      	b.n	81d3e <xTaskIncrementTick+0x76>
   81d3c:	2300      	movs	r3, #0
   81d3e:	2b00      	cmp	r3, #0
   81d40:	d004      	beq.n	81d4c <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   81d42:	4b38      	ldr	r3, [pc, #224]	; (81e24 <xTaskIncrementTick+0x15c>)
   81d44:	f04f 32ff 	mov.w	r2, #4294967295
   81d48:	601a      	str	r2, [r3, #0]
						break;
   81d4a:	e03e      	b.n	81dca <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81d4c:	4b30      	ldr	r3, [pc, #192]	; (81e10 <xTaskIncrementTick+0x148>)
   81d4e:	681b      	ldr	r3, [r3, #0]
   81d50:	68db      	ldr	r3, [r3, #12]
   81d52:	68db      	ldr	r3, [r3, #12]
   81d54:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81d56:	68bb      	ldr	r3, [r7, #8]
   81d58:	685b      	ldr	r3, [r3, #4]
   81d5a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   81d5c:	693a      	ldr	r2, [r7, #16]
   81d5e:	687b      	ldr	r3, [r7, #4]
   81d60:	429a      	cmp	r2, r3
   81d62:	d203      	bcs.n	81d6c <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   81d64:	4b2f      	ldr	r3, [pc, #188]	; (81e24 <xTaskIncrementTick+0x15c>)
   81d66:	687a      	ldr	r2, [r7, #4]
   81d68:	601a      	str	r2, [r3, #0]
							break;
   81d6a:	e02e      	b.n	81dca <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   81d6c:	68bb      	ldr	r3, [r7, #8]
   81d6e:	3304      	adds	r3, #4
   81d70:	4618      	mov	r0, r3
   81d72:	4b2d      	ldr	r3, [pc, #180]	; (81e28 <xTaskIncrementTick+0x160>)
   81d74:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   81d76:	68bb      	ldr	r3, [r7, #8]
   81d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   81d7a:	2b00      	cmp	r3, #0
   81d7c:	d004      	beq.n	81d88 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   81d7e:	68bb      	ldr	r3, [r7, #8]
   81d80:	3318      	adds	r3, #24
   81d82:	4618      	mov	r0, r3
   81d84:	4b28      	ldr	r3, [pc, #160]	; (81e28 <xTaskIncrementTick+0x160>)
   81d86:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   81d88:	68bb      	ldr	r3, [r7, #8]
   81d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81d8c:	2201      	movs	r2, #1
   81d8e:	409a      	lsls	r2, r3
   81d90:	4b26      	ldr	r3, [pc, #152]	; (81e2c <xTaskIncrementTick+0x164>)
   81d92:	681b      	ldr	r3, [r3, #0]
   81d94:	431a      	orrs	r2, r3
   81d96:	4b25      	ldr	r3, [pc, #148]	; (81e2c <xTaskIncrementTick+0x164>)
   81d98:	601a      	str	r2, [r3, #0]
   81d9a:	68bb      	ldr	r3, [r7, #8]
   81d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81d9e:	4613      	mov	r3, r2
   81da0:	009b      	lsls	r3, r3, #2
   81da2:	4413      	add	r3, r2
   81da4:	009b      	lsls	r3, r3, #2
   81da6:	4a22      	ldr	r2, [pc, #136]	; (81e30 <xTaskIncrementTick+0x168>)
   81da8:	441a      	add	r2, r3
   81daa:	68bb      	ldr	r3, [r7, #8]
   81dac:	3304      	adds	r3, #4
   81dae:	4610      	mov	r0, r2
   81db0:	4619      	mov	r1, r3
   81db2:	4b20      	ldr	r3, [pc, #128]	; (81e34 <xTaskIncrementTick+0x16c>)
   81db4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81db6:	68bb      	ldr	r3, [r7, #8]
   81db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81dba:	4b1f      	ldr	r3, [pc, #124]	; (81e38 <xTaskIncrementTick+0x170>)
   81dbc:	681b      	ldr	r3, [r3, #0]
   81dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81dc0:	429a      	cmp	r2, r3
   81dc2:	d301      	bcc.n	81dc8 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   81dc4:	2301      	movs	r3, #1
   81dc6:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   81dc8:	e7b1      	b.n	81d2e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   81dca:	4b1b      	ldr	r3, [pc, #108]	; (81e38 <xTaskIncrementTick+0x170>)
   81dcc:	681b      	ldr	r3, [r3, #0]
   81dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81dd0:	4917      	ldr	r1, [pc, #92]	; (81e30 <xTaskIncrementTick+0x168>)
   81dd2:	4613      	mov	r3, r2
   81dd4:	009b      	lsls	r3, r3, #2
   81dd6:	4413      	add	r3, r2
   81dd8:	009b      	lsls	r3, r3, #2
   81dda:	440b      	add	r3, r1
   81ddc:	681b      	ldr	r3, [r3, #0]
   81dde:	2b01      	cmp	r3, #1
   81de0:	d907      	bls.n	81df2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   81de2:	2301      	movs	r3, #1
   81de4:	617b      	str	r3, [r7, #20]
   81de6:	e004      	b.n	81df2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   81de8:	4b14      	ldr	r3, [pc, #80]	; (81e3c <xTaskIncrementTick+0x174>)
   81dea:	681b      	ldr	r3, [r3, #0]
   81dec:	1c5a      	adds	r2, r3, #1
   81dee:	4b13      	ldr	r3, [pc, #76]	; (81e3c <xTaskIncrementTick+0x174>)
   81df0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   81df2:	4b13      	ldr	r3, [pc, #76]	; (81e40 <xTaskIncrementTick+0x178>)
   81df4:	681b      	ldr	r3, [r3, #0]
   81df6:	2b00      	cmp	r3, #0
   81df8:	d001      	beq.n	81dfe <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   81dfa:	2301      	movs	r3, #1
   81dfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   81dfe:	697b      	ldr	r3, [r7, #20]
}
   81e00:	4618      	mov	r0, r3
   81e02:	3718      	adds	r7, #24
   81e04:	46bd      	mov	sp, r7
   81e06:	bd80      	pop	{r7, pc}
   81e08:	20070564 	.word	0x20070564
   81e0c:	20070550 	.word	0x20070550
   81e10:	20070534 	.word	0x20070534
   81e14:	000818e1 	.word	0x000818e1
   81e18:	20070538 	.word	0x20070538
   81e1c:	20070560 	.word	0x20070560
   81e20:	00082001 	.word	0x00082001
   81e24:	20070008 	.word	0x20070008
   81e28:	000817ed 	.word	0x000817ed
   81e2c:	20070554 	.word	0x20070554
   81e30:	200704d0 	.word	0x200704d0
   81e34:	000817a5 	.word	0x000817a5
   81e38:	200704cc 	.word	0x200704cc
   81e3c:	20070558 	.word	0x20070558
   81e40:	2007055c 	.word	0x2007055c

00081e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81e44:	b580      	push	{r7, lr}
   81e46:	b084      	sub	sp, #16
   81e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   81e4a:	4b34      	ldr	r3, [pc, #208]	; (81f1c <vTaskSwitchContext+0xd8>)
   81e4c:	681b      	ldr	r3, [r3, #0]
   81e4e:	2b00      	cmp	r3, #0
   81e50:	d003      	beq.n	81e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   81e52:	4b33      	ldr	r3, [pc, #204]	; (81f20 <vTaskSwitchContext+0xdc>)
   81e54:	2201      	movs	r2, #1
   81e56:	601a      	str	r2, [r3, #0]
   81e58:	e05c      	b.n	81f14 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   81e5a:	4b31      	ldr	r3, [pc, #196]	; (81f20 <vTaskSwitchContext+0xdc>)
   81e5c:	2200      	movs	r2, #0
   81e5e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   81e60:	4b30      	ldr	r3, [pc, #192]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e62:	681b      	ldr	r3, [r3, #0]
   81e64:	681a      	ldr	r2, [r3, #0]
   81e66:	4b2f      	ldr	r3, [pc, #188]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e68:	681b      	ldr	r3, [r3, #0]
   81e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e6c:	429a      	cmp	r2, r3
   81e6e:	d808      	bhi.n	81e82 <vTaskSwitchContext+0x3e>
   81e70:	4b2c      	ldr	r3, [pc, #176]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e72:	681a      	ldr	r2, [r3, #0]
   81e74:	4b2b      	ldr	r3, [pc, #172]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e76:	681b      	ldr	r3, [r3, #0]
   81e78:	3334      	adds	r3, #52	; 0x34
   81e7a:	4610      	mov	r0, r2
   81e7c:	4619      	mov	r1, r3
   81e7e:	4b2a      	ldr	r3, [pc, #168]	; (81f28 <vTaskSwitchContext+0xe4>)
   81e80:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   81e82:	4b28      	ldr	r3, [pc, #160]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e84:	681b      	ldr	r3, [r3, #0]
   81e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81e88:	4618      	mov	r0, r3
   81e8a:	4928      	ldr	r1, [pc, #160]	; (81f2c <vTaskSwitchContext+0xe8>)
   81e8c:	2214      	movs	r2, #20
   81e8e:	4b28      	ldr	r3, [pc, #160]	; (81f30 <vTaskSwitchContext+0xec>)
   81e90:	4798      	blx	r3
   81e92:	4603      	mov	r3, r0
   81e94:	2b00      	cmp	r3, #0
   81e96:	d008      	beq.n	81eaa <vTaskSwitchContext+0x66>
   81e98:	4b22      	ldr	r3, [pc, #136]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e9a:	681a      	ldr	r2, [r3, #0]
   81e9c:	4b21      	ldr	r3, [pc, #132]	; (81f24 <vTaskSwitchContext+0xe0>)
   81e9e:	681b      	ldr	r3, [r3, #0]
   81ea0:	3334      	adds	r3, #52	; 0x34
   81ea2:	4610      	mov	r0, r2
   81ea4:	4619      	mov	r1, r3
   81ea6:	4b20      	ldr	r3, [pc, #128]	; (81f28 <vTaskSwitchContext+0xe4>)
   81ea8:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81eaa:	4b22      	ldr	r3, [pc, #136]	; (81f34 <vTaskSwitchContext+0xf0>)
   81eac:	681b      	ldr	r3, [r3, #0]
   81eae:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   81eb0:	687b      	ldr	r3, [r7, #4]
   81eb2:	fab3 f383 	clz	r3, r3
   81eb6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   81eb8:	78fb      	ldrb	r3, [r7, #3]
   81eba:	f1c3 031f 	rsb	r3, r3, #31
   81ebe:	60fb      	str	r3, [r7, #12]
   81ec0:	491d      	ldr	r1, [pc, #116]	; (81f38 <vTaskSwitchContext+0xf4>)
   81ec2:	68fa      	ldr	r2, [r7, #12]
   81ec4:	4613      	mov	r3, r2
   81ec6:	009b      	lsls	r3, r3, #2
   81ec8:	4413      	add	r3, r2
   81eca:	009b      	lsls	r3, r3, #2
   81ecc:	440b      	add	r3, r1
   81ece:	681b      	ldr	r3, [r3, #0]
   81ed0:	2b00      	cmp	r3, #0
   81ed2:	d102      	bne.n	81eda <vTaskSwitchContext+0x96>
   81ed4:	4b19      	ldr	r3, [pc, #100]	; (81f3c <vTaskSwitchContext+0xf8>)
   81ed6:	4798      	blx	r3
   81ed8:	e7fe      	b.n	81ed8 <vTaskSwitchContext+0x94>
   81eda:	68fa      	ldr	r2, [r7, #12]
   81edc:	4613      	mov	r3, r2
   81ede:	009b      	lsls	r3, r3, #2
   81ee0:	4413      	add	r3, r2
   81ee2:	009b      	lsls	r3, r3, #2
   81ee4:	4a14      	ldr	r2, [pc, #80]	; (81f38 <vTaskSwitchContext+0xf4>)
   81ee6:	4413      	add	r3, r2
   81ee8:	60bb      	str	r3, [r7, #8]
   81eea:	68bb      	ldr	r3, [r7, #8]
   81eec:	685b      	ldr	r3, [r3, #4]
   81eee:	685a      	ldr	r2, [r3, #4]
   81ef0:	68bb      	ldr	r3, [r7, #8]
   81ef2:	605a      	str	r2, [r3, #4]
   81ef4:	68bb      	ldr	r3, [r7, #8]
   81ef6:	685a      	ldr	r2, [r3, #4]
   81ef8:	68bb      	ldr	r3, [r7, #8]
   81efa:	3308      	adds	r3, #8
   81efc:	429a      	cmp	r2, r3
   81efe:	d104      	bne.n	81f0a <vTaskSwitchContext+0xc6>
   81f00:	68bb      	ldr	r3, [r7, #8]
   81f02:	685b      	ldr	r3, [r3, #4]
   81f04:	685a      	ldr	r2, [r3, #4]
   81f06:	68bb      	ldr	r3, [r7, #8]
   81f08:	605a      	str	r2, [r3, #4]
   81f0a:	68bb      	ldr	r3, [r7, #8]
   81f0c:	685b      	ldr	r3, [r3, #4]
   81f0e:	68da      	ldr	r2, [r3, #12]
   81f10:	4b04      	ldr	r3, [pc, #16]	; (81f24 <vTaskSwitchContext+0xe0>)
   81f12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   81f14:	3710      	adds	r7, #16
   81f16:	46bd      	mov	sp, r7
   81f18:	bd80      	pop	{r7, pc}
   81f1a:	bf00      	nop
   81f1c:	20070564 	.word	0x20070564
   81f20:	2007055c 	.word	0x2007055c
   81f24:	200704cc 	.word	0x200704cc
   81f28:	00082599 	.word	0x00082599
   81f2c:	00082a64 	.word	0x00082a64
   81f30:	000827ad 	.word	0x000827ad
   81f34:	20070554 	.word	0x20070554
   81f38:	200704d0 	.word	0x200704d0
   81f3c:	000818e1 	.word	0x000818e1

00081f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   81f40:	b580      	push	{r7, lr}
   81f42:	b084      	sub	sp, #16
   81f44:	af00      	add	r7, sp, #0
   81f46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81f48:	687b      	ldr	r3, [r7, #4]
   81f4a:	68db      	ldr	r3, [r3, #12]
   81f4c:	68db      	ldr	r3, [r3, #12]
   81f4e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   81f50:	68bb      	ldr	r3, [r7, #8]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d102      	bne.n	81f5c <xTaskRemoveFromEventList+0x1c>
   81f56:	4b21      	ldr	r3, [pc, #132]	; (81fdc <xTaskRemoveFromEventList+0x9c>)
   81f58:	4798      	blx	r3
   81f5a:	e7fe      	b.n	81f5a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81f5c:	68bb      	ldr	r3, [r7, #8]
   81f5e:	3318      	adds	r3, #24
   81f60:	4618      	mov	r0, r3
   81f62:	4b1f      	ldr	r3, [pc, #124]	; (81fe0 <xTaskRemoveFromEventList+0xa0>)
   81f64:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81f66:	4b1f      	ldr	r3, [pc, #124]	; (81fe4 <xTaskRemoveFromEventList+0xa4>)
   81f68:	681b      	ldr	r3, [r3, #0]
   81f6a:	2b00      	cmp	r3, #0
   81f6c:	d11c      	bne.n	81fa8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81f6e:	68bb      	ldr	r3, [r7, #8]
   81f70:	3304      	adds	r3, #4
   81f72:	4618      	mov	r0, r3
   81f74:	4b1a      	ldr	r3, [pc, #104]	; (81fe0 <xTaskRemoveFromEventList+0xa0>)
   81f76:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   81f78:	68bb      	ldr	r3, [r7, #8]
   81f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81f7c:	2201      	movs	r2, #1
   81f7e:	409a      	lsls	r2, r3
   81f80:	4b19      	ldr	r3, [pc, #100]	; (81fe8 <xTaskRemoveFromEventList+0xa8>)
   81f82:	681b      	ldr	r3, [r3, #0]
   81f84:	431a      	orrs	r2, r3
   81f86:	4b18      	ldr	r3, [pc, #96]	; (81fe8 <xTaskRemoveFromEventList+0xa8>)
   81f88:	601a      	str	r2, [r3, #0]
   81f8a:	68bb      	ldr	r3, [r7, #8]
   81f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81f8e:	4613      	mov	r3, r2
   81f90:	009b      	lsls	r3, r3, #2
   81f92:	4413      	add	r3, r2
   81f94:	009b      	lsls	r3, r3, #2
   81f96:	4a15      	ldr	r2, [pc, #84]	; (81fec <xTaskRemoveFromEventList+0xac>)
   81f98:	441a      	add	r2, r3
   81f9a:	68bb      	ldr	r3, [r7, #8]
   81f9c:	3304      	adds	r3, #4
   81f9e:	4610      	mov	r0, r2
   81fa0:	4619      	mov	r1, r3
   81fa2:	4b13      	ldr	r3, [pc, #76]	; (81ff0 <xTaskRemoveFromEventList+0xb0>)
   81fa4:	4798      	blx	r3
   81fa6:	e005      	b.n	81fb4 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81fa8:	68bb      	ldr	r3, [r7, #8]
   81faa:	3318      	adds	r3, #24
   81fac:	4811      	ldr	r0, [pc, #68]	; (81ff4 <xTaskRemoveFromEventList+0xb4>)
   81fae:	4619      	mov	r1, r3
   81fb0:	4b0f      	ldr	r3, [pc, #60]	; (81ff0 <xTaskRemoveFromEventList+0xb0>)
   81fb2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   81fb4:	68bb      	ldr	r3, [r7, #8]
   81fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81fb8:	4b0f      	ldr	r3, [pc, #60]	; (81ff8 <xTaskRemoveFromEventList+0xb8>)
   81fba:	681b      	ldr	r3, [r3, #0]
   81fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81fbe:	429a      	cmp	r2, r3
   81fc0:	d905      	bls.n	81fce <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   81fc2:	2301      	movs	r3, #1
   81fc4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   81fc6:	4b0d      	ldr	r3, [pc, #52]	; (81ffc <xTaskRemoveFromEventList+0xbc>)
   81fc8:	2201      	movs	r2, #1
   81fca:	601a      	str	r2, [r3, #0]
   81fcc:	e001      	b.n	81fd2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   81fce:	2300      	movs	r3, #0
   81fd0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   81fd2:	68fb      	ldr	r3, [r7, #12]
}
   81fd4:	4618      	mov	r0, r3
   81fd6:	3710      	adds	r7, #16
   81fd8:	46bd      	mov	sp, r7
   81fda:	bd80      	pop	{r7, pc}
   81fdc:	000818e1 	.word	0x000818e1
   81fe0:	000817ed 	.word	0x000817ed
   81fe4:	20070564 	.word	0x20070564
   81fe8:	20070554 	.word	0x20070554
   81fec:	200704d0 	.word	0x200704d0
   81ff0:	000817a5 	.word	0x000817a5
   81ff4:	2007053c 	.word	0x2007053c
   81ff8:	200704cc 	.word	0x200704cc
   81ffc:	2007055c 	.word	0x2007055c

00082000 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   82000:	b480      	push	{r7}
   82002:	b083      	sub	sp, #12
   82004:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82006:	4b0e      	ldr	r3, [pc, #56]	; (82040 <prvResetNextTaskUnblockTime+0x40>)
   82008:	681b      	ldr	r3, [r3, #0]
   8200a:	681b      	ldr	r3, [r3, #0]
   8200c:	2b00      	cmp	r3, #0
   8200e:	d101      	bne.n	82014 <prvResetNextTaskUnblockTime+0x14>
   82010:	2301      	movs	r3, #1
   82012:	e000      	b.n	82016 <prvResetNextTaskUnblockTime+0x16>
   82014:	2300      	movs	r3, #0
   82016:	2b00      	cmp	r3, #0
   82018:	d004      	beq.n	82024 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8201a:	4b0a      	ldr	r3, [pc, #40]	; (82044 <prvResetNextTaskUnblockTime+0x44>)
   8201c:	f04f 32ff 	mov.w	r2, #4294967295
   82020:	601a      	str	r2, [r3, #0]
   82022:	e008      	b.n	82036 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82024:	4b06      	ldr	r3, [pc, #24]	; (82040 <prvResetNextTaskUnblockTime+0x40>)
   82026:	681b      	ldr	r3, [r3, #0]
   82028:	68db      	ldr	r3, [r3, #12]
   8202a:	68db      	ldr	r3, [r3, #12]
   8202c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8202e:	687b      	ldr	r3, [r7, #4]
   82030:	685a      	ldr	r2, [r3, #4]
   82032:	4b04      	ldr	r3, [pc, #16]	; (82044 <prvResetNextTaskUnblockTime+0x44>)
   82034:	601a      	str	r2, [r3, #0]
	}
}
   82036:	370c      	adds	r7, #12
   82038:	46bd      	mov	sp, r7
   8203a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8203e:	4770      	bx	lr
   82040:	20070534 	.word	0x20070534
   82044:	20070008 	.word	0x20070008

00082048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   82048:	b580      	push	{r7, lr}
   8204a:	b084      	sub	sp, #16
   8204c:	af00      	add	r7, sp, #0
   8204e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   82050:	687b      	ldr	r3, [r7, #4]
   82052:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   82054:	2300      	movs	r3, #0
   82056:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   82058:	687b      	ldr	r3, [r7, #4]
   8205a:	2b00      	cmp	r3, #0
   8205c:	d056      	beq.n	8210c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   8205e:	68bb      	ldr	r3, [r7, #8]
   82060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82062:	2b00      	cmp	r3, #0
   82064:	d102      	bne.n	8206c <xTaskPriorityDisinherit+0x24>
   82066:	4b2c      	ldr	r3, [pc, #176]	; (82118 <xTaskPriorityDisinherit+0xd0>)
   82068:	4798      	blx	r3
   8206a:	e7fe      	b.n	8206a <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   8206c:	68bb      	ldr	r3, [r7, #8]
   8206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82070:	1e5a      	subs	r2, r3, #1
   82072:	68bb      	ldr	r3, [r7, #8]
   82074:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82076:	68bb      	ldr	r3, [r7, #8]
   82078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8207a:	68bb      	ldr	r3, [r7, #8]
   8207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8207e:	429a      	cmp	r2, r3
   82080:	d044      	beq.n	8210c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   82082:	68bb      	ldr	r3, [r7, #8]
   82084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82086:	2b00      	cmp	r3, #0
   82088:	d140      	bne.n	8210c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8208a:	68bb      	ldr	r3, [r7, #8]
   8208c:	3304      	adds	r3, #4
   8208e:	4618      	mov	r0, r3
   82090:	4b22      	ldr	r3, [pc, #136]	; (8211c <xTaskPriorityDisinherit+0xd4>)
   82092:	4798      	blx	r3
   82094:	4603      	mov	r3, r0
   82096:	2b00      	cmp	r3, #0
   82098:	d115      	bne.n	820c6 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8209a:	68bb      	ldr	r3, [r7, #8]
   8209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8209e:	4920      	ldr	r1, [pc, #128]	; (82120 <xTaskPriorityDisinherit+0xd8>)
   820a0:	4613      	mov	r3, r2
   820a2:	009b      	lsls	r3, r3, #2
   820a4:	4413      	add	r3, r2
   820a6:	009b      	lsls	r3, r3, #2
   820a8:	440b      	add	r3, r1
   820aa:	681b      	ldr	r3, [r3, #0]
   820ac:	2b00      	cmp	r3, #0
   820ae:	d10a      	bne.n	820c6 <xTaskPriorityDisinherit+0x7e>
   820b0:	68bb      	ldr	r3, [r7, #8]
   820b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   820b4:	2201      	movs	r2, #1
   820b6:	fa02 f303 	lsl.w	r3, r2, r3
   820ba:	43da      	mvns	r2, r3
   820bc:	4b19      	ldr	r3, [pc, #100]	; (82124 <xTaskPriorityDisinherit+0xdc>)
   820be:	681b      	ldr	r3, [r3, #0]
   820c0:	401a      	ands	r2, r3
   820c2:	4b18      	ldr	r3, [pc, #96]	; (82124 <xTaskPriorityDisinherit+0xdc>)
   820c4:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   820c6:	68bb      	ldr	r3, [r7, #8]
   820c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   820ca:	68bb      	ldr	r3, [r7, #8]
   820cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   820ce:	68bb      	ldr	r3, [r7, #8]
   820d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   820d2:	f1c3 0205 	rsb	r2, r3, #5
   820d6:	68bb      	ldr	r3, [r7, #8]
   820d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   820da:	68bb      	ldr	r3, [r7, #8]
   820dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   820de:	2201      	movs	r2, #1
   820e0:	409a      	lsls	r2, r3
   820e2:	4b10      	ldr	r3, [pc, #64]	; (82124 <xTaskPriorityDisinherit+0xdc>)
   820e4:	681b      	ldr	r3, [r3, #0]
   820e6:	431a      	orrs	r2, r3
   820e8:	4b0e      	ldr	r3, [pc, #56]	; (82124 <xTaskPriorityDisinherit+0xdc>)
   820ea:	601a      	str	r2, [r3, #0]
   820ec:	68bb      	ldr	r3, [r7, #8]
   820ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   820f0:	4613      	mov	r3, r2
   820f2:	009b      	lsls	r3, r3, #2
   820f4:	4413      	add	r3, r2
   820f6:	009b      	lsls	r3, r3, #2
   820f8:	4a09      	ldr	r2, [pc, #36]	; (82120 <xTaskPriorityDisinherit+0xd8>)
   820fa:	441a      	add	r2, r3
   820fc:	68bb      	ldr	r3, [r7, #8]
   820fe:	3304      	adds	r3, #4
   82100:	4610      	mov	r0, r2
   82102:	4619      	mov	r1, r3
   82104:	4b08      	ldr	r3, [pc, #32]	; (82128 <xTaskPriorityDisinherit+0xe0>)
   82106:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   82108:	2301      	movs	r3, #1
   8210a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   8210c:	68fb      	ldr	r3, [r7, #12]
	}
   8210e:	4618      	mov	r0, r3
   82110:	3710      	adds	r7, #16
   82112:	46bd      	mov	sp, r7
   82114:	bd80      	pop	{r7, pc}
   82116:	bf00      	nop
   82118:	000818e1 	.word	0x000818e1
   8211c:	000817ed 	.word	0x000817ed
   82120:	200704d0 	.word	0x200704d0
   82124:	20070554 	.word	0x20070554
   82128:	000817a5 	.word	0x000817a5

0008212c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8212c:	b480      	push	{r7}
   8212e:	b083      	sub	sp, #12
   82130:	af00      	add	r7, sp, #0
   82132:	4603      	mov	r3, r0
   82134:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82136:	4b08      	ldr	r3, [pc, #32]	; (82158 <NVIC_EnableIRQ+0x2c>)
   82138:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8213c:	0952      	lsrs	r2, r2, #5
   8213e:	79f9      	ldrb	r1, [r7, #7]
   82140:	f001 011f 	and.w	r1, r1, #31
   82144:	2001      	movs	r0, #1
   82146:	fa00 f101 	lsl.w	r1, r0, r1
   8214a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8214e:	370c      	adds	r7, #12
   82150:	46bd      	mov	sp, r7
   82152:	f85d 7b04 	ldr.w	r7, [sp], #4
   82156:	4770      	bx	lr
   82158:	e000e100 	.word	0xe000e100

0008215c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8215c:	b480      	push	{r7}
   8215e:	b083      	sub	sp, #12
   82160:	af00      	add	r7, sp, #0
   82162:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82164:	687b      	ldr	r3, [r7, #4]
   82166:	2b07      	cmp	r3, #7
   82168:	d825      	bhi.n	821b6 <osc_get_rate+0x5a>
   8216a:	a201      	add	r2, pc, #4	; (adr r2, 82170 <osc_get_rate+0x14>)
   8216c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82170:	00082191 	.word	0x00082191
   82174:	00082197 	.word	0x00082197
   82178:	0008219d 	.word	0x0008219d
   8217c:	000821a3 	.word	0x000821a3
   82180:	000821a7 	.word	0x000821a7
   82184:	000821ab 	.word	0x000821ab
   82188:	000821af 	.word	0x000821af
   8218c:	000821b3 	.word	0x000821b3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82190:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82194:	e010      	b.n	821b8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8219a:	e00d      	b.n	821b8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8219c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   821a0:	e00a      	b.n	821b8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   821a2:	4b08      	ldr	r3, [pc, #32]	; (821c4 <osc_get_rate+0x68>)
   821a4:	e008      	b.n	821b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   821a6:	4b08      	ldr	r3, [pc, #32]	; (821c8 <osc_get_rate+0x6c>)
   821a8:	e006      	b.n	821b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   821aa:	4b08      	ldr	r3, [pc, #32]	; (821cc <osc_get_rate+0x70>)
   821ac:	e004      	b.n	821b8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   821ae:	4b07      	ldr	r3, [pc, #28]	; (821cc <osc_get_rate+0x70>)
   821b0:	e002      	b.n	821b8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   821b2:	4b06      	ldr	r3, [pc, #24]	; (821cc <osc_get_rate+0x70>)
   821b4:	e000      	b.n	821b8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   821b6:	2300      	movs	r3, #0
}
   821b8:	4618      	mov	r0, r3
   821ba:	370c      	adds	r7, #12
   821bc:	46bd      	mov	sp, r7
   821be:	f85d 7b04 	ldr.w	r7, [sp], #4
   821c2:	4770      	bx	lr
   821c4:	003d0900 	.word	0x003d0900
   821c8:	007a1200 	.word	0x007a1200
   821cc:	00b71b00 	.word	0x00b71b00

000821d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   821d0:	b580      	push	{r7, lr}
   821d2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   821d4:	2006      	movs	r0, #6
   821d6:	4b04      	ldr	r3, [pc, #16]	; (821e8 <sysclk_get_main_hz+0x18>)
   821d8:	4798      	blx	r3
   821da:	4602      	mov	r2, r0
   821dc:	4613      	mov	r3, r2
   821de:	00db      	lsls	r3, r3, #3
   821e0:	1a9b      	subs	r3, r3, r2
   821e2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   821e4:	4618      	mov	r0, r3
   821e6:	bd80      	pop	{r7, pc}
   821e8:	0008215d 	.word	0x0008215d

000821ec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   821ec:	b580      	push	{r7, lr}
   821ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   821f0:	4b02      	ldr	r3, [pc, #8]	; (821fc <sysclk_get_cpu_hz+0x10>)
   821f2:	4798      	blx	r3
   821f4:	4603      	mov	r3, r0
   821f6:	085b      	lsrs	r3, r3, #1
}
   821f8:	4618      	mov	r0, r3
   821fa:	bd80      	pop	{r7, pc}
   821fc:	000821d1 	.word	0x000821d1

00082200 <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   82200:	b580      	push	{r7, lr}
   82202:	b082      	sub	sp, #8
   82204:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN1);
   82206:	4816      	ldr	r0, [pc, #88]	; (82260 <CAN1_Handler+0x60>)
   82208:	4b16      	ldr	r3, [pc, #88]	; (82264 <CAN1_Handler+0x64>)
   8220a:	4798      	blx	r3
   8220c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8220e:	683b      	ldr	r3, [r7, #0]
   82210:	b2db      	uxtb	r3, r3
   82212:	2b00      	cmp	r3, #0
   82214:	d021      	beq.n	8225a <CAN1_Handler+0x5a>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82216:	2300      	movs	r3, #0
   82218:	71fb      	strb	r3, [r7, #7]
   8221a:	e01b      	b.n	82254 <CAN1_Handler+0x54>
			ul_status = can_mailbox_get_status(CAN1, i);
   8221c:	79fb      	ldrb	r3, [r7, #7]
   8221e:	4810      	ldr	r0, [pc, #64]	; (82260 <CAN1_Handler+0x60>)
   82220:	4619      	mov	r1, r3
   82222:	4b11      	ldr	r3, [pc, #68]	; (82268 <CAN1_Handler+0x68>)
   82224:	4798      	blx	r3
   82226:	6038      	str	r0, [r7, #0]
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   82228:	683b      	ldr	r3, [r7, #0]
   8222a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8222e:	2b00      	cmp	r3, #0
   82230:	d00d      	beq.n	8224e <CAN1_Handler+0x4e>
				can1_mailbox.ul_mb_idx = i;
   82232:	79fa      	ldrb	r2, [r7, #7]
   82234:	4b0d      	ldr	r3, [pc, #52]	; (8226c <CAN1_Handler+0x6c>)
   82236:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   82238:	4b0c      	ldr	r3, [pc, #48]	; (8226c <CAN1_Handler+0x6c>)
   8223a:	683a      	ldr	r2, [r7, #0]
   8223c:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   8223e:	4808      	ldr	r0, [pc, #32]	; (82260 <CAN1_Handler+0x60>)
   82240:	490a      	ldr	r1, [pc, #40]	; (8226c <CAN1_Handler+0x6c>)
   82242:	4b0b      	ldr	r3, [pc, #44]	; (82270 <CAN1_Handler+0x70>)
   82244:	4798      	blx	r3
				g_ul_recv_status = 1;
   82246:	4b0b      	ldr	r3, [pc, #44]	; (82274 <CAN1_Handler+0x74>)
   82248:	2201      	movs	r2, #1
   8224a:	601a      	str	r2, [r3, #0]
				break;
   8224c:	e005      	b.n	8225a <CAN1_Handler+0x5a>
{
	uint32_t ul_status;

	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8224e:	79fb      	ldrb	r3, [r7, #7]
   82250:	3301      	adds	r3, #1
   82252:	71fb      	strb	r3, [r7, #7]
   82254:	79fb      	ldrb	r3, [r7, #7]
   82256:	2b07      	cmp	r3, #7
   82258:	d9e0      	bls.n	8221c <CAN1_Handler+0x1c>
				g_ul_recv_status = 1;
				break;
			}
		}
	}
}
   8225a:	3708      	adds	r7, #8
   8225c:	46bd      	mov	sp, r7
   8225e:	bd80      	pop	{r7, pc}
   82260:	400b8000 	.word	0x400b8000
   82264:	00080869 	.word	0x00080869
   82268:	000808ad 	.word	0x000808ad
   8226c:	20070574 	.word	0x20070574
   82270:	00080a2d 	.word	0x00080a2d
   82274:	20070568 	.word	0x20070568

00082278 <decode_can_msg>:
 * \brief Decode CAN messages.
 *
 *  \param p_mailbox Pointer to CAN Mailbox structure.
 */
void decode_can_msg(can_mb_conf_t *p_mailbox)
{
   82278:	b580      	push	{r7, lr}
   8227a:	b084      	sub	sp, #16
   8227c:	af00      	add	r7, sp, #0
   8227e:	6078      	str	r0, [r7, #4]
	uint32_t ul_led_Ctrl = p_mailbox->ul_datal;
   82280:	687b      	ldr	r3, [r7, #4]
   82282:	699b      	ldr	r3, [r3, #24]
   82284:	60fb      	str	r3, [r7, #12]

	//("CAN message:" STRING_EOL);
	if (ul_led_Ctrl == CAN_MSG_TOGGLE_LED_0) {
   82286:	68fa      	ldr	r2, [r7, #12]
   82288:	4b08      	ldr	r3, [pc, #32]	; (822ac <decode_can_msg+0x34>)
   8228a:	429a      	cmp	r2, r3
   8228c:	d103      	bne.n	82296 <decode_can_msg+0x1e>
		//("  Toggle LED 0" STRING_EOL);
		pio_toggle_pin(LED0_GPIO);
   8228e:	203b      	movs	r0, #59	; 0x3b
   82290:	4b07      	ldr	r3, [pc, #28]	; (822b0 <decode_can_msg+0x38>)
   82292:	4798      	blx	r3
   82294:	e006      	b.n	822a4 <decode_can_msg+0x2c>
	} else if (ul_led_Ctrl == CAN_MSG_TOGGLE_LED_1) {
   82296:	68fa      	ldr	r2, [r7, #12]
   82298:	4b06      	ldr	r3, [pc, #24]	; (822b4 <decode_can_msg+0x3c>)
   8229a:	429a      	cmp	r2, r3
   8229c:	d102      	bne.n	822a4 <decode_can_msg+0x2c>
		//("  Toggle LED 1" STRING_EOL);
		pio_toggle_pin(LED1_GPIO);
   8229e:	2055      	movs	r0, #85	; 0x55
   822a0:	4b03      	ldr	r3, [pc, #12]	; (822b0 <decode_can_msg+0x38>)
   822a2:	4798      	blx	r3
	}
}
   822a4:	3710      	adds	r7, #16
   822a6:	46bd      	mov	sp, r7
   822a8:	bd80      	pop	{r7, pc}
   822aa:	bf00      	nop
   822ac:	11223344 	.word	0x11223344
   822b0:	00080e2d 	.word	0x00080e2d
   822b4:	aabbccdd 	.word	0xaabbccdd

000822b8 <reset_mailbox_conf>:
 * \brief Reset mailbox configure structure.
 *
 *  \param p_mailbox Pointer to mailbox configure structure.
 */
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   822b8:	b480      	push	{r7}
   822ba:	b083      	sub	sp, #12
   822bc:	af00      	add	r7, sp, #0
   822be:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   822c0:	687b      	ldr	r3, [r7, #4]
   822c2:	2200      	movs	r2, #0
   822c4:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   822c6:	687b      	ldr	r3, [r7, #4]
   822c8:	2200      	movs	r2, #0
   822ca:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   822cc:	687b      	ldr	r3, [r7, #4]
   822ce:	2200      	movs	r2, #0
   822d0:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   822d2:	687b      	ldr	r3, [r7, #4]
   822d4:	2200      	movs	r2, #0
   822d6:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   822d8:	687b      	ldr	r3, [r7, #4]
   822da:	2200      	movs	r2, #0
   822dc:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   822de:	687b      	ldr	r3, [r7, #4]
   822e0:	2200      	movs	r2, #0
   822e2:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   822e4:	687b      	ldr	r3, [r7, #4]
   822e6:	2200      	movs	r2, #0
   822e8:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   822ea:	687b      	ldr	r3, [r7, #4]
   822ec:	2200      	movs	r2, #0
   822ee:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   822f0:	687b      	ldr	r3, [r7, #4]
   822f2:	2200      	movs	r2, #0
   822f4:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   822f6:	687b      	ldr	r3, [r7, #4]
   822f8:	2200      	movs	r2, #0
   822fa:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   822fc:	687b      	ldr	r3, [r7, #4]
   822fe:	2200      	movs	r2, #0
   82300:	61da      	str	r2, [r3, #28]
}
   82302:	370c      	adds	r7, #12
   82304:	46bd      	mov	sp, r7
   82306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8230a:	4770      	bx	lr

0008230c <test_1>:
/**
 *  \brief Test the transmission from CAN0 Mailbox 0 to CAN1 Mailbox 0.
 */

void test_1(void)
{
   8230c:	b580      	push	{r7, lr}
   8230e:	af00      	add	r7, sp, #0
	pio_toggle_pin(LED0_GPIO);
   82310:	203b      	movs	r0, #59	; 0x3b
   82312:	4b2f      	ldr	r3, [pc, #188]	; (823d0 <test_1+0xc4>)
   82314:	4798      	blx	r3
	can_reset_all_mailbox(CAN0);
   82316:	482f      	ldr	r0, [pc, #188]	; (823d4 <test_1+0xc8>)
   82318:	4b2f      	ldr	r3, [pc, #188]	; (823d8 <test_1+0xcc>)
   8231a:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   8231c:	482f      	ldr	r0, [pc, #188]	; (823dc <test_1+0xd0>)
   8231e:	4b2e      	ldr	r3, [pc, #184]	; (823d8 <test_1+0xcc>)
   82320:	4798      	blx	r3

	//("\n\rTest1: CAN0 Mailbox 0 transmitting to CAN1 Mailbox 0" STRING_EOL);

	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   82322:	482f      	ldr	r0, [pc, #188]	; (823e0 <test_1+0xd4>)
   82324:	4b2f      	ldr	r3, [pc, #188]	; (823e4 <test_1+0xd8>)
   82326:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = TEST1_CAN_COMM_MB_IDX;
   82328:	4b2d      	ldr	r3, [pc, #180]	; (823e0 <test_1+0xd4>)
   8232a:	2200      	movs	r2, #0
   8232c:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8232e:	4b2c      	ldr	r3, [pc, #176]	; (823e0 <test_1+0xd4>)
   82330:	2201      	movs	r2, #1
   82332:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
   82334:	4b2a      	ldr	r3, [pc, #168]	; (823e0 <test_1+0xd4>)
   82336:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   8233a:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(TEST1_CAN_TRANSFER_ID);
   8233c:	4b28      	ldr	r3, [pc, #160]	; (823e0 <test_1+0xd4>)
   8233e:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   82342:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   82344:	4825      	ldr	r0, [pc, #148]	; (823dc <test_1+0xd0>)
   82346:	4926      	ldr	r1, [pc, #152]	; (823e0 <test_1+0xd4>)
   82348:	4b27      	ldr	r3, [pc, #156]	; (823e8 <test_1+0xdc>)
   8234a:	4798      	blx	r3

	/* Init CAN0 Mailbox 0 to Transmit Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   8234c:	4827      	ldr	r0, [pc, #156]	; (823ec <test_1+0xe0>)
   8234e:	4b25      	ldr	r3, [pc, #148]	; (823e4 <test_1+0xd8>)
   82350:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = TEST1_CAN_COMM_MB_IDX;
   82352:	4b26      	ldr	r3, [pc, #152]	; (823ec <test_1+0xe0>)
   82354:	2200      	movs	r2, #0
   82356:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   82358:	4b24      	ldr	r3, [pc, #144]	; (823ec <test_1+0xe0>)
   8235a:	2203      	movs	r2, #3
   8235c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = TEST1_CAN0_TX_PRIO;
   8235e:	4b23      	ldr	r3, [pc, #140]	; (823ec <test_1+0xe0>)
   82360:	220f      	movs	r2, #15
   82362:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   82364:	4b21      	ldr	r3, [pc, #132]	; (823ec <test_1+0xe0>)
   82366:	2200      	movs	r2, #0
   82368:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8236a:	4b20      	ldr	r3, [pc, #128]	; (823ec <test_1+0xe0>)
   8236c:	2200      	movs	r2, #0
   8236e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   82370:	4818      	ldr	r0, [pc, #96]	; (823d4 <test_1+0xc8>)
   82372:	491e      	ldr	r1, [pc, #120]	; (823ec <test_1+0xe0>)
   82374:	4b1c      	ldr	r3, [pc, #112]	; (823e8 <test_1+0xdc>)
   82376:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(TEST1_CAN_TRANSFER_ID);
   82378:	4b1c      	ldr	r3, [pc, #112]	; (823ec <test_1+0xe0>)
   8237a:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   8237e:	611a      	str	r2, [r3, #16]
	can0_mailbox.ul_datal = CAN_MSG_TOGGLE_LED_0;
   82380:	4b1a      	ldr	r3, [pc, #104]	; (823ec <test_1+0xe0>)
   82382:	4a1b      	ldr	r2, [pc, #108]	; (823f0 <test_1+0xe4>)
   82384:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = CAN_MSG_DUMMY_DATA;
   82386:	4b19      	ldr	r3, [pc, #100]	; (823ec <test_1+0xe0>)
   82388:	4a1a      	ldr	r2, [pc, #104]	; (823f4 <test_1+0xe8>)
   8238a:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   8238c:	4b17      	ldr	r3, [pc, #92]	; (823ec <test_1+0xe0>)
   8238e:	2208      	movs	r2, #8
   82390:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   82392:	4810      	ldr	r0, [pc, #64]	; (823d4 <test_1+0xc8>)
   82394:	4915      	ldr	r1, [pc, #84]	; (823ec <test_1+0xe0>)
   82396:	4b18      	ldr	r3, [pc, #96]	; (823f8 <test_1+0xec>)
   82398:	4798      	blx	r3

	/* Enable CAN1 mailbox 0 interrupt. */
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   8239a:	4810      	ldr	r0, [pc, #64]	; (823dc <test_1+0xd0>)
   8239c:	2101      	movs	r1, #1
   8239e:	4b17      	ldr	r3, [pc, #92]	; (823fc <test_1+0xf0>)
   823a0:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB0);
   823a2:	480c      	ldr	r0, [pc, #48]	; (823d4 <test_1+0xc8>)
   823a4:	2101      	movs	r1, #1
   823a6:	4b16      	ldr	r3, [pc, #88]	; (82400 <test_1+0xf4>)
   823a8:	4798      	blx	r3

	while (!g_ul_recv_status) {
   823aa:	bf00      	nop
   823ac:	4b15      	ldr	r3, [pc, #84]	; (82404 <test_1+0xf8>)
   823ae:	681b      	ldr	r3, [r3, #0]
   823b0:	2b00      	cmp	r3, #0
   823b2:	d0fb      	beq.n	823ac <test_1+0xa0>
	}

	if ((can1_mailbox.ul_datal == CAN_MSG_TOGGLE_LED_0) &&
   823b4:	4b0a      	ldr	r3, [pc, #40]	; (823e0 <test_1+0xd4>)
   823b6:	699a      	ldr	r2, [r3, #24]
   823b8:	4b0d      	ldr	r3, [pc, #52]	; (823f0 <test_1+0xe4>)
   823ba:	429a      	cmp	r2, r3
   823bc:	d106      	bne.n	823cc <test_1+0xc0>
	(can1_mailbox.uc_length == MAX_CAN_FRAME_DATA_LEN)) {
   823be:	4b08      	ldr	r3, [pc, #32]	; (823e0 <test_1+0xd4>)
   823c0:	799b      	ldrb	r3, [r3, #6]
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB0);

	while (!g_ul_recv_status) {
	}

	if ((can1_mailbox.ul_datal == CAN_MSG_TOGGLE_LED_0) &&
   823c2:	2b08      	cmp	r3, #8
   823c4:	d102      	bne.n	823cc <test_1+0xc0>
	(can1_mailbox.uc_length == MAX_CAN_FRAME_DATA_LEN)) {
		//("Test1 passed" STRING_EOL);
		decode_can_msg(&can1_mailbox);
   823c6:	4806      	ldr	r0, [pc, #24]	; (823e0 <test_1+0xd4>)
   823c8:	4b0f      	ldr	r3, [pc, #60]	; (82408 <test_1+0xfc>)
   823ca:	4798      	blx	r3
		} else {
		//("Test1 ERROR" STRING_EOL);
	}
}
   823cc:	bd80      	pop	{r7, pc}
   823ce:	bf00      	nop
   823d0:	00080e2d 	.word	0x00080e2d
   823d4:	400b4000 	.word	0x400b4000
   823d8:	00080ba9 	.word	0x00080ba9
   823dc:	400b8000 	.word	0x400b8000
   823e0:	20070574 	.word	0x20070574
   823e4:	000822b9 	.word	0x000822b9
   823e8:	0008090d 	.word	0x0008090d
   823ec:	2007059c 	.word	0x2007059c
   823f0:	11223344 	.word	0x11223344
   823f4:	55aaaa55 	.word	0x55aaaa55
   823f8:	00080af1 	.word	0x00080af1
   823fc:	00080831 	.word	0x00080831
   82400:	00080881 	.word	0x00080881
   82404:	20070568 	.word	0x20070568
   82408:	00082279 	.word	0x00082279

0008240c <can_test>:

int can_test(void)
{
   8240c:	b580      	push	{r7, lr}
   8240e:	b082      	sub	sp, #8
   82410:	af00      	add	r7, sp, #0
	/* Initialize the SAM system. */
	//sysclk_init();
	//board_init();

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   82412:	482d      	ldr	r0, [pc, #180]	; (824c8 <can_test+0xbc>)
   82414:	2134      	movs	r1, #52	; 0x34
   82416:	4b2d      	ldr	r3, [pc, #180]	; (824cc <can_test+0xc0>)
   82418:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   8241a:	482b      	ldr	r0, [pc, #172]	; (824c8 <can_test+0xbc>)
   8241c:	2135      	movs	r1, #53	; 0x35
   8241e:	4b2c      	ldr	r3, [pc, #176]	; (824d0 <can_test+0xc4>)
   82420:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   82422:	4829      	ldr	r0, [pc, #164]	; (824c8 <can_test+0xbc>)
   82424:	4b2b      	ldr	r3, [pc, #172]	; (824d4 <can_test+0xc8>)
   82426:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   82428:	4827      	ldr	r0, [pc, #156]	; (824c8 <can_test+0xbc>)
   8242a:	4b2b      	ldr	r3, [pc, #172]	; (824d8 <can_test+0xcc>)
   8242c:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   8242e:	482b      	ldr	r0, [pc, #172]	; (824dc <can_test+0xd0>)
   82430:	218f      	movs	r1, #143	; 0x8f
   82432:	4b26      	ldr	r3, [pc, #152]	; (824cc <can_test+0xc0>)
   82434:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   82436:	4829      	ldr	r0, [pc, #164]	; (824dc <can_test+0xd0>)
   82438:	2190      	movs	r1, #144	; 0x90
   8243a:	4b25      	ldr	r3, [pc, #148]	; (824d0 <can_test+0xc4>)
   8243c:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   8243e:	4827      	ldr	r0, [pc, #156]	; (824dc <can_test+0xd0>)
   82440:	4b24      	ldr	r3, [pc, #144]	; (824d4 <can_test+0xc8>)
   82442:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   82444:	4825      	ldr	r0, [pc, #148]	; (824dc <can_test+0xd0>)
   82446:	4b24      	ldr	r3, [pc, #144]	; (824d8 <can_test+0xcc>)
   82448:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8244a:	202b      	movs	r0, #43	; 0x2b
   8244c:	4b24      	ldr	r3, [pc, #144]	; (824e0 <can_test+0xd4>)
   8244e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   82450:	202c      	movs	r0, #44	; 0x2c
   82452:	4b23      	ldr	r3, [pc, #140]	; (824e0 <can_test+0xd4>)
   82454:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   82456:	4b23      	ldr	r3, [pc, #140]	; (824e4 <can_test+0xd8>)
   82458:	4798      	blx	r3
   8245a:	6078      	str	r0, [r7, #4]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8245c:	4822      	ldr	r0, [pc, #136]	; (824e8 <can_test+0xdc>)
   8245e:	6879      	ldr	r1, [r7, #4]
   82460:	22fa      	movs	r2, #250	; 0xfa
   82462:	4b22      	ldr	r3, [pc, #136]	; (824ec <can_test+0xe0>)
   82464:	4798      	blx	r3
   82466:	4603      	mov	r3, r0
   82468:	2b00      	cmp	r3, #0
   8246a:	d02b      	beq.n	824c4 <can_test+0xb8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   8246c:	4820      	ldr	r0, [pc, #128]	; (824f0 <can_test+0xe4>)
   8246e:	6879      	ldr	r1, [r7, #4]
   82470:	22fa      	movs	r2, #250	; 0xfa
   82472:	4b1e      	ldr	r3, [pc, #120]	; (824ec <can_test+0xe0>)
   82474:	4798      	blx	r3
   82476:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   82478:	2b00      	cmp	r3, #0
   8247a:	d023      	beq.n	824c4 <can_test+0xb8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8247c:	481a      	ldr	r0, [pc, #104]	; (824e8 <can_test+0xdc>)
   8247e:	f04f 31ff 	mov.w	r1, #4294967295
   82482:	4b1c      	ldr	r3, [pc, #112]	; (824f4 <can_test+0xe8>)
   82484:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   82486:	481a      	ldr	r0, [pc, #104]	; (824f0 <can_test+0xe4>)
   82488:	f04f 31ff 	mov.w	r1, #4294967295
   8248c:	4b19      	ldr	r3, [pc, #100]	; (824f4 <can_test+0xe8>)
   8248e:	4798      	blx	r3

		/* Configure and enable interrupt of CAN1, as the tests will use receiver interrupt. */
		NVIC_EnableIRQ(CAN1_IRQn);
   82490:	202c      	movs	r0, #44	; 0x2c
   82492:	4b19      	ldr	r3, [pc, #100]	; (824f8 <can_test+0xec>)
   82494:	4798      	blx	r3

		/* Run tests. */
		test_1();
   82496:	4b19      	ldr	r3, [pc, #100]	; (824fc <can_test+0xf0>)
   82498:	4798      	blx	r3
		g_ul_recv_status = 0;
   8249a:	4b19      	ldr	r3, [pc, #100]	; (82500 <can_test+0xf4>)
   8249c:	2200      	movs	r2, #0
   8249e:	601a      	str	r2, [r3, #0]

		/* Disable CAN0 Controller */
		can_disable(CAN0);
   824a0:	4811      	ldr	r0, [pc, #68]	; (824e8 <can_test+0xdc>)
   824a2:	4b18      	ldr	r3, [pc, #96]	; (82504 <can_test+0xf8>)
   824a4:	4798      	blx	r3
		/* Disable CAN0 Transceiver */
		sn65hvd234_enable_low_power(&can0_transceiver);
   824a6:	4808      	ldr	r0, [pc, #32]	; (824c8 <can_test+0xbc>)
   824a8:	4b17      	ldr	r3, [pc, #92]	; (82508 <can_test+0xfc>)
   824aa:	4798      	blx	r3
		sn65hvd234_disable(&can0_transceiver);
   824ac:	4806      	ldr	r0, [pc, #24]	; (824c8 <can_test+0xbc>)
   824ae:	4b17      	ldr	r3, [pc, #92]	; (8250c <can_test+0x100>)
   824b0:	4798      	blx	r3

		/* Disable CAN1 Controller */
		can_disable(CAN1);
   824b2:	480f      	ldr	r0, [pc, #60]	; (824f0 <can_test+0xe4>)
   824b4:	4b13      	ldr	r3, [pc, #76]	; (82504 <can_test+0xf8>)
   824b6:	4798      	blx	r3
		/* Disable CAN1 Transceiver */
		sn65hvd234_enable_low_power(&can1_transceiver);
   824b8:	4808      	ldr	r0, [pc, #32]	; (824dc <can_test+0xd0>)
   824ba:	4b13      	ldr	r3, [pc, #76]	; (82508 <can_test+0xfc>)
   824bc:	4798      	blx	r3
		sn65hvd234_disable(&can1_transceiver);
   824be:	4807      	ldr	r0, [pc, #28]	; (824dc <can_test+0xd0>)
   824c0:	4b12      	ldr	r3, [pc, #72]	; (8250c <can_test+0x100>)
   824c2:	4798      	blx	r3

		} else {
	}

	while (1) {
	}
   824c4:	e7fe      	b.n	824c4 <can_test+0xb8>
   824c6:	bf00      	nop
   824c8:	200705bc 	.word	0x200705bc
   824cc:	00080571 	.word	0x00080571
   824d0:	0008058d 	.word	0x0008058d
   824d4:	000805fd 	.word	0x000805fd
   824d8:	000805a9 	.word	0x000805a9
   824dc:	20070594 	.word	0x20070594
   824e0:	00081339 	.word	0x00081339
   824e4:	000821ed 	.word	0x000821ed
   824e8:	400b4000 	.word	0x400b4000
   824ec:	00080769 	.word	0x00080769
   824f0:	400b8000 	.word	0x400b8000
   824f4:	0008084d 	.word	0x0008084d
   824f8:	0008212d 	.word	0x0008212d
   824fc:	0008230d 	.word	0x0008230d
   82500:	20070568 	.word	0x20070568
   82504:	00080811 	.word	0x00080811
   82508:	000805e1 	.word	0x000805e1
   8250c:	000805c5 	.word	0x000805c5

00082510 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   82510:	b480      	push	{r7}
   82512:	b085      	sub	sp, #20
   82514:	af00      	add	r7, sp, #0
   82516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   82518:	687b      	ldr	r3, [r7, #4]
   8251a:	f003 0307 	and.w	r3, r3, #7
   8251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   82520:	4b0c      	ldr	r3, [pc, #48]	; (82554 <NVIC_SetPriorityGrouping+0x44>)
   82522:	68db      	ldr	r3, [r3, #12]
   82524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   82526:	68ba      	ldr	r2, [r7, #8]
   82528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   8252c:	4013      	ands	r3, r2
   8252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   82530:	68fb      	ldr	r3, [r7, #12]
   82532:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   82534:	68bb      	ldr	r3, [r7, #8]
   82536:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   82538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   8253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   82540:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   82542:	4b04      	ldr	r3, [pc, #16]	; (82554 <NVIC_SetPriorityGrouping+0x44>)
   82544:	68ba      	ldr	r2, [r7, #8]
   82546:	60da      	str	r2, [r3, #12]
}
   82548:	3714      	adds	r7, #20
   8254a:	46bd      	mov	sp, r7
   8254c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82550:	4770      	bx	lr
   82552:	bf00      	nop
   82554:	e000ed00 	.word	0xe000ed00

00082558 <main>:

/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main(void)
{
   82558:	b580      	push	{r7, lr}
   8255a:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   8255c:	4b02      	ldr	r3, [pc, #8]	; (82568 <main+0x10>)
   8255e:	4798      	blx	r3
		main_blinky();
	}
#endif
#if PROGRAM_CHOICE == 3
	{
		can_test();
   82560:	4b02      	ldr	r3, [pc, #8]	; (8256c <main+0x14>)
   82562:	4798      	blx	r3
	{
		main_full();
	}
#endif
	{
		while (1){}
   82564:	e7fe      	b.n	82564 <main+0xc>
   82566:	bf00      	nop
   82568:	00082571 	.word	0x00082571
   8256c:	0008240d 	.word	0x0008240d

00082570 <prvSetupHardware>:
	return 0;
}
/*-----------------------------------------------------------*/

static void prvSetupHardware(void)
{
   82570:	b580      	push	{r7, lr}
   82572:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   82574:	4b04      	ldr	r3, [pc, #16]	; (82588 <prvSetupHardware+0x18>)
   82576:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   82578:	2000      	movs	r0, #0
   8257a:	4b04      	ldr	r3, [pc, #16]	; (8258c <prvSetupHardware+0x1c>)
   8257c:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   8257e:	4b04      	ldr	r3, [pc, #16]	; (82590 <prvSetupHardware+0x20>)
   82580:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   82582:	4b04      	ldr	r3, [pc, #16]	; (82594 <prvSetupHardware+0x24>)
   82584:	4798      	blx	r3
}
   82586:	bd80      	pop	{r7, pc}
   82588:	00080431 	.word	0x00080431
   8258c:	00082511 	.word	0x00082511
   82590:	00080499 	.word	0x00080499
   82594:	000825d5 	.word	0x000825d5

00082598 <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   82598:	b580      	push	{r7, lr}
   8259a:	b082      	sub	sp, #8
   8259c:	af00      	add	r7, sp, #0
   8259e:	6078      	str	r0, [r7, #4]
   825a0:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   825a2:	4b01      	ldr	r3, [pc, #4]	; (825a8 <vApplicationStackOverflowHook+0x10>)
   825a4:	4798      	blx	r3
	for (;;);
   825a6:	e7fe      	b.n	825a6 <vApplicationStackOverflowHook+0xe>
   825a8:	000818e1 	.word	0x000818e1

000825ac <WDT_Handler>:
/*-----------------------------------------------------------*/

/*---------------CUSTOM INTERRUPT HANDLERS-------------------*/

void WDT_Handler(void)
{
   825ac:	b580      	push	{r7, lr}
   825ae:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   825b0:	4804      	ldr	r0, [pc, #16]	; (825c4 <WDT_Handler+0x18>)
   825b2:	4b05      	ldr	r3, [pc, #20]	; (825c8 <WDT_Handler+0x1c>)
   825b4:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   825b6:	2055      	movs	r0, #85	; 0x55
   825b8:	4b04      	ldr	r3, [pc, #16]	; (825cc <WDT_Handler+0x20>)
   825ba:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   825bc:	4801      	ldr	r0, [pc, #4]	; (825c4 <WDT_Handler+0x18>)
   825be:	4b04      	ldr	r3, [pc, #16]	; (825d0 <WDT_Handler+0x24>)
   825c0:	4798      	blx	r3
}
   825c2:	bd80      	pop	{r7, pc}
   825c4:	400e1a50 	.word	0x400e1a50
   825c8:	000814bd 	.word	0x000814bd
   825cc:	00080e2d 	.word	0x00080e2d
   825d0:	00081495 	.word	0x00081495

000825d4 <vParTestInitialise>:
static const uint32_t ulLED[] = { LED2_GPIO, LED0_GPIO, LED1_GPIO };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
   825d4:	b580      	push	{r7, lr}
   825d6:	b082      	sub	sp, #8
   825d8:	af00      	add	r7, sp, #0
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   825da:	2300      	movs	r3, #0
   825dc:	607b      	str	r3, [r7, #4]
   825de:	e00f      	b.n	82600 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   825e0:	4b0a      	ldr	r3, [pc, #40]	; (8260c <vParTestInitialise+0x38>)
   825e2:	687a      	ldr	r2, [r7, #4]
   825e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   825e8:	4618      	mov	r0, r3
   825ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   825ee:	4b08      	ldr	r3, [pc, #32]	; (82610 <vParTestInitialise+0x3c>)
   825f0:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   825f2:	6878      	ldr	r0, [r7, #4]
   825f4:	2100      	movs	r1, #0
   825f6:	4b07      	ldr	r3, [pc, #28]	; (82614 <vParTestInitialise+0x40>)
   825f8:	4798      	blx	r3

void vParTestInitialise( void )
{
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   825fa:	687b      	ldr	r3, [r7, #4]
   825fc:	3301      	adds	r3, #1
   825fe:	607b      	str	r3, [r7, #4]
   82600:	687b      	ldr	r3, [r7, #4]
   82602:	2b02      	cmp	r3, #2
   82604:	d9ec      	bls.n	825e0 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   82606:	3708      	adds	r7, #8
   82608:	46bd      	mov	sp, r7
   8260a:	bd80      	pop	{r7, pc}
   8260c:	00082a78 	.word	0x00082a78
   82610:	00080e8d 	.word	0x00080e8d
   82614:	00082619 	.word	0x00082619

00082618 <vParTestSetLED>:
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   82618:	b580      	push	{r7, lr}
   8261a:	b082      	sub	sp, #8
   8261c:	af00      	add	r7, sp, #0
   8261e:	6078      	str	r0, [r7, #4]
   82620:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   82622:	687b      	ldr	r3, [r7, #4]
   82624:	2b02      	cmp	r3, #2
   82626:	d823      	bhi.n	82670 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   82628:	687b      	ldr	r3, [r7, #4]
   8262a:	2b00      	cmp	r3, #0
   8262c:	d106      	bne.n	8263c <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8262e:	683b      	ldr	r3, [r7, #0]
   82630:	2b00      	cmp	r3, #0
   82632:	bf14      	ite	ne
   82634:	2300      	movne	r3, #0
   82636:	2301      	moveq	r3, #1
   82638:	b2db      	uxtb	r3, r3
   8263a:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   8263c:	683b      	ldr	r3, [r7, #0]
   8263e:	2b00      	cmp	r3, #0
   82640:	d00b      	beq.n	8265a <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   82642:	4b0d      	ldr	r3, [pc, #52]	; (82678 <vParTestSetLED+0x60>)
   82644:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   82646:	4b0d      	ldr	r3, [pc, #52]	; (8267c <vParTestSetLED+0x64>)
   82648:	687a      	ldr	r2, [r7, #4]
   8264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8264e:	4618      	mov	r0, r3
   82650:	4b0b      	ldr	r3, [pc, #44]	; (82680 <vParTestSetLED+0x68>)
   82652:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   82654:	4b0b      	ldr	r3, [pc, #44]	; (82684 <vParTestSetLED+0x6c>)
   82656:	4798      	blx	r3
   82658:	e00a      	b.n	82670 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   8265a:	4b07      	ldr	r3, [pc, #28]	; (82678 <vParTestSetLED+0x60>)
   8265c:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   8265e:	4b07      	ldr	r3, [pc, #28]	; (8267c <vParTestSetLED+0x64>)
   82660:	687a      	ldr	r2, [r7, #4]
   82662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82666:	4618      	mov	r0, r3
   82668:	4b07      	ldr	r3, [pc, #28]	; (82688 <vParTestSetLED+0x70>)
   8266a:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   8266c:	4b05      	ldr	r3, [pc, #20]	; (82684 <vParTestSetLED+0x6c>)
   8266e:	4798      	blx	r3
		}
	}
}
   82670:	3708      	adds	r7, #8
   82672:	46bd      	mov	sp, r7
   82674:	bd80      	pop	{r7, pc}
   82676:	bf00      	nop
   82678:	00081865 	.word	0x00081865
   8267c:	00082a78 	.word	0x00082a78
   82680:	00080df9 	.word	0x00080df9
   82684:	000818a9 	.word	0x000818a9
   82688:	00080dc5 	.word	0x00080dc5

0008268c <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   8268c:	b590      	push	{r4, r7, lr}
   8268e:	b087      	sub	sp, #28
   82690:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   82692:	2300      	movs	r3, #0
   82694:	60fb      	str	r3, [r7, #12]
uint8_t ucChar;
uint32_t ulChar;
uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   82696:	4826      	ldr	r0, [pc, #152]	; (82730 <USART0_Handler+0xa4>)
   82698:	4b26      	ldr	r3, [pc, #152]	; (82734 <USART0_Handler+0xa8>)
   8269a:	4798      	blx	r3
   8269c:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   8269e:	4824      	ldr	r0, [pc, #144]	; (82730 <USART0_Handler+0xa4>)
   826a0:	4b25      	ldr	r3, [pc, #148]	; (82738 <USART0_Handler+0xac>)
   826a2:	4798      	blx	r3
   826a4:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   826a6:	697a      	ldr	r2, [r7, #20]
   826a8:	693b      	ldr	r3, [r7, #16]
   826aa:	4013      	ands	r3, r2
   826ac:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   826ae:	697b      	ldr	r3, [r7, #20]
   826b0:	f003 0302 	and.w	r3, r3, #2
   826b4:	2b00      	cmp	r3, #0
   826b6:	d017      	beq.n	826e8 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   826b8:	4b20      	ldr	r3, [pc, #128]	; (8273c <USART0_Handler+0xb0>)
   826ba:	6819      	ldr	r1, [r3, #0]
   826bc:	f107 020b 	add.w	r2, r7, #11
   826c0:	f107 030c 	add.w	r3, r7, #12
   826c4:	4608      	mov	r0, r1
   826c6:	4611      	mov	r1, r2
   826c8:	461a      	mov	r2, r3
   826ca:	4b1d      	ldr	r3, [pc, #116]	; (82740 <USART0_Handler+0xb4>)
   826cc:	4798      	blx	r3
   826ce:	4603      	mov	r3, r0
   826d0:	2b01      	cmp	r3, #1
   826d2:	d105      	bne.n	826e0 <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   826d4:	7afb      	ldrb	r3, [r7, #11]
   826d6:	4816      	ldr	r0, [pc, #88]	; (82730 <USART0_Handler+0xa4>)
   826d8:	4619      	mov	r1, r3
   826da:	4b1a      	ldr	r3, [pc, #104]	; (82744 <USART0_Handler+0xb8>)
   826dc:	4798      	blx	r3
   826de:	e003      	b.n	826e8 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   826e0:	4813      	ldr	r0, [pc, #76]	; (82730 <USART0_Handler+0xa4>)
   826e2:	2102      	movs	r1, #2
   826e4:	4b18      	ldr	r3, [pc, #96]	; (82748 <USART0_Handler+0xbc>)
   826e6:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   826e8:	697b      	ldr	r3, [r7, #20]
   826ea:	f003 0301 	and.w	r3, r3, #1
   826ee:	2b00      	cmp	r3, #0
   826f0:	d013      	beq.n	8271a <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   826f2:	1d3b      	adds	r3, r7, #4
   826f4:	480e      	ldr	r0, [pc, #56]	; (82730 <USART0_Handler+0xa4>)
   826f6:	4619      	mov	r1, r3
   826f8:	4b14      	ldr	r3, [pc, #80]	; (8274c <USART0_Handler+0xc0>)
   826fa:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   826fc:	687b      	ldr	r3, [r7, #4]
   826fe:	b2db      	uxtb	r3, r3
   82700:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   82702:	4b13      	ldr	r3, [pc, #76]	; (82750 <USART0_Handler+0xc4>)
   82704:	6819      	ldr	r1, [r3, #0]
   82706:	f107 020b 	add.w	r2, r7, #11
   8270a:	f107 030c 	add.w	r3, r7, #12
   8270e:	4608      	mov	r0, r1
   82710:	4611      	mov	r1, r2
   82712:	461a      	mov	r2, r3
   82714:	2300      	movs	r3, #0
   82716:	4c0f      	ldr	r4, [pc, #60]	; (82754 <USART0_Handler+0xc8>)
   82718:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   8271a:	68fb      	ldr	r3, [r7, #12]
   8271c:	2b00      	cmp	r3, #0
   8271e:	d003      	beq.n	82728 <USART0_Handler+0x9c>
   82720:	4b0d      	ldr	r3, [pc, #52]	; (82758 <USART0_Handler+0xcc>)
   82722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82726:	601a      	str	r2, [r3, #0]
}
   82728:	371c      	adds	r7, #28
   8272a:	46bd      	mov	sp, r7
   8272c:	bd90      	pop	{r4, r7, pc}
   8272e:	bf00      	nop
   82730:	40098000 	.word	0x40098000
   82734:	000813f1 	.word	0x000813f1
   82738:	000813d9 	.word	0x000813d9
   8273c:	20070570 	.word	0x20070570
   82740:	00081acd 	.word	0x00081acd
   82744:	00081409 	.word	0x00081409
   82748:	000813bd 	.word	0x000813bd
   8274c:	0008144d 	.word	0x0008144d
   82750:	2007056c 	.word	0x2007056c
   82754:	000819d1 	.word	0x000819d1
   82758:	e000ed04 	.word	0xe000ed04

0008275c <__libc_init_array>:
   8275c:	b570      	push	{r4, r5, r6, lr}
   8275e:	4e0f      	ldr	r6, [pc, #60]	; (8279c <__libc_init_array+0x40>)
   82760:	4d0f      	ldr	r5, [pc, #60]	; (827a0 <__libc_init_array+0x44>)
   82762:	1b76      	subs	r6, r6, r5
   82764:	10b6      	asrs	r6, r6, #2
   82766:	d007      	beq.n	82778 <__libc_init_array+0x1c>
   82768:	3d04      	subs	r5, #4
   8276a:	2400      	movs	r4, #0
   8276c:	3401      	adds	r4, #1
   8276e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82772:	4798      	blx	r3
   82774:	42a6      	cmp	r6, r4
   82776:	d1f9      	bne.n	8276c <__libc_init_array+0x10>
   82778:	4e0a      	ldr	r6, [pc, #40]	; (827a4 <__libc_init_array+0x48>)
   8277a:	4d0b      	ldr	r5, [pc, #44]	; (827a8 <__libc_init_array+0x4c>)
   8277c:	f000 f986 	bl	82a8c <_init>
   82780:	1b76      	subs	r6, r6, r5
   82782:	10b6      	asrs	r6, r6, #2
   82784:	d008      	beq.n	82798 <__libc_init_array+0x3c>
   82786:	3d04      	subs	r5, #4
   82788:	2400      	movs	r4, #0
   8278a:	3401      	adds	r4, #1
   8278c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82790:	4798      	blx	r3
   82792:	42a6      	cmp	r6, r4
   82794:	d1f9      	bne.n	8278a <__libc_init_array+0x2e>
   82796:	bd70      	pop	{r4, r5, r6, pc}
   82798:	bd70      	pop	{r4, r5, r6, pc}
   8279a:	bf00      	nop
   8279c:	00082a98 	.word	0x00082a98
   827a0:	00082a98 	.word	0x00082a98
   827a4:	00082aa0 	.word	0x00082aa0
   827a8:	00082a98 	.word	0x00082a98

000827ac <memcmp>:
   827ac:	2a03      	cmp	r2, #3
   827ae:	b470      	push	{r4, r5, r6}
   827b0:	d928      	bls.n	82804 <memcmp+0x58>
   827b2:	ea40 0301 	orr.w	r3, r0, r1
   827b6:	079b      	lsls	r3, r3, #30
   827b8:	d013      	beq.n	827e2 <memcmp+0x36>
   827ba:	7805      	ldrb	r5, [r0, #0]
   827bc:	780c      	ldrb	r4, [r1, #0]
   827be:	42a5      	cmp	r5, r4
   827c0:	d124      	bne.n	8280c <memcmp+0x60>
   827c2:	3a01      	subs	r2, #1
   827c4:	2300      	movs	r3, #0
   827c6:	e005      	b.n	827d4 <memcmp+0x28>
   827c8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   827cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   827d0:	42a5      	cmp	r5, r4
   827d2:	d11b      	bne.n	8280c <memcmp+0x60>
   827d4:	4293      	cmp	r3, r2
   827d6:	f103 0301 	add.w	r3, r3, #1
   827da:	d1f5      	bne.n	827c8 <memcmp+0x1c>
   827dc:	2000      	movs	r0, #0
   827de:	bc70      	pop	{r4, r5, r6}
   827e0:	4770      	bx	lr
   827e2:	460c      	mov	r4, r1
   827e4:	4603      	mov	r3, r0
   827e6:	6825      	ldr	r5, [r4, #0]
   827e8:	681e      	ldr	r6, [r3, #0]
   827ea:	4621      	mov	r1, r4
   827ec:	42ae      	cmp	r6, r5
   827ee:	4618      	mov	r0, r3
   827f0:	f104 0404 	add.w	r4, r4, #4
   827f4:	f103 0304 	add.w	r3, r3, #4
   827f8:	d104      	bne.n	82804 <memcmp+0x58>
   827fa:	3a04      	subs	r2, #4
   827fc:	2a03      	cmp	r2, #3
   827fe:	4618      	mov	r0, r3
   82800:	4621      	mov	r1, r4
   82802:	d8f0      	bhi.n	827e6 <memcmp+0x3a>
   82804:	2a00      	cmp	r2, #0
   82806:	d1d8      	bne.n	827ba <memcmp+0xe>
   82808:	4610      	mov	r0, r2
   8280a:	e7e8      	b.n	827de <memcmp+0x32>
   8280c:	1b28      	subs	r0, r5, r4
   8280e:	bc70      	pop	{r4, r5, r6}
   82810:	4770      	bx	lr
   82812:	bf00      	nop

00082814 <memcpy>:
   82814:	4684      	mov	ip, r0
   82816:	ea41 0300 	orr.w	r3, r1, r0
   8281a:	f013 0303 	ands.w	r3, r3, #3
   8281e:	d149      	bne.n	828b4 <memcpy+0xa0>
   82820:	3a40      	subs	r2, #64	; 0x40
   82822:	d323      	bcc.n	8286c <memcpy+0x58>
   82824:	680b      	ldr	r3, [r1, #0]
   82826:	6003      	str	r3, [r0, #0]
   82828:	684b      	ldr	r3, [r1, #4]
   8282a:	6043      	str	r3, [r0, #4]
   8282c:	688b      	ldr	r3, [r1, #8]
   8282e:	6083      	str	r3, [r0, #8]
   82830:	68cb      	ldr	r3, [r1, #12]
   82832:	60c3      	str	r3, [r0, #12]
   82834:	690b      	ldr	r3, [r1, #16]
   82836:	6103      	str	r3, [r0, #16]
   82838:	694b      	ldr	r3, [r1, #20]
   8283a:	6143      	str	r3, [r0, #20]
   8283c:	698b      	ldr	r3, [r1, #24]
   8283e:	6183      	str	r3, [r0, #24]
   82840:	69cb      	ldr	r3, [r1, #28]
   82842:	61c3      	str	r3, [r0, #28]
   82844:	6a0b      	ldr	r3, [r1, #32]
   82846:	6203      	str	r3, [r0, #32]
   82848:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8284a:	6243      	str	r3, [r0, #36]	; 0x24
   8284c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8284e:	6283      	str	r3, [r0, #40]	; 0x28
   82850:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82852:	62c3      	str	r3, [r0, #44]	; 0x2c
   82854:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82856:	6303      	str	r3, [r0, #48]	; 0x30
   82858:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8285a:	6343      	str	r3, [r0, #52]	; 0x34
   8285c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8285e:	6383      	str	r3, [r0, #56]	; 0x38
   82860:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82862:	63c3      	str	r3, [r0, #60]	; 0x3c
   82864:	3040      	adds	r0, #64	; 0x40
   82866:	3140      	adds	r1, #64	; 0x40
   82868:	3a40      	subs	r2, #64	; 0x40
   8286a:	d2db      	bcs.n	82824 <memcpy+0x10>
   8286c:	3230      	adds	r2, #48	; 0x30
   8286e:	d30b      	bcc.n	82888 <memcpy+0x74>
   82870:	680b      	ldr	r3, [r1, #0]
   82872:	6003      	str	r3, [r0, #0]
   82874:	684b      	ldr	r3, [r1, #4]
   82876:	6043      	str	r3, [r0, #4]
   82878:	688b      	ldr	r3, [r1, #8]
   8287a:	6083      	str	r3, [r0, #8]
   8287c:	68cb      	ldr	r3, [r1, #12]
   8287e:	60c3      	str	r3, [r0, #12]
   82880:	3010      	adds	r0, #16
   82882:	3110      	adds	r1, #16
   82884:	3a10      	subs	r2, #16
   82886:	d2f3      	bcs.n	82870 <memcpy+0x5c>
   82888:	320c      	adds	r2, #12
   8288a:	d305      	bcc.n	82898 <memcpy+0x84>
   8288c:	f851 3b04 	ldr.w	r3, [r1], #4
   82890:	f840 3b04 	str.w	r3, [r0], #4
   82894:	3a04      	subs	r2, #4
   82896:	d2f9      	bcs.n	8288c <memcpy+0x78>
   82898:	3204      	adds	r2, #4
   8289a:	d008      	beq.n	828ae <memcpy+0x9a>
   8289c:	07d2      	lsls	r2, r2, #31
   8289e:	bf1c      	itt	ne
   828a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   828a4:	f800 3b01 	strbne.w	r3, [r0], #1
   828a8:	d301      	bcc.n	828ae <memcpy+0x9a>
   828aa:	880b      	ldrh	r3, [r1, #0]
   828ac:	8003      	strh	r3, [r0, #0]
   828ae:	4660      	mov	r0, ip
   828b0:	4770      	bx	lr
   828b2:	bf00      	nop
   828b4:	2a08      	cmp	r2, #8
   828b6:	d313      	bcc.n	828e0 <memcpy+0xcc>
   828b8:	078b      	lsls	r3, r1, #30
   828ba:	d0b1      	beq.n	82820 <memcpy+0xc>
   828bc:	f010 0303 	ands.w	r3, r0, #3
   828c0:	d0ae      	beq.n	82820 <memcpy+0xc>
   828c2:	f1c3 0304 	rsb	r3, r3, #4
   828c6:	1ad2      	subs	r2, r2, r3
   828c8:	07db      	lsls	r3, r3, #31
   828ca:	bf1c      	itt	ne
   828cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   828d0:	f800 3b01 	strbne.w	r3, [r0], #1
   828d4:	d3a4      	bcc.n	82820 <memcpy+0xc>
   828d6:	f831 3b02 	ldrh.w	r3, [r1], #2
   828da:	f820 3b02 	strh.w	r3, [r0], #2
   828de:	e79f      	b.n	82820 <memcpy+0xc>
   828e0:	3a04      	subs	r2, #4
   828e2:	d3d9      	bcc.n	82898 <memcpy+0x84>
   828e4:	3a01      	subs	r2, #1
   828e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   828ea:	f800 3b01 	strb.w	r3, [r0], #1
   828ee:	d2f9      	bcs.n	828e4 <memcpy+0xd0>
   828f0:	780b      	ldrb	r3, [r1, #0]
   828f2:	7003      	strb	r3, [r0, #0]
   828f4:	784b      	ldrb	r3, [r1, #1]
   828f6:	7043      	strb	r3, [r0, #1]
   828f8:	788b      	ldrb	r3, [r1, #2]
   828fa:	7083      	strb	r3, [r0, #2]
   828fc:	4660      	mov	r0, ip
   828fe:	4770      	bx	lr

00082900 <register_fini>:
   82900:	4b02      	ldr	r3, [pc, #8]	; (8290c <register_fini+0xc>)
   82902:	b113      	cbz	r3, 8290a <register_fini+0xa>
   82904:	4802      	ldr	r0, [pc, #8]	; (82910 <register_fini+0x10>)
   82906:	f000 b805 	b.w	82914 <atexit>
   8290a:	4770      	bx	lr
   8290c:	00000000 	.word	0x00000000
   82910:	00082921 	.word	0x00082921

00082914 <atexit>:
   82914:	4601      	mov	r1, r0
   82916:	2000      	movs	r0, #0
   82918:	4602      	mov	r2, r0
   8291a:	4603      	mov	r3, r0
   8291c:	f000 b818 	b.w	82950 <__register_exitproc>

00082920 <__libc_fini_array>:
   82920:	b538      	push	{r3, r4, r5, lr}
   82922:	4d09      	ldr	r5, [pc, #36]	; (82948 <__libc_fini_array+0x28>)
   82924:	4c09      	ldr	r4, [pc, #36]	; (8294c <__libc_fini_array+0x2c>)
   82926:	1b64      	subs	r4, r4, r5
   82928:	10a4      	asrs	r4, r4, #2
   8292a:	bf18      	it	ne
   8292c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   82930:	d005      	beq.n	8293e <__libc_fini_array+0x1e>
   82932:	3c01      	subs	r4, #1
   82934:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82938:	4798      	blx	r3
   8293a:	2c00      	cmp	r4, #0
   8293c:	d1f9      	bne.n	82932 <__libc_fini_array+0x12>
   8293e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82942:	f000 b8ad 	b.w	82aa0 <_fini>
   82946:	bf00      	nop
   82948:	00082aac 	.word	0x00082aac
   8294c:	00082ab0 	.word	0x00082ab0

00082950 <__register_exitproc>:
   82950:	b5f0      	push	{r4, r5, r6, r7, lr}
   82952:	4c27      	ldr	r4, [pc, #156]	; (829f0 <__register_exitproc+0xa0>)
   82954:	b085      	sub	sp, #20
   82956:	6826      	ldr	r6, [r4, #0]
   82958:	4607      	mov	r7, r0
   8295a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8295e:	2c00      	cmp	r4, #0
   82960:	d040      	beq.n	829e4 <__register_exitproc+0x94>
   82962:	6865      	ldr	r5, [r4, #4]
   82964:	2d1f      	cmp	r5, #31
   82966:	dd1e      	ble.n	829a6 <__register_exitproc+0x56>
   82968:	4822      	ldr	r0, [pc, #136]	; (829f4 <__register_exitproc+0xa4>)
   8296a:	b918      	cbnz	r0, 82974 <__register_exitproc+0x24>
   8296c:	f04f 30ff 	mov.w	r0, #4294967295
   82970:	b005      	add	sp, #20
   82972:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82974:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82978:	9103      	str	r1, [sp, #12]
   8297a:	9202      	str	r2, [sp, #8]
   8297c:	9301      	str	r3, [sp, #4]
   8297e:	f3af 8000 	nop.w
   82982:	9903      	ldr	r1, [sp, #12]
   82984:	4604      	mov	r4, r0
   82986:	9a02      	ldr	r2, [sp, #8]
   82988:	9b01      	ldr	r3, [sp, #4]
   8298a:	2800      	cmp	r0, #0
   8298c:	d0ee      	beq.n	8296c <__register_exitproc+0x1c>
   8298e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82992:	2000      	movs	r0, #0
   82994:	6025      	str	r5, [r4, #0]
   82996:	6060      	str	r0, [r4, #4]
   82998:	4605      	mov	r5, r0
   8299a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8299e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   829a2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   829a6:	b93f      	cbnz	r7, 829b8 <__register_exitproc+0x68>
   829a8:	1c6b      	adds	r3, r5, #1
   829aa:	2000      	movs	r0, #0
   829ac:	3502      	adds	r5, #2
   829ae:	6063      	str	r3, [r4, #4]
   829b0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   829b4:	b005      	add	sp, #20
   829b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   829b8:	2601      	movs	r6, #1
   829ba:	40ae      	lsls	r6, r5
   829bc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   829c0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   829c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   829c8:	2f02      	cmp	r7, #2
   829ca:	ea42 0206 	orr.w	r2, r2, r6
   829ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   829d2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   829d6:	d1e7      	bne.n	829a8 <__register_exitproc+0x58>
   829d8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   829dc:	431e      	orrs	r6, r3
   829de:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   829e2:	e7e1      	b.n	829a8 <__register_exitproc+0x58>
   829e4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   829e8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   829ec:	e7b9      	b.n	82962 <__register_exitproc+0x12>
   829ee:	bf00      	nop
   829f0:	00082a88 	.word	0x00082a88
   829f4:	00000000 	.word	0x00000000

000829f8 <can_bit_time>:
   829f8:	02020308 02094b03 43020303 0303030a     .....K.....C....
   82a08:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   82a18:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   82a28:	05050510 06114504 47040505 06060512     .....E.....G....
   82a38:	06134304 44040606 06060714 08154604     .C.....D.....F..
   82a48:	47040606 07070716 08174404 46040708     ...G.....D.....F
   82a58:	08080718 08194304 44040808              .....C.....D

00082a64 <ucExpectedStackBytes.5295>:
   82a64:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   82a74:	a5a5a5a5                                ....

00082a78 <ulLED>:
   82a78:	00000056 0000003b 00000055 00000043     V...;...U...C...

00082a88 <_global_impure_ptr>:
   82a88:	20070010                                ... 

00082a8c <_init>:
   82a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82a8e:	bf00      	nop
   82a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82a92:	bc08      	pop	{r3}
   82a94:	469e      	mov	lr, r3
   82a96:	4770      	bx	lr

00082a98 <__init_array_start>:
   82a98:	00082901 	.word	0x00082901

00082a9c <__frame_dummy_init_array_entry>:
   82a9c:	00080119                                ....

00082aa0 <_fini>:
   82aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82aa2:	bf00      	nop
   82aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82aa6:	bc08      	pop	{r3}
   82aa8:	469e      	mov	lr, r3
   82aaa:	4770      	bx	lr

00082aac <__fini_array_start>:
   82aac:	000800f5 	.word	0x000800f5
