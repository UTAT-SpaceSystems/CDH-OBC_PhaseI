
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003594  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000440  20070000  00083594  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000364  20070440  000839d4  00010440  2**2
                  ALLOC
  3 .stack        00002004  200707a4  00083d38  00010440  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010469  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cd4f  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024da  00000000  00000000  0001d213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005bc0  00000000  00000000  0001f6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ff8  00000000  00000000  000252ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e68  00000000  00000000  000262a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000089e2  00000000  00000000  0002710d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001356a  00000000  00000000  0002faef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066ca2  00000000  00000000  00043059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003344  00000000  00000000  000a9cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200727a8 	.word	0x200727a8
   80004:	0008223d 	.word	0x0008223d
   80008:	00082235 	.word	0x00082235
   8000c:	00082235 	.word	0x00082235
   80010:	00082235 	.word	0x00082235
   80014:	00082235 	.word	0x00082235
   80018:	00082235 	.word	0x00082235
	...
   8002c:	000825a1 	.word	0x000825a1
   80030:	00082235 	.word	0x00082235
   80034:	00000000 	.word	0x00000000
   80038:	0008265d 	.word	0x0008265d
   8003c:	000826a1 	.word	0x000826a1
   80040:	00082235 	.word	0x00082235
   80044:	00082235 	.word	0x00082235
   80048:	00082235 	.word	0x00082235
   8004c:	000832a5 	.word	0x000832a5
   80050:	000831c5 	.word	0x000831c5
   80054:	00082235 	.word	0x00082235
   80058:	00082235 	.word	0x00082235
   8005c:	00082235 	.word	0x00082235
   80060:	00082235 	.word	0x00082235
   80064:	00082235 	.word	0x00082235
   80068:	00000000 	.word	0x00000000
   8006c:	00081a55 	.word	0x00081a55
   80070:	00081a6d 	.word	0x00081a6d
   80074:	00081a85 	.word	0x00081a85
   80078:	00081a9d 	.word	0x00081a9d
	...
   80084:	0008050d 	.word	0x0008050d
   80088:	00082235 	.word	0x00082235
   8008c:	00082235 	.word	0x00082235
   80090:	00082235 	.word	0x00082235
   80094:	00082235 	.word	0x00082235
   80098:	00082235 	.word	0x00082235
   8009c:	00082235 	.word	0x00082235
   800a0:	00082235 	.word	0x00082235
   800a4:	00000000 	.word	0x00000000
   800a8:	00082235 	.word	0x00082235
   800ac:	00080681 	.word	0x00080681
   800b0:	00082235 	.word	0x00082235
   800b4:	00082235 	.word	0x00082235
   800b8:	00082235 	.word	0x00082235
   800bc:	00082235 	.word	0x00082235
   800c0:	00082235 	.word	0x00082235
   800c4:	00082235 	.word	0x00082235
   800c8:	00082235 	.word	0x00082235
   800cc:	00082235 	.word	0x00082235
   800d0:	00082235 	.word	0x00082235
   800d4:	00082235 	.word	0x00082235
   800d8:	00082235 	.word	0x00082235
   800dc:	00082235 	.word	0x00082235
   800e0:	00082235 	.word	0x00082235
   800e4:	00082235 	.word	0x00082235
   800e8:	00082235 	.word	0x00082235
   800ec:	00082b35 	.word	0x00082b35
   800f0:	00082a9d 	.word	0x00082a9d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070440 	.word	0x20070440
   80110:	00000000 	.word	0x00000000
   80114:	00083594 	.word	0x00083594

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00083594 	.word	0x00083594
   8013c:	20070444 	.word	0x20070444
   80140:	00083594 	.word	0x00083594
   80144:	00000000 	.word	0x00000000

00080148 <pdc_tx_init>:
 */
void pdc_tx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   80148:	b480      	push	{r7}
   8014a:	b085      	sub	sp, #20
   8014c:	af00      	add	r7, sp, #0
   8014e:	60f8      	str	r0, [r7, #12]
   80150:	60b9      	str	r1, [r7, #8]
   80152:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80154:	68bb      	ldr	r3, [r7, #8]
   80156:	2b00      	cmp	r3, #0
   80158:	d007      	beq.n	8016a <pdc_tx_init+0x22>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   8015a:	68bb      	ldr	r3, [r7, #8]
   8015c:	681a      	ldr	r2, [r3, #0]
   8015e:	68fb      	ldr	r3, [r7, #12]
   80160:	609a      	str	r2, [r3, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   80162:	68bb      	ldr	r3, [r7, #8]
   80164:	685a      	ldr	r2, [r3, #4]
   80166:	68fb      	ldr	r3, [r7, #12]
   80168:	60da      	str	r2, [r3, #12]
	}
	if (p_next_packet) {
   8016a:	687b      	ldr	r3, [r7, #4]
   8016c:	2b00      	cmp	r3, #0
   8016e:	d007      	beq.n	80180 <pdc_tx_init+0x38>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   80170:	687b      	ldr	r3, [r7, #4]
   80172:	681a      	ldr	r2, [r3, #0]
   80174:	68fb      	ldr	r3, [r7, #12]
   80176:	619a      	str	r2, [r3, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   80178:	687b      	ldr	r3, [r7, #4]
   8017a:	685a      	ldr	r2, [r3, #4]
   8017c:	68fb      	ldr	r3, [r7, #12]
   8017e:	61da      	str	r2, [r3, #28]
	}
}
   80180:	3714      	adds	r7, #20
   80182:	46bd      	mov	sp, r7
   80184:	f85d 7b04 	ldr.w	r7, [sp], #4
   80188:	4770      	bx	lr
   8018a:	bf00      	nop

0008018c <pdc_rx_init>:
 */
void pdc_rx_init(
		Pdc *p_pdc,
		pdc_packet_t *p_packet,
		pdc_packet_t *p_next_packet)
{
   8018c:	b480      	push	{r7}
   8018e:	b085      	sub	sp, #20
   80190:	af00      	add	r7, sp, #0
   80192:	60f8      	str	r0, [r7, #12]
   80194:	60b9      	str	r1, [r7, #8]
   80196:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80198:	68bb      	ldr	r3, [r7, #8]
   8019a:	2b00      	cmp	r3, #0
   8019c:	d007      	beq.n	801ae <pdc_rx_init+0x22>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   8019e:	68bb      	ldr	r3, [r7, #8]
   801a0:	681a      	ldr	r2, [r3, #0]
   801a2:	68fb      	ldr	r3, [r7, #12]
   801a4:	601a      	str	r2, [r3, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   801a6:	68bb      	ldr	r3, [r7, #8]
   801a8:	685a      	ldr	r2, [r3, #4]
   801aa:	68fb      	ldr	r3, [r7, #12]
   801ac:	605a      	str	r2, [r3, #4]
	}
	if (p_next_packet) {
   801ae:	687b      	ldr	r3, [r7, #4]
   801b0:	2b00      	cmp	r3, #0
   801b2:	d007      	beq.n	801c4 <pdc_rx_init+0x38>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   801b4:	687b      	ldr	r3, [r7, #4]
   801b6:	681a      	ldr	r2, [r3, #0]
   801b8:	68fb      	ldr	r3, [r7, #12]
   801ba:	611a      	str	r2, [r3, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   801bc:	687b      	ldr	r3, [r7, #4]
   801be:	685a      	ldr	r2, [r3, #4]
   801c0:	68fb      	ldr	r3, [r7, #12]
   801c2:	615a      	str	r2, [r3, #20]
	}
}
   801c4:	3714      	adds	r7, #20
   801c6:	46bd      	mov	sp, r7
   801c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop

000801d0 <pdc_rx_clear_cnt>:
 *
 * \param[out] p_pdc Device structure pointer
 */
void pdc_rx_clear_cnt(
		Pdc *p_pdc)
{
   801d0:	b480      	push	{r7}
   801d2:	b083      	sub	sp, #12
   801d4:	af00      	add	r7, sp, #0
   801d6:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_RNCR = 0;
   801d8:	687b      	ldr	r3, [r7, #4]
   801da:	2200      	movs	r2, #0
   801dc:	615a      	str	r2, [r3, #20]
	p_pdc->PERIPH_RCR = 0;
   801de:	687b      	ldr	r3, [r7, #4]
   801e0:	2200      	movs	r2, #0
   801e2:	605a      	str	r2, [r3, #4]
}
   801e4:	370c      	adds	r7, #12
   801e6:	46bd      	mov	sp, r7
   801e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801ec:	4770      	bx	lr
   801ee:	bf00      	nop

000801f0 <pdc_enable_transfer>:
 *                        (bit PERIPH_PTCR_RXTEN and bit PERIPH_PTCR_TXTEN)
 */
void pdc_enable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   801f0:	b480      	push	{r7}
   801f2:	b083      	sub	sp, #12
   801f4:	af00      	add	r7, sp, #0
   801f6:	6078      	str	r0, [r7, #4]
   801f8:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   801fa:	683a      	ldr	r2, [r7, #0]
   801fc:	f240 1301 	movw	r3, #257	; 0x101
   80200:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
   80202:	687a      	ldr	r2, [r7, #4]
   80204:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
}
   80206:	370c      	adds	r7, #12
   80208:	46bd      	mov	sp, r7
   8020a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020e:	4770      	bx	lr

00080210 <pdc_disable_transfer>:
 *                        (bit PERIPH_PTCR_TXTDIS, bit PERIPH_PTCR_TXTDIS)
 */
void pdc_disable_transfer(
		Pdc *p_pdc,
		uint32_t ul_controls)
{
   80210:	b480      	push	{r7}
   80212:	b083      	sub	sp, #12
   80214:	af00      	add	r7, sp, #0
   80216:	6078      	str	r0, [r7, #4]
   80218:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   8021a:	683a      	ldr	r2, [r7, #0]
   8021c:	f240 2302 	movw	r3, #514	; 0x202
   80220:	4013      	ands	r3, r2
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
   80222:	687a      	ldr	r2, [r7, #4]
   80224:	6213      	str	r3, [r2, #32]
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
}
   80226:	370c      	adds	r7, #12
   80228:	46bd      	mov	sp, r7
   8022a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8022e:	4770      	bx	lr

00080230 <pdc_read_rx_counter>:
 *
 * \return Receive Counter Register value.
 */
uint32_t pdc_read_rx_counter(
		Pdc *p_pdc)
{
   80230:	b480      	push	{r7}
   80232:	b083      	sub	sp, #12
   80234:	af00      	add	r7, sp, #0
   80236:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RCR;
   80238:	687b      	ldr	r3, [r7, #4]
   8023a:	685b      	ldr	r3, [r3, #4]
}
   8023c:	4618      	mov	r0, r3
   8023e:	370c      	adds	r7, #12
   80240:	46bd      	mov	sp, r7
   80242:	f85d 7b04 	ldr.w	r7, [sp], #4
   80246:	4770      	bx	lr

00080248 <pdc_read_rx_next_counter>:
 *
 * \return Receive Next Counter Register value.
 */
uint32_t pdc_read_rx_next_counter(
		Pdc *p_pdc)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	/* Validate inputs. */
	Assert(p_pdc);
	
	return p_pdc->PERIPH_RNCR;
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	695b      	ldr	r3, [r3, #20]
}
   80254:	4618      	mov	r0, r3
   80256:	370c      	adds	r7, #12
   80258:	46bd      	mov	sp, r7
   8025a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8025e:	4770      	bx	lr

00080260 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80260:	b480      	push	{r7}
   80262:	b087      	sub	sp, #28
   80264:	af00      	add	r7, sp, #0
   80266:	60f8      	str	r0, [r7, #12]
   80268:	60b9      	str	r1, [r7, #8]
   8026a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8026c:	68bb      	ldr	r3, [r7, #8]
   8026e:	019b      	lsls	r3, r3, #6
   80270:	68fa      	ldr	r2, [r7, #12]
   80272:	4413      	add	r3, r2
   80274:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80276:	697b      	ldr	r3, [r7, #20]
   80278:	2202      	movs	r2, #2
   8027a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8027c:	697b      	ldr	r3, [r7, #20]
   8027e:	f04f 32ff 	mov.w	r2, #4294967295
   80282:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80284:	697b      	ldr	r3, [r7, #20]
   80286:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80288:	697b      	ldr	r3, [r7, #20]
   8028a:	687a      	ldr	r2, [r7, #4]
   8028c:	605a      	str	r2, [r3, #4]
}
   8028e:	371c      	adds	r7, #28
   80290:	46bd      	mov	sp, r7
   80292:	f85d 7b04 	ldr.w	r7, [sp], #4
   80296:	4770      	bx	lr

00080298 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
   80298:	b480      	push	{r7}
   8029a:	b083      	sub	sp, #12
   8029c:	af00      	add	r7, sp, #0
   8029e:	6078      	str	r0, [r7, #4]
   802a0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   802a2:	687a      	ldr	r2, [r7, #4]
   802a4:	683b      	ldr	r3, [r7, #0]
   802a6:	019b      	lsls	r3, r3, #6
   802a8:	4413      	add	r3, r2
   802aa:	2205      	movs	r2, #5
   802ac:	601a      	str	r2, [r3, #0]
}
   802ae:	370c      	adds	r7, #12
   802b0:	46bd      	mov	sp, r7
   802b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   802b6:	4770      	bx	lr

000802b8 <tc_stop>:
 * \param[in] ul_channel Channel to configure
 */
void tc_stop(
		Tc *p_tc,
		uint32_t ul_channel)
{
   802b8:	b480      	push	{r7}
   802ba:	b083      	sub	sp, #12
   802bc:	af00      	add	r7, sp, #0
   802be:	6078      	str	r0, [r7, #4]
   802c0:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   802c2:	687a      	ldr	r2, [r7, #4]
   802c4:	683b      	ldr	r3, [r7, #0]
   802c6:	019b      	lsls	r3, r3, #6
   802c8:	4413      	add	r3, r2
   802ca:	2202      	movs	r2, #2
   802cc:	601a      	str	r2, [r3, #0]
}
   802ce:	370c      	adds	r7, #12
   802d0:	46bd      	mov	sp, r7
   802d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   802d6:	4770      	bx	lr

000802d8 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
   802d8:	b480      	push	{r7}
   802da:	b085      	sub	sp, #20
   802dc:	af00      	add	r7, sp, #0
   802de:	60f8      	str	r0, [r7, #12]
   802e0:	60b9      	str	r1, [r7, #8]
   802e2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   802e4:	68fa      	ldr	r2, [r7, #12]
   802e6:	68bb      	ldr	r3, [r7, #8]
   802e8:	019b      	lsls	r3, r3, #6
   802ea:	4413      	add	r3, r2
   802ec:	3318      	adds	r3, #24
   802ee:	687a      	ldr	r2, [r7, #4]
   802f0:	605a      	str	r2, [r3, #4]
}
   802f2:	3714      	adds	r7, #20
   802f4:	46bd      	mov	sp, r7
   802f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802fa:	4770      	bx	lr

000802fc <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
   802fc:	b480      	push	{r7}
   802fe:	b087      	sub	sp, #28
   80300:	af00      	add	r7, sp, #0
   80302:	60f8      	str	r0, [r7, #12]
   80304:	60b9      	str	r1, [r7, #8]
   80306:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80308:	68bb      	ldr	r3, [r7, #8]
   8030a:	019b      	lsls	r3, r3, #6
   8030c:	68fa      	ldr	r2, [r7, #12]
   8030e:	4413      	add	r3, r2
   80310:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   80312:	697b      	ldr	r3, [r7, #20]
   80314:	687a      	ldr	r2, [r7, #4]
   80316:	625a      	str	r2, [r3, #36]	; 0x24
}
   80318:	371c      	adds	r7, #28
   8031a:	46bd      	mov	sp, r7
   8031c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80320:	4770      	bx	lr
   80322:	bf00      	nop

00080324 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
   80324:	b480      	push	{r7}
   80326:	b085      	sub	sp, #20
   80328:	af00      	add	r7, sp, #0
   8032a:	6078      	str	r0, [r7, #4]
   8032c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8032e:	683b      	ldr	r3, [r7, #0]
   80330:	019b      	lsls	r3, r3, #6
   80332:	687a      	ldr	r2, [r7, #4]
   80334:	4413      	add	r3, r2
   80336:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   80338:	68fb      	ldr	r3, [r7, #12]
   8033a:	6a1b      	ldr	r3, [r3, #32]
}
   8033c:	4618      	mov	r0, r3
   8033e:	3714      	adds	r7, #20
   80340:	46bd      	mov	sp, r7
   80342:	f85d 7b04 	ldr.w	r7, [sp], #4
   80346:	4770      	bx	lr

00080348 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
   80348:	b480      	push	{r7}
   8034a:	b08d      	sub	sp, #52	; 0x34
   8034c:	af00      	add	r7, sp, #0
   8034e:	60f8      	str	r0, [r7, #12]
   80350:	60b9      	str	r1, [r7, #8]
   80352:	607a      	str	r2, [r7, #4]
   80354:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   80356:	2302      	movs	r3, #2
   80358:	613b      	str	r3, [r7, #16]
   8035a:	2308      	movs	r3, #8
   8035c:	617b      	str	r3, [r7, #20]
   8035e:	2320      	movs	r3, #32
   80360:	61bb      	str	r3, [r7, #24]
   80362:	2380      	movs	r3, #128	; 0x80
   80364:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
   80366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   80368:	0bdb      	lsrs	r3, r3, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
   8036a:	623b      	str	r3, [r7, #32]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   8036c:	2300      	movs	r3, #0
   8036e:	62fb      	str	r3, [r7, #44]	; 0x2c
   80370:	e01b      	b.n	803aa <tc_find_mck_divisor+0x62>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
   80372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80374:	009b      	lsls	r3, r3, #2
   80376:	f107 0230 	add.w	r2, r7, #48	; 0x30
   8037a:	4413      	add	r3, r2
   8037c:	f853 3c20 	ldr.w	r3, [r3, #-32]
   80380:	68ba      	ldr	r2, [r7, #8]
   80382:	fbb2 f3f3 	udiv	r3, r2, r3
   80386:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
   80388:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8038a:	0c1b      	lsrs	r3, r3, #16
   8038c:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
   8038e:	68fa      	ldr	r2, [r7, #12]
   80390:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80392:	429a      	cmp	r2, r3
   80394:	d901      	bls.n	8039a <tc_find_mck_divisor+0x52>
			return 0;
   80396:	2300      	movs	r3, #0
   80398:	e022      	b.n	803e0 <tc_find_mck_divisor+0x98>
		} else if (ul_freq >= ul_low) {
   8039a:	68fa      	ldr	r2, [r7, #12]
   8039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8039e:	429a      	cmp	r2, r3
   803a0:	d300      	bcc.n	803a4 <tc_find_mck_divisor+0x5c>
			break;
   803a2:	e005      	b.n	803b0 <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
   803a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   803a6:	3301      	adds	r3, #1
   803a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
   803aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   803ac:	2b04      	cmp	r3, #4
   803ae:	d9e0      	bls.n	80372 <tc_find_mck_divisor+0x2a>
			return 0;
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
   803b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   803b2:	2b04      	cmp	r3, #4
   803b4:	d901      	bls.n	803ba <tc_find_mck_divisor+0x72>
		return 0;
   803b6:	2300      	movs	r3, #0
   803b8:	e012      	b.n	803e0 <tc_find_mck_divisor+0x98>
	}

	/*  Store results. */
	if (p_uldiv) {
   803ba:	687b      	ldr	r3, [r7, #4]
   803bc:	2b00      	cmp	r3, #0
   803be:	d008      	beq.n	803d2 <tc_find_mck_divisor+0x8a>
		*p_uldiv = divisors[ul_index];
   803c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   803c2:	009b      	lsls	r3, r3, #2
   803c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   803c8:	4413      	add	r3, r2
   803ca:	f853 2c20 	ldr.w	r2, [r3, #-32]
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
   803d2:	683b      	ldr	r3, [r7, #0]
   803d4:	2b00      	cmp	r3, #0
   803d6:	d002      	beq.n	803de <tc_find_mck_divisor+0x96>
		*p_ultcclks = ul_index;
   803d8:	683b      	ldr	r3, [r7, #0]
   803da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   803dc:	601a      	str	r2, [r3, #0]
	}

	return 1;
   803de:	2301      	movs	r3, #1
}
   803e0:	4618      	mov	r0, r3
   803e2:	3734      	adds	r7, #52	; 0x34
   803e4:	46bd      	mov	sp, r7
   803e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   803ea:	4770      	bx	lr

000803ec <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   803ec:	b480      	push	{r7}
   803ee:	b083      	sub	sp, #12
   803f0:	af00      	add	r7, sp, #0
   803f2:	6078      	str	r0, [r7, #4]
   803f4:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   803f6:	687b      	ldr	r3, [r7, #4]
   803f8:	695b      	ldr	r3, [r3, #20]
   803fa:	f003 0301 	and.w	r3, r3, #1
   803fe:	2b00      	cmp	r3, #0
   80400:	d101      	bne.n	80406 <uart_read+0x1a>
		return 1;
   80402:	2301      	movs	r3, #1
   80404:	e005      	b.n	80412 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80406:	687b      	ldr	r3, [r7, #4]
   80408:	699b      	ldr	r3, [r3, #24]
   8040a:	b2da      	uxtb	r2, r3
   8040c:	683b      	ldr	r3, [r7, #0]
   8040e:	701a      	strb	r2, [r3, #0]
	return 0;
   80410:	2300      	movs	r3, #0
}
   80412:	4618      	mov	r0, r3
   80414:	370c      	adds	r7, #12
   80416:	46bd      	mov	sp, r7
   80418:	f85d 7b04 	ldr.w	r7, [sp], #4
   8041c:	4770      	bx	lr
   8041e:	bf00      	nop

00080420 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80420:	b480      	push	{r7}
   80422:	b083      	sub	sp, #12
   80424:	af00      	add	r7, sp, #0
   80426:	4603      	mov	r3, r0
   80428:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8042a:	4b08      	ldr	r3, [pc, #32]	; (8044c <NVIC_EnableIRQ+0x2c>)
   8042c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80430:	0952      	lsrs	r2, r2, #5
   80432:	79f9      	ldrb	r1, [r7, #7]
   80434:	f001 011f 	and.w	r1, r1, #31
   80438:	2001      	movs	r0, #1
   8043a:	fa00 f101 	lsl.w	r1, r0, r1
   8043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80442:	370c      	adds	r7, #12
   80444:	46bd      	mov	sp, r7
   80446:	f85d 7b04 	ldr.w	r7, [sp], #4
   8044a:	4770      	bx	lr
   8044c:	e000e100 	.word	0xe000e100

00080450 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80450:	b480      	push	{r7}
   80452:	b083      	sub	sp, #12
   80454:	af00      	add	r7, sp, #0
   80456:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80458:	687b      	ldr	r3, [r7, #4]
   8045a:	2b07      	cmp	r3, #7
   8045c:	d825      	bhi.n	804aa <osc_get_rate+0x5a>
   8045e:	a201      	add	r2, pc, #4	; (adr r2, 80464 <osc_get_rate+0x14>)
   80460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80464:	00080485 	.word	0x00080485
   80468:	0008048b 	.word	0x0008048b
   8046c:	00080491 	.word	0x00080491
   80470:	00080497 	.word	0x00080497
   80474:	0008049b 	.word	0x0008049b
   80478:	0008049f 	.word	0x0008049f
   8047c:	000804a3 	.word	0x000804a3
   80480:	000804a7 	.word	0x000804a7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80484:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80488:	e010      	b.n	804ac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8048a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8048e:	e00d      	b.n	804ac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80494:	e00a      	b.n	804ac <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80496:	4b08      	ldr	r3, [pc, #32]	; (804b8 <osc_get_rate+0x68>)
   80498:	e008      	b.n	804ac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8049a:	4b08      	ldr	r3, [pc, #32]	; (804bc <osc_get_rate+0x6c>)
   8049c:	e006      	b.n	804ac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8049e:	4b08      	ldr	r3, [pc, #32]	; (804c0 <osc_get_rate+0x70>)
   804a0:	e004      	b.n	804ac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   804a2:	4b07      	ldr	r3, [pc, #28]	; (804c0 <osc_get_rate+0x70>)
   804a4:	e002      	b.n	804ac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   804a6:	4b06      	ldr	r3, [pc, #24]	; (804c0 <osc_get_rate+0x70>)
   804a8:	e000      	b.n	804ac <osc_get_rate+0x5c>
#endif
	}

	return 0;
   804aa:	2300      	movs	r3, #0
}
   804ac:	4618      	mov	r0, r3
   804ae:	370c      	adds	r7, #12
   804b0:	46bd      	mov	sp, r7
   804b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   804b6:	4770      	bx	lr
   804b8:	003d0900 	.word	0x003d0900
   804bc:	007a1200 	.word	0x007a1200
   804c0:	00b71b00 	.word	0x00b71b00

000804c4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   804c4:	b580      	push	{r7, lr}
   804c6:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   804c8:	2006      	movs	r0, #6
   804ca:	4b04      	ldr	r3, [pc, #16]	; (804dc <sysclk_get_main_hz+0x18>)
   804cc:	4798      	blx	r3
   804ce:	4602      	mov	r2, r0
   804d0:	4613      	mov	r3, r2
   804d2:	00db      	lsls	r3, r3, #3
   804d4:	1a9b      	subs	r3, r3, r2
   804d6:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   804d8:	4618      	mov	r0, r3
   804da:	bd80      	pop	{r7, pc}
   804dc:	00080451 	.word	0x00080451

000804e0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   804e0:	b580      	push	{r7, lr}
   804e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   804e4:	4b02      	ldr	r3, [pc, #8]	; (804f0 <sysclk_get_cpu_hz+0x10>)
   804e6:	4798      	blx	r3
   804e8:	4603      	mov	r3, r0
   804ea:	085b      	lsrs	r3, r3, #1
}
   804ec:	4618      	mov	r0, r3
   804ee:	bd80      	pop	{r7, pc}
   804f0:	000804c5 	.word	0x000804c5

000804f4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   804f4:	b580      	push	{r7, lr}
   804f6:	b082      	sub	sp, #8
   804f8:	af00      	add	r7, sp, #0
   804fa:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   804fc:	6878      	ldr	r0, [r7, #4]
   804fe:	4b02      	ldr	r3, [pc, #8]	; (80508 <sysclk_enable_peripheral_clock+0x14>)
   80500:	4798      	blx	r3
}
   80502:	3708      	adds	r7, #8
   80504:	46bd      	mov	sp, r7
   80506:	bd80      	pop	{r7, pc}
   80508:	00081d21 	.word	0x00081d21

0008050c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   8050c:	b580      	push	{r7, lr}
   8050e:	b082      	sub	sp, #8
   80510:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80512:	4846      	ldr	r0, [pc, #280]	; (8062c <USART0_Handler+0x120>)
   80514:	4b46      	ldr	r3, [pc, #280]	; (80630 <USART0_Handler+0x124>)
   80516:	4798      	blx	r3
   80518:	6078      	str	r0, [r7, #4]

	if (gs_uc_trans_mode == PDC_TRANSFER) {
   8051a:	4b46      	ldr	r3, [pc, #280]	; (80634 <USART0_Handler+0x128>)
   8051c:	781b      	ldrb	r3, [r3, #0]
   8051e:	2b01      	cmp	r3, #1
   80520:	d172      	bne.n	80608 <USART0_Handler+0xfc>
		/* Receive buffer is full. */
		if (ul_status & US_CSR_RXBUFF) {
   80522:	687b      	ldr	r3, [r7, #4]
   80524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   80528:	2b00      	cmp	r3, #0
   8052a:	d07c      	beq.n	80626 <USART0_Handler+0x11a>
			/* Disable timer. */
			tc_stop(TC0, 0);
   8052c:	4842      	ldr	r0, [pc, #264]	; (80638 <USART0_Handler+0x12c>)
   8052e:	2100      	movs	r1, #0
   80530:	4b42      	ldr	r3, [pc, #264]	; (8063c <USART0_Handler+0x130>)
   80532:	4798      	blx	r3

			/* Echo back buffer. */
			g_st_packet.ul_addr =									
					(uint32_t)gs_puc_buffer[gs_uc_buf_num];			// This is the first tx packet.
   80534:	4b42      	ldr	r3, [pc, #264]	; (80640 <USART0_Handler+0x134>)
   80536:	781b      	ldrb	r3, [r3, #0]
   80538:	2264      	movs	r2, #100	; 0x64
   8053a:	fb02 f203 	mul.w	r2, r2, r3
   8053e:	4b41      	ldr	r3, [pc, #260]	; (80644 <USART0_Handler+0x138>)
   80540:	4413      	add	r3, r2
   80542:	461a      	mov	r2, r3
		if (ul_status & US_CSR_RXBUFF) {
			/* Disable timer. */
			tc_stop(TC0, 0);

			/* Echo back buffer. */
			g_st_packet.ul_addr =									
   80544:	4b40      	ldr	r3, [pc, #256]	; (80648 <USART0_Handler+0x13c>)
   80546:	601a      	str	r2, [r3, #0]
					(uint32_t)gs_puc_buffer[gs_uc_buf_num];			// This is the first tx packet.
					
			if ( *(gs_puc_buffer[gs_uc_buf_num]) == 0x61)
   80548:	4b3d      	ldr	r3, [pc, #244]	; (80640 <USART0_Handler+0x134>)
   8054a:	781b      	ldrb	r3, [r3, #0]
   8054c:	4a3d      	ldr	r2, [pc, #244]	; (80644 <USART0_Handler+0x138>)
   8054e:	2164      	movs	r1, #100	; 0x64
   80550:	fb01 f303 	mul.w	r3, r1, r3
   80554:	4413      	add	r3, r2
   80556:	781b      	ldrb	r3, [r3, #0]
   80558:	2b61      	cmp	r3, #97	; 0x61
   8055a:	d102      	bne.n	80562 <USART0_Handler+0x56>
			{
				pio_toggle_pin(LED0_GPIO);
   8055c:	203b      	movs	r0, #59	; 0x3b
   8055e:	4b3b      	ldr	r3, [pc, #236]	; (8064c <USART0_Handler+0x140>)
   80560:	4798      	blx	r3
			}
			
			g_st_packet.ul_size = gs_ul_size_buffer;
   80562:	4b3b      	ldr	r3, [pc, #236]	; (80650 <USART0_Handler+0x144>)
   80564:	681a      	ldr	r2, [r3, #0]
   80566:	4b38      	ldr	r3, [pc, #224]	; (80648 <USART0_Handler+0x13c>)
   80568:	605a      	str	r2, [r3, #4]
			g_st_nextpacket.ul_addr =
					(uint32_t)gs_puc_nextbuffer[gs_uc_buf_num];		// This is the second tx packet.
   8056a:	4b35      	ldr	r3, [pc, #212]	; (80640 <USART0_Handler+0x134>)
   8056c:	781b      	ldrb	r3, [r3, #0]
   8056e:	2264      	movs	r2, #100	; 0x64
   80570:	fb02 f203 	mul.w	r2, r2, r3
   80574:	4b37      	ldr	r3, [pc, #220]	; (80654 <USART0_Handler+0x148>)
   80576:	4413      	add	r3, r2
   80578:	461a      	mov	r2, r3
			{
				pio_toggle_pin(LED0_GPIO);
			}
			
			g_st_packet.ul_size = gs_ul_size_buffer;
			g_st_nextpacket.ul_addr =
   8057a:	4b37      	ldr	r3, [pc, #220]	; (80658 <USART0_Handler+0x14c>)
   8057c:	601a      	str	r2, [r3, #0]
					(uint32_t)gs_puc_nextbuffer[gs_uc_buf_num];		// This is the second tx packet.
			g_st_nextpacket.ul_size = gs_ul_size_nextbuffer;
   8057e:	4b37      	ldr	r3, [pc, #220]	; (8065c <USART0_Handler+0x150>)
   80580:	681a      	ldr	r2, [r3, #0]
   80582:	4b35      	ldr	r3, [pc, #212]	; (80658 <USART0_Handler+0x14c>)
   80584:	605a      	str	r2, [r3, #4]
			pdc_tx_init(g_p_pdc, &g_st_packet, &g_st_nextpacket);	// This causes the message to be sent.
   80586:	4b36      	ldr	r3, [pc, #216]	; (80660 <USART0_Handler+0x154>)
   80588:	681b      	ldr	r3, [r3, #0]
   8058a:	4618      	mov	r0, r3
   8058c:	492e      	ldr	r1, [pc, #184]	; (80648 <USART0_Handler+0x13c>)
   8058e:	4a32      	ldr	r2, [pc, #200]	; (80658 <USART0_Handler+0x14c>)
   80590:	4b34      	ldr	r3, [pc, #208]	; (80664 <USART0_Handler+0x158>)
   80592:	4798      	blx	r3

			if (g_uc_transend_flag) {
   80594:	4b34      	ldr	r3, [pc, #208]	; (80668 <USART0_Handler+0x15c>)
   80596:	781b      	ldrb	r3, [r3, #0]
   80598:	2b00      	cmp	r3, #0
   8059a:	d008      	beq.n	805ae <USART0_Handler+0xa2>
				gs_ul_size_buffer = BUFFER_SIZE;
   8059c:	4b2c      	ldr	r3, [pc, #176]	; (80650 <USART0_Handler+0x144>)
   8059e:	2264      	movs	r2, #100	; 0x64
   805a0:	601a      	str	r2, [r3, #0]
				gs_ul_size_nextbuffer = BUFFER_SIZE;
   805a2:	4b2e      	ldr	r3, [pc, #184]	; (8065c <USART0_Handler+0x150>)
   805a4:	2264      	movs	r2, #100	; 0x64
   805a6:	601a      	str	r2, [r3, #0]
				g_uc_transend_flag = 0;
   805a8:	4b2f      	ldr	r3, [pc, #188]	; (80668 <USART0_Handler+0x15c>)
   805aa:	2200      	movs	r2, #0
   805ac:	701a      	strb	r2, [r3, #0]
			}

			gs_uc_buf_num = MAX_BUF_NUM - gs_uc_buf_num;
   805ae:	4b24      	ldr	r3, [pc, #144]	; (80640 <USART0_Handler+0x134>)
   805b0:	781b      	ldrb	r3, [r3, #0]
   805b2:	f1c3 0301 	rsb	r3, r3, #1
   805b6:	b2da      	uxtb	r2, r3
   805b8:	4b21      	ldr	r3, [pc, #132]	; (80640 <USART0_Handler+0x134>)
   805ba:	701a      	strb	r2, [r3, #0]

			/* Restart read on buffer. */
			g_st_packet.ul_addr =
					(uint32_t)gs_puc_buffer[gs_uc_buf_num];
   805bc:	4b20      	ldr	r3, [pc, #128]	; (80640 <USART0_Handler+0x134>)
   805be:	781b      	ldrb	r3, [r3, #0]
   805c0:	2264      	movs	r2, #100	; 0x64
   805c2:	fb02 f203 	mul.w	r2, r2, r3
   805c6:	4b1f      	ldr	r3, [pc, #124]	; (80644 <USART0_Handler+0x138>)
   805c8:	4413      	add	r3, r2
   805ca:	461a      	mov	r2, r3
			}

			gs_uc_buf_num = MAX_BUF_NUM - gs_uc_buf_num;

			/* Restart read on buffer. */
			g_st_packet.ul_addr =
   805cc:	4b1e      	ldr	r3, [pc, #120]	; (80648 <USART0_Handler+0x13c>)
   805ce:	601a      	str	r2, [r3, #0]
					(uint32_t)gs_puc_buffer[gs_uc_buf_num];
			g_st_packet.ul_size = BUFFER_SIZE;
   805d0:	4b1d      	ldr	r3, [pc, #116]	; (80648 <USART0_Handler+0x13c>)
   805d2:	2264      	movs	r2, #100	; 0x64
   805d4:	605a      	str	r2, [r3, #4]
			g_st_nextpacket.ul_addr =
					(uint32_t)gs_puc_nextbuffer[ gs_uc_buf_num];
   805d6:	4b1a      	ldr	r3, [pc, #104]	; (80640 <USART0_Handler+0x134>)
   805d8:	781b      	ldrb	r3, [r3, #0]
   805da:	2264      	movs	r2, #100	; 0x64
   805dc:	fb02 f203 	mul.w	r2, r2, r3
   805e0:	4b1c      	ldr	r3, [pc, #112]	; (80654 <USART0_Handler+0x148>)
   805e2:	4413      	add	r3, r2
   805e4:	461a      	mov	r2, r3

			/* Restart read on buffer. */
			g_st_packet.ul_addr =
					(uint32_t)gs_puc_buffer[gs_uc_buf_num];
			g_st_packet.ul_size = BUFFER_SIZE;
			g_st_nextpacket.ul_addr =
   805e6:	4b1c      	ldr	r3, [pc, #112]	; (80658 <USART0_Handler+0x14c>)
   805e8:	601a      	str	r2, [r3, #0]
					(uint32_t)gs_puc_nextbuffer[ gs_uc_buf_num];
			g_st_nextpacket.ul_size = BUFFER_SIZE;
   805ea:	4b1b      	ldr	r3, [pc, #108]	; (80658 <USART0_Handler+0x14c>)
   805ec:	2264      	movs	r2, #100	; 0x64
   805ee:	605a      	str	r2, [r3, #4]
			pdc_rx_init(g_p_pdc, &g_st_packet, &g_st_nextpacket);	// This causes us to start reading again.
   805f0:	4b1b      	ldr	r3, [pc, #108]	; (80660 <USART0_Handler+0x154>)
   805f2:	681b      	ldr	r3, [r3, #0]
   805f4:	4618      	mov	r0, r3
   805f6:	4914      	ldr	r1, [pc, #80]	; (80648 <USART0_Handler+0x13c>)
   805f8:	4a17      	ldr	r2, [pc, #92]	; (80658 <USART0_Handler+0x14c>)
   805fa:	4b1c      	ldr	r3, [pc, #112]	; (8066c <USART0_Handler+0x160>)
   805fc:	4798      	blx	r3

			/* Restart timer. */
			tc_start(TC0, 0);
   805fe:	480e      	ldr	r0, [pc, #56]	; (80638 <USART0_Handler+0x12c>)
   80600:	2100      	movs	r1, #0
   80602:	4b1b      	ldr	r3, [pc, #108]	; (80670 <USART0_Handler+0x164>)
   80604:	4798      	blx	r3
   80606:	e00e      	b.n	80626 <USART0_Handler+0x11a>
		}
	} else {
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) {
   80608:	687b      	ldr	r3, [r7, #4]
   8060a:	f003 0301 	and.w	r3, r3, #1
   8060e:	2b00      	cmp	r3, #0
   80610:	d009      	beq.n	80626 <USART0_Handler+0x11a>
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80612:	4806      	ldr	r0, [pc, #24]	; (8062c <USART0_Handler+0x120>)
   80614:	4917      	ldr	r1, [pc, #92]	; (80674 <USART0_Handler+0x168>)
   80616:	4b18      	ldr	r3, [pc, #96]	; (80678 <USART0_Handler+0x16c>)
   80618:	4798      	blx	r3
			usart_write(BOARD_USART, gs_ul_read_buffer);
   8061a:	4b16      	ldr	r3, [pc, #88]	; (80674 <USART0_Handler+0x168>)
   8061c:	681b      	ldr	r3, [r3, #0]
   8061e:	4803      	ldr	r0, [pc, #12]	; (8062c <USART0_Handler+0x120>)
   80620:	4619      	mov	r1, r3
   80622:	4b16      	ldr	r3, [pc, #88]	; (8067c <USART0_Handler+0x170>)
   80624:	4798      	blx	r3
		}
	}
}
   80626:	3708      	adds	r7, #8
   80628:	46bd      	mov	sp, r7
   8062a:	bd80      	pop	{r7, pc}
   8062c:	40098000 	.word	0x40098000
   80630:	0008208d 	.word	0x0008208d
   80634:	20070008 	.word	0x20070008
   80638:	40080000 	.word	0x40080000
   8063c:	000802b9 	.word	0x000802b9
   80640:	200705f0 	.word	0x200705f0
   80644:	2007045c 	.word	0x2007045c
   80648:	20070794 	.word	0x20070794
   8064c:	00081735 	.word	0x00081735
   80650:	20070000 	.word	0x20070000
   80654:	20070524 	.word	0x20070524
   80658:	20070788 	.word	0x20070788
   8065c:	20070004 	.word	0x20070004
   80660:	20070790 	.word	0x20070790
   80664:	00080149 	.word	0x00080149
   80668:	200705f1 	.word	0x200705f1
   8066c:	0008018d 	.word	0x0008018d
   80670:	00080299 	.word	0x00080299
   80674:	200705ec 	.word	0x200705ec
   80678:	00082111 	.word	0x00082111
   8067c:	000820dd 	.word	0x000820dd

00080680 <TC0_Handler>:
/**
 * \brief Interrupt handler for TC0. Record the number of bytes received,
 * and then restart a read transfer on the USART if the transfer was stopped.
 */
void TC0_Handler(void)
{
   80680:	b580      	push	{r7, lr}
   80682:	b082      	sub	sp, #8
   80684:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t ul_byte_total = 0;
   80686:	2300      	movs	r3, #0
   80688:	607b      	str	r3, [r7, #4]

	/* Read TC0 Status. */
	ul_status = tc_get_status(TC0, 0);
   8068a:	481e      	ldr	r0, [pc, #120]	; (80704 <TC0_Handler+0x84>)
   8068c:	2100      	movs	r1, #0
   8068e:	4b1e      	ldr	r3, [pc, #120]	; (80708 <TC0_Handler+0x88>)
   80690:	4798      	blx	r3
   80692:	6038      	str	r0, [r7, #0]

	/* RC compare. */
	if (((ul_status & TC_SR_CPCS) == TC_SR_CPCS) &&
   80694:	683b      	ldr	r3, [r7, #0]
   80696:	f003 0310 	and.w	r3, r3, #16
   8069a:	2b00      	cmp	r3, #0
   8069c:	d02f      	beq.n	806fe <TC0_Handler+0x7e>
			(gs_uc_trans_mode == PDC_TRANSFER)) {
   8069e:	4b1b      	ldr	r3, [pc, #108]	; (8070c <TC0_Handler+0x8c>)
   806a0:	781b      	ldrb	r3, [r3, #0]

	/* Read TC0 Status. */
	ul_status = tc_get_status(TC0, 0);

	/* RC compare. */
	if (((ul_status & TC_SR_CPCS) == TC_SR_CPCS) &&
   806a2:	2b01      	cmp	r3, #1
   806a4:	d12b      	bne.n	806fe <TC0_Handler+0x7e>
			(gs_uc_trans_mode == PDC_TRANSFER)) {
		/* Flush PDC buffer. */
		ul_byte_total = BUFFER_SIZE - pdc_read_rx_counter(g_p_pdc);
   806a6:	4b1a      	ldr	r3, [pc, #104]	; (80710 <TC0_Handler+0x90>)
   806a8:	681b      	ldr	r3, [r3, #0]
   806aa:	4618      	mov	r0, r3
   806ac:	4b19      	ldr	r3, [pc, #100]	; (80714 <TC0_Handler+0x94>)
   806ae:	4798      	blx	r3
   806b0:	4603      	mov	r3, r0
   806b2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
   806b6:	607b      	str	r3, [r7, #4]
		if ((ul_byte_total != 0) && (ul_byte_total != BUFFER_SIZE)) {
   806b8:	687b      	ldr	r3, [r7, #4]
   806ba:	2b00      	cmp	r3, #0
   806bc:	d01f      	beq.n	806fe <TC0_Handler+0x7e>
   806be:	687b      	ldr	r3, [r7, #4]
   806c0:	2b64      	cmp	r3, #100	; 0x64
   806c2:	d01c      	beq.n	806fe <TC0_Handler+0x7e>
			/* Log current size. */
			g_uc_transend_flag = 1;
   806c4:	4b14      	ldr	r3, [pc, #80]	; (80718 <TC0_Handler+0x98>)
   806c6:	2201      	movs	r2, #1
   806c8:	701a      	strb	r2, [r3, #0]
			if (pdc_read_rx_next_counter(g_p_pdc) == 0) {
   806ca:	4b11      	ldr	r3, [pc, #68]	; (80710 <TC0_Handler+0x90>)
   806cc:	681b      	ldr	r3, [r3, #0]
   806ce:	4618      	mov	r0, r3
   806d0:	4b12      	ldr	r3, [pc, #72]	; (8071c <TC0_Handler+0x9c>)
   806d2:	4798      	blx	r3
   806d4:	4603      	mov	r3, r0
   806d6:	2b00      	cmp	r3, #0
   806d8:	d106      	bne.n	806e8 <TC0_Handler+0x68>
				gs_ul_size_buffer = BUFFER_SIZE;
   806da:	4b11      	ldr	r3, [pc, #68]	; (80720 <TC0_Handler+0xa0>)
   806dc:	2264      	movs	r2, #100	; 0x64
   806de:	601a      	str	r2, [r3, #0]
				gs_ul_size_nextbuffer = ul_byte_total;
   806e0:	4b10      	ldr	r3, [pc, #64]	; (80724 <TC0_Handler+0xa4>)
   806e2:	687a      	ldr	r2, [r7, #4]
   806e4:	601a      	str	r2, [r3, #0]
   806e6:	e005      	b.n	806f4 <TC0_Handler+0x74>
			} else {
				gs_ul_size_buffer = ul_byte_total;
   806e8:	4b0d      	ldr	r3, [pc, #52]	; (80720 <TC0_Handler+0xa0>)
   806ea:	687a      	ldr	r2, [r7, #4]
   806ec:	601a      	str	r2, [r3, #0]
				gs_ul_size_nextbuffer = 0;
   806ee:	4b0d      	ldr	r3, [pc, #52]	; (80724 <TC0_Handler+0xa4>)
   806f0:	2200      	movs	r2, #0
   806f2:	601a      	str	r2, [r3, #0]
			}

			/* Trigger USART Receive Buffer Full Interrupt. */
			pdc_rx_clear_cnt(g_p_pdc);
   806f4:	4b06      	ldr	r3, [pc, #24]	; (80710 <TC0_Handler+0x90>)
   806f6:	681b      	ldr	r3, [r3, #0]
   806f8:	4618      	mov	r0, r3
   806fa:	4b0b      	ldr	r3, [pc, #44]	; (80728 <TC0_Handler+0xa8>)
   806fc:	4798      	blx	r3
		}
	}
}
   806fe:	3708      	adds	r7, #8
   80700:	46bd      	mov	sp, r7
   80702:	bd80      	pop	{r7, pc}
   80704:	40080000 	.word	0x40080000
   80708:	00080325 	.word	0x00080325
   8070c:	20070008 	.word	0x20070008
   80710:	20070790 	.word	0x20070790
   80714:	00080231 	.word	0x00080231
   80718:	200705f1 	.word	0x200705f1
   8071c:	00080249 	.word	0x00080249
   80720:	20070000 	.word	0x20070000
   80724:	20070004 	.word	0x20070004
   80728:	000801d1 	.word	0x000801d1

0008072c <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
static void configure_usart(void)
{
   8072c:	b5b0      	push	{r4, r5, r7, lr}
   8072e:	b086      	sub	sp, #24
   80730:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   80732:	4b13      	ldr	r3, [pc, #76]	; (80780 <configure_usart+0x54>)
   80734:	463c      	mov	r4, r7
   80736:	461d      	mov	r5, r3
   80738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8073a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8073c:	e895 0003 	ldmia.w	r5, {r0, r1}
   80740:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   80744:	2011      	movs	r0, #17
   80746:	4b0f      	ldr	r3, [pc, #60]	; (80784 <configure_usart+0x58>)
   80748:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8074a:	4b0f      	ldr	r3, [pc, #60]	; (80788 <configure_usart+0x5c>)
   8074c:	4798      	blx	r3
   8074e:	4603      	mov	r3, r0
   80750:	463a      	mov	r2, r7
   80752:	480e      	ldr	r0, [pc, #56]	; (8078c <configure_usart+0x60>)
   80754:	4611      	mov	r1, r2
   80756:	461a      	mov	r2, r3
   80758:	4b0d      	ldr	r3, [pc, #52]	; (80790 <configure_usart+0x64>)
   8075a:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   8075c:	480b      	ldr	r0, [pc, #44]	; (8078c <configure_usart+0x60>)
   8075e:	f04f 31ff 	mov.w	r1, #4294967295
   80762:	4b0c      	ldr	r3, [pc, #48]	; (80794 <configure_usart+0x68>)
   80764:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   80766:	4809      	ldr	r0, [pc, #36]	; (8078c <configure_usart+0x60>)
   80768:	4b0b      	ldr	r3, [pc, #44]	; (80798 <configure_usart+0x6c>)
   8076a:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   8076c:	4807      	ldr	r0, [pc, #28]	; (8078c <configure_usart+0x60>)
   8076e:	4b0b      	ldr	r3, [pc, #44]	; (8079c <configure_usart+0x70>)
   80770:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   80772:	2011      	movs	r0, #17
   80774:	4b0a      	ldr	r3, [pc, #40]	; (807a0 <configure_usart+0x74>)
   80776:	4798      	blx	r3
}
   80778:	3718      	adds	r7, #24
   8077a:	46bd      	mov	sp, r7
   8077c:	bdb0      	pop	{r4, r5, r7, pc}
   8077e:	bf00      	nop
   80780:	000834c4 	.word	0x000834c4
   80784:	000804f5 	.word	0x000804f5
   80788:	000804e1 	.word	0x000804e1
   8078c:	40098000 	.word	0x40098000
   80790:	00081f71 	.word	0x00081f71
   80794:	00082071 	.word	0x00082071
   80798:	00081ff5 	.word	0x00081ff5
   8079c:	00082025 	.word	0x00082025
   807a0:	00080421 	.word	0x00080421

000807a4 <configure_tc>:
/**
 * \brief Configure Timer Counter 0 (TC0) to generate an interrupt every 200ms.
 * This interrupt will be used to flush USART input and echo back.
 */
static void configure_tc(void)
{
   807a4:	b590      	push	{r4, r7, lr}
   807a6:	b085      	sub	sp, #20
   807a8:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;
	static uint32_t ul_sysclk;

	/* Get system clock. */
	ul_sysclk = sysclk_get_cpu_hz();
   807aa:	4b17      	ldr	r3, [pc, #92]	; (80808 <configure_tc+0x64>)
   807ac:	4798      	blx	r3
   807ae:	4602      	mov	r2, r0
   807b0:	4b16      	ldr	r3, [pc, #88]	; (8080c <configure_tc+0x68>)
   807b2:	601a      	str	r2, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
   807b4:	201b      	movs	r0, #27
   807b6:	4b16      	ldr	r3, [pc, #88]	; (80810 <configure_tc+0x6c>)
   807b8:	4798      	blx	r3

	/* Configure TC for a 50Hz frequency and trigger on RC compare. */
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
   807ba:	4b14      	ldr	r3, [pc, #80]	; (8080c <configure_tc+0x68>)
   807bc:	6819      	ldr	r1, [r3, #0]
   807be:	4b13      	ldr	r3, [pc, #76]	; (8080c <configure_tc+0x68>)
   807c0:	6818      	ldr	r0, [r3, #0]
   807c2:	1d3a      	adds	r2, r7, #4
   807c4:	463b      	mov	r3, r7
   807c6:	9000      	str	r0, [sp, #0]
   807c8:	2001      	movs	r0, #1
   807ca:	4c12      	ldr	r4, [pc, #72]	; (80814 <configure_tc+0x70>)
   807cc:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
   807ce:	683b      	ldr	r3, [r7, #0]
   807d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   807d4:	4810      	ldr	r0, [pc, #64]	; (80818 <configure_tc+0x74>)
   807d6:	2100      	movs	r1, #0
   807d8:	461a      	mov	r2, r3
   807da:	4b10      	ldr	r3, [pc, #64]	; (8081c <configure_tc+0x78>)
   807dc:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
   807de:	4b0b      	ldr	r3, [pc, #44]	; (8080c <configure_tc+0x68>)
   807e0:	681a      	ldr	r2, [r3, #0]
   807e2:	687b      	ldr	r3, [r7, #4]
   807e4:	fbb2 f3f3 	udiv	r3, r2, r3
   807e8:	480b      	ldr	r0, [pc, #44]	; (80818 <configure_tc+0x74>)
   807ea:	2100      	movs	r1, #0
   807ec:	461a      	mov	r2, r3
   807ee:	4b0c      	ldr	r3, [pc, #48]	; (80820 <configure_tc+0x7c>)
   807f0:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
   807f2:	201b      	movs	r0, #27
   807f4:	4b0b      	ldr	r3, [pc, #44]	; (80824 <configure_tc+0x80>)
   807f6:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   807f8:	4807      	ldr	r0, [pc, #28]	; (80818 <configure_tc+0x74>)
   807fa:	2100      	movs	r1, #0
   807fc:	2210      	movs	r2, #16
   807fe:	4b0a      	ldr	r3, [pc, #40]	; (80828 <configure_tc+0x84>)
   80800:	4798      	blx	r3
}
   80802:	370c      	adds	r7, #12
   80804:	46bd      	mov	sp, r7
   80806:	bd90      	pop	{r4, r7, pc}
   80808:	000804e1 	.word	0x000804e1
   8080c:	200705f4 	.word	0x200705f4
   80810:	00081d21 	.word	0x00081d21
   80814:	00080349 	.word	0x00080349
   80818:	40080000 	.word	0x40080000
   8081c:	00080261 	.word	0x00080261
   80820:	000802d9 	.word	0x000802d9
   80824:	00080421 	.word	0x00080421
   80828:	000802fd 	.word	0x000802fd

0008082c <usart_clear>:

/**
 * \brief Reset the TX & RX, and clear the PDC counter.
 */
static void usart_clear(void)
{
   8082c:	b580      	push	{r7, lr}
   8082e:	af00      	add	r7, sp, #0
	/* Reset and disable receiver & transmitter. */
	usart_reset_rx(BOARD_USART);
   80830:	480f      	ldr	r0, [pc, #60]	; (80870 <usart_clear+0x44>)
   80832:	4b10      	ldr	r3, [pc, #64]	; (80874 <usart_clear+0x48>)
   80834:	4798      	blx	r3
	usart_reset_tx(BOARD_USART);
   80836:	480e      	ldr	r0, [pc, #56]	; (80870 <usart_clear+0x44>)
   80838:	4b0f      	ldr	r3, [pc, #60]	; (80878 <usart_clear+0x4c>)
   8083a:	4798      	blx	r3

	/* Clear PDC counter. */
	g_st_packet.ul_addr = 0;
   8083c:	4b0f      	ldr	r3, [pc, #60]	; (8087c <usart_clear+0x50>)
   8083e:	2200      	movs	r2, #0
   80840:	601a      	str	r2, [r3, #0]
	g_st_packet.ul_size = 0;
   80842:	4b0e      	ldr	r3, [pc, #56]	; (8087c <usart_clear+0x50>)
   80844:	2200      	movs	r2, #0
   80846:	605a      	str	r2, [r3, #4]
	g_st_nextpacket.ul_addr = 0;
   80848:	4b0d      	ldr	r3, [pc, #52]	; (80880 <usart_clear+0x54>)
   8084a:	2200      	movs	r2, #0
   8084c:	601a      	str	r2, [r3, #0]
	g_st_nextpacket.ul_size = 0;
   8084e:	4b0c      	ldr	r3, [pc, #48]	; (80880 <usart_clear+0x54>)
   80850:	2200      	movs	r2, #0
   80852:	605a      	str	r2, [r3, #4]
	pdc_rx_init(g_p_pdc, &g_st_packet, &g_st_nextpacket);
   80854:	4b0b      	ldr	r3, [pc, #44]	; (80884 <usart_clear+0x58>)
   80856:	681b      	ldr	r3, [r3, #0]
   80858:	4618      	mov	r0, r3
   8085a:	4908      	ldr	r1, [pc, #32]	; (8087c <usart_clear+0x50>)
   8085c:	4a08      	ldr	r2, [pc, #32]	; (80880 <usart_clear+0x54>)
   8085e:	4b0a      	ldr	r3, [pc, #40]	; (80888 <usart_clear+0x5c>)
   80860:	4798      	blx	r3

	/* Enable receiver & transmitter. */
	usart_enable_tx(BOARD_USART);
   80862:	4803      	ldr	r0, [pc, #12]	; (80870 <usart_clear+0x44>)
   80864:	4b09      	ldr	r3, [pc, #36]	; (8088c <usart_clear+0x60>)
   80866:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   80868:	4801      	ldr	r0, [pc, #4]	; (80870 <usart_clear+0x44>)
   8086a:	4b09      	ldr	r3, [pc, #36]	; (80890 <usart_clear+0x64>)
   8086c:	4798      	blx	r3
}
   8086e:	bd80      	pop	{r7, pc}
   80870:	40098000 	.word	0x40098000
   80874:	0008203d 	.word	0x0008203d
   80878:	0008200d 	.word	0x0008200d
   8087c:	20070794 	.word	0x20070794
   80880:	20070788 	.word	0x20070788
   80884:	20070790 	.word	0x20070790
   80888:	0008018d 	.word	0x0008018d
   8088c:	00081ff5 	.word	0x00081ff5
   80890:	00082025 	.word	0x00082025

00080894 <usart_example>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int usart_example(void)
{
   80894:	b580      	push	{r7, lr}
   80896:	b082      	sub	sp, #8
   80898:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;

	/* Initialize the SAM system. */
	sysclk_init();
   8089a:	4b5c      	ldr	r3, [pc, #368]	; (80a0c <usart_example+0x178>)
   8089c:	4798      	blx	r3
	board_init();
   8089e:	4b5c      	ldr	r3, [pc, #368]	; (80a10 <usart_example+0x17c>)
   808a0:	4798      	blx	r3

	/* Output example information. */

	/* Configure USART. */
	configure_usart();
   808a2:	4b5c      	ldr	r3, [pc, #368]	; (80a14 <usart_example+0x180>)
   808a4:	4798      	blx	r3

	/* Get board USART PDC base address. */
	g_p_pdc = usart_get_pdc_base(BOARD_USART);
   808a6:	485c      	ldr	r0, [pc, #368]	; (80a18 <usart_example+0x184>)
   808a8:	4b5c      	ldr	r3, [pc, #368]	; (80a1c <usart_example+0x188>)
   808aa:	4798      	blx	r3
   808ac:	4602      	mov	r2, r0
   808ae:	4b5c      	ldr	r3, [pc, #368]	; (80a20 <usart_example+0x18c>)
   808b0:	601a      	str	r2, [r3, #0]
	/* Enable receiver and transmitter. */
	pdc_enable_transfer(g_p_pdc, PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   808b2:	4b5b      	ldr	r3, [pc, #364]	; (80a20 <usart_example+0x18c>)
   808b4:	681b      	ldr	r3, [r3, #0]
   808b6:	4618      	mov	r0, r3
   808b8:	f240 1101 	movw	r1, #257	; 0x101
   808bc:	4b59      	ldr	r3, [pc, #356]	; (80a24 <usart_example+0x190>)
   808be:	4798      	blx	r3

	/* Configure TC. */
	configure_tc();
   808c0:	4b59      	ldr	r3, [pc, #356]	; (80a28 <usart_example+0x194>)
   808c2:	4798      	blx	r3

	/* Start receiving data and start timer. */
	g_st_packet.ul_addr = (uint32_t)gs_puc_buffer[gs_uc_buf_num];
   808c4:	4b59      	ldr	r3, [pc, #356]	; (80a2c <usart_example+0x198>)
   808c6:	781b      	ldrb	r3, [r3, #0]
   808c8:	2264      	movs	r2, #100	; 0x64
   808ca:	fb02 f203 	mul.w	r2, r2, r3
   808ce:	4b58      	ldr	r3, [pc, #352]	; (80a30 <usart_example+0x19c>)
   808d0:	4413      	add	r3, r2
   808d2:	461a      	mov	r2, r3
   808d4:	4b57      	ldr	r3, [pc, #348]	; (80a34 <usart_example+0x1a0>)
   808d6:	601a      	str	r2, [r3, #0]
	g_st_packet.ul_size = BUFFER_SIZE;
   808d8:	4b56      	ldr	r3, [pc, #344]	; (80a34 <usart_example+0x1a0>)
   808da:	2264      	movs	r2, #100	; 0x64
   808dc:	605a      	str	r2, [r3, #4]
	g_st_nextpacket.ul_addr = (uint32_t)gs_puc_nextbuffer[gs_uc_buf_num];
   808de:	4b53      	ldr	r3, [pc, #332]	; (80a2c <usart_example+0x198>)
   808e0:	781b      	ldrb	r3, [r3, #0]
   808e2:	2264      	movs	r2, #100	; 0x64
   808e4:	fb02 f203 	mul.w	r2, r2, r3
   808e8:	4b53      	ldr	r3, [pc, #332]	; (80a38 <usart_example+0x1a4>)
   808ea:	4413      	add	r3, r2
   808ec:	461a      	mov	r2, r3
   808ee:	4b53      	ldr	r3, [pc, #332]	; (80a3c <usart_example+0x1a8>)
   808f0:	601a      	str	r2, [r3, #0]
	g_st_nextpacket.ul_size = BUFFER_SIZE;
   808f2:	4b52      	ldr	r3, [pc, #328]	; (80a3c <usart_example+0x1a8>)
   808f4:	2264      	movs	r2, #100	; 0x64
   808f6:	605a      	str	r2, [r3, #4]
	pdc_rx_init(g_p_pdc, &g_st_packet, &g_st_nextpacket);
   808f8:	4b49      	ldr	r3, [pc, #292]	; (80a20 <usart_example+0x18c>)
   808fa:	681b      	ldr	r3, [r3, #0]
   808fc:	4618      	mov	r0, r3
   808fe:	494d      	ldr	r1, [pc, #308]	; (80a34 <usart_example+0x1a0>)
   80900:	4a4e      	ldr	r2, [pc, #312]	; (80a3c <usart_example+0x1a8>)
   80902:	4b4f      	ldr	r3, [pc, #316]	; (80a40 <usart_example+0x1ac>)
   80904:	4798      	blx	r3

	gs_uc_trans_mode = PDC_TRANSFER;
   80906:	4b4f      	ldr	r3, [pc, #316]	; (80a44 <usart_example+0x1b0>)
   80908:	2201      	movs	r2, #1
   8090a:	701a      	strb	r2, [r3, #0]

	usart_disable_interrupt(BOARD_USART, US_IDR_RXRDY);
   8090c:	4842      	ldr	r0, [pc, #264]	; (80a18 <usart_example+0x184>)
   8090e:	2101      	movs	r1, #1
   80910:	4b4d      	ldr	r3, [pc, #308]	; (80a48 <usart_example+0x1b4>)
   80912:	4798      	blx	r3
	usart_enable_interrupt(BOARD_USART, US_IER_RXBUFF);
   80914:	4840      	ldr	r0, [pc, #256]	; (80a18 <usart_example+0x184>)
   80916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8091a:	4b4c      	ldr	r3, [pc, #304]	; (80a4c <usart_example+0x1b8>)
   8091c:	4798      	blx	r3

	tc_start(TC0, 0);
   8091e:	484c      	ldr	r0, [pc, #304]	; (80a50 <usart_example+0x1bc>)
   80920:	2100      	movs	r1, #0
   80922:	4b4c      	ldr	r3, [pc, #304]	; (80a54 <usart_example+0x1c0>)
   80924:	4798      	blx	r3

	while (1) {
		uc_char = 0;
   80926:	2300      	movs	r3, #0
   80928:	71bb      	strb	r3, [r7, #6]
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
   8092a:	1dbb      	adds	r3, r7, #6
   8092c:	484a      	ldr	r0, [pc, #296]	; (80a58 <usart_example+0x1c4>)
   8092e:	4619      	mov	r1, r3
   80930:	4b4a      	ldr	r3, [pc, #296]	; (80a5c <usart_example+0x1c8>)
   80932:	4798      	blx	r3
   80934:	4603      	mov	r3, r0
   80936:	71fb      	strb	r3, [r7, #7]
		if (!uc_flag) {
   80938:	79fb      	ldrb	r3, [r7, #7]
   8093a:	2b00      	cmp	r3, #0
   8093c:	d164      	bne.n	80a08 <usart_example+0x174>
			switch (uc_char) {
   8093e:	79bb      	ldrb	r3, [r7, #6]
   80940:	2b53      	cmp	r3, #83	; 0x53
   80942:	d002      	beq.n	8094a <usart_example+0xb6>
   80944:	2b73      	cmp	r3, #115	; 0x73
   80946:	d000      	beq.n	8094a <usart_example+0xb6>
				}

				break;

			default:
				break;
   80948:	e05e      	b.n	80a08 <usart_example+0x174>
		uc_flag = uart_read(CONSOLE_UART, &uc_char);
		if (!uc_flag) {
			switch (uc_char) {
			case 's':
			case 'S':
				if (gs_uc_trans_mode == PDC_TRANSFER) {
   8094a:	4b3e      	ldr	r3, [pc, #248]	; (80a44 <usart_example+0x1b0>)
   8094c:	781b      	ldrb	r3, [r3, #0]
   8094e:	2b01      	cmp	r3, #1
   80950:	d115      	bne.n	8097e <usart_example+0xea>
					/* Transfer to no PDC communication mode. */
					/* Disable PDC controller. */
					pdc_disable_transfer(g_p_pdc,
   80952:	4b33      	ldr	r3, [pc, #204]	; (80a20 <usart_example+0x18c>)
   80954:	681b      	ldr	r3, [r3, #0]
   80956:	4618      	mov	r0, r3
   80958:	f240 2102 	movw	r1, #514	; 0x202
   8095c:	4b40      	ldr	r3, [pc, #256]	; (80a60 <usart_example+0x1cc>)
   8095e:	4798      	blx	r3
							PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
					/* Disable the RXBUFF interrupt. */
					usart_disable_interrupt(BOARD_USART, US_IDR_RXBUFF);
   80960:	482d      	ldr	r0, [pc, #180]	; (80a18 <usart_example+0x184>)
   80962:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80966:	4b38      	ldr	r3, [pc, #224]	; (80a48 <usart_example+0x1b4>)
   80968:	4798      	blx	r3

					/* Clear USART controller. */
					usart_clear();
   8096a:	4b3e      	ldr	r3, [pc, #248]	; (80a64 <usart_example+0x1d0>)
   8096c:	4798      	blx	r3

					/* Enable the RXRDY interrupt. */
					usart_enable_interrupt(BOARD_USART, US_IER_RXRDY);
   8096e:	482a      	ldr	r0, [pc, #168]	; (80a18 <usart_example+0x184>)
   80970:	2101      	movs	r1, #1
   80972:	4b36      	ldr	r3, [pc, #216]	; (80a4c <usart_example+0x1b8>)
   80974:	4798      	blx	r3
					gs_uc_trans_mode = BYTE_TRANSFER;
   80976:	4b33      	ldr	r3, [pc, #204]	; (80a44 <usart_example+0x1b0>)
   80978:	2200      	movs	r2, #0
   8097a:	701a      	strb	r2, [r3, #0]
   8097c:	e043      	b.n	80a06 <usart_example+0x172>

				} else if (gs_uc_trans_mode == BYTE_TRANSFER) {
   8097e:	4b31      	ldr	r3, [pc, #196]	; (80a44 <usart_example+0x1b0>)
   80980:	781b      	ldrb	r3, [r3, #0]
   80982:	2b00      	cmp	r3, #0
   80984:	d13f      	bne.n	80a06 <usart_example+0x172>
					pdc_enable_transfer(g_p_pdc,
   80986:	4b26      	ldr	r3, [pc, #152]	; (80a20 <usart_example+0x18c>)
   80988:	681b      	ldr	r3, [r3, #0]
   8098a:	4618      	mov	r0, r3
   8098c:	f240 1101 	movw	r1, #257	; 0x101
   80990:	4b24      	ldr	r3, [pc, #144]	; (80a24 <usart_example+0x190>)
   80992:	4798      	blx	r3
							PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
					/* Clear USART controller. */
					usart_clear();
   80994:	4b33      	ldr	r3, [pc, #204]	; (80a64 <usart_example+0x1d0>)
   80996:	4798      	blx	r3

					/* Reset pdc current buffer size. */
					gs_ul_size_buffer = BUFFER_SIZE;
   80998:	4b33      	ldr	r3, [pc, #204]	; (80a68 <usart_example+0x1d4>)
   8099a:	2264      	movs	r2, #100	; 0x64
   8099c:	601a      	str	r2, [r3, #0]
					gs_ul_size_nextbuffer = BUFFER_SIZE;
   8099e:	4b33      	ldr	r3, [pc, #204]	; (80a6c <usart_example+0x1d8>)
   809a0:	2264      	movs	r2, #100	; 0x64
   809a2:	601a      	str	r2, [r3, #0]
					gs_uc_buf_num = 0;
   809a4:	4b21      	ldr	r3, [pc, #132]	; (80a2c <usart_example+0x198>)
   809a6:	2200      	movs	r2, #0
   809a8:	701a      	strb	r2, [r3, #0]

					/* Start receiving data. */
					g_st_packet.ul_addr =
							(uint32_t)gs_puc_buffer[gs_uc_buf_num];
   809aa:	4b20      	ldr	r3, [pc, #128]	; (80a2c <usart_example+0x198>)
   809ac:	781b      	ldrb	r3, [r3, #0]
   809ae:	2264      	movs	r2, #100	; 0x64
   809b0:	fb02 f203 	mul.w	r2, r2, r3
   809b4:	4b1e      	ldr	r3, [pc, #120]	; (80a30 <usart_example+0x19c>)
   809b6:	4413      	add	r3, r2
   809b8:	461a      	mov	r2, r3
					gs_ul_size_buffer = BUFFER_SIZE;
					gs_ul_size_nextbuffer = BUFFER_SIZE;
					gs_uc_buf_num = 0;

					/* Start receiving data. */
					g_st_packet.ul_addr =
   809ba:	4b1e      	ldr	r3, [pc, #120]	; (80a34 <usart_example+0x1a0>)
   809bc:	601a      	str	r2, [r3, #0]
							(uint32_t)gs_puc_buffer[gs_uc_buf_num];
					g_st_packet.ul_size = BUFFER_SIZE;
   809be:	4b1d      	ldr	r3, [pc, #116]	; (80a34 <usart_example+0x1a0>)
   809c0:	2264      	movs	r2, #100	; 0x64
   809c2:	605a      	str	r2, [r3, #4]
					g_st_nextpacket.ul_addr =
							(uint32_t)gs_puc_nextbuffer[gs_uc_buf_num];
   809c4:	4b19      	ldr	r3, [pc, #100]	; (80a2c <usart_example+0x198>)
   809c6:	781b      	ldrb	r3, [r3, #0]
   809c8:	2264      	movs	r2, #100	; 0x64
   809ca:	fb02 f203 	mul.w	r2, r2, r3
   809ce:	4b1a      	ldr	r3, [pc, #104]	; (80a38 <usart_example+0x1a4>)
   809d0:	4413      	add	r3, r2
   809d2:	461a      	mov	r2, r3

					/* Start receiving data. */
					g_st_packet.ul_addr =
							(uint32_t)gs_puc_buffer[gs_uc_buf_num];
					g_st_packet.ul_size = BUFFER_SIZE;
					g_st_nextpacket.ul_addr =
   809d4:	4b19      	ldr	r3, [pc, #100]	; (80a3c <usart_example+0x1a8>)
   809d6:	601a      	str	r2, [r3, #0]
							(uint32_t)gs_puc_nextbuffer[gs_uc_buf_num];
					g_st_nextpacket.ul_size = BUFFER_SIZE;
   809d8:	4b18      	ldr	r3, [pc, #96]	; (80a3c <usart_example+0x1a8>)
   809da:	2264      	movs	r2, #100	; 0x64
   809dc:	605a      	str	r2, [r3, #4]
					pdc_rx_init(g_p_pdc, &g_st_packet, &g_st_nextpacket);
   809de:	4b10      	ldr	r3, [pc, #64]	; (80a20 <usart_example+0x18c>)
   809e0:	681b      	ldr	r3, [r3, #0]
   809e2:	4618      	mov	r0, r3
   809e4:	4913      	ldr	r1, [pc, #76]	; (80a34 <usart_example+0x1a0>)
   809e6:	4a15      	ldr	r2, [pc, #84]	; (80a3c <usart_example+0x1a8>)
   809e8:	4b15      	ldr	r3, [pc, #84]	; (80a40 <usart_example+0x1ac>)
   809ea:	4798      	blx	r3
					
					/* Transfer to PDC communication mode, disable RXRDY interrupt and enable RXBUFF interrupt. */
					usart_disable_interrupt(BOARD_USART, US_IER_RXRDY);
   809ec:	480a      	ldr	r0, [pc, #40]	; (80a18 <usart_example+0x184>)
   809ee:	2101      	movs	r1, #1
   809f0:	4b15      	ldr	r3, [pc, #84]	; (80a48 <usart_example+0x1b4>)
   809f2:	4798      	blx	r3
					usart_enable_interrupt(BOARD_USART, US_IER_RXBUFF);
   809f4:	4808      	ldr	r0, [pc, #32]	; (80a18 <usart_example+0x184>)
   809f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   809fa:	4b14      	ldr	r3, [pc, #80]	; (80a4c <usart_example+0x1b8>)
   809fc:	4798      	blx	r3

					gs_uc_trans_mode = PDC_TRANSFER;
   809fe:	4b11      	ldr	r3, [pc, #68]	; (80a44 <usart_example+0x1b0>)
   80a00:	2201      	movs	r2, #1
   80a02:	701a      	strb	r2, [r3, #0]
				}

				break;
   80a04:	e7ff      	b.n	80a06 <usart_example+0x172>
   80a06:	bf00      	nop

			default:
				break;
			}
		}
	}
   80a08:	e78d      	b.n	80926 <usart_example+0x92>
   80a0a:	bf00      	nop
   80a0c:	00080d59 	.word	0x00080d59
   80a10:	00080dc1 	.word	0x00080dc1
   80a14:	0008072d 	.word	0x0008072d
   80a18:	40098000 	.word	0x40098000
   80a1c:	00082159 	.word	0x00082159
   80a20:	20070790 	.word	0x20070790
   80a24:	000801f1 	.word	0x000801f1
   80a28:	000807a5 	.word	0x000807a5
   80a2c:	200705f0 	.word	0x200705f0
   80a30:	2007045c 	.word	0x2007045c
   80a34:	20070794 	.word	0x20070794
   80a38:	20070524 	.word	0x20070524
   80a3c:	20070788 	.word	0x20070788
   80a40:	0008018d 	.word	0x0008018d
   80a44:	20070008 	.word	0x20070008
   80a48:	00082071 	.word	0x00082071
   80a4c:	00082055 	.word	0x00082055
   80a50:	40080000 	.word	0x40080000
   80a54:	00080299 	.word	0x00080299
   80a58:	400e0800 	.word	0x400e0800
   80a5c:	000803ed 	.word	0x000803ed
   80a60:	00080211 	.word	0x00080211
   80a64:	0008082d 	.word	0x0008082d
   80a68:	20070000 	.word	0x20070000
   80a6c:	20070004 	.word	0x20070004

00080a70 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80a70:	b580      	push	{r7, lr}
   80a72:	b082      	sub	sp, #8
   80a74:	af00      	add	r7, sp, #0
   80a76:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80a78:	687b      	ldr	r3, [r7, #4]
   80a7a:	2b07      	cmp	r3, #7
   80a7c:	d82e      	bhi.n	80adc <osc_enable+0x6c>
   80a7e:	a201      	add	r2, pc, #4	; (adr r2, 80a84 <osc_enable+0x14>)
   80a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a84:	00080add 	.word	0x00080add
   80a88:	00080aa5 	.word	0x00080aa5
   80a8c:	00080aad 	.word	0x00080aad
   80a90:	00080ab5 	.word	0x00080ab5
   80a94:	00080abd 	.word	0x00080abd
   80a98:	00080ac5 	.word	0x00080ac5
   80a9c:	00080acd 	.word	0x00080acd
   80aa0:	00080ad5 	.word	0x00080ad5
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80aa4:	2000      	movs	r0, #0
   80aa6:	4b0f      	ldr	r3, [pc, #60]	; (80ae4 <osc_enable+0x74>)
   80aa8:	4798      	blx	r3
		break;
   80aaa:	e017      	b.n	80adc <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80aac:	2001      	movs	r0, #1
   80aae:	4b0d      	ldr	r3, [pc, #52]	; (80ae4 <osc_enable+0x74>)
   80ab0:	4798      	blx	r3
		break;
   80ab2:	e013      	b.n	80adc <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80ab4:	2000      	movs	r0, #0
   80ab6:	4b0c      	ldr	r3, [pc, #48]	; (80ae8 <osc_enable+0x78>)
   80ab8:	4798      	blx	r3
		break;
   80aba:	e00f      	b.n	80adc <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80abc:	2010      	movs	r0, #16
   80abe:	4b0a      	ldr	r3, [pc, #40]	; (80ae8 <osc_enable+0x78>)
   80ac0:	4798      	blx	r3
		break;
   80ac2:	e00b      	b.n	80adc <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80ac4:	2020      	movs	r0, #32
   80ac6:	4b08      	ldr	r3, [pc, #32]	; (80ae8 <osc_enable+0x78>)
   80ac8:	4798      	blx	r3
		break;
   80aca:	e007      	b.n	80adc <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80acc:	2000      	movs	r0, #0
   80ace:	4b07      	ldr	r3, [pc, #28]	; (80aec <osc_enable+0x7c>)
   80ad0:	4798      	blx	r3
		break;
   80ad2:	e003      	b.n	80adc <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   80ad4:	2001      	movs	r0, #1
   80ad6:	4b05      	ldr	r3, [pc, #20]	; (80aec <osc_enable+0x7c>)
   80ad8:	4798      	blx	r3
		break;
   80ada:	bf00      	nop
	}
}
   80adc:	3708      	adds	r7, #8
   80ade:	46bd      	mov	sp, r7
   80ae0:	bd80      	pop	{r7, pc}
   80ae2:	bf00      	nop
   80ae4:	00081b39 	.word	0x00081b39
   80ae8:	00081ba9 	.word	0x00081ba9
   80aec:	00081c49 	.word	0x00081c49

00080af0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80af0:	b580      	push	{r7, lr}
   80af2:	b082      	sub	sp, #8
   80af4:	af00      	add	r7, sp, #0
   80af6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80af8:	687b      	ldr	r3, [r7, #4]
   80afa:	2b07      	cmp	r3, #7
   80afc:	d826      	bhi.n	80b4c <osc_is_ready+0x5c>
   80afe:	a201      	add	r2, pc, #4	; (adr r2, 80b04 <osc_is_ready+0x14>)
   80b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b04:	00080b25 	.word	0x00080b25
   80b08:	00080b29 	.word	0x00080b29
   80b0c:	00080b29 	.word	0x00080b29
   80b10:	00080b3b 	.word	0x00080b3b
   80b14:	00080b3b 	.word	0x00080b3b
   80b18:	00080b3b 	.word	0x00080b3b
   80b1c:	00080b3b 	.word	0x00080b3b
   80b20:	00080b3b 	.word	0x00080b3b
	case OSC_SLCK_32K_RC:
		return 1;
   80b24:	2301      	movs	r3, #1
   80b26:	e012      	b.n	80b4e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80b28:	4b0b      	ldr	r3, [pc, #44]	; (80b58 <osc_is_ready+0x68>)
   80b2a:	4798      	blx	r3
   80b2c:	4603      	mov	r3, r0
   80b2e:	2b00      	cmp	r3, #0
   80b30:	bf0c      	ite	eq
   80b32:	2300      	moveq	r3, #0
   80b34:	2301      	movne	r3, #1
   80b36:	b2db      	uxtb	r3, r3
   80b38:	e009      	b.n	80b4e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80b3a:	4b08      	ldr	r3, [pc, #32]	; (80b5c <osc_is_ready+0x6c>)
   80b3c:	4798      	blx	r3
   80b3e:	4603      	mov	r3, r0
   80b40:	2b00      	cmp	r3, #0
   80b42:	bf0c      	ite	eq
   80b44:	2300      	moveq	r3, #0
   80b46:	2301      	movne	r3, #1
   80b48:	b2db      	uxtb	r3, r3
   80b4a:	e000      	b.n	80b4e <osc_is_ready+0x5e>
	}

	return 0;
   80b4c:	2300      	movs	r3, #0
}
   80b4e:	4618      	mov	r0, r3
   80b50:	3708      	adds	r7, #8
   80b52:	46bd      	mov	sp, r7
   80b54:	bd80      	pop	{r7, pc}
   80b56:	bf00      	nop
   80b58:	00081b75 	.word	0x00081b75
   80b5c:	00081cb5 	.word	0x00081cb5

00080b60 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80b60:	b480      	push	{r7}
   80b62:	b083      	sub	sp, #12
   80b64:	af00      	add	r7, sp, #0
   80b66:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80b68:	687b      	ldr	r3, [r7, #4]
   80b6a:	2b07      	cmp	r3, #7
   80b6c:	d825      	bhi.n	80bba <osc_get_rate+0x5a>
   80b6e:	a201      	add	r2, pc, #4	; (adr r2, 80b74 <osc_get_rate+0x14>)
   80b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b74:	00080b95 	.word	0x00080b95
   80b78:	00080b9b 	.word	0x00080b9b
   80b7c:	00080ba1 	.word	0x00080ba1
   80b80:	00080ba7 	.word	0x00080ba7
   80b84:	00080bab 	.word	0x00080bab
   80b88:	00080baf 	.word	0x00080baf
   80b8c:	00080bb3 	.word	0x00080bb3
   80b90:	00080bb7 	.word	0x00080bb7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80b98:	e010      	b.n	80bbc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80b9e:	e00d      	b.n	80bbc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ba4:	e00a      	b.n	80bbc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80ba6:	4b08      	ldr	r3, [pc, #32]	; (80bc8 <osc_get_rate+0x68>)
   80ba8:	e008      	b.n	80bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80baa:	4b08      	ldr	r3, [pc, #32]	; (80bcc <osc_get_rate+0x6c>)
   80bac:	e006      	b.n	80bbc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80bae:	4b08      	ldr	r3, [pc, #32]	; (80bd0 <osc_get_rate+0x70>)
   80bb0:	e004      	b.n	80bbc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80bb2:	4b07      	ldr	r3, [pc, #28]	; (80bd0 <osc_get_rate+0x70>)
   80bb4:	e002      	b.n	80bbc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80bb6:	4b06      	ldr	r3, [pc, #24]	; (80bd0 <osc_get_rate+0x70>)
   80bb8:	e000      	b.n	80bbc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80bba:	2300      	movs	r3, #0
}
   80bbc:	4618      	mov	r0, r3
   80bbe:	370c      	adds	r7, #12
   80bc0:	46bd      	mov	sp, r7
   80bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bc6:	4770      	bx	lr
   80bc8:	003d0900 	.word	0x003d0900
   80bcc:	007a1200 	.word	0x007a1200
   80bd0:	00b71b00 	.word	0x00b71b00

00080bd4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80bd4:	b580      	push	{r7, lr}
   80bd6:	b082      	sub	sp, #8
   80bd8:	af00      	add	r7, sp, #0
   80bda:	4603      	mov	r3, r0
   80bdc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80bde:	bf00      	nop
   80be0:	79fb      	ldrb	r3, [r7, #7]
   80be2:	4618      	mov	r0, r3
   80be4:	4b05      	ldr	r3, [pc, #20]	; (80bfc <osc_wait_ready+0x28>)
   80be6:	4798      	blx	r3
   80be8:	4603      	mov	r3, r0
   80bea:	f083 0301 	eor.w	r3, r3, #1
   80bee:	b2db      	uxtb	r3, r3
   80bf0:	2b00      	cmp	r3, #0
   80bf2:	d1f5      	bne.n	80be0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80bf4:	3708      	adds	r7, #8
   80bf6:	46bd      	mov	sp, r7
   80bf8:	bd80      	pop	{r7, pc}
   80bfa:	bf00      	nop
   80bfc:	00080af1 	.word	0x00080af1

00080c00 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80c00:	b580      	push	{r7, lr}
   80c02:	b086      	sub	sp, #24
   80c04:	af00      	add	r7, sp, #0
   80c06:	60f8      	str	r0, [r7, #12]
   80c08:	607a      	str	r2, [r7, #4]
   80c0a:	603b      	str	r3, [r7, #0]
   80c0c:	460b      	mov	r3, r1
   80c0e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80c10:	687b      	ldr	r3, [r7, #4]
   80c12:	2b00      	cmp	r3, #0
   80c14:	d107      	bne.n	80c26 <pll_config_init+0x26>
   80c16:	683b      	ldr	r3, [r7, #0]
   80c18:	2b00      	cmp	r3, #0
   80c1a:	d104      	bne.n	80c26 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80c1c:	68fb      	ldr	r3, [r7, #12]
   80c1e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80c22:	601a      	str	r2, [r3, #0]
   80c24:	e019      	b.n	80c5a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   80c26:	7afb      	ldrb	r3, [r7, #11]
   80c28:	4618      	mov	r0, r3
   80c2a:	4b0d      	ldr	r3, [pc, #52]	; (80c60 <pll_config_init+0x60>)
   80c2c:	4798      	blx	r3
   80c2e:	4602      	mov	r2, r0
   80c30:	687b      	ldr	r3, [r7, #4]
   80c32:	fbb2 f3f3 	udiv	r3, r2, r3
   80c36:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80c38:	697b      	ldr	r3, [r7, #20]
   80c3a:	683a      	ldr	r2, [r7, #0]
   80c3c:	fb02 f303 	mul.w	r3, r2, r3
   80c40:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80c42:	683b      	ldr	r3, [r7, #0]
   80c44:	3b01      	subs	r3, #1
   80c46:	041a      	lsls	r2, r3, #16
   80c48:	4b06      	ldr	r3, [pc, #24]	; (80c64 <pll_config_init+0x64>)
   80c4a:	4013      	ands	r3, r2
   80c4c:	687a      	ldr	r2, [r7, #4]
   80c4e:	b2d2      	uxtb	r2, r2
   80c50:	4313      	orrs	r3, r2
   80c52:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   80c56:	68fb      	ldr	r3, [r7, #12]
   80c58:	601a      	str	r2, [r3, #0]
	}
}
   80c5a:	3718      	adds	r7, #24
   80c5c:	46bd      	mov	sp, r7
   80c5e:	bd80      	pop	{r7, pc}
   80c60:	00080b61 	.word	0x00080b61
   80c64:	07ff0000 	.word	0x07ff0000

00080c68 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80c68:	b580      	push	{r7, lr}
   80c6a:	b082      	sub	sp, #8
   80c6c:	af00      	add	r7, sp, #0
   80c6e:	6078      	str	r0, [r7, #4]
   80c70:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   80c72:	683b      	ldr	r3, [r7, #0]
   80c74:	2b00      	cmp	r3, #0
   80c76:	d108      	bne.n	80c8a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80c78:	4b08      	ldr	r3, [pc, #32]	; (80c9c <pll_enable+0x34>)
   80c7a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80c7c:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <pll_enable+0x38>)
   80c7e:	687a      	ldr	r2, [r7, #4]
   80c80:	6812      	ldr	r2, [r2, #0]
   80c82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80c86:	629a      	str	r2, [r3, #40]	; 0x28
   80c88:	e005      	b.n	80c96 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80c8a:	4b05      	ldr	r3, [pc, #20]	; (80ca0 <pll_enable+0x38>)
   80c8c:	687a      	ldr	r2, [r7, #4]
   80c8e:	6812      	ldr	r2, [r2, #0]
   80c90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80c94:	61da      	str	r2, [r3, #28]
	}
}
   80c96:	3708      	adds	r7, #8
   80c98:	46bd      	mov	sp, r7
   80c9a:	bd80      	pop	{r7, pc}
   80c9c:	00081cd1 	.word	0x00081cd1
   80ca0:	400e0600 	.word	0x400e0600

00080ca4 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80ca4:	b580      	push	{r7, lr}
   80ca6:	b082      	sub	sp, #8
   80ca8:	af00      	add	r7, sp, #0
   80caa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80cac:	687b      	ldr	r3, [r7, #4]
   80cae:	2b00      	cmp	r3, #0
   80cb0:	d103      	bne.n	80cba <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80cb2:	4b05      	ldr	r3, [pc, #20]	; (80cc8 <pll_is_locked+0x24>)
   80cb4:	4798      	blx	r3
   80cb6:	4603      	mov	r3, r0
   80cb8:	e002      	b.n	80cc0 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80cba:	4b04      	ldr	r3, [pc, #16]	; (80ccc <pll_is_locked+0x28>)
   80cbc:	4798      	blx	r3
   80cbe:	4603      	mov	r3, r0
}
   80cc0:	4618      	mov	r0, r3
   80cc2:	3708      	adds	r7, #8
   80cc4:	46bd      	mov	sp, r7
   80cc6:	bd80      	pop	{r7, pc}
   80cc8:	00081ce9 	.word	0x00081ce9
   80ccc:	00081d05 	.word	0x00081d05

00080cd0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80cd0:	b580      	push	{r7, lr}
   80cd2:	b082      	sub	sp, #8
   80cd4:	af00      	add	r7, sp, #0
   80cd6:	4603      	mov	r3, r0
   80cd8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80cda:	79fb      	ldrb	r3, [r7, #7]
   80cdc:	3b03      	subs	r3, #3
   80cde:	2b04      	cmp	r3, #4
   80ce0:	d808      	bhi.n	80cf4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80ce2:	79fb      	ldrb	r3, [r7, #7]
   80ce4:	4618      	mov	r0, r3
   80ce6:	4b05      	ldr	r3, [pc, #20]	; (80cfc <pll_enable_source+0x2c>)
   80ce8:	4798      	blx	r3
		osc_wait_ready(e_src);
   80cea:	79fb      	ldrb	r3, [r7, #7]
   80cec:	4618      	mov	r0, r3
   80cee:	4b04      	ldr	r3, [pc, #16]	; (80d00 <pll_enable_source+0x30>)
   80cf0:	4798      	blx	r3
		break;
   80cf2:	e000      	b.n	80cf6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80cf4:	bf00      	nop
	}
}
   80cf6:	3708      	adds	r7, #8
   80cf8:	46bd      	mov	sp, r7
   80cfa:	bd80      	pop	{r7, pc}
   80cfc:	00080a71 	.word	0x00080a71
   80d00:	00080bd5 	.word	0x00080bd5

00080d04 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80d04:	b580      	push	{r7, lr}
   80d06:	b082      	sub	sp, #8
   80d08:	af00      	add	r7, sp, #0
   80d0a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80d0c:	bf00      	nop
   80d0e:	6878      	ldr	r0, [r7, #4]
   80d10:	4b04      	ldr	r3, [pc, #16]	; (80d24 <pll_wait_for_lock+0x20>)
   80d12:	4798      	blx	r3
   80d14:	4603      	mov	r3, r0
   80d16:	2b00      	cmp	r3, #0
   80d18:	d0f9      	beq.n	80d0e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80d1a:	2300      	movs	r3, #0
}
   80d1c:	4618      	mov	r0, r3
   80d1e:	3708      	adds	r7, #8
   80d20:	46bd      	mov	sp, r7
   80d22:	bd80      	pop	{r7, pc}
   80d24:	00080ca5 	.word	0x00080ca5

00080d28 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80d28:	b580      	push	{r7, lr}
   80d2a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80d2c:	2006      	movs	r0, #6
   80d2e:	4b04      	ldr	r3, [pc, #16]	; (80d40 <sysclk_get_main_hz+0x18>)
   80d30:	4798      	blx	r3
   80d32:	4602      	mov	r2, r0
   80d34:	4613      	mov	r3, r2
   80d36:	00db      	lsls	r3, r3, #3
   80d38:	1a9b      	subs	r3, r3, r2
   80d3a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80d3c:	4618      	mov	r0, r3
   80d3e:	bd80      	pop	{r7, pc}
   80d40:	00080b61 	.word	0x00080b61

00080d44 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80d44:	b580      	push	{r7, lr}
   80d46:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80d48:	4b02      	ldr	r3, [pc, #8]	; (80d54 <sysclk_get_cpu_hz+0x10>)
   80d4a:	4798      	blx	r3
   80d4c:	4603      	mov	r3, r0
   80d4e:	085b      	lsrs	r3, r3, #1
}
   80d50:	4618      	mov	r0, r3
   80d52:	bd80      	pop	{r7, pc}
   80d54:	00080d29 	.word	0x00080d29

00080d58 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80d58:	b590      	push	{r4, r7, lr}
   80d5a:	b083      	sub	sp, #12
   80d5c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80d5e:	4b10      	ldr	r3, [pc, #64]	; (80da0 <sysclk_init+0x48>)
   80d60:	4798      	blx	r3
   80d62:	4603      	mov	r3, r0
   80d64:	4618      	mov	r0, r3
   80d66:	4b0f      	ldr	r3, [pc, #60]	; (80da4 <sysclk_init+0x4c>)
   80d68:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80d6a:	2006      	movs	r0, #6
   80d6c:	4b0e      	ldr	r3, [pc, #56]	; (80da8 <sysclk_init+0x50>)
   80d6e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80d70:	1d3b      	adds	r3, r7, #4
   80d72:	4618      	mov	r0, r3
   80d74:	2106      	movs	r1, #6
   80d76:	2201      	movs	r2, #1
   80d78:	230e      	movs	r3, #14
   80d7a:	4c0c      	ldr	r4, [pc, #48]	; (80dac <sysclk_init+0x54>)
   80d7c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80d7e:	1d3b      	adds	r3, r7, #4
   80d80:	4618      	mov	r0, r3
   80d82:	2100      	movs	r1, #0
   80d84:	4b0a      	ldr	r3, [pc, #40]	; (80db0 <sysclk_init+0x58>)
   80d86:	4798      	blx	r3
		pll_wait_for_lock(0);
   80d88:	2000      	movs	r0, #0
   80d8a:	4b0a      	ldr	r3, [pc, #40]	; (80db4 <sysclk_init+0x5c>)
   80d8c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80d8e:	2010      	movs	r0, #16
   80d90:	4b09      	ldr	r3, [pc, #36]	; (80db8 <sysclk_init+0x60>)
   80d92:	4798      	blx	r3
		break;
   80d94:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80d96:	4b09      	ldr	r3, [pc, #36]	; (80dbc <sysclk_init+0x64>)
   80d98:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80d9a:	370c      	adds	r7, #12
   80d9c:	46bd      	mov	sp, r7
   80d9e:	bd90      	pop	{r4, r7, pc}
   80da0:	00080d45 	.word	0x00080d45
   80da4:	00082465 	.word	0x00082465
   80da8:	00080cd1 	.word	0x00080cd1
   80dac:	00080c01 	.word	0x00080c01
   80db0:	00080c69 	.word	0x00080c69
   80db4:	00080d05 	.word	0x00080d05
   80db8:	00081ab5 	.word	0x00081ab5
   80dbc:	000822e5 	.word	0x000822e5

00080dc0 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   80dc0:	b580      	push	{r7, lr}
   80dc2:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dc4:	4b32      	ldr	r3, [pc, #200]	; (80e90 <board_init+0xd0>)
   80dc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80dca:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80dcc:	2001      	movs	r0, #1
   80dce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80dd2:	4b30      	ldr	r3, [pc, #192]	; (80e94 <board_init+0xd4>)
   80dd4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80dd6:	2000      	movs	r0, #0
   80dd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ddc:	4b2d      	ldr	r3, [pc, #180]	; (80e94 <board_init+0xd4>)
   80dde:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   80de0:	2034      	movs	r0, #52	; 0x34
   80de2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80de6:	4b2b      	ldr	r3, [pc, #172]	; (80e94 <board_init+0xd4>)
   80de8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80dea:	2035      	movs	r0, #53	; 0x35
   80dec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80df0:	4b28      	ldr	r3, [pc, #160]	; (80e94 <board_init+0xd4>)
   80df2:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   80df4:	202f      	movs	r0, #47	; 0x2f
   80df6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80dfa:	4b26      	ldr	r3, [pc, #152]	; (80e94 <board_init+0xd4>)
   80dfc:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   80dfe:	202e      	movs	r0, #46	; 0x2e
   80e00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e04:	4b23      	ldr	r3, [pc, #140]	; (80e94 <board_init+0xd4>)
   80e06:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   80e08:	208f      	movs	r0, #143	; 0x8f
   80e0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e0e:	4b21      	ldr	r3, [pc, #132]	; (80e94 <board_init+0xd4>)
   80e10:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   80e12:	2090      	movs	r0, #144	; 0x90
   80e14:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e18:	4b1e      	ldr	r3, [pc, #120]	; (80e94 <board_init+0xd4>)
   80e1a:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   80e1c:	2057      	movs	r0, #87	; 0x57
   80e1e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e22:	4b1c      	ldr	r3, [pc, #112]	; (80e94 <board_init+0xd4>)
   80e24:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   80e26:	2057      	movs	r0, #87	; 0x57
   80e28:	4b1b      	ldr	r3, [pc, #108]	; (80e98 <board_init+0xd8>)
   80e2a:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80e2c:	203b      	movs	r0, #59	; 0x3b
   80e2e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e32:	4b18      	ldr	r3, [pc, #96]	; (80e94 <board_init+0xd4>)
   80e34:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e36:	2055      	movs	r0, #85	; 0x55
   80e38:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e3c:	4b15      	ldr	r3, [pc, #84]	; (80e94 <board_init+0xd4>)
   80e3e:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e40:	2056      	movs	r0, #86	; 0x56
   80e42:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e46:	4b13      	ldr	r3, [pc, #76]	; (80e94 <board_init+0xd4>)
   80e48:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e4a:	2087      	movs	r0, #135	; 0x87
   80e4c:	4913      	ldr	r1, [pc, #76]	; (80e9c <board_init+0xdc>)
   80e4e:	4b11      	ldr	r3, [pc, #68]	; (80e94 <board_init+0xd4>)
   80e50:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e52:	2037      	movs	r0, #55	; 0x37
   80e54:	4912      	ldr	r1, [pc, #72]	; (80ea0 <board_init+0xe0>)
   80e56:	4b0f      	ldr	r3, [pc, #60]	; (80e94 <board_init+0xd4>)
   80e58:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e5a:	4812      	ldr	r0, [pc, #72]	; (80ea4 <board_init+0xe4>)
   80e5c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80e64:	4b10      	ldr	r3, [pc, #64]	; (80ea8 <board_init+0xe8>)
   80e66:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80e68:	200a      	movs	r0, #10
   80e6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e6e:	4b09      	ldr	r3, [pc, #36]	; (80e94 <board_init+0xd4>)
   80e70:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80e72:	200b      	movs	r0, #11
   80e74:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e78:	4b06      	ldr	r3, [pc, #24]	; (80e94 <board_init+0xd4>)
   80e7a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   80e7c:	208e      	movs	r0, #142	; 0x8e
   80e7e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e82:	4b04      	ldr	r3, [pc, #16]	; (80e94 <board_init+0xd4>)
   80e84:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80e86:	208e      	movs	r0, #142	; 0x8e
   80e88:	4b08      	ldr	r3, [pc, #32]	; (80eac <board_init+0xec>)
   80e8a:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80e8c:	bd80      	pop	{r7, pc}
   80e8e:	bf00      	nop
   80e90:	400e1a50 	.word	0x400e1a50
   80e94:	00081795 	.word	0x00081795
   80e98:	000816cd 	.word	0x000816cd
   80e9c:	28000079 	.word	0x28000079
   80ea0:	28000059 	.word	0x28000059
   80ea4:	400e0e00 	.word	0x400e0e00
   80ea8:	000818d1 	.word	0x000818d1
   80eac:	00081701 	.word	0x00081701

00080eb0 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80eb0:	b480      	push	{r7}
   80eb2:	b083      	sub	sp, #12
   80eb4:	af00      	add	r7, sp, #0
   80eb6:	6078      	str	r0, [r7, #4]
   80eb8:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   80eba:	687b      	ldr	r3, [r7, #4]
   80ebc:	683a      	ldr	r2, [r7, #0]
   80ebe:	601a      	str	r2, [r3, #0]
}
   80ec0:	370c      	adds	r7, #12
   80ec2:	46bd      	mov	sp, r7
   80ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop

00080ecc <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80ecc:	b480      	push	{r7}
   80ece:	b083      	sub	sp, #12
   80ed0:	af00      	add	r7, sp, #0
   80ed2:	6078      	str	r0, [r7, #4]
   80ed4:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80ed6:	687b      	ldr	r3, [r7, #4]
   80ed8:	683a      	ldr	r2, [r7, #0]
   80eda:	605a      	str	r2, [r3, #4]
}
   80edc:	370c      	adds	r7, #12
   80ede:	46bd      	mov	sp, r7
   80ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ee4:	4770      	bx	lr
   80ee6:	bf00      	nop

00080ee8 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   80ee8:	b580      	push	{r7, lr}
   80eea:	b082      	sub	sp, #8
   80eec:	af00      	add	r7, sp, #0
   80eee:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80ef0:	687b      	ldr	r3, [r7, #4]
   80ef2:	685b      	ldr	r3, [r3, #4]
   80ef4:	4618      	mov	r0, r3
   80ef6:	4b02      	ldr	r3, [pc, #8]	; (80f00 <sn65hvd234_enable+0x18>)
   80ef8:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   80efa:	3708      	adds	r7, #8
   80efc:	46bd      	mov	sp, r7
   80efe:	bd80      	pop	{r7, pc}
   80f00:	000816cd 	.word	0x000816cd

00080f04 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80f04:	b580      	push	{r7, lr}
   80f06:	b082      	sub	sp, #8
   80f08:	af00      	add	r7, sp, #0
   80f0a:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   80f0c:	687b      	ldr	r3, [r7, #4]
   80f0e:	681b      	ldr	r3, [r3, #0]
   80f10:	4618      	mov	r0, r3
   80f12:	4b02      	ldr	r3, [pc, #8]	; (80f1c <sn65hvd234_disable_low_power+0x18>)
   80f14:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   80f16:	3708      	adds	r7, #8
   80f18:	46bd      	mov	sp, r7
   80f1a:	bd80      	pop	{r7, pc}
   80f1c:	00081701 	.word	0x00081701

00080f20 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80f20:	b580      	push	{r7, lr}
   80f22:	b08a      	sub	sp, #40	; 0x28
   80f24:	af00      	add	r7, sp, #0
   80f26:	60f8      	str	r0, [r7, #12]
   80f28:	60b9      	str	r1, [r7, #8]
   80f2a:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80f2c:	687b      	ldr	r3, [r7, #4]
   80f2e:	f246 12a8 	movw	r2, #25000	; 0x61a8
   80f32:	fb02 f203 	mul.w	r2, r2, r3
   80f36:	68bb      	ldr	r3, [r7, #8]
   80f38:	4413      	add	r3, r2
   80f3a:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   80f3c:	687b      	ldr	r3, [r7, #4]
   80f3e:	f246 11a8 	movw	r1, #25000	; 0x61a8
   80f42:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80f46:	fbb2 f3f3 	udiv	r3, r2, r3
   80f4a:	2b80      	cmp	r3, #128	; 0x80
   80f4c:	d901      	bls.n	80f52 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   80f4e:	2300      	movs	r3, #0
   80f50:	e085      	b.n	8105e <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   80f52:	68bb      	ldr	r3, [r7, #8]
   80f54:	085a      	lsrs	r2, r3, #1
   80f56:	687b      	ldr	r3, [r7, #4]
   80f58:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80f5c:	fb01 f303 	mul.w	r3, r1, r3
   80f60:	429a      	cmp	r2, r3
   80f62:	d201      	bcs.n	80f68 <can_set_baudrate+0x48>
		return 0;
   80f64:	2300      	movs	r3, #0
   80f66:	e07a      	b.n	8105e <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   80f68:	2308      	movs	r3, #8
   80f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   80f6e:	f04f 33ff 	mov.w	r3, #4294967295
   80f72:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80f74:	2308      	movs	r3, #8
   80f76:	77fb      	strb	r3, [r7, #31]
   80f78:	e02b      	b.n	80fd2 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80f7a:	7ffb      	ldrb	r3, [r7, #31]
   80f7c:	687a      	ldr	r2, [r7, #4]
   80f7e:	fb02 f303 	mul.w	r3, r2, r3
   80f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80f86:	fb02 f303 	mul.w	r3, r2, r3
   80f8a:	68ba      	ldr	r2, [r7, #8]
   80f8c:	fbb2 f3f3 	udiv	r3, r2, r3
   80f90:	2b80      	cmp	r3, #128	; 0x80
   80f92:	d81b      	bhi.n	80fcc <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80f94:	7ffb      	ldrb	r3, [r7, #31]
   80f96:	687a      	ldr	r2, [r7, #4]
   80f98:	fb02 f303 	mul.w	r3, r2, r3
   80f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80fa0:	fb02 f203 	mul.w	r2, r2, r3
   80fa4:	68bb      	ldr	r3, [r7, #8]
   80fa6:	fbb3 f1f2 	udiv	r1, r3, r2
   80faa:	fb02 f201 	mul.w	r2, r2, r1
   80fae:	1a9b      	subs	r3, r3, r2
   80fb0:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80fb2:	69ba      	ldr	r2, [r7, #24]
   80fb4:	6a3b      	ldr	r3, [r7, #32]
   80fb6:	429a      	cmp	r2, r3
   80fb8:	d208      	bcs.n	80fcc <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   80fba:	69bb      	ldr	r3, [r7, #24]
   80fbc:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   80fbe:	7ffb      	ldrb	r3, [r7, #31]
   80fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80fc4:	6a3b      	ldr	r3, [r7, #32]
   80fc6:	2b00      	cmp	r3, #0
   80fc8:	d100      	bne.n	80fcc <can_set_baudrate+0xac>
					break;
   80fca:	e005      	b.n	80fd8 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80fcc:	7ffb      	ldrb	r3, [r7, #31]
   80fce:	3301      	adds	r3, #1
   80fd0:	77fb      	strb	r3, [r7, #31]
   80fd2:	7ffb      	ldrb	r3, [r7, #31]
   80fd4:	2b19      	cmp	r3, #25
   80fd6:	d9d0      	bls.n	80f7a <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80fdc:	687a      	ldr	r2, [r7, #4]
   80fde:	fb02 f303 	mul.w	r3, r2, r3
   80fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80fe6:	fb02 f303 	mul.w	r3, r2, r3
   80fea:	68ba      	ldr	r2, [r7, #8]
   80fec:	fbb2 f3f3 	udiv	r3, r2, r3
   80ff0:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80ff2:	7dfb      	ldrb	r3, [r7, #23]
   80ff4:	2b01      	cmp	r3, #1
   80ff6:	d801      	bhi.n	80ffc <can_set_baudrate+0xdc>
		return 0;
   80ff8:	2300      	movs	r3, #0
   80ffa:	e030      	b.n	8105e <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   80ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81000:	f1a3 0208 	sub.w	r2, r3, #8
   81004:	4613      	mov	r3, r2
   81006:	005b      	lsls	r3, r3, #1
   81008:	4413      	add	r3, r2
   8100a:	005b      	lsls	r3, r3, #1
   8100c:	4a16      	ldr	r2, [pc, #88]	; (81068 <can_set_baudrate+0x148>)
   8100e:	4413      	add	r3, r2
   81010:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81012:	68f8      	ldr	r0, [r7, #12]
   81014:	4b15      	ldr	r3, [pc, #84]	; (8106c <can_set_baudrate+0x14c>)
   81016:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81018:	693b      	ldr	r3, [r7, #16]
   8101a:	78db      	ldrb	r3, [r3, #3]
   8101c:	3b01      	subs	r3, #1
   8101e:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81022:	693b      	ldr	r3, [r7, #16]
   81024:	789b      	ldrb	r3, [r3, #2]
   81026:	3b01      	subs	r3, #1
   81028:	011b      	lsls	r3, r3, #4
   8102a:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8102e:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81030:	693b      	ldr	r3, [r7, #16]
   81032:	785b      	ldrb	r3, [r3, #1]
   81034:	3b01      	subs	r3, #1
   81036:	021b      	lsls	r3, r3, #8
   81038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   8103c:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8103e:	693b      	ldr	r3, [r7, #16]
   81040:	791b      	ldrb	r3, [r3, #4]
   81042:	3b01      	subs	r3, #1
   81044:	031b      	lsls	r3, r3, #12
   81046:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   8104a:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   8104c:	7dfb      	ldrb	r3, [r7, #23]
   8104e:	3b01      	subs	r3, #1
   81050:	041b      	lsls	r3, r3, #16
   81052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81056:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81058:	68fb      	ldr	r3, [r7, #12]
   8105a:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   8105c:	2301      	movs	r3, #1
}
   8105e:	4618      	mov	r0, r3
   81060:	3728      	adds	r7, #40	; 0x28
   81062:	46bd      	mov	sp, r7
   81064:	bd80      	pop	{r7, pc}
   81066:	bf00      	nop
   81068:	000834dc 	.word	0x000834dc
   8106c:	00081119 	.word	0x00081119

00081070 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81070:	b580      	push	{r7, lr}
   81072:	b086      	sub	sp, #24
   81074:	af00      	add	r7, sp, #0
   81076:	60f8      	str	r0, [r7, #12]
   81078:	60b9      	str	r1, [r7, #8]
   8107a:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   8107c:	68f8      	ldr	r0, [r7, #12]
   8107e:	68b9      	ldr	r1, [r7, #8]
   81080:	687a      	ldr	r2, [r7, #4]
   81082:	4b17      	ldr	r3, [pc, #92]	; (810e0 <can_init+0x70>)
   81084:	4798      	blx	r3
   81086:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81088:	697b      	ldr	r3, [r7, #20]
   8108a:	2b00      	cmp	r3, #0
   8108c:	d101      	bne.n	81092 <can_init+0x22>
		return 0;
   8108e:	2300      	movs	r3, #0
   81090:	e021      	b.n	810d6 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81092:	68f8      	ldr	r0, [r7, #12]
   81094:	4b13      	ldr	r3, [pc, #76]	; (810e4 <can_init+0x74>)
   81096:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81098:	68f8      	ldr	r0, [r7, #12]
   8109a:	4b13      	ldr	r3, [pc, #76]	; (810e8 <can_init+0x78>)
   8109c:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8109e:	2300      	movs	r3, #0
   810a0:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   810a2:	2300      	movs	r3, #0
   810a4:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   810a6:	e006      	b.n	810b6 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   810a8:	68f8      	ldr	r0, [r7, #12]
   810aa:	4b10      	ldr	r3, [pc, #64]	; (810ec <can_init+0x7c>)
   810ac:	4798      	blx	r3
   810ae:	6178      	str	r0, [r7, #20]
		ul_tick++;
   810b0:	693b      	ldr	r3, [r7, #16]
   810b2:	3301      	adds	r3, #1
   810b4:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   810b6:	697b      	ldr	r3, [r7, #20]
   810b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   810bc:	2b00      	cmp	r3, #0
   810be:	d103      	bne.n	810c8 <can_init+0x58>
   810c0:	693a      	ldr	r2, [r7, #16]
   810c2:	4b0b      	ldr	r3, [pc, #44]	; (810f0 <can_init+0x80>)
   810c4:	429a      	cmp	r2, r3
   810c6:	d9ef      	bls.n	810a8 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   810c8:	693a      	ldr	r2, [r7, #16]
   810ca:	4b0a      	ldr	r3, [pc, #40]	; (810f4 <can_init+0x84>)
   810cc:	429a      	cmp	r2, r3
   810ce:	d101      	bne.n	810d4 <can_init+0x64>
		return 0;
   810d0:	2300      	movs	r3, #0
   810d2:	e000      	b.n	810d6 <can_init+0x66>
	} else {
		return 1;
   810d4:	2301      	movs	r3, #1
	}
}
   810d6:	4618      	mov	r0, r3
   810d8:	3718      	adds	r7, #24
   810da:	46bd      	mov	sp, r7
   810dc:	bd80      	pop	{r7, pc}
   810de:	bf00      	nop
   810e0:	00080f21 	.word	0x00080f21
   810e4:	000814b1 	.word	0x000814b1
   810e8:	000810f9 	.word	0x000810f9
   810ec:	00081171 	.word	0x00081171
   810f0:	0001869f 	.word	0x0001869f
   810f4:	000186a0 	.word	0x000186a0

000810f8 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   810f8:	b480      	push	{r7}
   810fa:	b083      	sub	sp, #12
   810fc:	af00      	add	r7, sp, #0
   810fe:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81100:	687b      	ldr	r3, [r7, #4]
   81102:	681b      	ldr	r3, [r3, #0]
   81104:	f043 0201 	orr.w	r2, r3, #1
   81108:	687b      	ldr	r3, [r7, #4]
   8110a:	601a      	str	r2, [r3, #0]
}
   8110c:	370c      	adds	r7, #12
   8110e:	46bd      	mov	sp, r7
   81110:	f85d 7b04 	ldr.w	r7, [sp], #4
   81114:	4770      	bx	lr
   81116:	bf00      	nop

00081118 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81118:	b480      	push	{r7}
   8111a:	b083      	sub	sp, #12
   8111c:	af00      	add	r7, sp, #0
   8111e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81120:	687b      	ldr	r3, [r7, #4]
   81122:	681b      	ldr	r3, [r3, #0]
   81124:	f023 0201 	bic.w	r2, r3, #1
   81128:	687b      	ldr	r3, [r7, #4]
   8112a:	601a      	str	r2, [r3, #0]
}
   8112c:	370c      	adds	r7, #12
   8112e:	46bd      	mov	sp, r7
   81130:	f85d 7b04 	ldr.w	r7, [sp], #4
   81134:	4770      	bx	lr
   81136:	bf00      	nop

00081138 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81138:	b480      	push	{r7}
   8113a:	b083      	sub	sp, #12
   8113c:	af00      	add	r7, sp, #0
   8113e:	6078      	str	r0, [r7, #4]
   81140:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81142:	687b      	ldr	r3, [r7, #4]
   81144:	683a      	ldr	r2, [r7, #0]
   81146:	605a      	str	r2, [r3, #4]
}
   81148:	370c      	adds	r7, #12
   8114a:	46bd      	mov	sp, r7
   8114c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81150:	4770      	bx	lr
   81152:	bf00      	nop

00081154 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81154:	b480      	push	{r7}
   81156:	b083      	sub	sp, #12
   81158:	af00      	add	r7, sp, #0
   8115a:	6078      	str	r0, [r7, #4]
   8115c:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   8115e:	687b      	ldr	r3, [r7, #4]
   81160:	683a      	ldr	r2, [r7, #0]
   81162:	609a      	str	r2, [r3, #8]
}
   81164:	370c      	adds	r7, #12
   81166:	46bd      	mov	sp, r7
   81168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop

00081170 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81170:	b480      	push	{r7}
   81172:	b083      	sub	sp, #12
   81174:	af00      	add	r7, sp, #0
   81176:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   81178:	687b      	ldr	r3, [r7, #4]
   8117a:	691b      	ldr	r3, [r3, #16]
}
   8117c:	4618      	mov	r0, r3
   8117e:	370c      	adds	r7, #12
   81180:	46bd      	mov	sp, r7
   81182:	f85d 7b04 	ldr.w	r7, [sp], #4
   81186:	4770      	bx	lr

00081188 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   81188:	b480      	push	{r7}
   8118a:	b085      	sub	sp, #20
   8118c:	af00      	add	r7, sp, #0
   8118e:	6078      	str	r0, [r7, #4]
   81190:	460b      	mov	r3, r1
   81192:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81194:	687b      	ldr	r3, [r7, #4]
   81196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81198:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8119c:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   8119e:	78fa      	ldrb	r2, [r7, #3]
   811a0:	68fb      	ldr	r3, [r7, #12]
   811a2:	431a      	orrs	r2, r3
   811a4:	687b      	ldr	r3, [r7, #4]
   811a6:	625a      	str	r2, [r3, #36]	; 0x24
}
   811a8:	3714      	adds	r7, #20
   811aa:	46bd      	mov	sp, r7
   811ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   811b0:	4770      	bx	lr
   811b2:	bf00      	nop

000811b4 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   811b4:	b480      	push	{r7}
   811b6:	b083      	sub	sp, #12
   811b8:	af00      	add	r7, sp, #0
   811ba:	6078      	str	r0, [r7, #4]
   811bc:	460b      	mov	r3, r1
   811be:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   811c0:	78fb      	ldrb	r3, [r7, #3]
   811c2:	687a      	ldr	r2, [r7, #4]
   811c4:	015b      	lsls	r3, r3, #5
   811c6:	4413      	add	r3, r2
   811c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
   811cc:	681b      	ldr	r3, [r3, #0]
}
   811ce:	4618      	mov	r0, r3
   811d0:	370c      	adds	r7, #12
   811d2:	46bd      	mov	sp, r7
   811d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   811d8:	4770      	bx	lr
   811da:	bf00      	nop

000811dc <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   811dc:	b480      	push	{r7}
   811de:	b085      	sub	sp, #20
   811e0:	af00      	add	r7, sp, #0
   811e2:	6078      	str	r0, [r7, #4]
   811e4:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   811e6:	683b      	ldr	r3, [r7, #0]
   811e8:	681b      	ldr	r3, [r3, #0]
   811ea:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   811ec:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   811ee:	683a      	ldr	r2, [r7, #0]
   811f0:	7992      	ldrb	r2, [r2, #6]
   811f2:	0412      	lsls	r2, r2, #16
   811f4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   811f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   811fc:	6879      	ldr	r1, [r7, #4]
   811fe:	015b      	lsls	r3, r3, #5
   81200:	440b      	add	r3, r1
   81202:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81206:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81208:	3714      	adds	r7, #20
   8120a:	46bd      	mov	sp, r7
   8120c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81210:	4770      	bx	lr
   81212:	bf00      	nop

00081214 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81214:	b480      	push	{r7}
   81216:	b085      	sub	sp, #20
   81218:	af00      	add	r7, sp, #0
   8121a:	6078      	str	r0, [r7, #4]
   8121c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8121e:	683b      	ldr	r3, [r7, #0]
   81220:	681b      	ldr	r3, [r3, #0]
   81222:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81224:	683b      	ldr	r3, [r7, #0]
   81226:	791b      	ldrb	r3, [r3, #4]
   81228:	2b00      	cmp	r3, #0
   8122a:	d12e      	bne.n	8128a <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   8122c:	7bfb      	ldrb	r3, [r7, #15]
   8122e:	687a      	ldr	r2, [r7, #4]
   81230:	3310      	adds	r3, #16
   81232:	015b      	lsls	r3, r3, #5
   81234:	4413      	add	r3, r2
   81236:	2200      	movs	r2, #0
   81238:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   8123a:	7bfb      	ldrb	r3, [r7, #15]
   8123c:	687a      	ldr	r2, [r7, #4]
   8123e:	3310      	adds	r3, #16
   81240:	015b      	lsls	r3, r3, #5
   81242:	4413      	add	r3, r2
   81244:	2200      	movs	r2, #0
   81246:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81248:	7bfb      	ldrb	r3, [r7, #15]
   8124a:	687a      	ldr	r2, [r7, #4]
   8124c:	015b      	lsls	r3, r3, #5
   8124e:	4413      	add	r3, r2
   81250:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81254:	2200      	movs	r2, #0
   81256:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81258:	7bfb      	ldrb	r3, [r7, #15]
   8125a:	687a      	ldr	r2, [r7, #4]
   8125c:	015b      	lsls	r3, r3, #5
   8125e:	4413      	add	r3, r2
   81260:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81264:	2200      	movs	r2, #0
   81266:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81268:	7bfb      	ldrb	r3, [r7, #15]
   8126a:	687a      	ldr	r2, [r7, #4]
   8126c:	015b      	lsls	r3, r3, #5
   8126e:	4413      	add	r3, r2
   81270:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81274:	2200      	movs	r2, #0
   81276:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81278:	7bfb      	ldrb	r3, [r7, #15]
   8127a:	687a      	ldr	r2, [r7, #4]
   8127c:	015b      	lsls	r3, r3, #5
   8127e:	4413      	add	r3, r2
   81280:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81284:	2200      	movs	r2, #0
   81286:	605a      	str	r2, [r3, #4]
		return;
   81288:	e04e      	b.n	81328 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   8128a:	7bfb      	ldrb	r3, [r7, #15]
   8128c:	7bfa      	ldrb	r2, [r7, #15]
   8128e:	6879      	ldr	r1, [r7, #4]
   81290:	3210      	adds	r2, #16
   81292:	0152      	lsls	r2, r2, #5
   81294:	440a      	add	r2, r1
   81296:	6812      	ldr	r2, [r2, #0]
   81298:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   8129c:	683a      	ldr	r2, [r7, #0]
   8129e:	79d2      	ldrb	r2, [r2, #7]
   812a0:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   812a2:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   812a4:	6879      	ldr	r1, [r7, #4]
   812a6:	3310      	adds	r3, #16
   812a8:	015b      	lsls	r3, r3, #5
   812aa:	440b      	add	r3, r1
   812ac:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   812ae:	683b      	ldr	r3, [r7, #0]
   812b0:	795b      	ldrb	r3, [r3, #5]
   812b2:	2b00      	cmp	r3, #0
   812b4:	d015      	beq.n	812e2 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   812b6:	7bfb      	ldrb	r3, [r7, #15]
   812b8:	683a      	ldr	r2, [r7, #0]
   812ba:	68d2      	ldr	r2, [r2, #12]
   812bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   812c0:	6879      	ldr	r1, [r7, #4]
   812c2:	3310      	adds	r3, #16
   812c4:	015b      	lsls	r3, r3, #5
   812c6:	440b      	add	r3, r1
   812c8:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   812ca:	7bfb      	ldrb	r3, [r7, #15]
   812cc:	683a      	ldr	r2, [r7, #0]
   812ce:	6912      	ldr	r2, [r2, #16]
   812d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   812d4:	6879      	ldr	r1, [r7, #4]
   812d6:	015b      	lsls	r3, r3, #5
   812d8:	440b      	add	r3, r1
   812da:	f503 7302 	add.w	r3, r3, #520	; 0x208
   812de:	601a      	str	r2, [r3, #0]
   812e0:	e010      	b.n	81304 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   812e2:	7bfb      	ldrb	r3, [r7, #15]
   812e4:	683a      	ldr	r2, [r7, #0]
   812e6:	68d2      	ldr	r2, [r2, #12]
   812e8:	6879      	ldr	r1, [r7, #4]
   812ea:	3310      	adds	r3, #16
   812ec:	015b      	lsls	r3, r3, #5
   812ee:	440b      	add	r3, r1
   812f0:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   812f2:	7bfb      	ldrb	r3, [r7, #15]
   812f4:	683a      	ldr	r2, [r7, #0]
   812f6:	6912      	ldr	r2, [r2, #16]
   812f8:	6879      	ldr	r1, [r7, #4]
   812fa:	015b      	lsls	r3, r3, #5
   812fc:	440b      	add	r3, r1
   812fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81302:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81304:	7bfb      	ldrb	r3, [r7, #15]
   81306:	7bfa      	ldrb	r2, [r7, #15]
   81308:	6879      	ldr	r1, [r7, #4]
   8130a:	3210      	adds	r2, #16
   8130c:	0152      	lsls	r2, r2, #5
   8130e:	440a      	add	r2, r1
   81310:	6812      	ldr	r2, [r2, #0]
   81312:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81316:	683a      	ldr	r2, [r7, #0]
   81318:	7912      	ldrb	r2, [r2, #4]
   8131a:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   8131c:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   8131e:	6879      	ldr	r1, [r7, #4]
   81320:	3310      	adds	r3, #16
   81322:	015b      	lsls	r3, r3, #5
   81324:	440b      	add	r3, r1
   81326:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81328:	3714      	adds	r7, #20
   8132a:	46bd      	mov	sp, r7
   8132c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81330:	4770      	bx	lr
   81332:	bf00      	nop

00081334 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81334:	b580      	push	{r7, lr}
   81336:	b086      	sub	sp, #24
   81338:	af00      	add	r7, sp, #0
   8133a:	6078      	str	r0, [r7, #4]
   8133c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   8133e:	2300      	movs	r3, #0
   81340:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81342:	683b      	ldr	r3, [r7, #0]
   81344:	681b      	ldr	r3, [r3, #0]
   81346:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81348:	683b      	ldr	r3, [r7, #0]
   8134a:	689b      	ldr	r3, [r3, #8]
   8134c:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   8134e:	68fb      	ldr	r3, [r7, #12]
   81350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81354:	2b00      	cmp	r3, #0
   81356:	d006      	beq.n	81366 <can_mailbox_read+0x32>
   81358:	68fb      	ldr	r3, [r7, #12]
   8135a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8135e:	2b00      	cmp	r3, #0
   81360:	d001      	beq.n	81366 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81362:	2302      	movs	r3, #2
   81364:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81366:	7cfb      	ldrb	r3, [r7, #19]
   81368:	687a      	ldr	r2, [r7, #4]
   8136a:	015b      	lsls	r3, r3, #5
   8136c:	4413      	add	r3, r2
   8136e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81372:	685b      	ldr	r3, [r3, #4]
   81374:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81378:	683b      	ldr	r3, [r7, #0]
   8137a:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8137c:	68fb      	ldr	r3, [r7, #12]
   8137e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81382:	0c1b      	lsrs	r3, r3, #16
   81384:	b2da      	uxtb	r2, r3
   81386:	683b      	ldr	r3, [r7, #0]
   81388:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   8138a:	7cfb      	ldrb	r3, [r7, #19]
   8138c:	687a      	ldr	r2, [r7, #4]
   8138e:	015b      	lsls	r3, r3, #5
   81390:	4413      	add	r3, r2
   81392:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81396:	685a      	ldr	r2, [r3, #4]
   81398:	683b      	ldr	r3, [r7, #0]
   8139a:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   8139c:	683b      	ldr	r3, [r7, #0]
   8139e:	799b      	ldrb	r3, [r3, #6]
   813a0:	2b04      	cmp	r3, #4
   813a2:	d908      	bls.n	813b6 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   813a4:	7cfb      	ldrb	r3, [r7, #19]
   813a6:	687a      	ldr	r2, [r7, #4]
   813a8:	015b      	lsls	r3, r3, #5
   813aa:	4413      	add	r3, r2
   813ac:	f503 7306 	add.w	r3, r3, #536	; 0x218
   813b0:	681a      	ldr	r2, [r3, #0]
   813b2:	683b      	ldr	r3, [r7, #0]
   813b4:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   813b6:	7cfb      	ldrb	r3, [r7, #19]
   813b8:	687a      	ldr	r2, [r7, #4]
   813ba:	015b      	lsls	r3, r3, #5
   813bc:	4413      	add	r3, r2
   813be:	f503 7304 	add.w	r3, r3, #528	; 0x210
   813c2:	681a      	ldr	r2, [r3, #0]
   813c4:	683b      	ldr	r3, [r7, #0]
   813c6:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   813c8:	683b      	ldr	r3, [r7, #0]
   813ca:	689b      	ldr	r3, [r3, #8]
   813cc:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   813ce:	68fb      	ldr	r3, [r7, #12]
   813d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   813d4:	2b00      	cmp	r3, #0
   813d6:	d003      	beq.n	813e0 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   813d8:	697b      	ldr	r3, [r7, #20]
   813da:	f043 0304 	orr.w	r3, r3, #4
   813de:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   813e0:	6878      	ldr	r0, [r7, #4]
   813e2:	6839      	ldr	r1, [r7, #0]
   813e4:	4b03      	ldr	r3, [pc, #12]	; (813f4 <can_mailbox_read+0xc0>)
   813e6:	4798      	blx	r3

	return ul_retval;
   813e8:	697b      	ldr	r3, [r7, #20]
}
   813ea:	4618      	mov	r0, r3
   813ec:	3718      	adds	r7, #24
   813ee:	46bd      	mov	sp, r7
   813f0:	bd80      	pop	{r7, pc}
   813f2:	bf00      	nop
   813f4:	000811dd 	.word	0x000811dd

000813f8 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   813f8:	b580      	push	{r7, lr}
   813fa:	b084      	sub	sp, #16
   813fc:	af00      	add	r7, sp, #0
   813fe:	6078      	str	r0, [r7, #4]
   81400:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81402:	683b      	ldr	r3, [r7, #0]
   81404:	681b      	ldr	r3, [r3, #0]
   81406:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81408:	7bfb      	ldrb	r3, [r7, #15]
   8140a:	6878      	ldr	r0, [r7, #4]
   8140c:	4619      	mov	r1, r3
   8140e:	4b27      	ldr	r3, [pc, #156]	; (814ac <can_mailbox_write+0xb4>)
   81410:	4798      	blx	r3
   81412:	4602      	mov	r2, r0
   81414:	683b      	ldr	r3, [r7, #0]
   81416:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81418:	683b      	ldr	r3, [r7, #0]
   8141a:	689b      	ldr	r3, [r3, #8]
   8141c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   8141e:	68bb      	ldr	r3, [r7, #8]
   81420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81424:	2b00      	cmp	r3, #0
   81426:	d101      	bne.n	8142c <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81428:	2301      	movs	r3, #1
   8142a:	e03b      	b.n	814a4 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   8142c:	683b      	ldr	r3, [r7, #0]
   8142e:	795b      	ldrb	r3, [r3, #5]
   81430:	2b00      	cmp	r3, #0
   81432:	d00b      	beq.n	8144c <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81434:	7bfb      	ldrb	r3, [r7, #15]
   81436:	683a      	ldr	r2, [r7, #0]
   81438:	6912      	ldr	r2, [r2, #16]
   8143a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8143e:	6879      	ldr	r1, [r7, #4]
   81440:	015b      	lsls	r3, r3, #5
   81442:	440b      	add	r3, r1
   81444:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81448:	601a      	str	r2, [r3, #0]
   8144a:	e008      	b.n	8145e <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   8144c:	7bfb      	ldrb	r3, [r7, #15]
   8144e:	683a      	ldr	r2, [r7, #0]
   81450:	6912      	ldr	r2, [r2, #16]
   81452:	6879      	ldr	r1, [r7, #4]
   81454:	015b      	lsls	r3, r3, #5
   81456:	440b      	add	r3, r1
   81458:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8145c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   8145e:	7bfb      	ldrb	r3, [r7, #15]
   81460:	683a      	ldr	r2, [r7, #0]
   81462:	6992      	ldr	r2, [r2, #24]
   81464:	6879      	ldr	r1, [r7, #4]
   81466:	015b      	lsls	r3, r3, #5
   81468:	440b      	add	r3, r1
   8146a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8146e:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81470:	683b      	ldr	r3, [r7, #0]
   81472:	799b      	ldrb	r3, [r3, #6]
   81474:	2b04      	cmp	r3, #4
   81476:	d908      	bls.n	8148a <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81478:	7bfb      	ldrb	r3, [r7, #15]
   8147a:	683a      	ldr	r2, [r7, #0]
   8147c:	69d2      	ldr	r2, [r2, #28]
   8147e:	6879      	ldr	r1, [r7, #4]
   81480:	015b      	lsls	r3, r3, #5
   81482:	440b      	add	r3, r1
   81484:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81488:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   8148a:	7bfb      	ldrb	r3, [r7, #15]
   8148c:	683a      	ldr	r2, [r7, #0]
   8148e:	7992      	ldrb	r2, [r2, #6]
   81490:	0412      	lsls	r2, r2, #16
   81492:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81496:	6879      	ldr	r1, [r7, #4]
   81498:	015b      	lsls	r3, r3, #5
   8149a:	440b      	add	r3, r1
   8149c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   814a0:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   814a2:	2300      	movs	r3, #0
}
   814a4:	4618      	mov	r0, r3
   814a6:	3710      	adds	r7, #16
   814a8:	46bd      	mov	sp, r7
   814aa:	bd80      	pop	{r7, pc}
   814ac:	000811b5 	.word	0x000811b5

000814b0 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   814b0:	b580      	push	{r7, lr}
   814b2:	b08c      	sub	sp, #48	; 0x30
   814b4:	af00      	add	r7, sp, #0
   814b6:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   814b8:	2300      	movs	r3, #0
   814ba:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   814bc:	2300      	movs	r3, #0
   814be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   814c2:	e00d      	b.n	814e0 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   814c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814c8:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   814ca:	f107 030c 	add.w	r3, r7, #12
   814ce:	6878      	ldr	r0, [r7, #4]
   814d0:	4619      	mov	r1, r3
   814d2:	4b07      	ldr	r3, [pc, #28]	; (814f0 <can_reset_all_mailbox+0x40>)
   814d4:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   814d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814da:	3301      	adds	r3, #1
   814dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   814e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814e4:	2b07      	cmp	r3, #7
   814e6:	d9ed      	bls.n	814c4 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   814e8:	3730      	adds	r7, #48	; 0x30
   814ea:	46bd      	mov	sp, r7
   814ec:	bd80      	pop	{r7, pc}
   814ee:	bf00      	nop
   814f0:	00081215 	.word	0x00081215

000814f4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   814f4:	b480      	push	{r7}
   814f6:	b085      	sub	sp, #20
   814f8:	af00      	add	r7, sp, #0
   814fa:	60f8      	str	r0, [r7, #12]
   814fc:	60b9      	str	r1, [r7, #8]
   814fe:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81500:	687b      	ldr	r3, [r7, #4]
   81502:	2b00      	cmp	r3, #0
   81504:	d003      	beq.n	8150e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81506:	68fb      	ldr	r3, [r7, #12]
   81508:	68ba      	ldr	r2, [r7, #8]
   8150a:	665a      	str	r2, [r3, #100]	; 0x64
   8150c:	e002      	b.n	81514 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8150e:	68fb      	ldr	r3, [r7, #12]
   81510:	68ba      	ldr	r2, [r7, #8]
   81512:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81514:	3714      	adds	r7, #20
   81516:	46bd      	mov	sp, r7
   81518:	f85d 7b04 	ldr.w	r7, [sp], #4
   8151c:	4770      	bx	lr
   8151e:	bf00      	nop

00081520 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81520:	b480      	push	{r7}
   81522:	b087      	sub	sp, #28
   81524:	af00      	add	r7, sp, #0
   81526:	60f8      	str	r0, [r7, #12]
   81528:	60b9      	str	r1, [r7, #8]
   8152a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8152c:	68fb      	ldr	r3, [r7, #12]
   8152e:	687a      	ldr	r2, [r7, #4]
   81530:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81532:	68bb      	ldr	r3, [r7, #8]
   81534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81538:	d01f      	beq.n	8157a <pio_set_peripheral+0x5a>
   8153a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8153e:	d805      	bhi.n	8154c <pio_set_peripheral+0x2c>
   81540:	2b00      	cmp	r3, #0
   81542:	d027      	beq.n	81594 <pio_set_peripheral+0x74>
   81544:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81548:	d00a      	beq.n	81560 <pio_set_peripheral+0x40>
   8154a:	e01f      	b.n	8158c <pio_set_peripheral+0x6c>
   8154c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81550:	d020      	beq.n	81594 <pio_set_peripheral+0x74>
   81552:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81556:	d01d      	beq.n	81594 <pio_set_peripheral+0x74>
   81558:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8155c:	d01a      	beq.n	81594 <pio_set_peripheral+0x74>
   8155e:	e015      	b.n	8158c <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81560:	68fb      	ldr	r3, [r7, #12]
   81562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81564:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81566:	68fb      	ldr	r3, [r7, #12]
   81568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8156a:	687b      	ldr	r3, [r7, #4]
   8156c:	43d9      	mvns	r1, r3
   8156e:	697b      	ldr	r3, [r7, #20]
   81570:	400b      	ands	r3, r1
   81572:	401a      	ands	r2, r3
   81574:	68fb      	ldr	r3, [r7, #12]
   81576:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81578:	e008      	b.n	8158c <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8157a:	68fb      	ldr	r3, [r7, #12]
   8157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8157e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81580:	687a      	ldr	r2, [r7, #4]
   81582:	697b      	ldr	r3, [r7, #20]
   81584:	431a      	orrs	r2, r3
   81586:	68fb      	ldr	r3, [r7, #12]
   81588:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8158a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   8158c:	68fb      	ldr	r3, [r7, #12]
   8158e:	687a      	ldr	r2, [r7, #4]
   81590:	605a      	str	r2, [r3, #4]
   81592:	e000      	b.n	81596 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81594:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81596:	371c      	adds	r7, #28
   81598:	46bd      	mov	sp, r7
   8159a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8159e:	4770      	bx	lr

000815a0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   815a0:	b580      	push	{r7, lr}
   815a2:	b084      	sub	sp, #16
   815a4:	af00      	add	r7, sp, #0
   815a6:	60f8      	str	r0, [r7, #12]
   815a8:	60b9      	str	r1, [r7, #8]
   815aa:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   815ac:	68f8      	ldr	r0, [r7, #12]
   815ae:	68b9      	ldr	r1, [r7, #8]
   815b0:	4b18      	ldr	r3, [pc, #96]	; (81614 <pio_set_input+0x74>)
   815b2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   815b4:	687b      	ldr	r3, [r7, #4]
   815b6:	f003 0301 	and.w	r3, r3, #1
   815ba:	68f8      	ldr	r0, [r7, #12]
   815bc:	68b9      	ldr	r1, [r7, #8]
   815be:	461a      	mov	r2, r3
   815c0:	4b15      	ldr	r3, [pc, #84]	; (81618 <pio_set_input+0x78>)
   815c2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   815c4:	687b      	ldr	r3, [r7, #4]
   815c6:	f003 030a 	and.w	r3, r3, #10
   815ca:	2b00      	cmp	r3, #0
   815cc:	d003      	beq.n	815d6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   815ce:	68fb      	ldr	r3, [r7, #12]
   815d0:	68ba      	ldr	r2, [r7, #8]
   815d2:	621a      	str	r2, [r3, #32]
   815d4:	e002      	b.n	815dc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   815d6:	68fb      	ldr	r3, [r7, #12]
   815d8:	68ba      	ldr	r2, [r7, #8]
   815da:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   815dc:	687b      	ldr	r3, [r7, #4]
   815de:	f003 0302 	and.w	r3, r3, #2
   815e2:	2b00      	cmp	r3, #0
   815e4:	d004      	beq.n	815f0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   815e6:	68fb      	ldr	r3, [r7, #12]
   815e8:	68ba      	ldr	r2, [r7, #8]
   815ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   815ee:	e008      	b.n	81602 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   815f0:	687b      	ldr	r3, [r7, #4]
   815f2:	f003 0308 	and.w	r3, r3, #8
   815f6:	2b00      	cmp	r3, #0
   815f8:	d003      	beq.n	81602 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   815fa:	68fb      	ldr	r3, [r7, #12]
   815fc:	68ba      	ldr	r2, [r7, #8]
   815fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81602:	68fb      	ldr	r3, [r7, #12]
   81604:	68ba      	ldr	r2, [r7, #8]
   81606:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81608:	68fb      	ldr	r3, [r7, #12]
   8160a:	68ba      	ldr	r2, [r7, #8]
   8160c:	601a      	str	r2, [r3, #0]
}
   8160e:	3710      	adds	r7, #16
   81610:	46bd      	mov	sp, r7
   81612:	bd80      	pop	{r7, pc}
   81614:	00081681 	.word	0x00081681
   81618:	000814f5 	.word	0x000814f5

0008161c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8161c:	b580      	push	{r7, lr}
   8161e:	b084      	sub	sp, #16
   81620:	af00      	add	r7, sp, #0
   81622:	60f8      	str	r0, [r7, #12]
   81624:	60b9      	str	r1, [r7, #8]
   81626:	607a      	str	r2, [r7, #4]
   81628:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8162a:	68f8      	ldr	r0, [r7, #12]
   8162c:	68b9      	ldr	r1, [r7, #8]
   8162e:	4b12      	ldr	r3, [pc, #72]	; (81678 <pio_set_output+0x5c>)
   81630:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81632:	68f8      	ldr	r0, [r7, #12]
   81634:	68b9      	ldr	r1, [r7, #8]
   81636:	69ba      	ldr	r2, [r7, #24]
   81638:	4b10      	ldr	r3, [pc, #64]	; (8167c <pio_set_output+0x60>)
   8163a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8163c:	683b      	ldr	r3, [r7, #0]
   8163e:	2b00      	cmp	r3, #0
   81640:	d003      	beq.n	8164a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81642:	68fb      	ldr	r3, [r7, #12]
   81644:	68ba      	ldr	r2, [r7, #8]
   81646:	651a      	str	r2, [r3, #80]	; 0x50
   81648:	e002      	b.n	81650 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8164a:	68fb      	ldr	r3, [r7, #12]
   8164c:	68ba      	ldr	r2, [r7, #8]
   8164e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81650:	687b      	ldr	r3, [r7, #4]
   81652:	2b00      	cmp	r3, #0
   81654:	d003      	beq.n	8165e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81656:	68fb      	ldr	r3, [r7, #12]
   81658:	68ba      	ldr	r2, [r7, #8]
   8165a:	631a      	str	r2, [r3, #48]	; 0x30
   8165c:	e002      	b.n	81664 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8165e:	68fb      	ldr	r3, [r7, #12]
   81660:	68ba      	ldr	r2, [r7, #8]
   81662:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81664:	68fb      	ldr	r3, [r7, #12]
   81666:	68ba      	ldr	r2, [r7, #8]
   81668:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8166a:	68fb      	ldr	r3, [r7, #12]
   8166c:	68ba      	ldr	r2, [r7, #8]
   8166e:	601a      	str	r2, [r3, #0]
}
   81670:	3710      	adds	r7, #16
   81672:	46bd      	mov	sp, r7
   81674:	bd80      	pop	{r7, pc}
   81676:	bf00      	nop
   81678:	00081681 	.word	0x00081681
   8167c:	000814f5 	.word	0x000814f5

00081680 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81680:	b480      	push	{r7}
   81682:	b083      	sub	sp, #12
   81684:	af00      	add	r7, sp, #0
   81686:	6078      	str	r0, [r7, #4]
   81688:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8168a:	687b      	ldr	r3, [r7, #4]
   8168c:	683a      	ldr	r2, [r7, #0]
   8168e:	645a      	str	r2, [r3, #68]	; 0x44
}
   81690:	370c      	adds	r7, #12
   81692:	46bd      	mov	sp, r7
   81694:	f85d 7b04 	ldr.w	r7, [sp], #4
   81698:	4770      	bx	lr
   8169a:	bf00      	nop

0008169c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   8169c:	b480      	push	{r7}
   8169e:	b083      	sub	sp, #12
   816a0:	af00      	add	r7, sp, #0
   816a2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   816a4:	687b      	ldr	r3, [r7, #4]
   816a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   816a8:	4618      	mov	r0, r3
   816aa:	370c      	adds	r7, #12
   816ac:	46bd      	mov	sp, r7
   816ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   816b2:	4770      	bx	lr

000816b4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   816b4:	b480      	push	{r7}
   816b6:	b083      	sub	sp, #12
   816b8:	af00      	add	r7, sp, #0
   816ba:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   816bc:	687b      	ldr	r3, [r7, #4]
   816be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   816c0:	4618      	mov	r0, r3
   816c2:	370c      	adds	r7, #12
   816c4:	46bd      	mov	sp, r7
   816c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   816ca:	4770      	bx	lr

000816cc <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   816cc:	b480      	push	{r7}
   816ce:	b085      	sub	sp, #20
   816d0:	af00      	add	r7, sp, #0
   816d2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   816d4:	687b      	ldr	r3, [r7, #4]
   816d6:	095b      	lsrs	r3, r3, #5
   816d8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   816dc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   816e0:	025b      	lsls	r3, r3, #9
   816e2:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   816e4:	687b      	ldr	r3, [r7, #4]
   816e6:	f003 031f 	and.w	r3, r3, #31
   816ea:	2201      	movs	r2, #1
   816ec:	fa02 f303 	lsl.w	r3, r2, r3
   816f0:	461a      	mov	r2, r3
   816f2:	68fb      	ldr	r3, [r7, #12]
   816f4:	631a      	str	r2, [r3, #48]	; 0x30
}
   816f6:	3714      	adds	r7, #20
   816f8:	46bd      	mov	sp, r7
   816fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   816fe:	4770      	bx	lr

00081700 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81700:	b480      	push	{r7}
   81702:	b085      	sub	sp, #20
   81704:	af00      	add	r7, sp, #0
   81706:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81708:	687b      	ldr	r3, [r7, #4]
   8170a:	095b      	lsrs	r3, r3, #5
   8170c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81710:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81714:	025b      	lsls	r3, r3, #9
   81716:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81718:	687b      	ldr	r3, [r7, #4]
   8171a:	f003 031f 	and.w	r3, r3, #31
   8171e:	2201      	movs	r2, #1
   81720:	fa02 f303 	lsl.w	r3, r2, r3
   81724:	461a      	mov	r2, r3
   81726:	68fb      	ldr	r3, [r7, #12]
   81728:	635a      	str	r2, [r3, #52]	; 0x34
}
   8172a:	3714      	adds	r7, #20
   8172c:	46bd      	mov	sp, r7
   8172e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81732:	4770      	bx	lr

00081734 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81734:	b480      	push	{r7}
   81736:	b085      	sub	sp, #20
   81738:	af00      	add	r7, sp, #0
   8173a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8173c:	687b      	ldr	r3, [r7, #4]
   8173e:	095b      	lsrs	r3, r3, #5
   81740:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81744:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81748:	025b      	lsls	r3, r3, #9
   8174a:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8174c:	68fb      	ldr	r3, [r7, #12]
   8174e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81750:	687b      	ldr	r3, [r7, #4]
   81752:	f003 031f 	and.w	r3, r3, #31
   81756:	2101      	movs	r1, #1
   81758:	fa01 f303 	lsl.w	r3, r1, r3
   8175c:	4013      	ands	r3, r2
   8175e:	2b00      	cmp	r3, #0
   81760:	d009      	beq.n	81776 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81762:	687b      	ldr	r3, [r7, #4]
   81764:	f003 031f 	and.w	r3, r3, #31
   81768:	2201      	movs	r2, #1
   8176a:	fa02 f303 	lsl.w	r3, r2, r3
   8176e:	461a      	mov	r2, r3
   81770:	68fb      	ldr	r3, [r7, #12]
   81772:	635a      	str	r2, [r3, #52]	; 0x34
   81774:	e008      	b.n	81788 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81776:	687b      	ldr	r3, [r7, #4]
   81778:	f003 031f 	and.w	r3, r3, #31
   8177c:	2201      	movs	r2, #1
   8177e:	fa02 f303 	lsl.w	r3, r2, r3
   81782:	461a      	mov	r2, r3
   81784:	68fb      	ldr	r3, [r7, #12]
   81786:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81788:	3714      	adds	r7, #20
   8178a:	46bd      	mov	sp, r7
   8178c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81790:	4770      	bx	lr
   81792:	bf00      	nop

00081794 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81794:	b590      	push	{r4, r7, lr}
   81796:	b087      	sub	sp, #28
   81798:	af02      	add	r7, sp, #8
   8179a:	6078      	str	r0, [r7, #4]
   8179c:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8179e:	687b      	ldr	r3, [r7, #4]
   817a0:	095b      	lsrs	r3, r3, #5
   817a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   817a6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   817aa:	025b      	lsls	r3, r3, #9
   817ac:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   817ae:	683b      	ldr	r3, [r7, #0]
   817b0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   817b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   817b8:	d048      	beq.n	8184c <pio_configure_pin+0xb8>
   817ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   817be:	d806      	bhi.n	817ce <pio_configure_pin+0x3a>
   817c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   817c4:	d00a      	beq.n	817dc <pio_configure_pin+0x48>
   817c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   817ca:	d023      	beq.n	81814 <pio_configure_pin+0x80>
   817cc:	e070      	b.n	818b0 <pio_configure_pin+0x11c>
   817ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   817d2:	d047      	beq.n	81864 <pio_configure_pin+0xd0>
   817d4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   817d8:	d044      	beq.n	81864 <pio_configure_pin+0xd0>
   817da:	e069      	b.n	818b0 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   817dc:	687b      	ldr	r3, [r7, #4]
   817de:	f003 031f 	and.w	r3, r3, #31
   817e2:	2201      	movs	r2, #1
   817e4:	fa02 f303 	lsl.w	r3, r2, r3
   817e8:	68f8      	ldr	r0, [r7, #12]
   817ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817ee:	461a      	mov	r2, r3
   817f0:	4b33      	ldr	r3, [pc, #204]	; (818c0 <pio_configure_pin+0x12c>)
   817f2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   817f4:	687b      	ldr	r3, [r7, #4]
   817f6:	f003 031f 	and.w	r3, r3, #31
   817fa:	2201      	movs	r2, #1
   817fc:	fa02 f303 	lsl.w	r3, r2, r3
   81800:	461a      	mov	r2, r3
   81802:	683b      	ldr	r3, [r7, #0]
   81804:	f003 0301 	and.w	r3, r3, #1
   81808:	68f8      	ldr	r0, [r7, #12]
   8180a:	4611      	mov	r1, r2
   8180c:	461a      	mov	r2, r3
   8180e:	4b2d      	ldr	r3, [pc, #180]	; (818c4 <pio_configure_pin+0x130>)
   81810:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81812:	e04f      	b.n	818b4 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81814:	687b      	ldr	r3, [r7, #4]
   81816:	f003 031f 	and.w	r3, r3, #31
   8181a:	2201      	movs	r2, #1
   8181c:	fa02 f303 	lsl.w	r3, r2, r3
   81820:	68f8      	ldr	r0, [r7, #12]
   81822:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81826:	461a      	mov	r2, r3
   81828:	4b25      	ldr	r3, [pc, #148]	; (818c0 <pio_configure_pin+0x12c>)
   8182a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8182c:	687b      	ldr	r3, [r7, #4]
   8182e:	f003 031f 	and.w	r3, r3, #31
   81832:	2201      	movs	r2, #1
   81834:	fa02 f303 	lsl.w	r3, r2, r3
   81838:	461a      	mov	r2, r3
   8183a:	683b      	ldr	r3, [r7, #0]
   8183c:	f003 0301 	and.w	r3, r3, #1
   81840:	68f8      	ldr	r0, [r7, #12]
   81842:	4611      	mov	r1, r2
   81844:	461a      	mov	r2, r3
   81846:	4b1f      	ldr	r3, [pc, #124]	; (818c4 <pio_configure_pin+0x130>)
   81848:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8184a:	e033      	b.n	818b4 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8184c:	687b      	ldr	r3, [r7, #4]
   8184e:	f003 031f 	and.w	r3, r3, #31
   81852:	2201      	movs	r2, #1
   81854:	fa02 f303 	lsl.w	r3, r2, r3
   81858:	68f8      	ldr	r0, [r7, #12]
   8185a:	4619      	mov	r1, r3
   8185c:	683a      	ldr	r2, [r7, #0]
   8185e:	4b1a      	ldr	r3, [pc, #104]	; (818c8 <pio_configure_pin+0x134>)
   81860:	4798      	blx	r3
		break;
   81862:	e027      	b.n	818b4 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81864:	687b      	ldr	r3, [r7, #4]
   81866:	f003 031f 	and.w	r3, r3, #31
   8186a:	2201      	movs	r2, #1
   8186c:	fa02 f303 	lsl.w	r3, r2, r3
   81870:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81872:	683b      	ldr	r3, [r7, #0]
   81874:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81878:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8187c:	bf14      	ite	ne
   8187e:	2300      	movne	r3, #0
   81880:	2301      	moveq	r3, #1
   81882:	b2db      	uxtb	r3, r3
   81884:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81886:	683b      	ldr	r3, [r7, #0]
   81888:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8188c:	2b00      	cmp	r3, #0
   8188e:	bf0c      	ite	eq
   81890:	2300      	moveq	r3, #0
   81892:	2301      	movne	r3, #1
   81894:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81896:	6838      	ldr	r0, [r7, #0]
   81898:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8189c:	2800      	cmp	r0, #0
   8189e:	bf0c      	ite	eq
   818a0:	2000      	moveq	r0, #0
   818a2:	2001      	movne	r0, #1
   818a4:	b2c0      	uxtb	r0, r0
   818a6:	9000      	str	r0, [sp, #0]
   818a8:	68f8      	ldr	r0, [r7, #12]
   818aa:	4c08      	ldr	r4, [pc, #32]	; (818cc <pio_configure_pin+0x138>)
   818ac:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   818ae:	e001      	b.n	818b4 <pio_configure_pin+0x120>

	default:
		return 0;
   818b0:	2300      	movs	r3, #0
   818b2:	e000      	b.n	818b6 <pio_configure_pin+0x122>
	}

	return 1;
   818b4:	2301      	movs	r3, #1
}
   818b6:	4618      	mov	r0, r3
   818b8:	3714      	adds	r7, #20
   818ba:	46bd      	mov	sp, r7
   818bc:	bd90      	pop	{r4, r7, pc}
   818be:	bf00      	nop
   818c0:	00081521 	.word	0x00081521
   818c4:	000814f5 	.word	0x000814f5
   818c8:	000815a1 	.word	0x000815a1
   818cc:	0008161d 	.word	0x0008161d

000818d0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   818d0:	b590      	push	{r4, r7, lr}
   818d2:	b087      	sub	sp, #28
   818d4:	af02      	add	r7, sp, #8
   818d6:	60f8      	str	r0, [r7, #12]
   818d8:	60b9      	str	r1, [r7, #8]
   818da:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   818dc:	687b      	ldr	r3, [r7, #4]
   818de:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   818e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   818e6:	d02e      	beq.n	81946 <pio_configure_pin_group+0x76>
   818e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   818ec:	d806      	bhi.n	818fc <pio_configure_pin_group+0x2c>
   818ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   818f2:	d00a      	beq.n	8190a <pio_configure_pin_group+0x3a>
   818f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   818f8:	d016      	beq.n	81928 <pio_configure_pin_group+0x58>
   818fa:	e04a      	b.n	81992 <pio_configure_pin_group+0xc2>
   818fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81900:	d027      	beq.n	81952 <pio_configure_pin_group+0x82>
   81902:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81906:	d024      	beq.n	81952 <pio_configure_pin_group+0x82>
   81908:	e043      	b.n	81992 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8190a:	68f8      	ldr	r0, [r7, #12]
   8190c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81910:	68ba      	ldr	r2, [r7, #8]
   81912:	4b23      	ldr	r3, [pc, #140]	; (819a0 <pio_configure_pin_group+0xd0>)
   81914:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81916:	687b      	ldr	r3, [r7, #4]
   81918:	f003 0301 	and.w	r3, r3, #1
   8191c:	68f8      	ldr	r0, [r7, #12]
   8191e:	68b9      	ldr	r1, [r7, #8]
   81920:	461a      	mov	r2, r3
   81922:	4b20      	ldr	r3, [pc, #128]	; (819a4 <pio_configure_pin_group+0xd4>)
   81924:	4798      	blx	r3
		break;
   81926:	e036      	b.n	81996 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81928:	68f8      	ldr	r0, [r7, #12]
   8192a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8192e:	68ba      	ldr	r2, [r7, #8]
   81930:	4b1b      	ldr	r3, [pc, #108]	; (819a0 <pio_configure_pin_group+0xd0>)
   81932:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81934:	687b      	ldr	r3, [r7, #4]
   81936:	f003 0301 	and.w	r3, r3, #1
   8193a:	68f8      	ldr	r0, [r7, #12]
   8193c:	68b9      	ldr	r1, [r7, #8]
   8193e:	461a      	mov	r2, r3
   81940:	4b18      	ldr	r3, [pc, #96]	; (819a4 <pio_configure_pin_group+0xd4>)
   81942:	4798      	blx	r3
		break;
   81944:	e027      	b.n	81996 <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   81946:	68f8      	ldr	r0, [r7, #12]
   81948:	68b9      	ldr	r1, [r7, #8]
   8194a:	687a      	ldr	r2, [r7, #4]
   8194c:	4b16      	ldr	r3, [pc, #88]	; (819a8 <pio_configure_pin_group+0xd8>)
   8194e:	4798      	blx	r3
		break;
   81950:	e021      	b.n	81996 <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81952:	687b      	ldr	r3, [r7, #4]
   81954:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81958:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8195c:	bf14      	ite	ne
   8195e:	2300      	movne	r3, #0
   81960:	2301      	moveq	r3, #1
   81962:	b2db      	uxtb	r3, r3
   81964:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81966:	687b      	ldr	r3, [r7, #4]
   81968:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8196c:	2b00      	cmp	r3, #0
   8196e:	bf0c      	ite	eq
   81970:	2300      	moveq	r3, #0
   81972:	2301      	movne	r3, #1
   81974:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81976:	6879      	ldr	r1, [r7, #4]
   81978:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8197c:	2900      	cmp	r1, #0
   8197e:	bf0c      	ite	eq
   81980:	2100      	moveq	r1, #0
   81982:	2101      	movne	r1, #1
   81984:	b2c9      	uxtb	r1, r1
   81986:	9100      	str	r1, [sp, #0]
   81988:	68f8      	ldr	r0, [r7, #12]
   8198a:	68b9      	ldr	r1, [r7, #8]
   8198c:	4c07      	ldr	r4, [pc, #28]	; (819ac <pio_configure_pin_group+0xdc>)
   8198e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81990:	e001      	b.n	81996 <pio_configure_pin_group+0xc6>

	default:
		return 0;
   81992:	2300      	movs	r3, #0
   81994:	e000      	b.n	81998 <pio_configure_pin_group+0xc8>
	}

	return 1;
   81996:	2301      	movs	r3, #1
}
   81998:	4618      	mov	r0, r3
   8199a:	3714      	adds	r7, #20
   8199c:	46bd      	mov	sp, r7
   8199e:	bd90      	pop	{r4, r7, pc}
   819a0:	00081521 	.word	0x00081521
   819a4:	000814f5 	.word	0x000814f5
   819a8:	000815a1 	.word	0x000815a1
   819ac:	0008161d 	.word	0x0008161d

000819b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   819b0:	b580      	push	{r7, lr}
   819b2:	b084      	sub	sp, #16
   819b4:	af00      	add	r7, sp, #0
   819b6:	6078      	str	r0, [r7, #4]
   819b8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   819ba:	6878      	ldr	r0, [r7, #4]
   819bc:	4b22      	ldr	r3, [pc, #136]	; (81a48 <pio_handler_process+0x98>)
   819be:	4798      	blx	r3
   819c0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   819c2:	6878      	ldr	r0, [r7, #4]
   819c4:	4b21      	ldr	r3, [pc, #132]	; (81a4c <pio_handler_process+0x9c>)
   819c6:	4798      	blx	r3
   819c8:	4603      	mov	r3, r0
   819ca:	68fa      	ldr	r2, [r7, #12]
   819cc:	4013      	ands	r3, r2
   819ce:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   819d0:	68fb      	ldr	r3, [r7, #12]
   819d2:	2b00      	cmp	r3, #0
   819d4:	d035      	beq.n	81a42 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   819d6:	2300      	movs	r3, #0
   819d8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   819da:	e02f      	b.n	81a3c <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   819dc:	4a1c      	ldr	r2, [pc, #112]	; (81a50 <pio_handler_process+0xa0>)
   819de:	68bb      	ldr	r3, [r7, #8]
   819e0:	011b      	lsls	r3, r3, #4
   819e2:	4413      	add	r3, r2
   819e4:	681a      	ldr	r2, [r3, #0]
   819e6:	683b      	ldr	r3, [r7, #0]
   819e8:	429a      	cmp	r2, r3
   819ea:	d124      	bne.n	81a36 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   819ec:	4a18      	ldr	r2, [pc, #96]	; (81a50 <pio_handler_process+0xa0>)
   819ee:	68bb      	ldr	r3, [r7, #8]
   819f0:	011b      	lsls	r3, r3, #4
   819f2:	4413      	add	r3, r2
   819f4:	685a      	ldr	r2, [r3, #4]
   819f6:	68fb      	ldr	r3, [r7, #12]
   819f8:	4013      	ands	r3, r2
   819fa:	2b00      	cmp	r3, #0
   819fc:	d01b      	beq.n	81a36 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   819fe:	4a14      	ldr	r2, [pc, #80]	; (81a50 <pio_handler_process+0xa0>)
   81a00:	68bb      	ldr	r3, [r7, #8]
   81a02:	011b      	lsls	r3, r3, #4
   81a04:	4413      	add	r3, r2
   81a06:	3308      	adds	r3, #8
   81a08:	685b      	ldr	r3, [r3, #4]
   81a0a:	4911      	ldr	r1, [pc, #68]	; (81a50 <pio_handler_process+0xa0>)
   81a0c:	68ba      	ldr	r2, [r7, #8]
   81a0e:	0112      	lsls	r2, r2, #4
   81a10:	440a      	add	r2, r1
   81a12:	6811      	ldr	r1, [r2, #0]
   81a14:	480e      	ldr	r0, [pc, #56]	; (81a50 <pio_handler_process+0xa0>)
   81a16:	68ba      	ldr	r2, [r7, #8]
   81a18:	0112      	lsls	r2, r2, #4
   81a1a:	4402      	add	r2, r0
   81a1c:	6852      	ldr	r2, [r2, #4]
   81a1e:	4608      	mov	r0, r1
   81a20:	4611      	mov	r1, r2
   81a22:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81a24:	4a0a      	ldr	r2, [pc, #40]	; (81a50 <pio_handler_process+0xa0>)
   81a26:	68bb      	ldr	r3, [r7, #8]
   81a28:	011b      	lsls	r3, r3, #4
   81a2a:	4413      	add	r3, r2
   81a2c:	685b      	ldr	r3, [r3, #4]
   81a2e:	43db      	mvns	r3, r3
   81a30:	68fa      	ldr	r2, [r7, #12]
   81a32:	4013      	ands	r3, r2
   81a34:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81a36:	68bb      	ldr	r3, [r7, #8]
   81a38:	3301      	adds	r3, #1
   81a3a:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81a3c:	68fb      	ldr	r3, [r7, #12]
   81a3e:	2b00      	cmp	r3, #0
   81a40:	d1cc      	bne.n	819dc <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   81a42:	3710      	adds	r7, #16
   81a44:	46bd      	mov	sp, r7
   81a46:	bd80      	pop	{r7, pc}
   81a48:	0008169d 	.word	0x0008169d
   81a4c:	000816b5 	.word	0x000816b5
   81a50:	200705f8 	.word	0x200705f8

00081a54 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81a54:	b580      	push	{r7, lr}
   81a56:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81a58:	4802      	ldr	r0, [pc, #8]	; (81a64 <PIOA_Handler+0x10>)
   81a5a:	210b      	movs	r1, #11
   81a5c:	4b02      	ldr	r3, [pc, #8]	; (81a68 <PIOA_Handler+0x14>)
   81a5e:	4798      	blx	r3
}
   81a60:	bd80      	pop	{r7, pc}
   81a62:	bf00      	nop
   81a64:	400e0e00 	.word	0x400e0e00
   81a68:	000819b1 	.word	0x000819b1

00081a6c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81a6c:	b580      	push	{r7, lr}
   81a6e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81a70:	4802      	ldr	r0, [pc, #8]	; (81a7c <PIOB_Handler+0x10>)
   81a72:	210c      	movs	r1, #12
   81a74:	4b02      	ldr	r3, [pc, #8]	; (81a80 <PIOB_Handler+0x14>)
   81a76:	4798      	blx	r3
}
   81a78:	bd80      	pop	{r7, pc}
   81a7a:	bf00      	nop
   81a7c:	400e1000 	.word	0x400e1000
   81a80:	000819b1 	.word	0x000819b1

00081a84 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81a84:	b580      	push	{r7, lr}
   81a86:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   81a88:	4802      	ldr	r0, [pc, #8]	; (81a94 <PIOC_Handler+0x10>)
   81a8a:	210d      	movs	r1, #13
   81a8c:	4b02      	ldr	r3, [pc, #8]	; (81a98 <PIOC_Handler+0x14>)
   81a8e:	4798      	blx	r3
}
   81a90:	bd80      	pop	{r7, pc}
   81a92:	bf00      	nop
   81a94:	400e1200 	.word	0x400e1200
   81a98:	000819b1 	.word	0x000819b1

00081a9c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81a9c:	b580      	push	{r7, lr}
   81a9e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81aa0:	4802      	ldr	r0, [pc, #8]	; (81aac <PIOD_Handler+0x10>)
   81aa2:	210e      	movs	r1, #14
   81aa4:	4b02      	ldr	r3, [pc, #8]	; (81ab0 <PIOD_Handler+0x14>)
   81aa6:	4798      	blx	r3
}
   81aa8:	bd80      	pop	{r7, pc}
   81aaa:	bf00      	nop
   81aac:	400e1400 	.word	0x400e1400
   81ab0:	000819b1 	.word	0x000819b1

00081ab4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81ab4:	b480      	push	{r7}
   81ab6:	b085      	sub	sp, #20
   81ab8:	af00      	add	r7, sp, #0
   81aba:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81abc:	4b1d      	ldr	r3, [pc, #116]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81abe:	4a1d      	ldr	r2, [pc, #116]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81ac0:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81ac2:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   81ac6:	687a      	ldr	r2, [r7, #4]
   81ac8:	430a      	orrs	r2, r1
   81aca:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81ad0:	60fb      	str	r3, [r7, #12]
   81ad2:	e007      	b.n	81ae4 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81ad4:	68fb      	ldr	r3, [r7, #12]
   81ad6:	2b00      	cmp	r3, #0
   81ad8:	d101      	bne.n	81ade <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   81ada:	2301      	movs	r3, #1
   81adc:	e023      	b.n	81b26 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81ade:	68fb      	ldr	r3, [r7, #12]
   81ae0:	3b01      	subs	r3, #1
   81ae2:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81ae4:	4b13      	ldr	r3, [pc, #76]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81ae8:	f003 0308 	and.w	r3, r3, #8
   81aec:	2b00      	cmp	r3, #0
   81aee:	d0f1      	beq.n	81ad4 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81af0:	4b10      	ldr	r3, [pc, #64]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81af2:	4a10      	ldr	r2, [pc, #64]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81af4:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81af6:	f022 0203 	bic.w	r2, r2, #3
   81afa:	f042 0202 	orr.w	r2, r2, #2
   81afe:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b04:	60fb      	str	r3, [r7, #12]
   81b06:	e007      	b.n	81b18 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81b08:	68fb      	ldr	r3, [r7, #12]
   81b0a:	2b00      	cmp	r3, #0
   81b0c:	d101      	bne.n	81b12 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81b0e:	2301      	movs	r3, #1
   81b10:	e009      	b.n	81b26 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81b12:	68fb      	ldr	r3, [r7, #12]
   81b14:	3b01      	subs	r3, #1
   81b16:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b18:	4b06      	ldr	r3, [pc, #24]	; (81b34 <pmc_switch_mck_to_pllack+0x80>)
   81b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81b1c:	f003 0308 	and.w	r3, r3, #8
   81b20:	2b00      	cmp	r3, #0
   81b22:	d0f1      	beq.n	81b08 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81b24:	2300      	movs	r3, #0
}
   81b26:	4618      	mov	r0, r3
   81b28:	3714      	adds	r7, #20
   81b2a:	46bd      	mov	sp, r7
   81b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop
   81b34:	400e0600 	.word	0x400e0600

00081b38 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   81b38:	b480      	push	{r7}
   81b3a:	b083      	sub	sp, #12
   81b3c:	af00      	add	r7, sp, #0
   81b3e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81b40:	687b      	ldr	r3, [r7, #4]
   81b42:	2b01      	cmp	r3, #1
   81b44:	d107      	bne.n	81b56 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   81b46:	4a0a      	ldr	r2, [pc, #40]	; (81b70 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b48:	4b09      	ldr	r3, [pc, #36]	; (81b70 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b4a:	689b      	ldr	r3, [r3, #8]
   81b4c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81b54:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   81b56:	4a06      	ldr	r2, [pc, #24]	; (81b70 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b58:	4b05      	ldr	r3, [pc, #20]	; (81b70 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b5a:	681b      	ldr	r3, [r3, #0]
   81b5c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81b60:	f043 0308 	orr.w	r3, r3, #8
   81b64:	6013      	str	r3, [r2, #0]
}
   81b66:	370c      	adds	r7, #12
   81b68:	46bd      	mov	sp, r7
   81b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b6e:	4770      	bx	lr
   81b70:	400e1a10 	.word	0x400e1a10

00081b74 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   81b74:	b480      	push	{r7}
   81b76:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81b78:	4b09      	ldr	r3, [pc, #36]	; (81ba0 <pmc_osc_is_ready_32kxtal+0x2c>)
   81b7a:	695b      	ldr	r3, [r3, #20]
   81b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81b80:	2b00      	cmp	r3, #0
   81b82:	d007      	beq.n	81b94 <pmc_osc_is_ready_32kxtal+0x20>
   81b84:	4b07      	ldr	r3, [pc, #28]	; (81ba4 <pmc_osc_is_ready_32kxtal+0x30>)
   81b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81b8c:	2b00      	cmp	r3, #0
   81b8e:	d001      	beq.n	81b94 <pmc_osc_is_ready_32kxtal+0x20>
   81b90:	2301      	movs	r3, #1
   81b92:	e000      	b.n	81b96 <pmc_osc_is_ready_32kxtal+0x22>
   81b94:	2300      	movs	r3, #0
}
   81b96:	4618      	mov	r0, r3
   81b98:	46bd      	mov	sp, r7
   81b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b9e:	4770      	bx	lr
   81ba0:	400e1a10 	.word	0x400e1a10
   81ba4:	400e0600 	.word	0x400e0600

00081ba8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   81ba8:	b480      	push	{r7}
   81baa:	b085      	sub	sp, #20
   81bac:	af00      	add	r7, sp, #0
   81bae:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81bb0:	2300      	movs	r3, #0
   81bb2:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   81bb4:	4b21      	ldr	r3, [pc, #132]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81bb6:	6a1b      	ldr	r3, [r3, #32]
   81bb8:	f003 0301 	and.w	r3, r3, #1
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	d00e      	beq.n	81bde <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bc0:	4a1e      	ldr	r2, [pc, #120]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81bc2:	4b1e      	ldr	r3, [pc, #120]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81bc4:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   81bc6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81bca:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81bce:	6879      	ldr	r1, [r7, #4]
   81bd0:	430b      	orrs	r3, r1
   81bd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81bd6:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bda:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81bdc:	e00b      	b.n	81bf6 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   81bde:	2301      	movs	r3, #1
   81be0:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81be2:	4a16      	ldr	r2, [pc, #88]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81be4:	4b15      	ldr	r3, [pc, #84]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81be6:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   81be8:	4b15      	ldr	r3, [pc, #84]	; (81c40 <pmc_switch_mainck_to_fastrc+0x98>)
   81bea:	400b      	ands	r3, r1
   81bec:	6879      	ldr	r1, [r7, #4]
   81bee:	4319      	orrs	r1, r3
   81bf0:	4b14      	ldr	r3, [pc, #80]	; (81c44 <pmc_switch_mainck_to_fastrc+0x9c>)
   81bf2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bf4:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81bf6:	bf00      	nop
   81bf8:	4b10      	ldr	r3, [pc, #64]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81c00:	2b00      	cmp	r3, #0
   81c02:	d0f9      	beq.n	81bf8 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   81c04:	4a0d      	ldr	r2, [pc, #52]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81c06:	4b0d      	ldr	r3, [pc, #52]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81c08:	6a1b      	ldr	r3, [r3, #32]
   81c0a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   81c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81c12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81c16:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   81c18:	68fb      	ldr	r3, [r7, #12]
   81c1a:	2b00      	cmp	r3, #0
   81c1c:	d009      	beq.n	81c32 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c1e:	4a07      	ldr	r2, [pc, #28]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81c20:	4b06      	ldr	r3, [pc, #24]	; (81c3c <pmc_switch_mainck_to_fastrc+0x94>)
   81c22:	6a1b      	ldr	r3, [r3, #32]
   81c24:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81c28:	f023 0301 	bic.w	r3, r3, #1
   81c2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81c30:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   81c32:	3714      	adds	r7, #20
   81c34:	46bd      	mov	sp, r7
   81c36:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c3a:	4770      	bx	lr
   81c3c:	400e0600 	.word	0x400e0600
   81c40:	ffc8c086 	.word	0xffc8c086
   81c44:	00373f09 	.word	0x00373f09

00081c48 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   81c48:	b480      	push	{r7}
   81c4a:	b083      	sub	sp, #12
   81c4c:	af00      	add	r7, sp, #0
   81c4e:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81c50:	687b      	ldr	r3, [r7, #4]
   81c52:	2b00      	cmp	r3, #0
   81c54:	d008      	beq.n	81c68 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c56:	4912      	ldr	r1, [pc, #72]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c58:	4b11      	ldr	r3, [pc, #68]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c5a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   81c5c:	4a11      	ldr	r2, [pc, #68]	; (81ca4 <pmc_switch_mainck_to_xtal+0x5c>)
   81c5e:	401a      	ands	r2, r3
   81c60:	4b11      	ldr	r3, [pc, #68]	; (81ca8 <pmc_switch_mainck_to_xtal+0x60>)
   81c62:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c64:	620b      	str	r3, [r1, #32]
   81c66:	e016      	b.n	81c96 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c68:	490d      	ldr	r1, [pc, #52]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c6a:	4b0d      	ldr	r3, [pc, #52]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c6c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   81c6e:	4a0f      	ldr	r2, [pc, #60]	; (81cac <pmc_switch_mainck_to_xtal+0x64>)
   81c70:	401a      	ands	r2, r3
   81c72:	4b0f      	ldr	r3, [pc, #60]	; (81cb0 <pmc_switch_mainck_to_xtal+0x68>)
   81c74:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c76:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81c78:	bf00      	nop
   81c7a:	4b09      	ldr	r3, [pc, #36]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81c7e:	f003 0301 	and.w	r3, r3, #1
   81c82:	2b00      	cmp	r3, #0
   81c84:	d0f9      	beq.n	81c7a <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   81c86:	4a06      	ldr	r2, [pc, #24]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c88:	4b05      	ldr	r3, [pc, #20]	; (81ca0 <pmc_switch_mainck_to_xtal+0x58>)
   81c8a:	6a1b      	ldr	r3, [r3, #32]
   81c8c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81c94:	6213      	str	r3, [r2, #32]
	}
}
   81c96:	370c      	adds	r7, #12
   81c98:	46bd      	mov	sp, r7
   81c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c9e:	4770      	bx	lr
   81ca0:	400e0600 	.word	0x400e0600
   81ca4:	fec8fffc 	.word	0xfec8fffc
   81ca8:	01370002 	.word	0x01370002
   81cac:	ffc8c0fc 	.word	0xffc8c0fc
   81cb0:	00373f01 	.word	0x00373f01

00081cb4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81cb4:	b480      	push	{r7}
   81cb6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81cb8:	4b04      	ldr	r3, [pc, #16]	; (81ccc <pmc_osc_is_ready_mainck+0x18>)
   81cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81cc0:	4618      	mov	r0, r3
   81cc2:	46bd      	mov	sp, r7
   81cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cc8:	4770      	bx	lr
   81cca:	bf00      	nop
   81ccc:	400e0600 	.word	0x400e0600

00081cd0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81cd0:	b480      	push	{r7}
   81cd2:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81cd4:	4b03      	ldr	r3, [pc, #12]	; (81ce4 <pmc_disable_pllack+0x14>)
   81cd6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81cda:	629a      	str	r2, [r3, #40]	; 0x28
}
   81cdc:	46bd      	mov	sp, r7
   81cde:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ce2:	4770      	bx	lr
   81ce4:	400e0600 	.word	0x400e0600

00081ce8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81ce8:	b480      	push	{r7}
   81cea:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81cec:	4b04      	ldr	r3, [pc, #16]	; (81d00 <pmc_is_locked_pllack+0x18>)
   81cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81cf0:	f003 0302 	and.w	r3, r3, #2
}
   81cf4:	4618      	mov	r0, r3
   81cf6:	46bd      	mov	sp, r7
   81cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cfc:	4770      	bx	lr
   81cfe:	bf00      	nop
   81d00:	400e0600 	.word	0x400e0600

00081d04 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   81d04:	b480      	push	{r7}
   81d06:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   81d08:	4b04      	ldr	r3, [pc, #16]	; (81d1c <pmc_is_locked_upll+0x18>)
   81d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81d10:	4618      	mov	r0, r3
   81d12:	46bd      	mov	sp, r7
   81d14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d18:	4770      	bx	lr
   81d1a:	bf00      	nop
   81d1c:	400e0600 	.word	0x400e0600

00081d20 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   81d20:	b480      	push	{r7}
   81d22:	b083      	sub	sp, #12
   81d24:	af00      	add	r7, sp, #0
   81d26:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   81d28:	687b      	ldr	r3, [r7, #4]
   81d2a:	2b2c      	cmp	r3, #44	; 0x2c
   81d2c:	d901      	bls.n	81d32 <pmc_enable_periph_clk+0x12>
		return 1;
   81d2e:	2301      	movs	r3, #1
   81d30:	e02f      	b.n	81d92 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   81d32:	687b      	ldr	r3, [r7, #4]
   81d34:	2b1f      	cmp	r3, #31
   81d36:	d813      	bhi.n	81d60 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81d38:	4b19      	ldr	r3, [pc, #100]	; (81da0 <pmc_enable_periph_clk+0x80>)
   81d3a:	699a      	ldr	r2, [r3, #24]
   81d3c:	687b      	ldr	r3, [r7, #4]
   81d3e:	2101      	movs	r1, #1
   81d40:	fa01 f303 	lsl.w	r3, r1, r3
   81d44:	401a      	ands	r2, r3
   81d46:	687b      	ldr	r3, [r7, #4]
   81d48:	2101      	movs	r1, #1
   81d4a:	fa01 f303 	lsl.w	r3, r1, r3
   81d4e:	429a      	cmp	r2, r3
   81d50:	d01e      	beq.n	81d90 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   81d52:	4b13      	ldr	r3, [pc, #76]	; (81da0 <pmc_enable_periph_clk+0x80>)
   81d54:	687a      	ldr	r2, [r7, #4]
   81d56:	2101      	movs	r1, #1
   81d58:	fa01 f202 	lsl.w	r2, r1, r2
   81d5c:	611a      	str	r2, [r3, #16]
   81d5e:	e017      	b.n	81d90 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	3b20      	subs	r3, #32
   81d64:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81d66:	4b0e      	ldr	r3, [pc, #56]	; (81da0 <pmc_enable_periph_clk+0x80>)
   81d68:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81d6c:	687b      	ldr	r3, [r7, #4]
   81d6e:	2101      	movs	r1, #1
   81d70:	fa01 f303 	lsl.w	r3, r1, r3
   81d74:	401a      	ands	r2, r3
   81d76:	687b      	ldr	r3, [r7, #4]
   81d78:	2101      	movs	r1, #1
   81d7a:	fa01 f303 	lsl.w	r3, r1, r3
   81d7e:	429a      	cmp	r2, r3
   81d80:	d006      	beq.n	81d90 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   81d82:	4b07      	ldr	r3, [pc, #28]	; (81da0 <pmc_enable_periph_clk+0x80>)
   81d84:	687a      	ldr	r2, [r7, #4]
   81d86:	2101      	movs	r1, #1
   81d88:	fa01 f202 	lsl.w	r2, r1, r2
   81d8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81d90:	2300      	movs	r3, #0
}
   81d92:	4618      	mov	r0, r3
   81d94:	370c      	adds	r7, #12
   81d96:	46bd      	mov	sp, r7
   81d98:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d9c:	4770      	bx	lr
   81d9e:	bf00      	nop
   81da0:	400e0600 	.word	0x400e0600

00081da4 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
   81da4:	b480      	push	{r7}
   81da6:	b083      	sub	sp, #12
   81da8:	af00      	add	r7, sp, #0
   81daa:	6078      	str	r0, [r7, #4]
   81dac:	460b      	mov	r3, r1
   81dae:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
   81db0:	887b      	ldrh	r3, [r7, #2]
   81db2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   81db6:	687b      	ldr	r3, [r7, #4]
   81db8:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   81dba:	2300      	movs	r3, #0
}
   81dbc:	4618      	mov	r0, r3
   81dbe:	370c      	adds	r7, #12
   81dc0:	46bd      	mov	sp, r7
   81dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dc6:	4770      	bx	lr

00081dc8 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81dc8:	b480      	push	{r7}
   81dca:	b085      	sub	sp, #20
   81dcc:	af00      	add	r7, sp, #0
   81dce:	6078      	str	r0, [r7, #4]
   81dd0:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
   81dd2:	687b      	ldr	r3, [r7, #4]
   81dd4:	681b      	ldr	r3, [r3, #0]
   81dd6:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
   81dd8:	68fa      	ldr	r2, [r7, #12]
   81dda:	683b      	ldr	r3, [r7, #0]
   81ddc:	4313      	orrs	r3, r2
   81dde:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81de0:	687b      	ldr	r3, [r7, #4]
   81de2:	68fa      	ldr	r2, [r7, #12]
   81de4:	601a      	str	r2, [r3, #0]
}
   81de6:	3714      	adds	r7, #20
   81de8:	46bd      	mov	sp, r7
   81dea:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dee:	4770      	bx	lr

00081df0 <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81df0:	b480      	push	{r7}
   81df2:	b085      	sub	sp, #20
   81df4:	af00      	add	r7, sp, #0
   81df6:	6078      	str	r0, [r7, #4]
   81df8:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
   81dfa:	2300      	movs	r3, #0
   81dfc:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
   81dfe:	687b      	ldr	r3, [r7, #4]
   81e00:	681b      	ldr	r3, [r3, #0]
   81e02:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
   81e04:	683b      	ldr	r3, [r7, #0]
   81e06:	43db      	mvns	r3, r3
   81e08:	68fa      	ldr	r2, [r7, #12]
   81e0a:	4013      	ands	r3, r2
   81e0c:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81e0e:	687b      	ldr	r3, [r7, #4]
   81e10:	68fa      	ldr	r2, [r7, #12]
   81e12:	601a      	str	r2, [r3, #0]
}
   81e14:	3714      	adds	r7, #20
   81e16:	46bd      	mov	sp, r7
   81e18:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e1c:	4770      	bx	lr
   81e1e:	bf00      	nop

00081e20 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
   81e20:	b480      	push	{r7}
   81e22:	b083      	sub	sp, #12
   81e24:	af00      	add	r7, sp, #0
   81e26:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
   81e28:	687b      	ldr	r3, [r7, #4]
   81e2a:	68db      	ldr	r3, [r3, #12]
}
   81e2c:	4618      	mov	r0, r3
   81e2e:	370c      	adds	r7, #12
   81e30:	46bd      	mov	sp, r7
   81e32:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e36:	4770      	bx	lr

00081e38 <rtt_write_alarm_time>:
 *
 * \retval 0 Configuration is done.
 * \retval 1 Parameter error.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
   81e38:	b580      	push	{r7, lr}
   81e3a:	b084      	sub	sp, #16
   81e3c:	af00      	add	r7, sp, #0
   81e3e:	6078      	str	r0, [r7, #4]
   81e40:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	if (ul_alarm_time == 0) {
   81e42:	683b      	ldr	r3, [r7, #0]
   81e44:	2b00      	cmp	r3, #0
   81e46:	d101      	bne.n	81e4c <rtt_write_alarm_time+0x14>
		return 1;
   81e48:	2301      	movs	r3, #1
   81e4a:	e016      	b.n	81e7a <rtt_write_alarm_time+0x42>
	}

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
   81e4c:	687b      	ldr	r3, [r7, #4]
   81e4e:	681b      	ldr	r3, [r3, #0]
   81e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   81e54:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
   81e56:	480b      	ldr	r0, [pc, #44]	; (81e84 <rtt_write_alarm_time+0x4c>)
   81e58:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   81e5c:	4b0a      	ldr	r3, [pc, #40]	; (81e88 <rtt_write_alarm_time+0x50>)
   81e5e:	4798      	blx	r3

	/* Alarm time = ALMV + 1 */
	p_rtt->RTT_AR = ul_alarm_time - 1;
   81e60:	683b      	ldr	r3, [r7, #0]
   81e62:	1e5a      	subs	r2, r3, #1
   81e64:	687b      	ldr	r3, [r7, #4]
   81e66:	605a      	str	r2, [r3, #4]

	if (flag) {
   81e68:	68fb      	ldr	r3, [r7, #12]
   81e6a:	2b00      	cmp	r3, #0
   81e6c:	d004      	beq.n	81e78 <rtt_write_alarm_time+0x40>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
   81e6e:	4805      	ldr	r0, [pc, #20]	; (81e84 <rtt_write_alarm_time+0x4c>)
   81e70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   81e74:	4b05      	ldr	r3, [pc, #20]	; (81e8c <rtt_write_alarm_time+0x54>)
   81e76:	4798      	blx	r3
	}

	return 0;
   81e78:	2300      	movs	r3, #0
}
   81e7a:	4618      	mov	r0, r3
   81e7c:	3710      	adds	r7, #16
   81e7e:	46bd      	mov	sp, r7
   81e80:	bd80      	pop	{r7, pc}
   81e82:	bf00      	nop
   81e84:	400e1a30 	.word	0x400e1a30
   81e88:	00081df1 	.word	0x00081df1
   81e8c:	00081dc9 	.word	0x00081dc9

00081e90 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81e90:	b480      	push	{r7}
   81e92:	b089      	sub	sp, #36	; 0x24
   81e94:	af00      	add	r7, sp, #0
   81e96:	60f8      	str	r0, [r7, #12]
   81e98:	60b9      	str	r1, [r7, #8]
   81e9a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81e9c:	68bb      	ldr	r3, [r7, #8]
   81e9e:	011a      	lsls	r2, r3, #4
   81ea0:	687b      	ldr	r3, [r7, #4]
   81ea2:	429a      	cmp	r2, r3
   81ea4:	d802      	bhi.n	81eac <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81ea6:	2310      	movs	r3, #16
   81ea8:	61fb      	str	r3, [r7, #28]
   81eaa:	e001      	b.n	81eb0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81eac:	2308      	movs	r3, #8
   81eae:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81eb0:	687b      	ldr	r3, [r7, #4]
   81eb2:	00da      	lsls	r2, r3, #3
   81eb4:	69fb      	ldr	r3, [r7, #28]
   81eb6:	68b9      	ldr	r1, [r7, #8]
   81eb8:	fb01 f303 	mul.w	r3, r1, r3
   81ebc:	085b      	lsrs	r3, r3, #1
   81ebe:	441a      	add	r2, r3
   81ec0:	69fb      	ldr	r3, [r7, #28]
   81ec2:	68b9      	ldr	r1, [r7, #8]
   81ec4:	fb01 f303 	mul.w	r3, r1, r3
   81ec8:	fbb2 f3f3 	udiv	r3, r2, r3
   81ecc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81ece:	69bb      	ldr	r3, [r7, #24]
   81ed0:	08db      	lsrs	r3, r3, #3
   81ed2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81ed4:	69bb      	ldr	r3, [r7, #24]
   81ed6:	f003 0307 	and.w	r3, r3, #7
   81eda:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81edc:	697b      	ldr	r3, [r7, #20]
   81ede:	2b00      	cmp	r3, #0
   81ee0:	d003      	beq.n	81eea <usart_set_async_baudrate+0x5a>
   81ee2:	697b      	ldr	r3, [r7, #20]
   81ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81ee8:	d301      	bcc.n	81eee <usart_set_async_baudrate+0x5e>
		return 1;
   81eea:	2301      	movs	r3, #1
   81eec:	e00f      	b.n	81f0e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81eee:	69fb      	ldr	r3, [r7, #28]
   81ef0:	2b08      	cmp	r3, #8
   81ef2:	d105      	bne.n	81f00 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81ef4:	68fb      	ldr	r3, [r7, #12]
   81ef6:	685b      	ldr	r3, [r3, #4]
   81ef8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81efc:	68fb      	ldr	r3, [r7, #12]
   81efe:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81f00:	693b      	ldr	r3, [r7, #16]
   81f02:	041a      	lsls	r2, r3, #16
   81f04:	697b      	ldr	r3, [r7, #20]
   81f06:	431a      	orrs	r2, r3
   81f08:	68fb      	ldr	r3, [r7, #12]
   81f0a:	621a      	str	r2, [r3, #32]

	return 0;
   81f0c:	2300      	movs	r3, #0
}
   81f0e:	4618      	mov	r0, r3
   81f10:	3724      	adds	r7, #36	; 0x24
   81f12:	46bd      	mov	sp, r7
   81f14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f18:	4770      	bx	lr
   81f1a:	bf00      	nop

00081f1c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81f1c:	b580      	push	{r7, lr}
   81f1e:	b082      	sub	sp, #8
   81f20:	af00      	add	r7, sp, #0
   81f22:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   81f24:	6878      	ldr	r0, [r7, #4]
   81f26:	4b0d      	ldr	r3, [pc, #52]	; (81f5c <usart_reset+0x40>)
   81f28:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81f2a:	687b      	ldr	r3, [r7, #4]
   81f2c:	2200      	movs	r2, #0
   81f2e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81f30:	687b      	ldr	r3, [r7, #4]
   81f32:	2200      	movs	r2, #0
   81f34:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81f36:	687b      	ldr	r3, [r7, #4]
   81f38:	2200      	movs	r2, #0
   81f3a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   81f3c:	6878      	ldr	r0, [r7, #4]
   81f3e:	4b08      	ldr	r3, [pc, #32]	; (81f60 <usart_reset+0x44>)
   81f40:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81f42:	6878      	ldr	r0, [r7, #4]
   81f44:	4b07      	ldr	r3, [pc, #28]	; (81f64 <usart_reset+0x48>)
   81f46:	4798      	blx	r3
	usart_reset_status(p_usart);
   81f48:	6878      	ldr	r0, [r7, #4]
   81f4a:	4b07      	ldr	r3, [pc, #28]	; (81f68 <usart_reset+0x4c>)
   81f4c:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   81f4e:	6878      	ldr	r0, [r7, #4]
   81f50:	4b06      	ldr	r3, [pc, #24]	; (81f6c <usart_reset+0x50>)
   81f52:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81f54:	3708      	adds	r7, #8
   81f56:	46bd      	mov	sp, r7
   81f58:	bd80      	pop	{r7, pc}
   81f5a:	bf00      	nop
   81f5c:	000821d5 	.word	0x000821d5
   81f60:	0008200d 	.word	0x0008200d
   81f64:	0008203d 	.word	0x0008203d
   81f68:	000820a5 	.word	0x000820a5
   81f6c:	000820c1 	.word	0x000820c1

00081f70 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81f70:	b580      	push	{r7, lr}
   81f72:	b084      	sub	sp, #16
   81f74:	af00      	add	r7, sp, #0
   81f76:	60f8      	str	r0, [r7, #12]
   81f78:	60b9      	str	r1, [r7, #8]
   81f7a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81f7c:	68f8      	ldr	r0, [r7, #12]
   81f7e:	4b1a      	ldr	r3, [pc, #104]	; (81fe8 <usart_init_rs232+0x78>)
   81f80:	4798      	blx	r3

	ul_reg_val = 0;
   81f82:	4b1a      	ldr	r3, [pc, #104]	; (81fec <usart_init_rs232+0x7c>)
   81f84:	2200      	movs	r2, #0
   81f86:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81f88:	68bb      	ldr	r3, [r7, #8]
   81f8a:	2b00      	cmp	r3, #0
   81f8c:	d009      	beq.n	81fa2 <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   81f8e:	68bb      	ldr	r3, [r7, #8]
   81f90:	681b      	ldr	r3, [r3, #0]
   81f92:	68f8      	ldr	r0, [r7, #12]
   81f94:	4619      	mov	r1, r3
   81f96:	687a      	ldr	r2, [r7, #4]
   81f98:	4b15      	ldr	r3, [pc, #84]	; (81ff0 <usart_init_rs232+0x80>)
   81f9a:	4798      	blx	r3
   81f9c:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81f9e:	2b00      	cmp	r3, #0
   81fa0:	d001      	beq.n	81fa6 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   81fa2:	2301      	movs	r3, #1
   81fa4:	e01b      	b.n	81fde <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81fa6:	68bb      	ldr	r3, [r7, #8]
   81fa8:	685a      	ldr	r2, [r3, #4]
   81faa:	68bb      	ldr	r3, [r7, #8]
   81fac:	689b      	ldr	r3, [r3, #8]
   81fae:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81fb0:	68bb      	ldr	r3, [r7, #8]
   81fb2:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81fb4:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81fb6:	68bb      	ldr	r3, [r7, #8]
   81fb8:	68db      	ldr	r3, [r3, #12]
   81fba:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81fbc:	4b0b      	ldr	r3, [pc, #44]	; (81fec <usart_init_rs232+0x7c>)
   81fbe:	681b      	ldr	r3, [r3, #0]
   81fc0:	431a      	orrs	r2, r3
   81fc2:	4b0a      	ldr	r3, [pc, #40]	; (81fec <usart_init_rs232+0x7c>)
   81fc4:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81fc6:	4b09      	ldr	r3, [pc, #36]	; (81fec <usart_init_rs232+0x7c>)
   81fc8:	681a      	ldr	r2, [r3, #0]
   81fca:	4b08      	ldr	r3, [pc, #32]	; (81fec <usart_init_rs232+0x7c>)
   81fcc:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   81fce:	68fb      	ldr	r3, [r7, #12]
   81fd0:	685a      	ldr	r2, [r3, #4]
   81fd2:	4b06      	ldr	r3, [pc, #24]	; (81fec <usart_init_rs232+0x7c>)
   81fd4:	681b      	ldr	r3, [r3, #0]
   81fd6:	431a      	orrs	r2, r3
   81fd8:	68fb      	ldr	r3, [r7, #12]
   81fda:	605a      	str	r2, [r3, #4]
	
	return 0;
   81fdc:	2300      	movs	r3, #0
}
   81fde:	4618      	mov	r0, r3
   81fe0:	3710      	adds	r7, #16
   81fe2:	46bd      	mov	sp, r7
   81fe4:	bd80      	pop	{r7, pc}
   81fe6:	bf00      	nop
   81fe8:	00081f1d 	.word	0x00081f1d
   81fec:	20070668 	.word	0x20070668
   81ff0:	00081e91 	.word	0x00081e91

00081ff4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81ff4:	b480      	push	{r7}
   81ff6:	b083      	sub	sp, #12
   81ff8:	af00      	add	r7, sp, #0
   81ffa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81ffc:	687b      	ldr	r3, [r7, #4]
   81ffe:	2240      	movs	r2, #64	; 0x40
   82000:	601a      	str	r2, [r3, #0]
}
   82002:	370c      	adds	r7, #12
   82004:	46bd      	mov	sp, r7
   82006:	f85d 7b04 	ldr.w	r7, [sp], #4
   8200a:	4770      	bx	lr

0008200c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8200c:	b480      	push	{r7}
   8200e:	b083      	sub	sp, #12
   82010:	af00      	add	r7, sp, #0
   82012:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82014:	687b      	ldr	r3, [r7, #4]
   82016:	2288      	movs	r2, #136	; 0x88
   82018:	601a      	str	r2, [r3, #0]
}
   8201a:	370c      	adds	r7, #12
   8201c:	46bd      	mov	sp, r7
   8201e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82022:	4770      	bx	lr

00082024 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82024:	b480      	push	{r7}
   82026:	b083      	sub	sp, #12
   82028:	af00      	add	r7, sp, #0
   8202a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   8202c:	687b      	ldr	r3, [r7, #4]
   8202e:	2210      	movs	r2, #16
   82030:	601a      	str	r2, [r3, #0]
}
   82032:	370c      	adds	r7, #12
   82034:	46bd      	mov	sp, r7
   82036:	f85d 7b04 	ldr.w	r7, [sp], #4
   8203a:	4770      	bx	lr

0008203c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   8203c:	b480      	push	{r7}
   8203e:	b083      	sub	sp, #12
   82040:	af00      	add	r7, sp, #0
   82042:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82044:	687b      	ldr	r3, [r7, #4]
   82046:	2224      	movs	r2, #36	; 0x24
   82048:	601a      	str	r2, [r3, #0]
}
   8204a:	370c      	adds	r7, #12
   8204c:	46bd      	mov	sp, r7
   8204e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82052:	4770      	bx	lr

00082054 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82054:	b480      	push	{r7}
   82056:	b083      	sub	sp, #12
   82058:	af00      	add	r7, sp, #0
   8205a:	6078      	str	r0, [r7, #4]
   8205c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   8205e:	687b      	ldr	r3, [r7, #4]
   82060:	683a      	ldr	r2, [r7, #0]
   82062:	609a      	str	r2, [r3, #8]
}
   82064:	370c      	adds	r7, #12
   82066:	46bd      	mov	sp, r7
   82068:	f85d 7b04 	ldr.w	r7, [sp], #4
   8206c:	4770      	bx	lr
   8206e:	bf00      	nop

00082070 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82070:	b480      	push	{r7}
   82072:	b083      	sub	sp, #12
   82074:	af00      	add	r7, sp, #0
   82076:	6078      	str	r0, [r7, #4]
   82078:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8207a:	687b      	ldr	r3, [r7, #4]
   8207c:	683a      	ldr	r2, [r7, #0]
   8207e:	60da      	str	r2, [r3, #12]
}
   82080:	370c      	adds	r7, #12
   82082:	46bd      	mov	sp, r7
   82084:	f85d 7b04 	ldr.w	r7, [sp], #4
   82088:	4770      	bx	lr
   8208a:	bf00      	nop

0008208c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   8208c:	b480      	push	{r7}
   8208e:	b083      	sub	sp, #12
   82090:	af00      	add	r7, sp, #0
   82092:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   82094:	687b      	ldr	r3, [r7, #4]
   82096:	695b      	ldr	r3, [r3, #20]
}
   82098:	4618      	mov	r0, r3
   8209a:	370c      	adds	r7, #12
   8209c:	46bd      	mov	sp, r7
   8209e:	f85d 7b04 	ldr.w	r7, [sp], #4
   820a2:	4770      	bx	lr

000820a4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   820a4:	b480      	push	{r7}
   820a6:	b083      	sub	sp, #12
   820a8:	af00      	add	r7, sp, #0
   820aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   820ac:	687b      	ldr	r3, [r7, #4]
   820ae:	f44f 7280 	mov.w	r2, #256	; 0x100
   820b2:	601a      	str	r2, [r3, #0]
}
   820b4:	370c      	adds	r7, #12
   820b6:	46bd      	mov	sp, r7
   820b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   820bc:	4770      	bx	lr
   820be:	bf00      	nop

000820c0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   820c0:	b480      	push	{r7}
   820c2:	b083      	sub	sp, #12
   820c4:	af00      	add	r7, sp, #0
   820c6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   820c8:	687b      	ldr	r3, [r7, #4]
   820ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   820ce:	601a      	str	r2, [r3, #0]
}
   820d0:	370c      	adds	r7, #12
   820d2:	46bd      	mov	sp, r7
   820d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   820d8:	4770      	bx	lr
   820da:	bf00      	nop

000820dc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   820dc:	b480      	push	{r7}
   820de:	b083      	sub	sp, #12
   820e0:	af00      	add	r7, sp, #0
   820e2:	6078      	str	r0, [r7, #4]
   820e4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   820e6:	687b      	ldr	r3, [r7, #4]
   820e8:	695b      	ldr	r3, [r3, #20]
   820ea:	f003 0302 	and.w	r3, r3, #2
   820ee:	2b00      	cmp	r3, #0
   820f0:	d101      	bne.n	820f6 <usart_write+0x1a>
		return 1;
   820f2:	2301      	movs	r3, #1
   820f4:	e005      	b.n	82102 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   820f6:	683b      	ldr	r3, [r7, #0]
   820f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   820fc:	687b      	ldr	r3, [r7, #4]
   820fe:	61da      	str	r2, [r3, #28]
	return 0;
   82100:	2300      	movs	r3, #0
}
   82102:	4618      	mov	r0, r3
   82104:	370c      	adds	r7, #12
   82106:	46bd      	mov	sp, r7
   82108:	f85d 7b04 	ldr.w	r7, [sp], #4
   8210c:	4770      	bx	lr
   8210e:	bf00      	nop

00082110 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82110:	b480      	push	{r7}
   82112:	b085      	sub	sp, #20
   82114:	af00      	add	r7, sp, #0
   82116:	6078      	str	r0, [r7, #4]
   82118:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   8211a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8211e:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82120:	e006      	b.n	82130 <usart_getchar+0x20>
		if (!timeout--) {
   82122:	68fb      	ldr	r3, [r7, #12]
   82124:	1e5a      	subs	r2, r3, #1
   82126:	60fa      	str	r2, [r7, #12]
   82128:	2b00      	cmp	r3, #0
   8212a:	d101      	bne.n	82130 <usart_getchar+0x20>
			return 1;
   8212c:	2301      	movs	r3, #1
   8212e:	e00c      	b.n	8214a <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82130:	687b      	ldr	r3, [r7, #4]
   82132:	695b      	ldr	r3, [r3, #20]
   82134:	f003 0301 	and.w	r3, r3, #1
   82138:	2b00      	cmp	r3, #0
   8213a:	d0f2      	beq.n	82122 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8213c:	687b      	ldr	r3, [r7, #4]
   8213e:	699b      	ldr	r3, [r3, #24]
   82140:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82144:	683b      	ldr	r3, [r7, #0]
   82146:	601a      	str	r2, [r3, #0]

	return 0;
   82148:	2300      	movs	r3, #0
}
   8214a:	4618      	mov	r0, r3
   8214c:	3714      	adds	r7, #20
   8214e:	46bd      	mov	sp, r7
   82150:	f85d 7b04 	ldr.w	r7, [sp], #4
   82154:	4770      	bx	lr
   82156:	bf00      	nop

00082158 <usart_get_pdc_base>:
 * \param p_usart Pointer to a UART instance.
 *
 * \return USART PDC registers base for PDC driver to access.
 */
Pdc *usart_get_pdc_base(Usart *p_usart)
{
   82158:	b480      	push	{r7}
   8215a:	b085      	sub	sp, #20
   8215c:	af00      	add	r7, sp, #0
   8215e:	6078      	str	r0, [r7, #4]
	Pdc *p_pdc_base;

	p_pdc_base = (Pdc *) NULL;
   82160:	2300      	movs	r3, #0
   82162:	60fb      	str	r3, [r7, #12]

	if (p_usart == USART0) {
   82164:	687a      	ldr	r2, [r7, #4]
   82166:	4b13      	ldr	r3, [pc, #76]	; (821b4 <usart_get_pdc_base+0x5c>)
   82168:	429a      	cmp	r2, r3
   8216a:	d103      	bne.n	82174 <usart_get_pdc_base+0x1c>
		p_pdc_base = PDC_USART0;
   8216c:	4b12      	ldr	r3, [pc, #72]	; (821b8 <usart_get_pdc_base+0x60>)
   8216e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
   82170:	68fb      	ldr	r3, [r7, #12]
   82172:	e018      	b.n	821a6 <usart_get_pdc_base+0x4e>
	}
#if (SAM3S || SAM4S || SAM3XA || SAM3U)
	else if (p_usart == USART1) {
   82174:	687a      	ldr	r2, [r7, #4]
   82176:	4b11      	ldr	r3, [pc, #68]	; (821bc <usart_get_pdc_base+0x64>)
   82178:	429a      	cmp	r2, r3
   8217a:	d103      	bne.n	82184 <usart_get_pdc_base+0x2c>
		p_pdc_base = PDC_USART1;
   8217c:	4b10      	ldr	r3, [pc, #64]	; (821c0 <usart_get_pdc_base+0x68>)
   8217e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
   82180:	68fb      	ldr	r3, [r7, #12]
   82182:	e010      	b.n	821a6 <usart_get_pdc_base+0x4e>
	}
#endif
#if (SAM3SD8 || SAM3XA || SAM3U)
	else if (p_usart == USART2) {
   82184:	687a      	ldr	r2, [r7, #4]
   82186:	4b0f      	ldr	r3, [pc, #60]	; (821c4 <usart_get_pdc_base+0x6c>)
   82188:	429a      	cmp	r2, r3
   8218a:	d103      	bne.n	82194 <usart_get_pdc_base+0x3c>
		p_pdc_base = PDC_USART2;
   8218c:	4b0e      	ldr	r3, [pc, #56]	; (821c8 <usart_get_pdc_base+0x70>)
   8218e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
   82190:	68fb      	ldr	r3, [r7, #12]
   82192:	e008      	b.n	821a6 <usart_get_pdc_base+0x4e>
	}
#endif
#if (SAM3XA || SAM3U)
	else if (p_usart == USART3) {
   82194:	687a      	ldr	r2, [r7, #4]
   82196:	4b0d      	ldr	r3, [pc, #52]	; (821cc <usart_get_pdc_base+0x74>)
   82198:	429a      	cmp	r2, r3
   8219a:	d103      	bne.n	821a4 <usart_get_pdc_base+0x4c>
		p_pdc_base = PDC_USART3;
   8219c:	4b0c      	ldr	r3, [pc, #48]	; (821d0 <usart_get_pdc_base+0x78>)
   8219e:	60fb      	str	r3, [r7, #12]
		return p_pdc_base;
   821a0:	68fb      	ldr	r3, [r7, #12]
   821a2:	e000      	b.n	821a6 <usart_get_pdc_base+0x4e>
	}
#endif

	return p_pdc_base;
   821a4:	68fb      	ldr	r3, [r7, #12]
}
   821a6:	4618      	mov	r0, r3
   821a8:	3714      	adds	r7, #20
   821aa:	46bd      	mov	sp, r7
   821ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   821b0:	4770      	bx	lr
   821b2:	bf00      	nop
   821b4:	40098000 	.word	0x40098000
   821b8:	40098100 	.word	0x40098100
   821bc:	4009c000 	.word	0x4009c000
   821c0:	4009c100 	.word	0x4009c100
   821c4:	400a0000 	.word	0x400a0000
   821c8:	400a0100 	.word	0x400a0100
   821cc:	400a4000 	.word	0x400a4000
   821d0:	400a4100 	.word	0x400a4100

000821d4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   821d4:	b480      	push	{r7}
   821d6:	b083      	sub	sp, #12
   821d8:	af00      	add	r7, sp, #0
   821da:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   821dc:	687b      	ldr	r3, [r7, #4]
   821de:	4a04      	ldr	r2, [pc, #16]	; (821f0 <usart_disable_writeprotect+0x1c>)
   821e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   821e4:	370c      	adds	r7, #12
   821e6:	46bd      	mov	sp, r7
   821e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   821ec:	4770      	bx	lr
   821ee:	bf00      	nop
   821f0:	55534100 	.word	0x55534100

000821f4 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   821f4:	b480      	push	{r7}
   821f6:	b083      	sub	sp, #12
   821f8:	af00      	add	r7, sp, #0
   821fa:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   821fc:	687a      	ldr	r2, [r7, #4]
   821fe:	4b05      	ldr	r3, [pc, #20]	; (82214 <wdt_restart+0x20>)
   82200:	429a      	cmp	r2, r3
   82202:	d102      	bne.n	8220a <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82204:	687b      	ldr	r3, [r7, #4]
   82206:	4a04      	ldr	r2, [pc, #16]	; (82218 <wdt_restart+0x24>)
   82208:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   8220a:	370c      	adds	r7, #12
   8220c:	46bd      	mov	sp, r7
   8220e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82212:	4770      	bx	lr
   82214:	400e1a50 	.word	0x400e1a50
   82218:	a5000001 	.word	0xa5000001

0008221c <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   8221c:	b480      	push	{r7}
   8221e:	b083      	sub	sp, #12
   82220:	af00      	add	r7, sp, #0
   82222:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82224:	687b      	ldr	r3, [r7, #4]
   82226:	689b      	ldr	r3, [r3, #8]
}
   82228:	4618      	mov	r0, r3
   8222a:	370c      	adds	r7, #12
   8222c:	46bd      	mov	sp, r7
   8222e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82232:	4770      	bx	lr

00082234 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82234:	b480      	push	{r7}
   82236:	af00      	add	r7, sp, #0
	while (1) {
	}
   82238:	e7fe      	b.n	82238 <Dummy_Handler+0x4>
   8223a:	bf00      	nop

0008223c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8223c:	b580      	push	{r7, lr}
   8223e:	b082      	sub	sp, #8
   82240:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82242:	4b1e      	ldr	r3, [pc, #120]	; (822bc <Reset_Handler+0x80>)
   82244:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82246:	4b1e      	ldr	r3, [pc, #120]	; (822c0 <Reset_Handler+0x84>)
   82248:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8224a:	687a      	ldr	r2, [r7, #4]
   8224c:	683b      	ldr	r3, [r7, #0]
   8224e:	429a      	cmp	r2, r3
   82250:	d00c      	beq.n	8226c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82252:	e007      	b.n	82264 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82254:	683b      	ldr	r3, [r7, #0]
   82256:	1d1a      	adds	r2, r3, #4
   82258:	603a      	str	r2, [r7, #0]
   8225a:	687a      	ldr	r2, [r7, #4]
   8225c:	1d11      	adds	r1, r2, #4
   8225e:	6079      	str	r1, [r7, #4]
   82260:	6812      	ldr	r2, [r2, #0]
   82262:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82264:	683a      	ldr	r2, [r7, #0]
   82266:	4b17      	ldr	r3, [pc, #92]	; (822c4 <Reset_Handler+0x88>)
   82268:	429a      	cmp	r2, r3
   8226a:	d3f3      	bcc.n	82254 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8226c:	4b16      	ldr	r3, [pc, #88]	; (822c8 <Reset_Handler+0x8c>)
   8226e:	603b      	str	r3, [r7, #0]
   82270:	e004      	b.n	8227c <Reset_Handler+0x40>
		*pDest++ = 0;
   82272:	683b      	ldr	r3, [r7, #0]
   82274:	1d1a      	adds	r2, r3, #4
   82276:	603a      	str	r2, [r7, #0]
   82278:	2200      	movs	r2, #0
   8227a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8227c:	683a      	ldr	r2, [r7, #0]
   8227e:	4b13      	ldr	r3, [pc, #76]	; (822cc <Reset_Handler+0x90>)
   82280:	429a      	cmp	r2, r3
   82282:	d3f6      	bcc.n	82272 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82284:	4b12      	ldr	r3, [pc, #72]	; (822d0 <Reset_Handler+0x94>)
   82286:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82288:	4a12      	ldr	r2, [pc, #72]	; (822d4 <Reset_Handler+0x98>)
   8228a:	687b      	ldr	r3, [r7, #4]
   8228c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82294:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82296:	687b      	ldr	r3, [r7, #4]
   82298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8229c:	d309      	bcc.n	822b2 <Reset_Handler+0x76>
   8229e:	687a      	ldr	r2, [r7, #4]
   822a0:	4b0d      	ldr	r3, [pc, #52]	; (822d8 <Reset_Handler+0x9c>)
   822a2:	429a      	cmp	r2, r3
   822a4:	d805      	bhi.n	822b2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   822a6:	4b0b      	ldr	r3, [pc, #44]	; (822d4 <Reset_Handler+0x98>)
   822a8:	4a0a      	ldr	r2, [pc, #40]	; (822d4 <Reset_Handler+0x98>)
   822aa:	6892      	ldr	r2, [r2, #8]
   822ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   822b0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   822b2:	4b0a      	ldr	r3, [pc, #40]	; (822dc <Reset_Handler+0xa0>)
   822b4:	4798      	blx	r3

	/* Branch to main function */
	main();
   822b6:	4b0a      	ldr	r3, [pc, #40]	; (822e0 <Reset_Handler+0xa4>)
   822b8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   822ba:	e7fe      	b.n	822ba <Reset_Handler+0x7e>
   822bc:	00083594 	.word	0x00083594
   822c0:	20070000 	.word	0x20070000
   822c4:	20070440 	.word	0x20070440
   822c8:	20070440 	.word	0x20070440
   822cc:	200707a4 	.word	0x200707a4
   822d0:	00080000 	.word	0x00080000
   822d4:	e000ed00 	.word	0xe000ed00
   822d8:	200fffff 	.word	0x200fffff
   822dc:	00083315 	.word	0x00083315
   822e0:	00083169 	.word	0x00083169

000822e4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   822e4:	b480      	push	{r7}
   822e6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   822e8:	4b56      	ldr	r3, [pc, #344]	; (82444 <SystemCoreClockUpdate+0x160>)
   822ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822ec:	f003 0303 	and.w	r3, r3, #3
   822f0:	2b03      	cmp	r3, #3
   822f2:	f200 808a 	bhi.w	8240a <SystemCoreClockUpdate+0x126>
   822f6:	a101      	add	r1, pc, #4	; (adr r1, 822fc <SystemCoreClockUpdate+0x18>)
   822f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   822fc:	0008230d 	.word	0x0008230d
   82300:	0008232d 	.word	0x0008232d
   82304:	0008237d 	.word	0x0008237d
   82308:	0008237d 	.word	0x0008237d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8230c:	4b4e      	ldr	r3, [pc, #312]	; (82448 <SystemCoreClockUpdate+0x164>)
   8230e:	695b      	ldr	r3, [r3, #20]
   82310:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82314:	2b00      	cmp	r3, #0
   82316:	d004      	beq.n	82322 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82318:	4b4c      	ldr	r3, [pc, #304]	; (8244c <SystemCoreClockUpdate+0x168>)
   8231a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8231e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82320:	e073      	b.n	8240a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82322:	4b4a      	ldr	r3, [pc, #296]	; (8244c <SystemCoreClockUpdate+0x168>)
   82324:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82328:	601a      	str	r2, [r3, #0]
		}
		break;
   8232a:	e06e      	b.n	8240a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8232c:	4b45      	ldr	r3, [pc, #276]	; (82444 <SystemCoreClockUpdate+0x160>)
   8232e:	6a1b      	ldr	r3, [r3, #32]
   82330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82334:	2b00      	cmp	r3, #0
   82336:	d003      	beq.n	82340 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82338:	4b44      	ldr	r3, [pc, #272]	; (8244c <SystemCoreClockUpdate+0x168>)
   8233a:	4a45      	ldr	r2, [pc, #276]	; (82450 <SystemCoreClockUpdate+0x16c>)
   8233c:	601a      	str	r2, [r3, #0]
   8233e:	e01c      	b.n	8237a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82340:	4b42      	ldr	r3, [pc, #264]	; (8244c <SystemCoreClockUpdate+0x168>)
   82342:	4a44      	ldr	r2, [pc, #272]	; (82454 <SystemCoreClockUpdate+0x170>)
   82344:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82346:	4b3f      	ldr	r3, [pc, #252]	; (82444 <SystemCoreClockUpdate+0x160>)
   82348:	6a1b      	ldr	r3, [r3, #32]
   8234a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8234e:	2b10      	cmp	r3, #16
   82350:	d004      	beq.n	8235c <SystemCoreClockUpdate+0x78>
   82352:	2b20      	cmp	r3, #32
   82354:	d008      	beq.n	82368 <SystemCoreClockUpdate+0x84>
   82356:	2b00      	cmp	r3, #0
   82358:	d00e      	beq.n	82378 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8235a:	e00e      	b.n	8237a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8235c:	4b3b      	ldr	r3, [pc, #236]	; (8244c <SystemCoreClockUpdate+0x168>)
   8235e:	681b      	ldr	r3, [r3, #0]
   82360:	005a      	lsls	r2, r3, #1
   82362:	4b3a      	ldr	r3, [pc, #232]	; (8244c <SystemCoreClockUpdate+0x168>)
   82364:	601a      	str	r2, [r3, #0]
				break;
   82366:	e008      	b.n	8237a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82368:	4b38      	ldr	r3, [pc, #224]	; (8244c <SystemCoreClockUpdate+0x168>)
   8236a:	681a      	ldr	r2, [r3, #0]
   8236c:	4613      	mov	r3, r2
   8236e:	005b      	lsls	r3, r3, #1
   82370:	441a      	add	r2, r3
   82372:	4b36      	ldr	r3, [pc, #216]	; (8244c <SystemCoreClockUpdate+0x168>)
   82374:	601a      	str	r2, [r3, #0]
				break;
   82376:	e000      	b.n	8237a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82378:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8237a:	e046      	b.n	8240a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8237c:	4b31      	ldr	r3, [pc, #196]	; (82444 <SystemCoreClockUpdate+0x160>)
   8237e:	6a1b      	ldr	r3, [r3, #32]
   82380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82384:	2b00      	cmp	r3, #0
   82386:	d003      	beq.n	82390 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82388:	4b30      	ldr	r3, [pc, #192]	; (8244c <SystemCoreClockUpdate+0x168>)
   8238a:	4a31      	ldr	r2, [pc, #196]	; (82450 <SystemCoreClockUpdate+0x16c>)
   8238c:	601a      	str	r2, [r3, #0]
   8238e:	e01c      	b.n	823ca <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82390:	4b2e      	ldr	r3, [pc, #184]	; (8244c <SystemCoreClockUpdate+0x168>)
   82392:	4a30      	ldr	r2, [pc, #192]	; (82454 <SystemCoreClockUpdate+0x170>)
   82394:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82396:	4b2b      	ldr	r3, [pc, #172]	; (82444 <SystemCoreClockUpdate+0x160>)
   82398:	6a1b      	ldr	r3, [r3, #32]
   8239a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8239e:	2b10      	cmp	r3, #16
   823a0:	d004      	beq.n	823ac <SystemCoreClockUpdate+0xc8>
   823a2:	2b20      	cmp	r3, #32
   823a4:	d008      	beq.n	823b8 <SystemCoreClockUpdate+0xd4>
   823a6:	2b00      	cmp	r3, #0
   823a8:	d00e      	beq.n	823c8 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   823aa:	e00e      	b.n	823ca <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   823ac:	4b27      	ldr	r3, [pc, #156]	; (8244c <SystemCoreClockUpdate+0x168>)
   823ae:	681b      	ldr	r3, [r3, #0]
   823b0:	005a      	lsls	r2, r3, #1
   823b2:	4b26      	ldr	r3, [pc, #152]	; (8244c <SystemCoreClockUpdate+0x168>)
   823b4:	601a      	str	r2, [r3, #0]
				break;
   823b6:	e008      	b.n	823ca <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   823b8:	4b24      	ldr	r3, [pc, #144]	; (8244c <SystemCoreClockUpdate+0x168>)
   823ba:	681a      	ldr	r2, [r3, #0]
   823bc:	4613      	mov	r3, r2
   823be:	005b      	lsls	r3, r3, #1
   823c0:	441a      	add	r2, r3
   823c2:	4b22      	ldr	r3, [pc, #136]	; (8244c <SystemCoreClockUpdate+0x168>)
   823c4:	601a      	str	r2, [r3, #0]
				break;
   823c6:	e000      	b.n	823ca <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   823c8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   823ca:	4b1e      	ldr	r3, [pc, #120]	; (82444 <SystemCoreClockUpdate+0x160>)
   823cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823ce:	f003 0303 	and.w	r3, r3, #3
   823d2:	2b02      	cmp	r3, #2
   823d4:	d115      	bne.n	82402 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823d6:	4b1b      	ldr	r3, [pc, #108]	; (82444 <SystemCoreClockUpdate+0x160>)
   823d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   823da:	4b1f      	ldr	r3, [pc, #124]	; (82458 <SystemCoreClockUpdate+0x174>)
   823dc:	4013      	ands	r3, r2
   823de:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   823e0:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823e2:	4a1a      	ldr	r2, [pc, #104]	; (8244c <SystemCoreClockUpdate+0x168>)
   823e4:	6812      	ldr	r2, [r2, #0]
   823e6:	fb02 f203 	mul.w	r2, r2, r3
   823ea:	4b18      	ldr	r3, [pc, #96]	; (8244c <SystemCoreClockUpdate+0x168>)
   823ec:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823ee:	4b17      	ldr	r3, [pc, #92]	; (8244c <SystemCoreClockUpdate+0x168>)
   823f0:	681a      	ldr	r2, [r3, #0]
   823f2:	4b14      	ldr	r3, [pc, #80]	; (82444 <SystemCoreClockUpdate+0x160>)
   823f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   823f6:	b2db      	uxtb	r3, r3
   823f8:	fbb2 f2f3 	udiv	r2, r2, r3
   823fc:	4b13      	ldr	r3, [pc, #76]	; (8244c <SystemCoreClockUpdate+0x168>)
   823fe:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82400:	e002      	b.n	82408 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82402:	4b12      	ldr	r3, [pc, #72]	; (8244c <SystemCoreClockUpdate+0x168>)
   82404:	4a15      	ldr	r2, [pc, #84]	; (8245c <SystemCoreClockUpdate+0x178>)
   82406:	601a      	str	r2, [r3, #0]
		}
		break;
   82408:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8240a:	4b0e      	ldr	r3, [pc, #56]	; (82444 <SystemCoreClockUpdate+0x160>)
   8240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8240e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82412:	2b70      	cmp	r3, #112	; 0x70
   82414:	d108      	bne.n	82428 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82416:	4b0d      	ldr	r3, [pc, #52]	; (8244c <SystemCoreClockUpdate+0x168>)
   82418:	681a      	ldr	r2, [r3, #0]
   8241a:	4b11      	ldr	r3, [pc, #68]	; (82460 <SystemCoreClockUpdate+0x17c>)
   8241c:	fba3 1302 	umull	r1, r3, r3, r2
   82420:	085a      	lsrs	r2, r3, #1
   82422:	4b0a      	ldr	r3, [pc, #40]	; (8244c <SystemCoreClockUpdate+0x168>)
   82424:	601a      	str	r2, [r3, #0]
   82426:	e009      	b.n	8243c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82428:	4b08      	ldr	r3, [pc, #32]	; (8244c <SystemCoreClockUpdate+0x168>)
   8242a:	681a      	ldr	r2, [r3, #0]
   8242c:	4b05      	ldr	r3, [pc, #20]	; (82444 <SystemCoreClockUpdate+0x160>)
   8242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82430:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82434:	091b      	lsrs	r3, r3, #4
   82436:	40da      	lsrs	r2, r3
   82438:	4b04      	ldr	r3, [pc, #16]	; (8244c <SystemCoreClockUpdate+0x168>)
   8243a:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   8243c:	46bd      	mov	sp, r7
   8243e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82442:	4770      	bx	lr
   82444:	400e0600 	.word	0x400e0600
   82448:	400e1a10 	.word	0x400e1a10
   8244c:	2007000c 	.word	0x2007000c
   82450:	00b71b00 	.word	0x00b71b00
   82454:	003d0900 	.word	0x003d0900
   82458:	07ff0000 	.word	0x07ff0000
   8245c:	0e4e1c00 	.word	0x0e4e1c00
   82460:	aaaaaaab 	.word	0xaaaaaaab

00082464 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82464:	b480      	push	{r7}
   82466:	b083      	sub	sp, #12
   82468:	af00      	add	r7, sp, #0
   8246a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   8246c:	687a      	ldr	r2, [r7, #4]
   8246e:	4b1f      	ldr	r3, [pc, #124]	; (824ec <system_init_flash+0x88>)
   82470:	429a      	cmp	r2, r3
   82472:	d806      	bhi.n	82482 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82474:	4b1e      	ldr	r3, [pc, #120]	; (824f0 <system_init_flash+0x8c>)
   82476:	2200      	movs	r2, #0
   82478:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8247a:	4b1e      	ldr	r3, [pc, #120]	; (824f4 <system_init_flash+0x90>)
   8247c:	2200      	movs	r2, #0
   8247e:	601a      	str	r2, [r3, #0]
   82480:	e02e      	b.n	824e0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82482:	687a      	ldr	r2, [r7, #4]
   82484:	4b1c      	ldr	r3, [pc, #112]	; (824f8 <system_init_flash+0x94>)
   82486:	429a      	cmp	r2, r3
   82488:	d808      	bhi.n	8249c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8248a:	4b19      	ldr	r3, [pc, #100]	; (824f0 <system_init_flash+0x8c>)
   8248c:	f44f 7280 	mov.w	r2, #256	; 0x100
   82490:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82492:	4b18      	ldr	r3, [pc, #96]	; (824f4 <system_init_flash+0x90>)
   82494:	f44f 7280 	mov.w	r2, #256	; 0x100
   82498:	601a      	str	r2, [r3, #0]
   8249a:	e021      	b.n	824e0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   8249c:	687a      	ldr	r2, [r7, #4]
   8249e:	4b17      	ldr	r3, [pc, #92]	; (824fc <system_init_flash+0x98>)
   824a0:	429a      	cmp	r2, r3
   824a2:	d808      	bhi.n	824b6 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   824a4:	4b12      	ldr	r3, [pc, #72]	; (824f0 <system_init_flash+0x8c>)
   824a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   824aa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   824ac:	4b11      	ldr	r3, [pc, #68]	; (824f4 <system_init_flash+0x90>)
   824ae:	f44f 7200 	mov.w	r2, #512	; 0x200
   824b2:	601a      	str	r2, [r3, #0]
   824b4:	e014      	b.n	824e0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   824b6:	687a      	ldr	r2, [r7, #4]
   824b8:	4b11      	ldr	r3, [pc, #68]	; (82500 <system_init_flash+0x9c>)
   824ba:	429a      	cmp	r2, r3
   824bc:	d808      	bhi.n	824d0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   824be:	4b0c      	ldr	r3, [pc, #48]	; (824f0 <system_init_flash+0x8c>)
   824c0:	f44f 7240 	mov.w	r2, #768	; 0x300
   824c4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   824c6:	4b0b      	ldr	r3, [pc, #44]	; (824f4 <system_init_flash+0x90>)
   824c8:	f44f 7240 	mov.w	r2, #768	; 0x300
   824cc:	601a      	str	r2, [r3, #0]
   824ce:	e007      	b.n	824e0 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   824d0:	4b07      	ldr	r3, [pc, #28]	; (824f0 <system_init_flash+0x8c>)
   824d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   824d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   824d8:	4b06      	ldr	r3, [pc, #24]	; (824f4 <system_init_flash+0x90>)
   824da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   824de:	601a      	str	r2, [r3, #0]
	}
}
   824e0:	370c      	adds	r7, #12
   824e2:	46bd      	mov	sp, r7
   824e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   824e8:	4770      	bx	lr
   824ea:	bf00      	nop
   824ec:	0157529f 	.word	0x0157529f
   824f0:	400e0a00 	.word	0x400e0a00
   824f4:	400e0c00 	.word	0x400e0c00
   824f8:	0206cc7f 	.word	0x0206cc7f
   824fc:	0328b73f 	.word	0x0328b73f
   82500:	04a62f7f 	.word	0x04a62f7f

00082504 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82504:	b480      	push	{r7}
   82506:	b085      	sub	sp, #20
   82508:	af00      	add	r7, sp, #0
   8250a:	6078      	str	r0, [r7, #4]
   8250c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8250e:	687b      	ldr	r3, [r7, #4]
   82510:	685b      	ldr	r3, [r3, #4]
   82512:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82514:	683b      	ldr	r3, [r7, #0]
   82516:	68fa      	ldr	r2, [r7, #12]
   82518:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8251a:	68fb      	ldr	r3, [r7, #12]
   8251c:	689a      	ldr	r2, [r3, #8]
   8251e:	683b      	ldr	r3, [r7, #0]
   82520:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82522:	68fb      	ldr	r3, [r7, #12]
   82524:	689b      	ldr	r3, [r3, #8]
   82526:	683a      	ldr	r2, [r7, #0]
   82528:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8252a:	68fb      	ldr	r3, [r7, #12]
   8252c:	683a      	ldr	r2, [r7, #0]
   8252e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82530:	683b      	ldr	r3, [r7, #0]
   82532:	687a      	ldr	r2, [r7, #4]
   82534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82536:	687b      	ldr	r3, [r7, #4]
   82538:	681b      	ldr	r3, [r3, #0]
   8253a:	1c5a      	adds	r2, r3, #1
   8253c:	687b      	ldr	r3, [r7, #4]
   8253e:	601a      	str	r2, [r3, #0]
}
   82540:	3714      	adds	r7, #20
   82542:	46bd      	mov	sp, r7
   82544:	f85d 7b04 	ldr.w	r7, [sp], #4
   82548:	4770      	bx	lr
   8254a:	bf00      	nop

0008254c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   8254c:	b480      	push	{r7}
   8254e:	b085      	sub	sp, #20
   82550:	af00      	add	r7, sp, #0
   82552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82554:	687b      	ldr	r3, [r7, #4]
   82556:	691b      	ldr	r3, [r3, #16]
   82558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8255a:	687b      	ldr	r3, [r7, #4]
   8255c:	685b      	ldr	r3, [r3, #4]
   8255e:	687a      	ldr	r2, [r7, #4]
   82560:	6892      	ldr	r2, [r2, #8]
   82562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82564:	687b      	ldr	r3, [r7, #4]
   82566:	689b      	ldr	r3, [r3, #8]
   82568:	687a      	ldr	r2, [r7, #4]
   8256a:	6852      	ldr	r2, [r2, #4]
   8256c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8256e:	68fb      	ldr	r3, [r7, #12]
   82570:	685a      	ldr	r2, [r3, #4]
   82572:	687b      	ldr	r3, [r7, #4]
   82574:	429a      	cmp	r2, r3
   82576:	d103      	bne.n	82580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82578:	687b      	ldr	r3, [r7, #4]
   8257a:	689a      	ldr	r2, [r3, #8]
   8257c:	68fb      	ldr	r3, [r7, #12]
   8257e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82580:	687b      	ldr	r3, [r7, #4]
   82582:	2200      	movs	r2, #0
   82584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82586:	68fb      	ldr	r3, [r7, #12]
   82588:	681b      	ldr	r3, [r3, #0]
   8258a:	1e5a      	subs	r2, r3, #1
   8258c:	68fb      	ldr	r3, [r7, #12]
   8258e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82590:	68fb      	ldr	r3, [r7, #12]
   82592:	681b      	ldr	r3, [r3, #0]
}
   82594:	4618      	mov	r0, r3
   82596:	3714      	adds	r7, #20
   82598:	46bd      	mov	sp, r7
   8259a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8259e:	4770      	bx	lr

000825a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   825a0:	4b07      	ldr	r3, [pc, #28]	; (825c0 <pxCurrentTCBConst2>)
   825a2:	6819      	ldr	r1, [r3, #0]
   825a4:	6808      	ldr	r0, [r1, #0]
   825a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   825aa:	f380 8809 	msr	PSP, r0
   825ae:	f3bf 8f6f 	isb	sy
   825b2:	f04f 0000 	mov.w	r0, #0
   825b6:	f380 8811 	msr	BASEPRI, r0
   825ba:	f04e 0e0d 	orr.w	lr, lr, #13
   825be:	4770      	bx	lr

000825c0 <pxCurrentTCBConst2>:
   825c0:	2007066c 	.word	0x2007066c

000825c4 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   825c4:	b580      	push	{r7, lr}
   825c6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   825c8:	4b0c      	ldr	r3, [pc, #48]	; (825fc <vPortEnterCritical+0x38>)
   825ca:	4798      	blx	r3
	uxCriticalNesting++;
   825cc:	4b0c      	ldr	r3, [pc, #48]	; (82600 <vPortEnterCritical+0x3c>)
   825ce:	681b      	ldr	r3, [r3, #0]
   825d0:	1c5a      	adds	r2, r3, #1
   825d2:	4b0b      	ldr	r3, [pc, #44]	; (82600 <vPortEnterCritical+0x3c>)
   825d4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   825d6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   825da:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   825de:	4b08      	ldr	r3, [pc, #32]	; (82600 <vPortEnterCritical+0x3c>)
   825e0:	681b      	ldr	r3, [r3, #0]
   825e2:	2b01      	cmp	r3, #1
   825e4:	d108      	bne.n	825f8 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   825e6:	4b07      	ldr	r3, [pc, #28]	; (82604 <vPortEnterCritical+0x40>)
   825e8:	681b      	ldr	r3, [r3, #0]
   825ea:	f003 031f 	and.w	r3, r3, #31
   825ee:	2b00      	cmp	r3, #0
   825f0:	d002      	beq.n	825f8 <vPortEnterCritical+0x34>
   825f2:	4b02      	ldr	r3, [pc, #8]	; (825fc <vPortEnterCritical+0x38>)
   825f4:	4798      	blx	r3
   825f6:	e7fe      	b.n	825f6 <vPortEnterCritical+0x32>
	}
}
   825f8:	bd80      	pop	{r7, pc}
   825fa:	bf00      	nop
   825fc:	00082641 	.word	0x00082641
   82600:	20070010 	.word	0x20070010
   82604:	e000ed04 	.word	0xe000ed04

00082608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82608:	b580      	push	{r7, lr}
   8260a:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   8260c:	4b09      	ldr	r3, [pc, #36]	; (82634 <vPortExitCritical+0x2c>)
   8260e:	681b      	ldr	r3, [r3, #0]
   82610:	2b00      	cmp	r3, #0
   82612:	d102      	bne.n	8261a <vPortExitCritical+0x12>
   82614:	4b08      	ldr	r3, [pc, #32]	; (82638 <vPortExitCritical+0x30>)
   82616:	4798      	blx	r3
   82618:	e7fe      	b.n	82618 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   8261a:	4b06      	ldr	r3, [pc, #24]	; (82634 <vPortExitCritical+0x2c>)
   8261c:	681b      	ldr	r3, [r3, #0]
   8261e:	1e5a      	subs	r2, r3, #1
   82620:	4b04      	ldr	r3, [pc, #16]	; (82634 <vPortExitCritical+0x2c>)
   82622:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82624:	4b03      	ldr	r3, [pc, #12]	; (82634 <vPortExitCritical+0x2c>)
   82626:	681b      	ldr	r3, [r3, #0]
   82628:	2b00      	cmp	r3, #0
   8262a:	d102      	bne.n	82632 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   8262c:	2000      	movs	r0, #0
   8262e:	4b03      	ldr	r3, [pc, #12]	; (8263c <vPortExitCritical+0x34>)
   82630:	4798      	blx	r3
	}
}
   82632:	bd80      	pop	{r7, pc}
   82634:	20070010 	.word	0x20070010
   82638:	00082641 	.word	0x00082641
   8263c:	00082655 	.word	0x00082655

00082640 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82640:	f3ef 8011 	mrs	r0, BASEPRI
   82644:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82648:	f381 8811 	msr	BASEPRI, r1
   8264c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   8264e:	2300      	movs	r3, #0
}
   82650:	4618      	mov	r0, r3
   82652:	bf00      	nop

00082654 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82654:	f380 8811 	msr	BASEPRI, r0
   82658:	4770      	bx	lr
   8265a:	bf00      	nop

0008265c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   8265c:	f3ef 8009 	mrs	r0, PSP
   82660:	f3bf 8f6f 	isb	sy
   82664:	4b0d      	ldr	r3, [pc, #52]	; (8269c <pxCurrentTCBConst>)
   82666:	681a      	ldr	r2, [r3, #0]
   82668:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8266c:	6010      	str	r0, [r2, #0]
   8266e:	e92d 4008 	stmdb	sp!, {r3, lr}
   82672:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82676:	f380 8811 	msr	BASEPRI, r0
   8267a:	f000 f8e9 	bl	82850 <vTaskSwitchContext>
   8267e:	f04f 0000 	mov.w	r0, #0
   82682:	f380 8811 	msr	BASEPRI, r0
   82686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8268a:	6819      	ldr	r1, [r3, #0]
   8268c:	6808      	ldr	r0, [r1, #0]
   8268e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82692:	f380 8809 	msr	PSP, r0
   82696:	f3bf 8f6f 	isb	sy
   8269a:	4770      	bx	lr

0008269c <pxCurrentTCBConst>:
   8269c:	2007066c 	.word	0x2007066c

000826a0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   826a0:	b580      	push	{r7, lr}
   826a2:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   826a4:	4b07      	ldr	r3, [pc, #28]	; (826c4 <SysTick_Handler+0x24>)
   826a6:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   826a8:	4b07      	ldr	r3, [pc, #28]	; (826c8 <SysTick_Handler+0x28>)
   826aa:	4798      	blx	r3
   826ac:	4603      	mov	r3, r0
   826ae:	2b00      	cmp	r3, #0
   826b0:	d003      	beq.n	826ba <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   826b2:	4b06      	ldr	r3, [pc, #24]	; (826cc <SysTick_Handler+0x2c>)
   826b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   826b8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   826ba:	2000      	movs	r0, #0
   826bc:	4b04      	ldr	r3, [pc, #16]	; (826d0 <SysTick_Handler+0x30>)
   826be:	4798      	blx	r3
}
   826c0:	bd80      	pop	{r7, pc}
   826c2:	bf00      	nop
   826c4:	00082641 	.word	0x00082641
   826c8:	000826d5 	.word	0x000826d5
   826cc:	e000ed04 	.word	0xe000ed04
   826d0:	00082655 	.word	0x00082655

000826d4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   826d4:	b580      	push	{r7, lr}
   826d6:	b086      	sub	sp, #24
   826d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   826da:	2300      	movs	r3, #0
   826dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   826de:	4b4d      	ldr	r3, [pc, #308]	; (82814 <xTaskIncrementTick+0x140>)
   826e0:	681b      	ldr	r3, [r3, #0]
   826e2:	2b00      	cmp	r3, #0
   826e4:	f040 8086 	bne.w	827f4 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   826e8:	4b4b      	ldr	r3, [pc, #300]	; (82818 <xTaskIncrementTick+0x144>)
   826ea:	681b      	ldr	r3, [r3, #0]
   826ec:	1c5a      	adds	r2, r3, #1
   826ee:	4b4a      	ldr	r3, [pc, #296]	; (82818 <xTaskIncrementTick+0x144>)
   826f0:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   826f2:	4b49      	ldr	r3, [pc, #292]	; (82818 <xTaskIncrementTick+0x144>)
   826f4:	681b      	ldr	r3, [r3, #0]
   826f6:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   826f8:	693b      	ldr	r3, [r7, #16]
   826fa:	2b00      	cmp	r3, #0
   826fc:	d118      	bne.n	82730 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   826fe:	4b47      	ldr	r3, [pc, #284]	; (8281c <xTaskIncrementTick+0x148>)
   82700:	681b      	ldr	r3, [r3, #0]
   82702:	681b      	ldr	r3, [r3, #0]
   82704:	2b00      	cmp	r3, #0
   82706:	d002      	beq.n	8270e <xTaskIncrementTick+0x3a>
   82708:	4b45      	ldr	r3, [pc, #276]	; (82820 <xTaskIncrementTick+0x14c>)
   8270a:	4798      	blx	r3
   8270c:	e7fe      	b.n	8270c <xTaskIncrementTick+0x38>
   8270e:	4b43      	ldr	r3, [pc, #268]	; (8281c <xTaskIncrementTick+0x148>)
   82710:	681b      	ldr	r3, [r3, #0]
   82712:	60fb      	str	r3, [r7, #12]
   82714:	4b43      	ldr	r3, [pc, #268]	; (82824 <xTaskIncrementTick+0x150>)
   82716:	681a      	ldr	r2, [r3, #0]
   82718:	4b40      	ldr	r3, [pc, #256]	; (8281c <xTaskIncrementTick+0x148>)
   8271a:	601a      	str	r2, [r3, #0]
   8271c:	4b41      	ldr	r3, [pc, #260]	; (82824 <xTaskIncrementTick+0x150>)
   8271e:	68fa      	ldr	r2, [r7, #12]
   82720:	601a      	str	r2, [r3, #0]
   82722:	4b41      	ldr	r3, [pc, #260]	; (82828 <xTaskIncrementTick+0x154>)
   82724:	681b      	ldr	r3, [r3, #0]
   82726:	1c5a      	adds	r2, r3, #1
   82728:	4b3f      	ldr	r3, [pc, #252]	; (82828 <xTaskIncrementTick+0x154>)
   8272a:	601a      	str	r2, [r3, #0]
   8272c:	4b3f      	ldr	r3, [pc, #252]	; (8282c <xTaskIncrementTick+0x158>)
   8272e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   82730:	4b3f      	ldr	r3, [pc, #252]	; (82830 <xTaskIncrementTick+0x15c>)
   82732:	681b      	ldr	r3, [r3, #0]
   82734:	693a      	ldr	r2, [r7, #16]
   82736:	429a      	cmp	r2, r3
   82738:	d34d      	bcc.n	827d6 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8273a:	4b38      	ldr	r3, [pc, #224]	; (8281c <xTaskIncrementTick+0x148>)
   8273c:	681b      	ldr	r3, [r3, #0]
   8273e:	681b      	ldr	r3, [r3, #0]
   82740:	2b00      	cmp	r3, #0
   82742:	d101      	bne.n	82748 <xTaskIncrementTick+0x74>
   82744:	2301      	movs	r3, #1
   82746:	e000      	b.n	8274a <xTaskIncrementTick+0x76>
   82748:	2300      	movs	r3, #0
   8274a:	2b00      	cmp	r3, #0
   8274c:	d004      	beq.n	82758 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   8274e:	4b38      	ldr	r3, [pc, #224]	; (82830 <xTaskIncrementTick+0x15c>)
   82750:	f04f 32ff 	mov.w	r2, #4294967295
   82754:	601a      	str	r2, [r3, #0]
						break;
   82756:	e03e      	b.n	827d6 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82758:	4b30      	ldr	r3, [pc, #192]	; (8281c <xTaskIncrementTick+0x148>)
   8275a:	681b      	ldr	r3, [r3, #0]
   8275c:	68db      	ldr	r3, [r3, #12]
   8275e:	68db      	ldr	r3, [r3, #12]
   82760:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82762:	68bb      	ldr	r3, [r7, #8]
   82764:	685b      	ldr	r3, [r3, #4]
   82766:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   82768:	693a      	ldr	r2, [r7, #16]
   8276a:	687b      	ldr	r3, [r7, #4]
   8276c:	429a      	cmp	r2, r3
   8276e:	d203      	bcs.n	82778 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   82770:	4b2f      	ldr	r3, [pc, #188]	; (82830 <xTaskIncrementTick+0x15c>)
   82772:	687a      	ldr	r2, [r7, #4]
   82774:	601a      	str	r2, [r3, #0]
							break;
   82776:	e02e      	b.n	827d6 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82778:	68bb      	ldr	r3, [r7, #8]
   8277a:	3304      	adds	r3, #4
   8277c:	4618      	mov	r0, r3
   8277e:	4b2d      	ldr	r3, [pc, #180]	; (82834 <xTaskIncrementTick+0x160>)
   82780:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   82782:	68bb      	ldr	r3, [r7, #8]
   82784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82786:	2b00      	cmp	r3, #0
   82788:	d004      	beq.n	82794 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8278a:	68bb      	ldr	r3, [r7, #8]
   8278c:	3318      	adds	r3, #24
   8278e:	4618      	mov	r0, r3
   82790:	4b28      	ldr	r3, [pc, #160]	; (82834 <xTaskIncrementTick+0x160>)
   82792:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   82794:	68bb      	ldr	r3, [r7, #8]
   82796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82798:	2201      	movs	r2, #1
   8279a:	409a      	lsls	r2, r3
   8279c:	4b26      	ldr	r3, [pc, #152]	; (82838 <xTaskIncrementTick+0x164>)
   8279e:	681b      	ldr	r3, [r3, #0]
   827a0:	431a      	orrs	r2, r3
   827a2:	4b25      	ldr	r3, [pc, #148]	; (82838 <xTaskIncrementTick+0x164>)
   827a4:	601a      	str	r2, [r3, #0]
   827a6:	68bb      	ldr	r3, [r7, #8]
   827a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   827aa:	4613      	mov	r3, r2
   827ac:	009b      	lsls	r3, r3, #2
   827ae:	4413      	add	r3, r2
   827b0:	009b      	lsls	r3, r3, #2
   827b2:	4a22      	ldr	r2, [pc, #136]	; (8283c <xTaskIncrementTick+0x168>)
   827b4:	441a      	add	r2, r3
   827b6:	68bb      	ldr	r3, [r7, #8]
   827b8:	3304      	adds	r3, #4
   827ba:	4610      	mov	r0, r2
   827bc:	4619      	mov	r1, r3
   827be:	4b20      	ldr	r3, [pc, #128]	; (82840 <xTaskIncrementTick+0x16c>)
   827c0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   827c2:	68bb      	ldr	r3, [r7, #8]
   827c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   827c6:	4b1f      	ldr	r3, [pc, #124]	; (82844 <xTaskIncrementTick+0x170>)
   827c8:	681b      	ldr	r3, [r3, #0]
   827ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   827cc:	429a      	cmp	r2, r3
   827ce:	d301      	bcc.n	827d4 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   827d0:	2301      	movs	r3, #1
   827d2:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   827d4:	e7b1      	b.n	8273a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   827d6:	4b1b      	ldr	r3, [pc, #108]	; (82844 <xTaskIncrementTick+0x170>)
   827d8:	681b      	ldr	r3, [r3, #0]
   827da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   827dc:	4917      	ldr	r1, [pc, #92]	; (8283c <xTaskIncrementTick+0x168>)
   827de:	4613      	mov	r3, r2
   827e0:	009b      	lsls	r3, r3, #2
   827e2:	4413      	add	r3, r2
   827e4:	009b      	lsls	r3, r3, #2
   827e6:	440b      	add	r3, r1
   827e8:	681b      	ldr	r3, [r3, #0]
   827ea:	2b01      	cmp	r3, #1
   827ec:	d907      	bls.n	827fe <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   827ee:	2301      	movs	r3, #1
   827f0:	617b      	str	r3, [r7, #20]
   827f2:	e004      	b.n	827fe <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   827f4:	4b14      	ldr	r3, [pc, #80]	; (82848 <xTaskIncrementTick+0x174>)
   827f6:	681b      	ldr	r3, [r3, #0]
   827f8:	1c5a      	adds	r2, r3, #1
   827fa:	4b13      	ldr	r3, [pc, #76]	; (82848 <xTaskIncrementTick+0x174>)
   827fc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   827fe:	4b13      	ldr	r3, [pc, #76]	; (8284c <xTaskIncrementTick+0x178>)
   82800:	681b      	ldr	r3, [r3, #0]
   82802:	2b00      	cmp	r3, #0
   82804:	d001      	beq.n	8280a <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   82806:	2301      	movs	r3, #1
   82808:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8280a:	697b      	ldr	r3, [r7, #20]
}
   8280c:	4618      	mov	r0, r3
   8280e:	3718      	adds	r7, #24
   82810:	46bd      	mov	sp, r7
   82812:	bd80      	pop	{r7, pc}
   82814:	200706f0 	.word	0x200706f0
   82818:	200706dc 	.word	0x200706dc
   8281c:	200706d4 	.word	0x200706d4
   82820:	00082641 	.word	0x00082641
   82824:	200706d8 	.word	0x200706d8
   82828:	200706ec 	.word	0x200706ec
   8282c:	0008294d 	.word	0x0008294d
   82830:	20070014 	.word	0x20070014
   82834:	0008254d 	.word	0x0008254d
   82838:	200706e0 	.word	0x200706e0
   8283c:	20070670 	.word	0x20070670
   82840:	00082505 	.word	0x00082505
   82844:	2007066c 	.word	0x2007066c
   82848:	200706e4 	.word	0x200706e4
   8284c:	200706e8 	.word	0x200706e8

00082850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82850:	b580      	push	{r7, lr}
   82852:	b084      	sub	sp, #16
   82854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   82856:	4b34      	ldr	r3, [pc, #208]	; (82928 <vTaskSwitchContext+0xd8>)
   82858:	681b      	ldr	r3, [r3, #0]
   8285a:	2b00      	cmp	r3, #0
   8285c:	d003      	beq.n	82866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   8285e:	4b33      	ldr	r3, [pc, #204]	; (8292c <vTaskSwitchContext+0xdc>)
   82860:	2201      	movs	r2, #1
   82862:	601a      	str	r2, [r3, #0]
   82864:	e05c      	b.n	82920 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   82866:	4b31      	ldr	r3, [pc, #196]	; (8292c <vTaskSwitchContext+0xdc>)
   82868:	2200      	movs	r2, #0
   8286a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   8286c:	4b30      	ldr	r3, [pc, #192]	; (82930 <vTaskSwitchContext+0xe0>)
   8286e:	681b      	ldr	r3, [r3, #0]
   82870:	681a      	ldr	r2, [r3, #0]
   82872:	4b2f      	ldr	r3, [pc, #188]	; (82930 <vTaskSwitchContext+0xe0>)
   82874:	681b      	ldr	r3, [r3, #0]
   82876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82878:	429a      	cmp	r2, r3
   8287a:	d808      	bhi.n	8288e <vTaskSwitchContext+0x3e>
   8287c:	4b2c      	ldr	r3, [pc, #176]	; (82930 <vTaskSwitchContext+0xe0>)
   8287e:	681a      	ldr	r2, [r3, #0]
   82880:	4b2b      	ldr	r3, [pc, #172]	; (82930 <vTaskSwitchContext+0xe0>)
   82882:	681b      	ldr	r3, [r3, #0]
   82884:	3334      	adds	r3, #52	; 0x34
   82886:	4610      	mov	r0, r2
   82888:	4619      	mov	r1, r3
   8288a:	4b2a      	ldr	r3, [pc, #168]	; (82934 <vTaskSwitchContext+0xe4>)
   8288c:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   8288e:	4b28      	ldr	r3, [pc, #160]	; (82930 <vTaskSwitchContext+0xe0>)
   82890:	681b      	ldr	r3, [r3, #0]
   82892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82894:	4618      	mov	r0, r3
   82896:	4928      	ldr	r1, [pc, #160]	; (82938 <vTaskSwitchContext+0xe8>)
   82898:	2214      	movs	r2, #20
   8289a:	4b28      	ldr	r3, [pc, #160]	; (8293c <vTaskSwitchContext+0xec>)
   8289c:	4798      	blx	r3
   8289e:	4603      	mov	r3, r0
   828a0:	2b00      	cmp	r3, #0
   828a2:	d008      	beq.n	828b6 <vTaskSwitchContext+0x66>
   828a4:	4b22      	ldr	r3, [pc, #136]	; (82930 <vTaskSwitchContext+0xe0>)
   828a6:	681a      	ldr	r2, [r3, #0]
   828a8:	4b21      	ldr	r3, [pc, #132]	; (82930 <vTaskSwitchContext+0xe0>)
   828aa:	681b      	ldr	r3, [r3, #0]
   828ac:	3334      	adds	r3, #52	; 0x34
   828ae:	4610      	mov	r0, r2
   828b0:	4619      	mov	r1, r3
   828b2:	4b20      	ldr	r3, [pc, #128]	; (82934 <vTaskSwitchContext+0xe4>)
   828b4:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   828b6:	4b22      	ldr	r3, [pc, #136]	; (82940 <vTaskSwitchContext+0xf0>)
   828b8:	681b      	ldr	r3, [r3, #0]
   828ba:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   828bc:	687b      	ldr	r3, [r7, #4]
   828be:	fab3 f383 	clz	r3, r3
   828c2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   828c4:	78fb      	ldrb	r3, [r7, #3]
   828c6:	f1c3 031f 	rsb	r3, r3, #31
   828ca:	60fb      	str	r3, [r7, #12]
   828cc:	491d      	ldr	r1, [pc, #116]	; (82944 <vTaskSwitchContext+0xf4>)
   828ce:	68fa      	ldr	r2, [r7, #12]
   828d0:	4613      	mov	r3, r2
   828d2:	009b      	lsls	r3, r3, #2
   828d4:	4413      	add	r3, r2
   828d6:	009b      	lsls	r3, r3, #2
   828d8:	440b      	add	r3, r1
   828da:	681b      	ldr	r3, [r3, #0]
   828dc:	2b00      	cmp	r3, #0
   828de:	d102      	bne.n	828e6 <vTaskSwitchContext+0x96>
   828e0:	4b19      	ldr	r3, [pc, #100]	; (82948 <vTaskSwitchContext+0xf8>)
   828e2:	4798      	blx	r3
   828e4:	e7fe      	b.n	828e4 <vTaskSwitchContext+0x94>
   828e6:	68fa      	ldr	r2, [r7, #12]
   828e8:	4613      	mov	r3, r2
   828ea:	009b      	lsls	r3, r3, #2
   828ec:	4413      	add	r3, r2
   828ee:	009b      	lsls	r3, r3, #2
   828f0:	4a14      	ldr	r2, [pc, #80]	; (82944 <vTaskSwitchContext+0xf4>)
   828f2:	4413      	add	r3, r2
   828f4:	60bb      	str	r3, [r7, #8]
   828f6:	68bb      	ldr	r3, [r7, #8]
   828f8:	685b      	ldr	r3, [r3, #4]
   828fa:	685a      	ldr	r2, [r3, #4]
   828fc:	68bb      	ldr	r3, [r7, #8]
   828fe:	605a      	str	r2, [r3, #4]
   82900:	68bb      	ldr	r3, [r7, #8]
   82902:	685a      	ldr	r2, [r3, #4]
   82904:	68bb      	ldr	r3, [r7, #8]
   82906:	3308      	adds	r3, #8
   82908:	429a      	cmp	r2, r3
   8290a:	d104      	bne.n	82916 <vTaskSwitchContext+0xc6>
   8290c:	68bb      	ldr	r3, [r7, #8]
   8290e:	685b      	ldr	r3, [r3, #4]
   82910:	685a      	ldr	r2, [r3, #4]
   82912:	68bb      	ldr	r3, [r7, #8]
   82914:	605a      	str	r2, [r3, #4]
   82916:	68bb      	ldr	r3, [r7, #8]
   82918:	685b      	ldr	r3, [r3, #4]
   8291a:	68da      	ldr	r2, [r3, #12]
   8291c:	4b04      	ldr	r3, [pc, #16]	; (82930 <vTaskSwitchContext+0xe0>)
   8291e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   82920:	3710      	adds	r7, #16
   82922:	46bd      	mov	sp, r7
   82924:	bd80      	pop	{r7, pc}
   82926:	bf00      	nop
   82928:	200706f0 	.word	0x200706f0
   8292c:	200706e8 	.word	0x200706e8
   82930:	2007066c 	.word	0x2007066c
   82934:	000831b1 	.word	0x000831b1
   82938:	00083548 	.word	0x00083548
   8293c:	00083365 	.word	0x00083365
   82940:	200706e0 	.word	0x200706e0
   82944:	20070670 	.word	0x20070670
   82948:	00082641 	.word	0x00082641

0008294c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   8294c:	b480      	push	{r7}
   8294e:	b083      	sub	sp, #12
   82950:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82952:	4b0e      	ldr	r3, [pc, #56]	; (8298c <prvResetNextTaskUnblockTime+0x40>)
   82954:	681b      	ldr	r3, [r3, #0]
   82956:	681b      	ldr	r3, [r3, #0]
   82958:	2b00      	cmp	r3, #0
   8295a:	d101      	bne.n	82960 <prvResetNextTaskUnblockTime+0x14>
   8295c:	2301      	movs	r3, #1
   8295e:	e000      	b.n	82962 <prvResetNextTaskUnblockTime+0x16>
   82960:	2300      	movs	r3, #0
   82962:	2b00      	cmp	r3, #0
   82964:	d004      	beq.n	82970 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   82966:	4b0a      	ldr	r3, [pc, #40]	; (82990 <prvResetNextTaskUnblockTime+0x44>)
   82968:	f04f 32ff 	mov.w	r2, #4294967295
   8296c:	601a      	str	r2, [r3, #0]
   8296e:	e008      	b.n	82982 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82970:	4b06      	ldr	r3, [pc, #24]	; (8298c <prvResetNextTaskUnblockTime+0x40>)
   82972:	681b      	ldr	r3, [r3, #0]
   82974:	68db      	ldr	r3, [r3, #12]
   82976:	68db      	ldr	r3, [r3, #12]
   82978:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8297a:	687b      	ldr	r3, [r7, #4]
   8297c:	685a      	ldr	r2, [r3, #4]
   8297e:	4b04      	ldr	r3, [pc, #16]	; (82990 <prvResetNextTaskUnblockTime+0x44>)
   82980:	601a      	str	r2, [r3, #0]
	}
}
   82982:	370c      	adds	r7, #12
   82984:	46bd      	mov	sp, r7
   82986:	f85d 7b04 	ldr.w	r7, [sp], #4
   8298a:	4770      	bx	lr
   8298c:	200706d4 	.word	0x200706d4
   82990:	20070014 	.word	0x20070014

00082994 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   82994:	b480      	push	{r7}
   82996:	b083      	sub	sp, #12
   82998:	af00      	add	r7, sp, #0
   8299a:	4603      	mov	r3, r0
   8299c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8299e:	4b08      	ldr	r3, [pc, #32]	; (829c0 <NVIC_EnableIRQ+0x2c>)
   829a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   829a4:	0952      	lsrs	r2, r2, #5
   829a6:	79f9      	ldrb	r1, [r7, #7]
   829a8:	f001 011f 	and.w	r1, r1, #31
   829ac:	2001      	movs	r0, #1
   829ae:	fa00 f101 	lsl.w	r1, r0, r1
   829b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   829b6:	370c      	adds	r7, #12
   829b8:	46bd      	mov	sp, r7
   829ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   829be:	4770      	bx	lr
   829c0:	e000e100 	.word	0xe000e100

000829c4 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   829c4:	b480      	push	{r7}
   829c6:	b083      	sub	sp, #12
   829c8:	af00      	add	r7, sp, #0
   829ca:	4603      	mov	r3, r0
   829cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   829ce:	4b09      	ldr	r3, [pc, #36]	; (829f4 <NVIC_DisableIRQ+0x30>)
   829d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   829d4:	0952      	lsrs	r2, r2, #5
   829d6:	79f9      	ldrb	r1, [r7, #7]
   829d8:	f001 011f 	and.w	r1, r1, #31
   829dc:	2001      	movs	r0, #1
   829de:	fa00 f101 	lsl.w	r1, r0, r1
   829e2:	3220      	adds	r2, #32
   829e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   829e8:	370c      	adds	r7, #12
   829ea:	46bd      	mov	sp, r7
   829ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   829f0:	4770      	bx	lr
   829f2:	bf00      	nop
   829f4:	e000e100 	.word	0xe000e100

000829f8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   829f8:	b480      	push	{r7}
   829fa:	b083      	sub	sp, #12
   829fc:	af00      	add	r7, sp, #0
   829fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82a00:	687b      	ldr	r3, [r7, #4]
   82a02:	2b07      	cmp	r3, #7
   82a04:	d825      	bhi.n	82a52 <osc_get_rate+0x5a>
   82a06:	a201      	add	r2, pc, #4	; (adr r2, 82a0c <osc_get_rate+0x14>)
   82a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82a0c:	00082a2d 	.word	0x00082a2d
   82a10:	00082a33 	.word	0x00082a33
   82a14:	00082a39 	.word	0x00082a39
   82a18:	00082a3f 	.word	0x00082a3f
   82a1c:	00082a43 	.word	0x00082a43
   82a20:	00082a47 	.word	0x00082a47
   82a24:	00082a4b 	.word	0x00082a4b
   82a28:	00082a4f 	.word	0x00082a4f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82a2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82a30:	e010      	b.n	82a54 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82a36:	e00d      	b.n	82a54 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82a3c:	e00a      	b.n	82a54 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82a3e:	4b08      	ldr	r3, [pc, #32]	; (82a60 <osc_get_rate+0x68>)
   82a40:	e008      	b.n	82a54 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82a42:	4b08      	ldr	r3, [pc, #32]	; (82a64 <osc_get_rate+0x6c>)
   82a44:	e006      	b.n	82a54 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82a46:	4b08      	ldr	r3, [pc, #32]	; (82a68 <osc_get_rate+0x70>)
   82a48:	e004      	b.n	82a54 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82a4a:	4b07      	ldr	r3, [pc, #28]	; (82a68 <osc_get_rate+0x70>)
   82a4c:	e002      	b.n	82a54 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82a4e:	4b06      	ldr	r3, [pc, #24]	; (82a68 <osc_get_rate+0x70>)
   82a50:	e000      	b.n	82a54 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82a52:	2300      	movs	r3, #0
}
   82a54:	4618      	mov	r0, r3
   82a56:	370c      	adds	r7, #12
   82a58:	46bd      	mov	sp, r7
   82a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a5e:	4770      	bx	lr
   82a60:	003d0900 	.word	0x003d0900
   82a64:	007a1200 	.word	0x007a1200
   82a68:	00b71b00 	.word	0x00b71b00

00082a6c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82a6c:	b580      	push	{r7, lr}
   82a6e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   82a70:	2006      	movs	r0, #6
   82a72:	4b04      	ldr	r3, [pc, #16]	; (82a84 <sysclk_get_main_hz+0x18>)
   82a74:	4798      	blx	r3
   82a76:	4602      	mov	r2, r0
   82a78:	4613      	mov	r3, r2
   82a7a:	00db      	lsls	r3, r3, #3
   82a7c:	1a9b      	subs	r3, r3, r2
   82a7e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82a80:	4618      	mov	r0, r3
   82a82:	bd80      	pop	{r7, pc}
   82a84:	000829f9 	.word	0x000829f9

00082a88 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82a88:	b580      	push	{r7, lr}
   82a8a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   82a8c:	4b02      	ldr	r3, [pc, #8]	; (82a98 <sysclk_get_cpu_hz+0x10>)
   82a8e:	4798      	blx	r3
   82a90:	4603      	mov	r3, r0
   82a92:	085b      	lsrs	r3, r3, #1
}
   82a94:	4618      	mov	r0, r3
   82a96:	bd80      	pop	{r7, pc}
   82a98:	00082a6d 	.word	0x00082a6d

00082a9c <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   82a9c:	b580      	push	{r7, lr}
   82a9e:	b082      	sub	sp, #8
   82aa0:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   82aa2:	481b      	ldr	r0, [pc, #108]	; (82b10 <CAN1_Handler+0x74>)
   82aa4:	491b      	ldr	r1, [pc, #108]	; (82b14 <CAN1_Handler+0x78>)
   82aa6:	4b1c      	ldr	r3, [pc, #112]	; (82b18 <CAN1_Handler+0x7c>)
   82aa8:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   82aaa:	481c      	ldr	r0, [pc, #112]	; (82b1c <CAN1_Handler+0x80>)
   82aac:	4b1c      	ldr	r3, [pc, #112]	; (82b20 <CAN1_Handler+0x84>)
   82aae:	4798      	blx	r3
   82ab0:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   82ab2:	683b      	ldr	r3, [r7, #0]
   82ab4:	b2db      	uxtb	r3, r3
   82ab6:	2b00      	cmp	r3, #0
   82ab8:	d026      	beq.n	82b08 <CAN1_Handler+0x6c>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82aba:	2300      	movs	r3, #0
   82abc:	71fb      	strb	r3, [r7, #7]
   82abe:	e020      	b.n	82b02 <CAN1_Handler+0x66>
			ul_status = can_mailbox_get_status(CAN1, i);
   82ac0:	79fb      	ldrb	r3, [r7, #7]
   82ac2:	4816      	ldr	r0, [pc, #88]	; (82b1c <CAN1_Handler+0x80>)
   82ac4:	4619      	mov	r1, r3
   82ac6:	4b17      	ldr	r3, [pc, #92]	; (82b24 <CAN1_Handler+0x88>)
   82ac8:	4798      	blx	r3
   82aca:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   82acc:	683b      	ldr	r3, [r7, #0]
   82ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82ad2:	2b00      	cmp	r3, #0
   82ad4:	d012      	beq.n	82afc <CAN1_Handler+0x60>
				can1_mailbox.ul_mb_idx = i;
   82ad6:	79fa      	ldrb	r2, [r7, #7]
   82ad8:	4b0d      	ldr	r3, [pc, #52]	; (82b10 <CAN1_Handler+0x74>)
   82ada:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   82adc:	4b0c      	ldr	r3, [pc, #48]	; (82b10 <CAN1_Handler+0x74>)
   82ade:	683a      	ldr	r2, [r7, #0]
   82ae0:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   82ae2:	480e      	ldr	r0, [pc, #56]	; (82b1c <CAN1_Handler+0x80>)
   82ae4:	490a      	ldr	r1, [pc, #40]	; (82b10 <CAN1_Handler+0x74>)
   82ae6:	4b10      	ldr	r3, [pc, #64]	; (82b28 <CAN1_Handler+0x8c>)
   82ae8:	4798      	blx	r3
				
				/* Decode CAN Message */
				decode_can_msg(&can1_mailbox, CAN1);
   82aea:	4809      	ldr	r0, [pc, #36]	; (82b10 <CAN1_Handler+0x74>)
   82aec:	490b      	ldr	r1, [pc, #44]	; (82b1c <CAN1_Handler+0x80>)
   82aee:	4b0f      	ldr	r3, [pc, #60]	; (82b2c <CAN1_Handler+0x90>)
   82af0:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   82af2:	4807      	ldr	r0, [pc, #28]	; (82b10 <CAN1_Handler+0x74>)
   82af4:	4907      	ldr	r1, [pc, #28]	; (82b14 <CAN1_Handler+0x78>)
   82af6:	4b0e      	ldr	r3, [pc, #56]	; (82b30 <CAN1_Handler+0x94>)
   82af8:	4798      	blx	r3
				break;
   82afa:	e005      	b.n	82b08 <CAN1_Handler+0x6c>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82afc:	79fb      	ldrb	r3, [r7, #7]
   82afe:	3301      	adds	r3, #1
   82b00:	71fb      	strb	r3, [r7, #7]
   82b02:	79fb      	ldrb	r3, [r7, #7]
   82b04:	2b07      	cmp	r3, #7
   82b06:	d9db      	bls.n	82ac0 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   82b08:	3708      	adds	r7, #8
   82b0a:	46bd      	mov	sp, r7
   82b0c:	bd80      	pop	{r7, pc}
   82b0e:	bf00      	nop
   82b10:	200706f8 	.word	0x200706f8
   82b14:	20070720 	.word	0x20070720
   82b18:	00082e9d 	.word	0x00082e9d
   82b1c:	400b8000 	.word	0x400b8000
   82b20:	00081171 	.word	0x00081171
   82b24:	000811b5 	.word	0x000811b5
   82b28:	00081335 	.word	0x00081335
   82b2c:	00082bd5 	.word	0x00082bd5
   82b30:	00082f0d 	.word	0x00082f0d

00082b34 <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN0
 */
void CAN0_Handler(void)
{
   82b34:	b580      	push	{r7, lr}
   82b36:	b082      	sub	sp, #8
   82b38:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   82b3a:	481c      	ldr	r0, [pc, #112]	; (82bac <CAN0_Handler+0x78>)
   82b3c:	491c      	ldr	r1, [pc, #112]	; (82bb0 <CAN0_Handler+0x7c>)
   82b3e:	4b1d      	ldr	r3, [pc, #116]	; (82bb4 <CAN0_Handler+0x80>)
   82b40:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   82b42:	481d      	ldr	r0, [pc, #116]	; (82bb8 <CAN0_Handler+0x84>)
   82b44:	4b1d      	ldr	r3, [pc, #116]	; (82bbc <CAN0_Handler+0x88>)
   82b46:	4798      	blx	r3
   82b48:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   82b4a:	683b      	ldr	r3, [r7, #0]
   82b4c:	b2db      	uxtb	r3, r3
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d029      	beq.n	82ba6 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82b52:	2300      	movs	r3, #0
   82b54:	71fb      	strb	r3, [r7, #7]
   82b56:	e023      	b.n	82ba0 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   82b58:	79fb      	ldrb	r3, [r7, #7]
   82b5a:	4817      	ldr	r0, [pc, #92]	; (82bb8 <CAN0_Handler+0x84>)
   82b5c:	4619      	mov	r1, r3
   82b5e:	4b18      	ldr	r3, [pc, #96]	; (82bc0 <CAN0_Handler+0x8c>)
   82b60:	4798      	blx	r3
   82b62:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   82b64:	683b      	ldr	r3, [r7, #0]
   82b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82b6a:	2b00      	cmp	r3, #0
   82b6c:	d015      	beq.n	82b9a <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   82b6e:	79fa      	ldrb	r2, [r7, #7]
   82b70:	4b0e      	ldr	r3, [pc, #56]	; (82bac <CAN0_Handler+0x78>)
   82b72:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   82b74:	4b0d      	ldr	r3, [pc, #52]	; (82bac <CAN0_Handler+0x78>)
   82b76:	683a      	ldr	r2, [r7, #0]
   82b78:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   82b7a:	480f      	ldr	r0, [pc, #60]	; (82bb8 <CAN0_Handler+0x84>)
   82b7c:	490b      	ldr	r1, [pc, #44]	; (82bac <CAN0_Handler+0x78>)
   82b7e:	4b11      	ldr	r3, [pc, #68]	; (82bc4 <CAN0_Handler+0x90>)
   82b80:	4798      	blx	r3
				g_ul_recv_status = 1;
   82b82:	4b11      	ldr	r3, [pc, #68]	; (82bc8 <CAN0_Handler+0x94>)
   82b84:	2201      	movs	r2, #1
   82b86:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   82b88:	4808      	ldr	r0, [pc, #32]	; (82bac <CAN0_Handler+0x78>)
   82b8a:	490b      	ldr	r1, [pc, #44]	; (82bb8 <CAN0_Handler+0x84>)
   82b8c:	4b0f      	ldr	r3, [pc, #60]	; (82bcc <CAN0_Handler+0x98>)
   82b8e:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   82b90:	4806      	ldr	r0, [pc, #24]	; (82bac <CAN0_Handler+0x78>)
   82b92:	4907      	ldr	r1, [pc, #28]	; (82bb0 <CAN0_Handler+0x7c>)
   82b94:	4b0e      	ldr	r3, [pc, #56]	; (82bd0 <CAN0_Handler+0x9c>)
   82b96:	4798      	blx	r3
				break;
   82b98:	e005      	b.n	82ba6 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82b9a:	79fb      	ldrb	r3, [r7, #7]
   82b9c:	3301      	adds	r3, #1
   82b9e:	71fb      	strb	r3, [r7, #7]
   82ba0:	79fb      	ldrb	r3, [r7, #7]
   82ba2:	2b07      	cmp	r3, #7
   82ba4:	d9d8      	bls.n	82b58 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   82ba6:	3708      	adds	r7, #8
   82ba8:	46bd      	mov	sp, r7
   82baa:	bd80      	pop	{r7, pc}
   82bac:	20070740 	.word	0x20070740
   82bb0:	20070760 	.word	0x20070760
   82bb4:	00082e9d 	.word	0x00082e9d
   82bb8:	400b4000 	.word	0x400b4000
   82bbc:	00081171 	.word	0x00081171
   82bc0:	000811b5 	.word	0x000811b5
   82bc4:	00081335 	.word	0x00081335
   82bc8:	200706f4 	.word	0x200706f4
   82bcc:	00082bd5 	.word	0x00082bd5
   82bd0:	00082f0d 	.word	0x00082f0d

00082bd4 <decode_can_msg>:
 * the message received.
 * @param *controller:  	CAN sending controller
 * @param *p_mailbox:		CAN mailbox structure of sending controller
 */
void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   82bd4:	b580      	push	{r7, lr}
   82bd6:	b084      	sub	sp, #16
   82bd8:	af00      	add	r7, sp, #0
   82bda:	6078      	str	r0, [r7, #4]
   82bdc:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   82bde:	687b      	ldr	r3, [r7, #4]
   82be0:	699b      	ldr	r3, [r3, #24]
   82be2:	60fb      	str	r3, [r7, #12]
	if(controller == CAN0)
   82be4:	683a      	ldr	r2, [r7, #0]
   82be6:	4b56      	ldr	r3, [pc, #344]	; (82d40 <decode_can_msg+0x16c>)
   82be8:	429a      	cmp	r2, r3
   82bea:	d102      	bne.n	82bf2 <decode_can_msg+0x1e>
		pio_toggle_pin(LED0_GPIO);
   82bec:	203b      	movs	r0, #59	; 0x3b
   82bee:	4b55      	ldr	r3, [pc, #340]	; (82d44 <decode_can_msg+0x170>)
   82bf0:	4798      	blx	r3
	if(controller == CAN1)
   82bf2:	683a      	ldr	r2, [r7, #0]
   82bf4:	4b54      	ldr	r3, [pc, #336]	; (82d48 <decode_can_msg+0x174>)
   82bf6:	429a      	cmp	r2, r3
   82bf8:	d102      	bne.n	82c00 <decode_can_msg+0x2c>
		pio_toggle_pin(LED1_GPIO);
   82bfa:	2055      	movs	r0, #85	; 0x55
   82bfc:	4b51      	ldr	r3, [pc, #324]	; (82d44 <decode_can_msg+0x170>)
   82bfe:	4798      	blx	r3
	if (ul_data_incom == COMMAND_OUT)
   82c00:	68fb      	ldr	r3, [r7, #12]
   82c02:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   82c06:	d102      	bne.n	82c0e <decode_can_msg+0x3a>
		pio_toggle_pin(LED0_GPIO);
   82c08:	203b      	movs	r0, #59	; 0x3b
   82c0a:	4b4e      	ldr	r3, [pc, #312]	; (82d44 <decode_can_msg+0x170>)
   82c0c:	4798      	blx	r3
	if (ul_data_incom == COMMAND_IN)
   82c0e:	68fb      	ldr	r3, [r7, #12]
   82c10:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   82c14:	d102      	bne.n	82c1c <decode_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);
   82c16:	2055      	movs	r0, #85	; 0x55
   82c18:	4b4a      	ldr	r3, [pc, #296]	; (82d44 <decode_can_msg+0x170>)
   82c1a:	4798      	blx	r3
	if (ul_data_incom == DUMMY_COMMAND)
   82c1c:	68fb      	ldr	r3, [r7, #12]
   82c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82c22:	d102      	bne.n	82c2a <decode_can_msg+0x56>
		pio_toggle_pin(LED1_GPIO);
   82c24:	2055      	movs	r0, #85	; 0x55
   82c26:	4b47      	ldr	r3, [pc, #284]	; (82d44 <decode_can_msg+0x170>)
   82c28:	4798      	blx	r3
	if (ul_data_incom == MSG_ACK)
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   82c30:	d102      	bne.n	82c38 <decode_can_msg+0x64>
		pio_toggle_pin(LED1_GPIO);
   82c32:	2055      	movs	r0, #85	; 0x55
   82c34:	4b43      	ldr	r3, [pc, #268]	; (82d44 <decode_can_msg+0x170>)
   82c36:	4798      	blx	r3

	if ((ul_data_incom == COMMAND_IN) & (controller == CAN0)) 
   82c38:	68fb      	ldr	r3, [r7, #12]
   82c3a:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   82c3e:	bf14      	ite	ne
   82c40:	2300      	movne	r3, #0
   82c42:	2301      	moveq	r3, #1
   82c44:	b2da      	uxtb	r2, r3
   82c46:	6839      	ldr	r1, [r7, #0]
   82c48:	4b3d      	ldr	r3, [pc, #244]	; (82d40 <decode_can_msg+0x16c>)
   82c4a:	4299      	cmp	r1, r3
   82c4c:	bf14      	ite	ne
   82c4e:	2300      	movne	r3, #0
   82c50:	2301      	moveq	r3, #1
   82c52:	b2db      	uxtb	r3, r3
   82c54:	4013      	ands	r3, r2
   82c56:	b2db      	uxtb	r3, r3
   82c58:	2b00      	cmp	r3, #0
   82c5a:	d004      	beq.n	82c66 <decode_can_msg+0x92>
	{
		// Command has been received, respond.
		pio_toggle_pin(LED0_GPIO);
   82c5c:	203b      	movs	r0, #59	; 0x3b
   82c5e:	4b39      	ldr	r3, [pc, #228]	; (82d44 <decode_can_msg+0x170>)
   82c60:	4798      	blx	r3
		command_in();
   82c62:	4b3a      	ldr	r3, [pc, #232]	; (82d4c <decode_can_msg+0x178>)
   82c64:	4798      	blx	r3
	}
	if ((ul_data_incom == COMMAND_OUT) & (controller == CAN1))
   82c66:	68fb      	ldr	r3, [r7, #12]
   82c68:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   82c6c:	bf14      	ite	ne
   82c6e:	2300      	movne	r3, #0
   82c70:	2301      	moveq	r3, #1
   82c72:	b2da      	uxtb	r2, r3
   82c74:	6839      	ldr	r1, [r7, #0]
   82c76:	4b34      	ldr	r3, [pc, #208]	; (82d48 <decode_can_msg+0x174>)
   82c78:	4299      	cmp	r1, r3
   82c7a:	bf14      	ite	ne
   82c7c:	2300      	movne	r3, #0
   82c7e:	2301      	moveq	r3, #1
   82c80:	b2db      	uxtb	r3, r3
   82c82:	4013      	ands	r3, r2
   82c84:	b2db      	uxtb	r3, r3
   82c86:	2b00      	cmp	r3, #0
   82c88:	d002      	beq.n	82c90 <decode_can_msg+0xbc>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the response to the command
   82c8a:	2056      	movs	r0, #86	; 0x56
   82c8c:	4b2d      	ldr	r3, [pc, #180]	; (82d44 <decode_can_msg+0x170>)
   82c8e:	4798      	blx	r3
	}								// has been received.
	if ((ul_data_incom == HK_TRANSMIT) & (controller == CAN1))
   82c90:	68fa      	ldr	r2, [r7, #12]
   82c92:	4b2f      	ldr	r3, [pc, #188]	; (82d50 <decode_can_msg+0x17c>)
   82c94:	429a      	cmp	r2, r3
   82c96:	bf14      	ite	ne
   82c98:	2300      	movne	r3, #0
   82c9a:	2301      	moveq	r3, #1
   82c9c:	b2da      	uxtb	r2, r3
   82c9e:	6839      	ldr	r1, [r7, #0]
   82ca0:	4b29      	ldr	r3, [pc, #164]	; (82d48 <decode_can_msg+0x174>)
   82ca2:	4299      	cmp	r1, r3
   82ca4:	bf14      	ite	ne
   82ca6:	2300      	movne	r3, #0
   82ca8:	2301      	moveq	r3, #1
   82caa:	b2db      	uxtb	r3, r3
   82cac:	4013      	ands	r3, r2
   82cae:	b2db      	uxtb	r3, r3
   82cb0:	2b00      	cmp	r3, #0
   82cb2:	d002      	beq.n	82cba <decode_can_msg+0xe6>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   82cb4:	2057      	movs	r0, #87	; 0x57
   82cb6:	4b23      	ldr	r3, [pc, #140]	; (82d44 <decode_can_msg+0x170>)
   82cb8:	4798      	blx	r3
	}
	if ((ul_data_incom == DUMMY_COMMAND) & (controller == CAN1))
   82cba:	68fb      	ldr	r3, [r7, #12]
   82cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
   82cc0:	bf14      	ite	ne
   82cc2:	2300      	movne	r3, #0
   82cc4:	2301      	moveq	r3, #1
   82cc6:	b2da      	uxtb	r2, r3
   82cc8:	6839      	ldr	r1, [r7, #0]
   82cca:	4b1f      	ldr	r3, [pc, #124]	; (82d48 <decode_can_msg+0x174>)
   82ccc:	4299      	cmp	r1, r3
   82cce:	bf14      	ite	ne
   82cd0:	2300      	movne	r3, #0
   82cd2:	2301      	moveq	r3, #1
   82cd4:	b2db      	uxtb	r3, r3
   82cd6:	4013      	ands	r3, r2
   82cd8:	b2db      	uxtb	r3, r3
   82cda:	2b00      	cmp	r3, #0
   82cdc:	d002      	beq.n	82ce4 <decode_can_msg+0x110>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   82cde:	2057      	movs	r0, #87	; 0x57
   82ce0:	4b18      	ldr	r3, [pc, #96]	; (82d44 <decode_can_msg+0x170>)
   82ce2:	4798      	blx	r3
	}
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   82ce4:	68fb      	ldr	r3, [r7, #12]
   82ce6:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   82cea:	bf14      	ite	ne
   82cec:	2300      	movne	r3, #0
   82cee:	2301      	moveq	r3, #1
   82cf0:	b2da      	uxtb	r2, r3
   82cf2:	6839      	ldr	r1, [r7, #0]
   82cf4:	4b14      	ldr	r3, [pc, #80]	; (82d48 <decode_can_msg+0x174>)
   82cf6:	4299      	cmp	r1, r3
   82cf8:	bf14      	ite	ne
   82cfa:	2300      	movne	r3, #0
   82cfc:	2301      	moveq	r3, #1
   82cfe:	b2db      	uxtb	r3, r3
   82d00:	4013      	ands	r3, r2
   82d02:	b2db      	uxtb	r3, r3
   82d04:	2b00      	cmp	r3, #0
   82d06:	d002      	beq.n	82d0e <decode_can_msg+0x13a>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   82d08:	2057      	movs	r0, #87	; 0x57
   82d0a:	4b0e      	ldr	r3, [pc, #56]	; (82d44 <decode_can_msg+0x170>)
   82d0c:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN0))
   82d0e:	68fb      	ldr	r3, [r7, #12]
   82d10:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   82d14:	bf14      	ite	ne
   82d16:	2300      	movne	r3, #0
   82d18:	2301      	moveq	r3, #1
   82d1a:	b2da      	uxtb	r2, r3
   82d1c:	6839      	ldr	r1, [r7, #0]
   82d1e:	4b08      	ldr	r3, [pc, #32]	; (82d40 <decode_can_msg+0x16c>)
   82d20:	4299      	cmp	r1, r3
   82d22:	bf14      	ite	ne
   82d24:	2300      	movne	r3, #0
   82d26:	2301      	moveq	r3, #1
   82d28:	b2db      	uxtb	r3, r3
   82d2a:	4013      	ands	r3, r2
   82d2c:	b2db      	uxtb	r3, r3
   82d2e:	2b00      	cmp	r3, #0
   82d30:	d002      	beq.n	82d38 <decode_can_msg+0x164>
	{
		pio_toggle_pin(LED2_GPIO);	// LED3 indicates the reception of housekeeping.
   82d32:	2056      	movs	r0, #86	; 0x56
   82d34:	4b03      	ldr	r3, [pc, #12]	; (82d44 <decode_can_msg+0x170>)
   82d36:	4798      	blx	r3
	}	
	return;
   82d38:	bf00      	nop
}
   82d3a:	3710      	adds	r7, #16
   82d3c:	46bd      	mov	sp, r7
   82d3e:	bd80      	pop	{r7, pc}
   82d40:	400b4000 	.word	0x400b4000
   82d44:	00081735 	.word	0x00081735
   82d48:	400b8000 	.word	0x400b8000
   82d4c:	00082da9 	.word	0x00082da9
   82d50:	12345678 	.word	0x12345678

00082d54 <reset_mailbox_conf>:
/**
 * \brief Resets the mailbox configure structure.  
 * @param *p_mailbox:		Mailbox structure that will be reset. 
 */
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   82d54:	b480      	push	{r7}
   82d56:	b083      	sub	sp, #12
   82d58:	af00      	add	r7, sp, #0
   82d5a:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   82d5c:	687b      	ldr	r3, [r7, #4]
   82d5e:	2200      	movs	r2, #0
   82d60:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   82d62:	687b      	ldr	r3, [r7, #4]
   82d64:	2200      	movs	r2, #0
   82d66:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   82d68:	687b      	ldr	r3, [r7, #4]
   82d6a:	2200      	movs	r2, #0
   82d6c:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   82d6e:	687b      	ldr	r3, [r7, #4]
   82d70:	2200      	movs	r2, #0
   82d72:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   82d74:	687b      	ldr	r3, [r7, #4]
   82d76:	2200      	movs	r2, #0
   82d78:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   82d7a:	687b      	ldr	r3, [r7, #4]
   82d7c:	2200      	movs	r2, #0
   82d7e:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   82d80:	687b      	ldr	r3, [r7, #4]
   82d82:	2200      	movs	r2, #0
   82d84:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   82d86:	687b      	ldr	r3, [r7, #4]
   82d88:	2200      	movs	r2, #0
   82d8a:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   82d8c:	687b      	ldr	r3, [r7, #4]
   82d8e:	2200      	movs	r2, #0
   82d90:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   82d92:	687b      	ldr	r3, [r7, #4]
   82d94:	2200      	movs	r2, #0
   82d96:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   82d98:	687b      	ldr	r3, [r7, #4]
   82d9a:	2200      	movs	r2, #0
   82d9c:	61da      	str	r2, [r3, #28]
}
   82d9e:	370c      	adds	r7, #12
   82da0:	46bd      	mov	sp, r7
   82da2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82da6:	4770      	bx	lr

00082da8 <command_in>:

/**
 * \brief Responds to he command from CAN0 and sends to CAN1
 **/
void command_in(void)
{
   82da8:	b580      	push	{r7, lr}
   82daa:	af00      	add	r7, sp, #0
	pio_toggle_pin(LED0_GPIO);
   82dac:	203b      	movs	r0, #59	; 0x3b
   82dae:	4b2d      	ldr	r3, [pc, #180]	; (82e64 <command_in+0xbc>)
   82db0:	4798      	blx	r3
	
	can_disable_interrupt(CAN0, CAN_IER_MB0);
   82db2:	482d      	ldr	r0, [pc, #180]	; (82e68 <command_in+0xc0>)
   82db4:	2101      	movs	r1, #1
   82db6:	4b2d      	ldr	r3, [pc, #180]	; (82e6c <command_in+0xc4>)
   82db8:	4798      	blx	r3
	NVIC_DisableIRQ(CAN0_IRQn);
   82dba:	202b      	movs	r0, #43	; 0x2b
   82dbc:	4b2c      	ldr	r3, [pc, #176]	; (82e70 <command_in+0xc8>)
   82dbe:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   82dc0:	4829      	ldr	r0, [pc, #164]	; (82e68 <command_in+0xc0>)
   82dc2:	4b2c      	ldr	r3, [pc, #176]	; (82e74 <command_in+0xcc>)
   82dc4:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   82dc6:	482c      	ldr	r0, [pc, #176]	; (82e78 <command_in+0xd0>)
   82dc8:	4b2a      	ldr	r3, [pc, #168]	; (82e74 <command_in+0xcc>)
   82dca:	4798      	blx	r3

	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   82dcc:	482b      	ldr	r0, [pc, #172]	; (82e7c <command_in+0xd4>)
   82dce:	4b2c      	ldr	r3, [pc, #176]	; (82e80 <command_in+0xd8>)
   82dd0:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 1;
   82dd2:	4b2c      	ldr	r3, [pc, #176]	; (82e84 <command_in+0xdc>)
   82dd4:	2201      	movs	r2, #1
   82dd6:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   82dd8:	4b2a      	ldr	r3, [pc, #168]	; (82e84 <command_in+0xdc>)
   82dda:	2201      	movs	r2, #1
   82ddc:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
   82dde:	4b29      	ldr	r3, [pc, #164]	; (82e84 <command_in+0xdc>)
   82de0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   82de4:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(7);
   82de6:	4b27      	ldr	r3, [pc, #156]	; (82e84 <command_in+0xdc>)
   82de8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   82dec:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   82dee:	4822      	ldr	r0, [pc, #136]	; (82e78 <command_in+0xd0>)
   82df0:	4924      	ldr	r1, [pc, #144]	; (82e84 <command_in+0xdc>)
   82df2:	4b25      	ldr	r3, [pc, #148]	; (82e88 <command_in+0xe0>)
   82df4:	4798      	blx	r3

	/* Init CAN0 Mailbox 0 to Transmit Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   82df6:	4821      	ldr	r0, [pc, #132]	; (82e7c <command_in+0xd4>)
   82df8:	4b21      	ldr	r3, [pc, #132]	; (82e80 <command_in+0xd8>)
   82dfa:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 1;
   82dfc:	4b1f      	ldr	r3, [pc, #124]	; (82e7c <command_in+0xd4>)
   82dfe:	2201      	movs	r2, #1
   82e00:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   82e02:	4b1e      	ldr	r3, [pc, #120]	; (82e7c <command_in+0xd4>)
   82e04:	2203      	movs	r2, #3
   82e06:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 15;
   82e08:	4b1c      	ldr	r3, [pc, #112]	; (82e7c <command_in+0xd4>)
   82e0a:	220f      	movs	r2, #15
   82e0c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   82e0e:	4b1b      	ldr	r3, [pc, #108]	; (82e7c <command_in+0xd4>)
   82e10:	2200      	movs	r2, #0
   82e12:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   82e14:	4b19      	ldr	r3, [pc, #100]	; (82e7c <command_in+0xd4>)
   82e16:	2200      	movs	r2, #0
   82e18:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   82e1a:	4813      	ldr	r0, [pc, #76]	; (82e68 <command_in+0xc0>)
   82e1c:	4917      	ldr	r1, [pc, #92]	; (82e7c <command_in+0xd4>)
   82e1e:	4b1a      	ldr	r3, [pc, #104]	; (82e88 <command_in+0xe0>)
   82e20:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(7);
   82e22:	4b16      	ldr	r3, [pc, #88]	; (82e7c <command_in+0xd4>)
   82e24:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   82e28:	611a      	str	r2, [r3, #16]
	can0_mailbox.ul_datal = COMMAND_OUT;
   82e2a:	4b14      	ldr	r3, [pc, #80]	; (82e7c <command_in+0xd4>)
   82e2c:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
   82e30:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = CAN_MSG_DUMMY_DATA;
   82e32:	4b12      	ldr	r3, [pc, #72]	; (82e7c <command_in+0xd4>)
   82e34:	f04f 32ff 	mov.w	r2, #4294967295
   82e38:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   82e3a:	4b10      	ldr	r3, [pc, #64]	; (82e7c <command_in+0xd4>)
   82e3c:	2208      	movs	r2, #8
   82e3e:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   82e40:	4809      	ldr	r0, [pc, #36]	; (82e68 <command_in+0xc0>)
   82e42:	490e      	ldr	r1, [pc, #56]	; (82e7c <command_in+0xd4>)
   82e44:	4b11      	ldr	r3, [pc, #68]	; (82e8c <command_in+0xe4>)
   82e46:	4798      	blx	r3

	/* Enable CAN1 mailbox 0 interrupt. */
	can_enable_interrupt(CAN1, CAN_IER_MB1);
   82e48:	480b      	ldr	r0, [pc, #44]	; (82e78 <command_in+0xd0>)
   82e4a:	2102      	movs	r1, #2
   82e4c:	4b10      	ldr	r3, [pc, #64]	; (82e90 <command_in+0xe8>)
   82e4e:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1);
   82e50:	4805      	ldr	r0, [pc, #20]	; (82e68 <command_in+0xc0>)
   82e52:	2102      	movs	r1, #2
   82e54:	4b0f      	ldr	r3, [pc, #60]	; (82e94 <command_in+0xec>)
   82e56:	4798      	blx	r3

	/* potentially @non-terminating@ */
	while (!g_ul_recv_status) {
   82e58:	bf00      	nop
   82e5a:	4b0f      	ldr	r3, [pc, #60]	; (82e98 <command_in+0xf0>)
   82e5c:	681b      	ldr	r3, [r3, #0]
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d0fb      	beq.n	82e5a <command_in+0xb2>
	}
}
   82e62:	bd80      	pop	{r7, pc}
   82e64:	00081735 	.word	0x00081735
   82e68:	400b4000 	.word	0x400b4000
   82e6c:	00081155 	.word	0x00081155
   82e70:	000829c5 	.word	0x000829c5
   82e74:	000814b1 	.word	0x000814b1
   82e78:	400b8000 	.word	0x400b8000
   82e7c:	20070740 	.word	0x20070740
   82e80:	00082d55 	.word	0x00082d55
   82e84:	200706f8 	.word	0x200706f8
   82e88:	00081215 	.word	0x00081215
   82e8c:	000813f9 	.word	0x000813f9
   82e90:	00081139 	.word	0x00081139
   82e94:	00081189 	.word	0x00081189
   82e98:	200706f4 	.word	0x200706f4

00082e9c <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   82e9c:	b480      	push	{r7}
   82e9e:	b083      	sub	sp, #12
   82ea0:	af00      	add	r7, sp, #0
   82ea2:	6078      	str	r0, [r7, #4]
   82ea4:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   82ea6:	687b      	ldr	r3, [r7, #4]
   82ea8:	681a      	ldr	r2, [r3, #0]
   82eaa:	683b      	ldr	r3, [r7, #0]
   82eac:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   82eae:	687b      	ldr	r3, [r7, #4]
   82eb0:	791a      	ldrb	r2, [r3, #4]
   82eb2:	683b      	ldr	r3, [r7, #0]
   82eb4:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   82eb6:	687b      	ldr	r3, [r7, #4]
   82eb8:	795a      	ldrb	r2, [r3, #5]
   82eba:	683b      	ldr	r3, [r7, #0]
   82ebc:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   82ebe:	687b      	ldr	r3, [r7, #4]
   82ec0:	799a      	ldrb	r2, [r3, #6]
   82ec2:	683b      	ldr	r3, [r7, #0]
   82ec4:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   82ec6:	687b      	ldr	r3, [r7, #4]
   82ec8:	79da      	ldrb	r2, [r3, #7]
   82eca:	683b      	ldr	r3, [r7, #0]
   82ecc:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   82ece:	687b      	ldr	r3, [r7, #4]
   82ed0:	689a      	ldr	r2, [r3, #8]
   82ed2:	683b      	ldr	r3, [r7, #0]
   82ed4:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   82ed6:	687b      	ldr	r3, [r7, #4]
   82ed8:	68da      	ldr	r2, [r3, #12]
   82eda:	683b      	ldr	r3, [r7, #0]
   82edc:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   82ede:	687b      	ldr	r3, [r7, #4]
   82ee0:	691a      	ldr	r2, [r3, #16]
   82ee2:	683b      	ldr	r3, [r7, #0]
   82ee4:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   82ee6:	687b      	ldr	r3, [r7, #4]
   82ee8:	695a      	ldr	r2, [r3, #20]
   82eea:	683b      	ldr	r3, [r7, #0]
   82eec:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   82eee:	687b      	ldr	r3, [r7, #4]
   82ef0:	699a      	ldr	r2, [r3, #24]
   82ef2:	683b      	ldr	r3, [r7, #0]
   82ef4:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   82ef6:	687b      	ldr	r3, [r7, #4]
   82ef8:	69da      	ldr	r2, [r3, #28]
   82efa:	683b      	ldr	r3, [r7, #0]
   82efc:	61da      	str	r2, [r3, #28]
	
	return;
   82efe:	bf00      	nop
}
   82f00:	370c      	adds	r7, #12
   82f02:	46bd      	mov	sp, r7
   82f04:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f08:	4770      	bx	lr
   82f0a:	bf00      	nop

00082f0c <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   82f0c:	b480      	push	{r7}
   82f0e:	b083      	sub	sp, #12
   82f10:	af00      	add	r7, sp, #0
   82f12:	6078      	str	r0, [r7, #4]
   82f14:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   82f16:	683b      	ldr	r3, [r7, #0]
   82f18:	681a      	ldr	r2, [r3, #0]
   82f1a:	687b      	ldr	r3, [r7, #4]
   82f1c:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   82f1e:	683b      	ldr	r3, [r7, #0]
   82f20:	791a      	ldrb	r2, [r3, #4]
   82f22:	687b      	ldr	r3, [r7, #4]
   82f24:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   82f26:	683b      	ldr	r3, [r7, #0]
   82f28:	795a      	ldrb	r2, [r3, #5]
   82f2a:	687b      	ldr	r3, [r7, #4]
   82f2c:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   82f2e:	683b      	ldr	r3, [r7, #0]
   82f30:	799a      	ldrb	r2, [r3, #6]
   82f32:	687b      	ldr	r3, [r7, #4]
   82f34:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   82f36:	683b      	ldr	r3, [r7, #0]
   82f38:	79da      	ldrb	r2, [r3, #7]
   82f3a:	687b      	ldr	r3, [r7, #4]
   82f3c:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   82f3e:	683b      	ldr	r3, [r7, #0]
   82f40:	689a      	ldr	r2, [r3, #8]
   82f42:	687b      	ldr	r3, [r7, #4]
   82f44:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   82f46:	683b      	ldr	r3, [r7, #0]
   82f48:	68da      	ldr	r2, [r3, #12]
   82f4a:	687b      	ldr	r3, [r7, #4]
   82f4c:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   82f4e:	683b      	ldr	r3, [r7, #0]
   82f50:	691a      	ldr	r2, [r3, #16]
   82f52:	687b      	ldr	r3, [r7, #4]
   82f54:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   82f56:	683b      	ldr	r3, [r7, #0]
   82f58:	695a      	ldr	r2, [r3, #20]
   82f5a:	687b      	ldr	r3, [r7, #4]
   82f5c:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   82f5e:	683b      	ldr	r3, [r7, #0]
   82f60:	699a      	ldr	r2, [r3, #24]
   82f62:	687b      	ldr	r3, [r7, #4]
   82f64:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   82f66:	683b      	ldr	r3, [r7, #0]
   82f68:	69da      	ldr	r2, [r3, #28]
   82f6a:	687b      	ldr	r3, [r7, #4]
   82f6c:	61da      	str	r2, [r3, #28]
	
	return;
   82f6e:	bf00      	nop
}
   82f70:	370c      	adds	r7, #12
   82f72:	46bd      	mov	sp, r7
   82f74:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f78:	4770      	bx	lr
   82f7a:	bf00      	nop

00082f7c <can_initialize>:
/**
 * \brief Initializes and enables CAN0 & CAN1 tranceivers and clocks. 
 * CAN0/CAN1 mailboxes are reset and interrupts disabled.
 */
void can_initialize(void)
{
   82f7c:	b580      	push	{r7, lr}
   82f7e:	b082      	sub	sp, #8
   82f80:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1;
   82f82:	2301      	movs	r3, #1
   82f84:	607b      	str	r3, [r7, #4]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   82f86:	4829      	ldr	r0, [pc, #164]	; (8302c <can_initialize+0xb0>)
   82f88:	2134      	movs	r1, #52	; 0x34
   82f8a:	4b29      	ldr	r3, [pc, #164]	; (83030 <can_initialize+0xb4>)
   82f8c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   82f8e:	4827      	ldr	r0, [pc, #156]	; (8302c <can_initialize+0xb0>)
   82f90:	2135      	movs	r1, #53	; 0x35
   82f92:	4b28      	ldr	r3, [pc, #160]	; (83034 <can_initialize+0xb8>)
   82f94:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   82f96:	4825      	ldr	r0, [pc, #148]	; (8302c <can_initialize+0xb0>)
   82f98:	4b27      	ldr	r3, [pc, #156]	; (83038 <can_initialize+0xbc>)
   82f9a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   82f9c:	4823      	ldr	r0, [pc, #140]	; (8302c <can_initialize+0xb0>)
   82f9e:	4b27      	ldr	r3, [pc, #156]	; (8303c <can_initialize+0xc0>)
   82fa0:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   82fa2:	4827      	ldr	r0, [pc, #156]	; (83040 <can_initialize+0xc4>)
   82fa4:	218f      	movs	r1, #143	; 0x8f
   82fa6:	4b22      	ldr	r3, [pc, #136]	; (83030 <can_initialize+0xb4>)
   82fa8:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   82faa:	4825      	ldr	r0, [pc, #148]	; (83040 <can_initialize+0xc4>)
   82fac:	2190      	movs	r1, #144	; 0x90
   82fae:	4b21      	ldr	r3, [pc, #132]	; (83034 <can_initialize+0xb8>)
   82fb0:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   82fb2:	4823      	ldr	r0, [pc, #140]	; (83040 <can_initialize+0xc4>)
   82fb4:	4b20      	ldr	r3, [pc, #128]	; (83038 <can_initialize+0xbc>)
   82fb6:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   82fb8:	4821      	ldr	r0, [pc, #132]	; (83040 <can_initialize+0xc4>)
   82fba:	4b20      	ldr	r3, [pc, #128]	; (8303c <can_initialize+0xc0>)
   82fbc:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   82fbe:	202b      	movs	r0, #43	; 0x2b
   82fc0:	4b20      	ldr	r3, [pc, #128]	; (83044 <can_initialize+0xc8>)
   82fc2:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   82fc4:	202c      	movs	r0, #44	; 0x2c
   82fc6:	4b1f      	ldr	r3, [pc, #124]	; (83044 <can_initialize+0xc8>)
   82fc8:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   82fca:	4b1f      	ldr	r3, [pc, #124]	; (83048 <can_initialize+0xcc>)
   82fcc:	4798      	blx	r3
   82fce:	6038      	str	r0, [r7, #0]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   82fd0:	481e      	ldr	r0, [pc, #120]	; (8304c <can_initialize+0xd0>)
   82fd2:	6839      	ldr	r1, [r7, #0]
   82fd4:	22fa      	movs	r2, #250	; 0xfa
   82fd6:	4b1e      	ldr	r3, [pc, #120]	; (83050 <can_initialize+0xd4>)
   82fd8:	4798      	blx	r3
   82fda:	4603      	mov	r3, r0
   82fdc:	2b00      	cmp	r3, #0
   82fde:	d021      	beq.n	83024 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   82fe0:	481c      	ldr	r0, [pc, #112]	; (83054 <can_initialize+0xd8>)
   82fe2:	6839      	ldr	r1, [r7, #0]
   82fe4:	22fa      	movs	r2, #250	; 0xfa
   82fe6:	4b1a      	ldr	r3, [pc, #104]	; (83050 <can_initialize+0xd4>)
   82fe8:	4798      	blx	r3
   82fea:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   82fec:	2b00      	cmp	r3, #0
   82fee:	d019      	beq.n	83024 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   82ff0:	4816      	ldr	r0, [pc, #88]	; (8304c <can_initialize+0xd0>)
   82ff2:	f04f 31ff 	mov.w	r1, #4294967295
   82ff6:	4b18      	ldr	r3, [pc, #96]	; (83058 <can_initialize+0xdc>)
   82ff8:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   82ffa:	4816      	ldr	r0, [pc, #88]	; (83054 <can_initialize+0xd8>)
   82ffc:	f04f 31ff 	mov.w	r1, #4294967295
   83000:	4b15      	ldr	r3, [pc, #84]	; (83058 <can_initialize+0xdc>)
   83002:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   83004:	202b      	movs	r0, #43	; 0x2b
   83006:	4b15      	ldr	r3, [pc, #84]	; (8305c <can_initialize+0xe0>)
   83008:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   8300a:	202c      	movs	r0, #44	; 0x2c
   8300c:	4b13      	ldr	r3, [pc, #76]	; (8305c <can_initialize+0xe0>)
   8300e:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   83010:	480e      	ldr	r0, [pc, #56]	; (8304c <can_initialize+0xd0>)
   83012:	4b13      	ldr	r3, [pc, #76]	; (83060 <can_initialize+0xe4>)
   83014:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   83016:	480f      	ldr	r0, [pc, #60]	; (83054 <can_initialize+0xd8>)
   83018:	4b11      	ldr	r3, [pc, #68]	; (83060 <can_initialize+0xe4>)
   8301a:	4798      	blx	r3
	
	/* Initialize the CAN0 & CAN1 mailboxes */
	x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   8301c:	6878      	ldr	r0, [r7, #4]
   8301e:	4b11      	ldr	r3, [pc, #68]	; (83064 <can_initialize+0xe8>)
   83020:	4798      	blx	r3
   83022:	6078      	str	r0, [r7, #4]
	//configASSERT(x);
	
	
	}
	return;
   83024:	bf00      	nop
}
   83026:	3708      	adds	r7, #8
   83028:	46bd      	mov	sp, r7
   8302a:	bd80      	pop	{r7, pc}
   8302c:	20070780 	.word	0x20070780
   83030:	00080eb1 	.word	0x00080eb1
   83034:	00080ecd 	.word	0x00080ecd
   83038:	00080f05 	.word	0x00080f05
   8303c:	00080ee9 	.word	0x00080ee9
   83040:	20070718 	.word	0x20070718
   83044:	00081d21 	.word	0x00081d21
   83048:	00082a89 	.word	0x00082a89
   8304c:	400b4000 	.word	0x400b4000
   83050:	00081071 	.word	0x00081071
   83054:	400b8000 	.word	0x400b8000
   83058:	00081155 	.word	0x00081155
   8305c:	00082995 	.word	0x00082995
   83060:	000814b1 	.word	0x000814b1
   83064:	00083069 	.word	0x00083069

00083068 <can_init_mailboxes>:

uint32_t can_init_mailboxes(uint32_t x)
{
   83068:	b580      	push	{r7, lr}
   8306a:	b082      	sub	sp, #8
   8306c:	af00      	add	r7, sp, #0
   8306e:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   83070:	4824      	ldr	r0, [pc, #144]	; (83104 <can_init_mailboxes+0x9c>)
   83072:	4b25      	ldr	r3, [pc, #148]	; (83108 <can_init_mailboxes+0xa0>)
   83074:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   83076:	4b23      	ldr	r3, [pc, #140]	; (83104 <can_init_mailboxes+0x9c>)
   83078:	2207      	movs	r2, #7
   8307a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8307c:	4b21      	ldr	r3, [pc, #132]	; (83104 <can_init_mailboxes+0x9c>)
   8307e:	2203      	movs	r2, #3
   83080:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   83082:	4b20      	ldr	r3, [pc, #128]	; (83104 <can_init_mailboxes+0x9c>)
   83084:	2205      	movs	r2, #5
   83086:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   83088:	4b1e      	ldr	r3, [pc, #120]	; (83104 <can_init_mailboxes+0x9c>)
   8308a:	2200      	movs	r2, #0
   8308c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8308e:	4b1d      	ldr	r3, [pc, #116]	; (83104 <can_init_mailboxes+0x9c>)
   83090:	2200      	movs	r2, #0
   83092:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   83094:	481d      	ldr	r0, [pc, #116]	; (8310c <can_init_mailboxes+0xa4>)
   83096:	491b      	ldr	r1, [pc, #108]	; (83104 <can_init_mailboxes+0x9c>)
   83098:	4b1d      	ldr	r3, [pc, #116]	; (83110 <can_init_mailboxes+0xa8>)
   8309a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8309c:	481d      	ldr	r0, [pc, #116]	; (83114 <can_init_mailboxes+0xac>)
   8309e:	4b1a      	ldr	r3, [pc, #104]	; (83108 <can_init_mailboxes+0xa0>)
   830a0:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   830a2:	4b1c      	ldr	r3, [pc, #112]	; (83114 <can_init_mailboxes+0xac>)
   830a4:	2200      	movs	r2, #0
   830a6:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   830a8:	4b1a      	ldr	r3, [pc, #104]	; (83114 <can_init_mailboxes+0xac>)
   830aa:	2201      	movs	r2, #1
   830ac:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   830ae:	4b19      	ldr	r3, [pc, #100]	; (83114 <can_init_mailboxes+0xac>)
   830b0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   830b4:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(NODE0_ID);					  // The ID of CAN1 MB0 is currently NODE0_ID (standard).
   830b6:	4b17      	ldr	r3, [pc, #92]	; (83114 <can_init_mailboxes+0xac>)
   830b8:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   830bc:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   830be:	4816      	ldr	r0, [pc, #88]	; (83118 <can_init_mailboxes+0xb0>)
   830c0:	4914      	ldr	r1, [pc, #80]	; (83114 <can_init_mailboxes+0xac>)
   830c2:	4b13      	ldr	r3, [pc, #76]	; (83110 <can_init_mailboxes+0xa8>)
   830c4:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   830c6:	4814      	ldr	r0, [pc, #80]	; (83118 <can_init_mailboxes+0xb0>)
   830c8:	2101      	movs	r1, #1
   830ca:	4b14      	ldr	r3, [pc, #80]	; (8311c <can_init_mailboxes+0xb4>)
   830cc:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   830ce:	480d      	ldr	r0, [pc, #52]	; (83104 <can_init_mailboxes+0x9c>)
   830d0:	4b0d      	ldr	r3, [pc, #52]	; (83108 <can_init_mailboxes+0xa0>)
   830d2:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   830d4:	4b0b      	ldr	r3, [pc, #44]	; (83104 <can_init_mailboxes+0x9c>)
   830d6:	2206      	movs	r2, #6
   830d8:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   830da:	4b0a      	ldr	r3, [pc, #40]	; (83104 <can_init_mailboxes+0x9c>)
   830dc:	2203      	movs	r2, #3
   830de:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   830e0:	4b08      	ldr	r3, [pc, #32]	; (83104 <can_init_mailboxes+0x9c>)
   830e2:	2214      	movs	r2, #20
   830e4:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   830e6:	4b07      	ldr	r3, [pc, #28]	; (83104 <can_init_mailboxes+0x9c>)
   830e8:	2200      	movs	r2, #0
   830ea:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   830ec:	4b05      	ldr	r3, [pc, #20]	; (83104 <can_init_mailboxes+0x9c>)
   830ee:	2200      	movs	r2, #0
   830f0:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   830f2:	4806      	ldr	r0, [pc, #24]	; (8310c <can_init_mailboxes+0xa4>)
   830f4:	4903      	ldr	r1, [pc, #12]	; (83104 <can_init_mailboxes+0x9c>)
   830f6:	4b06      	ldr	r3, [pc, #24]	; (83110 <can_init_mailboxes+0xa8>)
   830f8:	4798      	blx	r3

	return 1;
   830fa:	2301      	movs	r3, #1
}
   830fc:	4618      	mov	r0, r3
   830fe:	3708      	adds	r7, #8
   83100:	46bd      	mov	sp, r7
   83102:	bd80      	pop	{r7, pc}
   83104:	20070740 	.word	0x20070740
   83108:	00082d55 	.word	0x00082d55
   8310c:	400b4000 	.word	0x400b4000
   83110:	00081215 	.word	0x00081215
   83114:	200706f8 	.word	0x200706f8
   83118:	400b8000 	.word	0x400b8000
   8311c:	00081139 	.word	0x00081139

00083120 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   83120:	b480      	push	{r7}
   83122:	b085      	sub	sp, #20
   83124:	af00      	add	r7, sp, #0
   83126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   83128:	687b      	ldr	r3, [r7, #4]
   8312a:	f003 0307 	and.w	r3, r3, #7
   8312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   83130:	4b0c      	ldr	r3, [pc, #48]	; (83164 <NVIC_SetPriorityGrouping+0x44>)
   83132:	68db      	ldr	r3, [r3, #12]
   83134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   83136:	68ba      	ldr	r2, [r7, #8]
   83138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   8313c:	4013      	ands	r3, r2
   8313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   83140:	68fb      	ldr	r3, [r7, #12]
   83142:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   83144:	68bb      	ldr	r3, [r7, #8]
   83146:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   83148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   8314c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   83150:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   83152:	4b04      	ldr	r3, [pc, #16]	; (83164 <NVIC_SetPriorityGrouping+0x44>)
   83154:	68ba      	ldr	r2, [r7, #8]
   83156:	60da      	str	r2, [r3, #12]
}
   83158:	3714      	adds	r7, #20
   8315a:	46bd      	mov	sp, r7
   8315c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83160:	4770      	bx	lr
   83162:	bf00      	nop
   83164:	e000ed00 	.word	0xe000ed00

00083168 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   83168:	b580      	push	{r7, lr}
   8316a:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   8316c:	4b02      	ldr	r3, [pc, #8]	; (83178 <main+0x10>)
   8316e:	4798      	blx	r3
		housekeep_test2();
	}
#endif
#if PROGRAM_CHOICE == 10
{
	usart_example();
   83170:	4b02      	ldr	r3, [pc, #8]	; (8317c <main+0x14>)
   83172:	4798      	blx	r3
		data = pio_get_pin_value(ANALOG_IN1);
	}
}
#endif
	{
		while (1){}
   83174:	e7fe      	b.n	83174 <main+0xc>
   83176:	bf00      	nop
   83178:	00083181 	.word	0x00083181
   8317c:	00080895 	.word	0x00080895

00083180 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   83180:	b580      	push	{r7, lr}
   83182:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   83184:	4b05      	ldr	r3, [pc, #20]	; (8319c <prvSetupHardware+0x1c>)
   83186:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   83188:	2000      	movs	r0, #0
   8318a:	4b05      	ldr	r3, [pc, #20]	; (831a0 <prvSetupHardware+0x20>)
   8318c:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   8318e:	4b05      	ldr	r3, [pc, #20]	; (831a4 <prvSetupHardware+0x24>)
   83190:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   83192:	4b05      	ldr	r3, [pc, #20]	; (831a8 <prvSetupHardware+0x28>)
   83194:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   83196:	4b05      	ldr	r3, [pc, #20]	; (831ac <prvSetupHardware+0x2c>)
   83198:	4798      	blx	r3
	
}
   8319a:	bd80      	pop	{r7, pc}
   8319c:	00080d59 	.word	0x00080d59
   831a0:	00083121 	.word	0x00083121
   831a4:	00080dc1 	.word	0x00080dc1
   831a8:	000831ed 	.word	0x000831ed
   831ac:	00082f7d 	.word	0x00082f7d

000831b0 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   831b0:	b580      	push	{r7, lr}
   831b2:	b082      	sub	sp, #8
   831b4:	af00      	add	r7, sp, #0
   831b6:	6078      	str	r0, [r7, #4]
   831b8:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   831ba:	4b01      	ldr	r3, [pc, #4]	; (831c0 <vApplicationStackOverflowHook+0x10>)
   831bc:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   831be:	e7fe      	b.n	831be <vApplicationStackOverflowHook+0xe>
   831c0:	00082641 	.word	0x00082641

000831c4 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   831c4:	b580      	push	{r7, lr}
   831c6:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   831c8:	4804      	ldr	r0, [pc, #16]	; (831dc <WDT_Handler+0x18>)
   831ca:	4b05      	ldr	r3, [pc, #20]	; (831e0 <WDT_Handler+0x1c>)
   831cc:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   831ce:	2055      	movs	r0, #85	; 0x55
   831d0:	4b04      	ldr	r3, [pc, #16]	; (831e4 <WDT_Handler+0x20>)
   831d2:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   831d4:	4801      	ldr	r0, [pc, #4]	; (831dc <WDT_Handler+0x18>)
   831d6:	4b04      	ldr	r3, [pc, #16]	; (831e8 <WDT_Handler+0x24>)
   831d8:	4798      	blx	r3
}
   831da:	bd80      	pop	{r7, pc}
   831dc:	400e1a50 	.word	0x400e1a50
   831e0:	0008221d 	.word	0x0008221d
   831e4:	00081735 	.word	0x00081735
   831e8:	000821f5 	.word	0x000821f5

000831ec <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   831ec:	b580      	push	{r7, lr}
   831ee:	b082      	sub	sp, #8
   831f0:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   831f2:	2300      	movs	r3, #0
   831f4:	607b      	str	r3, [r7, #4]
   831f6:	e00f      	b.n	83218 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   831f8:	4b0a      	ldr	r3, [pc, #40]	; (83224 <vParTestInitialise+0x38>)
   831fa:	687a      	ldr	r2, [r7, #4]
   831fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83200:	4618      	mov	r0, r3
   83202:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83206:	4b08      	ldr	r3, [pc, #32]	; (83228 <vParTestInitialise+0x3c>)
   83208:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8320a:	6878      	ldr	r0, [r7, #4]
   8320c:	2100      	movs	r1, #0
   8320e:	4b07      	ldr	r3, [pc, #28]	; (8322c <vParTestInitialise+0x40>)
   83210:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   83212:	687b      	ldr	r3, [r7, #4]
   83214:	3301      	adds	r3, #1
   83216:	607b      	str	r3, [r7, #4]
   83218:	687b      	ldr	r3, [r7, #4]
   8321a:	2b02      	cmp	r3, #2
   8321c:	d9ec      	bls.n	831f8 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   8321e:	3708      	adds	r7, #8
   83220:	46bd      	mov	sp, r7
   83222:	bd80      	pop	{r7, pc}
   83224:	0008355c 	.word	0x0008355c
   83228:	00081795 	.word	0x00081795
   8322c:	00083231 	.word	0x00083231

00083230 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   83230:	b580      	push	{r7, lr}
   83232:	b082      	sub	sp, #8
   83234:	af00      	add	r7, sp, #0
   83236:	6078      	str	r0, [r7, #4]
   83238:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8323a:	687b      	ldr	r3, [r7, #4]
   8323c:	2b02      	cmp	r3, #2
   8323e:	d823      	bhi.n	83288 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   83240:	687b      	ldr	r3, [r7, #4]
   83242:	2b00      	cmp	r3, #0
   83244:	d106      	bne.n	83254 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   83246:	683b      	ldr	r3, [r7, #0]
   83248:	2b00      	cmp	r3, #0
   8324a:	bf14      	ite	ne
   8324c:	2300      	movne	r3, #0
   8324e:	2301      	moveq	r3, #1
   83250:	b2db      	uxtb	r3, r3
   83252:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   83254:	683b      	ldr	r3, [r7, #0]
   83256:	2b00      	cmp	r3, #0
   83258:	d00b      	beq.n	83272 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   8325a:	4b0d      	ldr	r3, [pc, #52]	; (83290 <vParTestSetLED+0x60>)
   8325c:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   8325e:	4b0d      	ldr	r3, [pc, #52]	; (83294 <vParTestSetLED+0x64>)
   83260:	687a      	ldr	r2, [r7, #4]
   83262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83266:	4618      	mov	r0, r3
   83268:	4b0b      	ldr	r3, [pc, #44]	; (83298 <vParTestSetLED+0x68>)
   8326a:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   8326c:	4b0b      	ldr	r3, [pc, #44]	; (8329c <vParTestSetLED+0x6c>)
   8326e:	4798      	blx	r3
   83270:	e00a      	b.n	83288 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   83272:	4b07      	ldr	r3, [pc, #28]	; (83290 <vParTestSetLED+0x60>)
   83274:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   83276:	4b07      	ldr	r3, [pc, #28]	; (83294 <vParTestSetLED+0x64>)
   83278:	687a      	ldr	r2, [r7, #4]
   8327a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8327e:	4618      	mov	r0, r3
   83280:	4b07      	ldr	r3, [pc, #28]	; (832a0 <vParTestSetLED+0x70>)
   83282:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   83284:	4b05      	ldr	r3, [pc, #20]	; (8329c <vParTestSetLED+0x6c>)
   83286:	4798      	blx	r3
		}
	}
}
   83288:	3708      	adds	r7, #8
   8328a:	46bd      	mov	sp, r7
   8328c:	bd80      	pop	{r7, pc}
   8328e:	bf00      	nop
   83290:	000825c5 	.word	0x000825c5
   83294:	0008355c 	.word	0x0008355c
   83298:	00081701 	.word	0x00081701
   8329c:	00082609 	.word	0x00082609
   832a0:	000816cd 	.word	0x000816cd

000832a4 <RTT_Handler>:
/************************************************************************/
/**
 * \brief Real-time timer interrupt handler.
 */
void RTT_Handler(void)
{
   832a4:	b580      	push	{r7, lr}
   832a6:	b082      	sub	sp, #8
   832a8:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT); // Reading the status register clears the interrupt requests.
   832aa:	4812      	ldr	r0, [pc, #72]	; (832f4 <RTT_Handler+0x50>)
   832ac:	4b12      	ldr	r3, [pc, #72]	; (832f8 <RTT_Handler+0x54>)
   832ae:	4798      	blx	r3
   832b0:	6078      	str	r0, [r7, #4]

	/* Time has changed*/
	pio_toggle_pin(LED0_GPIO);
   832b2:	203b      	movs	r0, #59	; 0x3b
   832b4:	4b11      	ldr	r3, [pc, #68]	; (832fc <RTT_Handler+0x58>)
   832b6:	4798      	blx	r3
		
	/* Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
   832b8:	687b      	ldr	r3, [r7, #4]
   832ba:	f003 0301 	and.w	r3, r3, #1
   832be:	2b00      	cmp	r3, #0
   832c0:	d015      	beq.n	832ee <RTT_Handler+0x4a>
		g_uc_alarmed = 1;
   832c2:	4b0f      	ldr	r3, [pc, #60]	; (83300 <RTT_Handler+0x5c>)
   832c4:	2201      	movs	r2, #1
   832c6:	701a      	strb	r2, [r3, #0]
		pio_toggle_pin(LED1_GPIO);
   832c8:	2055      	movs	r0, #85	; 0x55
   832ca:	4b0c      	ldr	r3, [pc, #48]	; (832fc <RTT_Handler+0x58>)
   832cc:	4798      	blx	r3
		rtt_init(RTT, 32768);
   832ce:	4809      	ldr	r0, [pc, #36]	; (832f4 <RTT_Handler+0x50>)
   832d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   832d4:	4b0b      	ldr	r3, [pc, #44]	; (83304 <RTT_Handler+0x60>)
   832d6:	4798      	blx	r3
		rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
   832d8:	4806      	ldr	r0, [pc, #24]	; (832f4 <RTT_Handler+0x50>)
   832da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   832de:	4b0a      	ldr	r3, [pc, #40]	; (83308 <RTT_Handler+0x64>)
   832e0:	4798      	blx	r3
		rtt_write_alarm_time(RTT, g_ul_new_alarm);
   832e2:	4b0a      	ldr	r3, [pc, #40]	; (8330c <RTT_Handler+0x68>)
   832e4:	681b      	ldr	r3, [r3, #0]
   832e6:	4803      	ldr	r0, [pc, #12]	; (832f4 <RTT_Handler+0x50>)
   832e8:	4619      	mov	r1, r3
   832ea:	4b09      	ldr	r3, [pc, #36]	; (83310 <RTT_Handler+0x6c>)
   832ec:	4798      	blx	r3
	}
}
   832ee:	3708      	adds	r7, #8
   832f0:	46bd      	mov	sp, r7
   832f2:	bd80      	pop	{r7, pc}
   832f4:	400e1a30 	.word	0x400e1a30
   832f8:	00081e21 	.word	0x00081e21
   832fc:	00081735 	.word	0x00081735
   83300:	2007079c 	.word	0x2007079c
   83304:	00081da5 	.word	0x00081da5
   83308:	00081dc9 	.word	0x00081dc9
   8330c:	200707a0 	.word	0x200707a0
   83310:	00081e39 	.word	0x00081e39

00083314 <__libc_init_array>:
   83314:	b570      	push	{r4, r5, r6, lr}
   83316:	4e0f      	ldr	r6, [pc, #60]	; (83354 <__libc_init_array+0x40>)
   83318:	4d0f      	ldr	r5, [pc, #60]	; (83358 <__libc_init_array+0x44>)
   8331a:	1b76      	subs	r6, r6, r5
   8331c:	10b6      	asrs	r6, r6, #2
   8331e:	d007      	beq.n	83330 <__libc_init_array+0x1c>
   83320:	3d04      	subs	r5, #4
   83322:	2400      	movs	r4, #0
   83324:	3401      	adds	r4, #1
   83326:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8332a:	4798      	blx	r3
   8332c:	42a6      	cmp	r6, r4
   8332e:	d1f9      	bne.n	83324 <__libc_init_array+0x10>
   83330:	4e0a      	ldr	r6, [pc, #40]	; (8335c <__libc_init_array+0x48>)
   83332:	4d0b      	ldr	r5, [pc, #44]	; (83360 <__libc_init_array+0x4c>)
   83334:	f000 f91c 	bl	83570 <_init>
   83338:	1b76      	subs	r6, r6, r5
   8333a:	10b6      	asrs	r6, r6, #2
   8333c:	d008      	beq.n	83350 <__libc_init_array+0x3c>
   8333e:	3d04      	subs	r5, #4
   83340:	2400      	movs	r4, #0
   83342:	3401      	adds	r4, #1
   83344:	f855 3f04 	ldr.w	r3, [r5, #4]!
   83348:	4798      	blx	r3
   8334a:	42a6      	cmp	r6, r4
   8334c:	d1f9      	bne.n	83342 <__libc_init_array+0x2e>
   8334e:	bd70      	pop	{r4, r5, r6, pc}
   83350:	bd70      	pop	{r4, r5, r6, pc}
   83352:	bf00      	nop
   83354:	0008357c 	.word	0x0008357c
   83358:	0008357c 	.word	0x0008357c
   8335c:	00083584 	.word	0x00083584
   83360:	0008357c 	.word	0x0008357c

00083364 <memcmp>:
   83364:	2a03      	cmp	r2, #3
   83366:	b470      	push	{r4, r5, r6}
   83368:	d928      	bls.n	833bc <memcmp+0x58>
   8336a:	ea40 0301 	orr.w	r3, r0, r1
   8336e:	079b      	lsls	r3, r3, #30
   83370:	d013      	beq.n	8339a <memcmp+0x36>
   83372:	7805      	ldrb	r5, [r0, #0]
   83374:	780c      	ldrb	r4, [r1, #0]
   83376:	42a5      	cmp	r5, r4
   83378:	d124      	bne.n	833c4 <memcmp+0x60>
   8337a:	3a01      	subs	r2, #1
   8337c:	2300      	movs	r3, #0
   8337e:	e005      	b.n	8338c <memcmp+0x28>
   83380:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   83384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   83388:	42a5      	cmp	r5, r4
   8338a:	d11b      	bne.n	833c4 <memcmp+0x60>
   8338c:	4293      	cmp	r3, r2
   8338e:	f103 0301 	add.w	r3, r3, #1
   83392:	d1f5      	bne.n	83380 <memcmp+0x1c>
   83394:	2000      	movs	r0, #0
   83396:	bc70      	pop	{r4, r5, r6}
   83398:	4770      	bx	lr
   8339a:	460c      	mov	r4, r1
   8339c:	4603      	mov	r3, r0
   8339e:	6825      	ldr	r5, [r4, #0]
   833a0:	681e      	ldr	r6, [r3, #0]
   833a2:	4621      	mov	r1, r4
   833a4:	42ae      	cmp	r6, r5
   833a6:	4618      	mov	r0, r3
   833a8:	f104 0404 	add.w	r4, r4, #4
   833ac:	f103 0304 	add.w	r3, r3, #4
   833b0:	d104      	bne.n	833bc <memcmp+0x58>
   833b2:	3a04      	subs	r2, #4
   833b4:	2a03      	cmp	r2, #3
   833b6:	4618      	mov	r0, r3
   833b8:	4621      	mov	r1, r4
   833ba:	d8f0      	bhi.n	8339e <memcmp+0x3a>
   833bc:	2a00      	cmp	r2, #0
   833be:	d1d8      	bne.n	83372 <memcmp+0xe>
   833c0:	4610      	mov	r0, r2
   833c2:	e7e8      	b.n	83396 <memcmp+0x32>
   833c4:	1b28      	subs	r0, r5, r4
   833c6:	bc70      	pop	{r4, r5, r6}
   833c8:	4770      	bx	lr
   833ca:	bf00      	nop

000833cc <register_fini>:
   833cc:	4b02      	ldr	r3, [pc, #8]	; (833d8 <register_fini+0xc>)
   833ce:	b113      	cbz	r3, 833d6 <register_fini+0xa>
   833d0:	4802      	ldr	r0, [pc, #8]	; (833dc <register_fini+0x10>)
   833d2:	f000 b805 	b.w	833e0 <atexit>
   833d6:	4770      	bx	lr
   833d8:	00000000 	.word	0x00000000
   833dc:	000833ed 	.word	0x000833ed

000833e0 <atexit>:
   833e0:	4601      	mov	r1, r0
   833e2:	2000      	movs	r0, #0
   833e4:	4602      	mov	r2, r0
   833e6:	4603      	mov	r3, r0
   833e8:	f000 b818 	b.w	8341c <__register_exitproc>

000833ec <__libc_fini_array>:
   833ec:	b538      	push	{r3, r4, r5, lr}
   833ee:	4d09      	ldr	r5, [pc, #36]	; (83414 <__libc_fini_array+0x28>)
   833f0:	4c09      	ldr	r4, [pc, #36]	; (83418 <__libc_fini_array+0x2c>)
   833f2:	1b64      	subs	r4, r4, r5
   833f4:	10a4      	asrs	r4, r4, #2
   833f6:	bf18      	it	ne
   833f8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   833fc:	d005      	beq.n	8340a <__libc_fini_array+0x1e>
   833fe:	3c01      	subs	r4, #1
   83400:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83404:	4798      	blx	r3
   83406:	2c00      	cmp	r4, #0
   83408:	d1f9      	bne.n	833fe <__libc_fini_array+0x12>
   8340a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8340e:	f000 b8b9 	b.w	83584 <_fini>
   83412:	bf00      	nop
   83414:	00083590 	.word	0x00083590
   83418:	00083594 	.word	0x00083594

0008341c <__register_exitproc>:
   8341c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8341e:	4c27      	ldr	r4, [pc, #156]	; (834bc <__register_exitproc+0xa0>)
   83420:	b085      	sub	sp, #20
   83422:	6826      	ldr	r6, [r4, #0]
   83424:	4607      	mov	r7, r0
   83426:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8342a:	2c00      	cmp	r4, #0
   8342c:	d040      	beq.n	834b0 <__register_exitproc+0x94>
   8342e:	6865      	ldr	r5, [r4, #4]
   83430:	2d1f      	cmp	r5, #31
   83432:	dd1e      	ble.n	83472 <__register_exitproc+0x56>
   83434:	4822      	ldr	r0, [pc, #136]	; (834c0 <__register_exitproc+0xa4>)
   83436:	b918      	cbnz	r0, 83440 <__register_exitproc+0x24>
   83438:	f04f 30ff 	mov.w	r0, #4294967295
   8343c:	b005      	add	sp, #20
   8343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83440:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83444:	9103      	str	r1, [sp, #12]
   83446:	9202      	str	r2, [sp, #8]
   83448:	9301      	str	r3, [sp, #4]
   8344a:	f3af 8000 	nop.w
   8344e:	9903      	ldr	r1, [sp, #12]
   83450:	4604      	mov	r4, r0
   83452:	9a02      	ldr	r2, [sp, #8]
   83454:	9b01      	ldr	r3, [sp, #4]
   83456:	2800      	cmp	r0, #0
   83458:	d0ee      	beq.n	83438 <__register_exitproc+0x1c>
   8345a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8345e:	2000      	movs	r0, #0
   83460:	6025      	str	r5, [r4, #0]
   83462:	6060      	str	r0, [r4, #4]
   83464:	4605      	mov	r5, r0
   83466:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8346a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8346e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83472:	b93f      	cbnz	r7, 83484 <__register_exitproc+0x68>
   83474:	1c6b      	adds	r3, r5, #1
   83476:	2000      	movs	r0, #0
   83478:	3502      	adds	r5, #2
   8347a:	6063      	str	r3, [r4, #4]
   8347c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   83480:	b005      	add	sp, #20
   83482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83484:	2601      	movs	r6, #1
   83486:	40ae      	lsls	r6, r5
   83488:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8348c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   83490:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   83494:	2f02      	cmp	r7, #2
   83496:	ea42 0206 	orr.w	r2, r2, r6
   8349a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8349e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   834a2:	d1e7      	bne.n	83474 <__register_exitproc+0x58>
   834a4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   834a8:	431e      	orrs	r6, r3
   834aa:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   834ae:	e7e1      	b.n	83474 <__register_exitproc+0x58>
   834b0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   834b4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   834b8:	e7b9      	b.n	8342e <__register_exitproc+0x12>
   834ba:	bf00      	nop
   834bc:	0008356c 	.word	0x0008356c
   834c0:	00000000 	.word	0x00000000
   834c4:	0001c200 	.word	0x0001c200
   834c8:	000000c0 	.word	0x000000c0
   834cc:	00000800 	.word	0x00000800
	...

000834dc <can_bit_time>:
   834dc:	02020308 02094b03 43020303 0303030a     .....K.....C....
   834ec:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   834fc:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   8350c:	05050510 06114504 47040505 06060512     .....E.....G....
   8351c:	06134304 44040606 06060714 08154604     .C.....D.....F..
   8352c:	47040606 07070716 08174404 46040708     ...G.....D.....F
   8353c:	08080718 08194304 44040808              .....C.....D

00083548 <ucExpectedStackBytes.5295>:
   83548:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   83558:	a5a5a5a5                                ....

0008355c <ulLED>:
   8355c:	00000056 0000003b 00000055 00000043     V...;...U...C...

0008356c <_global_impure_ptr>:
   8356c:	20070018                                ... 

00083570 <_init>:
   83570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83572:	bf00      	nop
   83574:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83576:	bc08      	pop	{r3}
   83578:	469e      	mov	lr, r3
   8357a:	4770      	bx	lr

0008357c <__init_array_start>:
   8357c:	000833cd 	.word	0x000833cd

00083580 <__frame_dummy_init_array_entry>:
   83580:	00080119                                ....

00083584 <_fini>:
   83584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83586:	bf00      	nop
   83588:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8358a:	bc08      	pop	{r3}
   8358c:	469e      	mov	lr, r3
   8358e:	4770      	bx	lr

00083590 <__fini_array_start>:
   83590:	000800f5 	.word	0x000800f5
